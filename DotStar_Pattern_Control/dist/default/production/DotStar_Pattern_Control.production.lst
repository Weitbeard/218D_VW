

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Oct 31 17:31:09 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK2,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           	psect	idataCOMRAM
    77  0017E6                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _MaxBrightness
    81  0017E6  1F                 	db	31
    82                           
    83                           	psect	idataBANK0
    84  0017DA                     __pidataBANK0:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _PatternConfigs
    88  0017DA  00                 	db	0
    89  0017DB  FF                 	db	255
    90  0017DC  1F                 	db	31
    91  0017DD  00                 	db	0
    92  0017DE  F4                 	db	244
    93                           
    94                           	psect	idataBANK2
    95  0015A6                     __pidataBANK2:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _GenColors
    99  0015A6  0000               	dw	0
   100  0015A8  00FF               	dw	255
   101  0015AA  A500               	dw	42240
   102  0015AC  00FF               	dw	255
   103  0015AE  FF00               	dw	65280
   104  0015B0  00FF               	dw	255
   105  0015B2  8000               	dw	32768
   106  0015B4  0080               	dw	128
   107  0015B6  FF00               	dw	65280
   108  0015B8  0000               	dw	0
   109  0015BA  8000               	dw	32768
   110  0015BC  0000               	dw	0
   111  0015BE  FFFF               	dw	65535
   112  0015C0  0000               	dw	0
   113  0015C2  8080               	dw	32896
   114  0015C4  0000               	dw	0
   115  0015C6  00FF               	dw	255
   116  0015C8  0000               	dw	0
   117  0015CA  0080               	dw	128
   118  0015CC  0000               	dw	0
   119  0015CE  00FF               	dw	255
   120  0015D0  00FF               	dw	255
   121  0015D2  0080               	dw	128
   122  0015D4  0080               	dw	128
   123  0015D6  0000               	dw	0
   124  0015D8  0080               	dw	128
   125                           
   126                           	psect	smallconst
   127  000300                     __psmallconst:
   128                           	opt stack 0
   129  000300  00                 	db	0
   130  000301                     _BitNum2SetMask:
   131                           	opt stack 0
   132  000301  0001               	dw	1
   133  000303  0002               	dw	2
   134  000305  0004               	dw	4
   135  000307  0008               	dw	8
   136  000309  0010               	dw	16
   137  00030B  0020               	dw	32
   138  00030D  0040               	dw	64
   139  00030F  0080               	dw	128
   140  000311  0100               	dw	256
   141  000313  0200               	dw	512
   142  000315  0400               	dw	1024
   143  000317  0800               	dw	2048
   144  000319  1000               	dw	4096
   145  00031B  2000               	dw	8192
   146  00031D  4000               	dw	16384
   147  00031F  8000               	dw	32768
   148  000321                     __end_of_BitNum2SetMask:
   149                           	opt stack 0
   150  000321                     _Timer2PostFunc:
   151                           	opt stack 0
   152  000321  5C                 	db	low _PostPatternControlService
   153  000322  17                 	db	high _PostPatternControlService
   154  000323  0E                 	db	low _PostSPI32ControlService
   155  000324  17                 	db	high _PostSPI32ControlService
   156  000325  00                 	db	0
   157  000326  00                 	db	0
   158  000327  00                 	db	0
   159  000328  00                 	db	0
   160  000329  00                 	db	0
   161  00032A  00                 	db	0
   162  00032B  00                 	db	0
   163  00032C  00                 	db	0
   164  00032D  00                 	db	0
   165  00032E  00                 	db	0
   166  00032F  00                 	db	0
   167  000330  00                 	db	0
   168  000331  00                 	db	0
   169  000332  00                 	db	0
   170  000333  00                 	db	0
   171  000334  00                 	db	0
   172  000335  00                 	db	0
   173  000336  00                 	db	0
   174  000337  00                 	db	0
   175  000338  00                 	db	0
   176  000339  00                 	db	0
   177  00033A  00                 	db	0
   178  00033B  00                 	db	0
   179  00033C  00                 	db	0
   180  00033D  00                 	db	0
   181  00033E  00                 	db	0
   182  00033F  00                 	db	0
   183  000340  00                 	db	0
   184  000341                     __end_of_Timer2PostFunc:
   185                           	opt stack 0
   186  000341                     _Nybble2MSBitNum:
   187                           	opt stack 0
   188  000341  00                 	db	0
   189  000342  01                 	db	1
   190  000343  01                 	db	1
   191  000344  02                 	db	2
   192  000345  02                 	db	2
   193  000346  02                 	db	2
   194  000347  02                 	db	2
   195  000348  03                 	db	3
   196  000349  03                 	db	3
   197  00034A  03                 	db	3
   198  00034B  03                 	db	3
   199  00034C  03                 	db	3
   200  00034D  03                 	db	3
   201  00034E  03                 	db	3
   202  00034F  03                 	db	3
   203  000350                     __end_of_Nybble2MSBitNum:
   204                           	opt stack 0
   205  000350                     _ServDescList:
   206                           	opt stack 0
   207  000350  40                 	db	low _InitPatternControlService
   208  000351  13                 	db	high _InitPatternControlService
   209  000352  D6                 	db	low _RunPatternControlService
   210  000353  0B                 	db	high _RunPatternControlService
   211  000354  36                 	db	low _InitSPI32ControlService
   212  000355  15                 	db	high _InitSPI32ControlService
   213  000356  48                 	db	low _RunSPI32ControlService
   214  000357  07                 	db	high _RunSPI32ControlService
   215  000358                     __end_of_ServDescList:
   216                           	opt stack 0
   217  000358                     _EventQueues:
   218                           	opt stack 0
   219  000358  A0                 	db	low _Queue0
   220  000359  00                 	db	high _Queue0
   221  00035A  04                 	db	4
   222  00035B  AC                 	db	low _Queue1
   223  00035C  00                 	db	high _Queue1
   224  00035D  04                 	db	4
   225  00035E                     __end_of_EventQueues:
   226                           	opt stack 0
   227  00035E                     _ES_EventList:
   228                           	opt stack 0
   229  00035E  E0                 	db	low _Check4Keystroke
   230  00035F  17                 	db	high _Check4Keystroke
   231  000360                     __end_of_ES_EventList:
   232                           	opt stack 0
   233  000360                     _DistList00:
   234                           	opt stack 0
   235  000360  5C                 	db	low _PostPatternControlService
   236  000361  17                 	db	high _PostPatternControlService
   237  000362  0E                 	db	low _PostSPI32ControlService
   238  000363  17                 	db	high _PostSPI32ControlService
   239  000364                     __end_of_DistList00:
   240                           	opt stack 0
   241  0000                     _ADCON1	set	4033
   242  0000                     _CCP1CON	set	4029
   243  0000                     _CCPR1H	set	4031
   244  0000                     _CCPR1L	set	4030
   245  0000                     _INTCON	set	4082
   246  0000                     _LATC	set	3979
   247  0000                     _PIE1	set	3997
   248  0000                     _PORTC	set	3970
   249  0000                     _SSPADD	set	4040
   250  0000                     _SSPBUF	set	4041
   251  0000                     _SSPCON1	set	4038
   252  0000                     _SSPSTAT	set	4039
   253  0000                     _T1CON	set	4045
   254  0000                     _TRISC	set	3988
   255  0000                     _CCP1IF	set	31986
   256  0000                     _GIE	set	32663
   257  0000                     _IRCF0	set	32412
   258  0000                     _IRCF1	set	32413
   259  0000                     _IRCF2	set	32414
   260  0000                     _SSPIE	set	31979
   261  0000                     _SSPIF	set	31987
   262  000364                     STR_1:
   263  000364  46                 	db	70	;'F'
   264  000365  61                 	db	97	;'a'
   265  000366  69                 	db	105	;'i'
   266  000367  6C                 	db	108	;'l'
   267  000368  65                 	db	101	;'e'
   268  000369  64                 	db	100	;'d'
   269  00036A  20                 	db	32
   270  00036B  6F                 	db	111	;'o'
   271  00036C  6E                 	db	110	;'n'
   272  00036D  20                 	db	32
   273  00036E  61                 	db	97	;'a'
   274  00036F  74                 	db	116	;'t'
   275  000370  74                 	db	116	;'t'
   276  000371  65                 	db	101	;'e'
   277  000372  6D                 	db	109	;'m'
   278  000373  70                 	db	112	;'p'
   279  000374  74                 	db	116	;'t'
   280  000375  20                 	db	32
   281  000376  74                 	db	116	;'t'
   282  000377  6F                 	db	111	;'o'
   283  000378  20                 	db	32
   284  000379  50                 	db	80	;'P'
   285  00037A  6F                 	db	111	;'o'
   286  00037B  73                 	db	115	;'s'
   287  00037C  74                 	db	116	;'t'
   288  00037D  0A                 	db	10
   289  00037E  00                 	db	0
   290  00037F                     STR_2:
   291  00037F  46                 	db	70	;'F'
   292  000380  61                 	db	97	;'a'
   293  000381  69                 	db	105	;'i'
   294  000382  6C                 	db	108	;'l'
   295  000383  65                 	db	101	;'e'
   296  000384  64                 	db	100	;'d'
   297  000385  20                 	db	32
   298  000386  6F                 	db	111	;'o'
   299  000387  6E                 	db	110	;'n'
   300  000388  20                 	db	32
   301  000389  4E                 	db	78	;'N'
   302  00038A  55                 	db	85	;'U'
   303  00038B  4C                 	db	76	;'L'
   304  00038C  4C                 	db	76	;'L'
   305  00038D  20                 	db	32
   306  00038E  70                 	db	112	;'p'
   307  00038F  6F                 	db	111	;'o'
   308  000390  69                 	db	105	;'i'
   309  000391  6E                 	db	110	;'n'
   310  000392  74                 	db	116	;'t'
   311  000393  65                 	db	101	;'e'
   312  000394  72                 	db	114	;'r'
   313  000395  0A                 	db	10
   314  000396  00                 	db	0
   315  000397                     STR_3:
   316  000397  46                 	db	70	;'F'
   317  000398  61                 	db	97	;'a'
   318  000399  69                 	db	105	;'i'
   319  00039A  6C                 	db	108	;'l'
   320  00039B  65                 	db	101	;'e'
   321  00039C  64                 	db	100	;'d'
   322  00039D  20                 	db	32
   323  00039E  49                 	db	73	;'I'
   324  00039F  6E                 	db	110	;'n'
   325  0003A0  69                 	db	105	;'i'
   326  0003A1  74                 	db	116	;'t'
   327  0003A2  69                 	db	105	;'i'
   328  0003A3  61                 	db	97	;'a'
   329  0003A4  6C                 	db	108	;'l'
   330  0003A5  69                 	db	105	;'i'
   331  0003A6  7A                 	db	122	;'z'
   332  0003A7  61                 	db	97	;'a'
   333  0003A8  74                 	db	116	;'t'
   334  0003A9  69                 	db	105	;'i'
   335  0003AA  6F                 	db	111	;'o'
   336  0003AB  6E                 	db	110	;'n'
   337  0003AC  0A                 	db	10
   338  0003AD  00                 	db	0
   339  0003AE                     STR_4:
   340  0003AE  4F                 	db	79	;'O'
   341  0003AF  74                 	db	116	;'t'
   342  0003B0  68                 	db	104	;'h'
   343  0003B1  65                 	db	101	;'e'
   344  0003B2  72                 	db	114	;'r'
   345  0003B3  20                 	db	32
   346  0003B4  46                 	db	70	;'F'
   347  0003B5  61                 	db	97	;'a'
   348  0003B6  69                 	db	105	;'i'
   349  0003B7  6C                 	db	108	;'l'
   350  0003B8  75                 	db	117	;'u'
   351  0003B9  72                 	db	114	;'r'
   352  0003BA  65                 	db	101	;'e'
   353  0003BB  0A                 	db	10
   354  0003BC  00                 	db	0
   355                           
   356                           ; #config settings
   357  0003BD  00                 	db	0	; dummy byte at the end
   358  0000                     
   359                           	psect	cinit
   360  000FD4                     __pcinit:
   361                           	opt stack 0
   362  000FD4                     start_initialization:
   363                           	opt stack 0
   364  000FD4                     __initialization:
   365                           	opt stack 0
   366                           
   367                           ; Initialize objects allocated to BANK2 (52 bytes)
   368                           ; load TBLPTR registers with __pidataBANK2
   369  000FD4  0EA6               	movlw	low __pidataBANK2
   370  000FD6  6EF6               	movwf	tblptrl,c
   371  000FD8  0E15               	movlw	high __pidataBANK2
   372  000FDA  6EF7               	movwf	tblptrh,c
   373  000FDC  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   374  000FDE  6EF8               	movwf	tblptru,c
   375  000FE0  EE02  F078         	lfsr	0,__pdataBANK2
   376  000FE4  EE10 F034          	lfsr	1,52
   377  000FE8                     copy_data0:
   378  000FE8  0009               	tblrd		*+
   379  000FEA  CFF5 FFEE          	movff	tablat,postinc0
   380  000FEE  50E5               	movf	postdec1,w,c
   381  000FF0  50E1               	movf	fsr1l,w,c
   382  000FF2  E1FA               	bnz	copy_data0
   383                           
   384                           ; Initialize objects allocated to BANK0 (5 bytes)
   385                           ; load TBLPTR registers with __pidataBANK0
   386  000FF4  0EDA               	movlw	low __pidataBANK0
   387  000FF6  6EF6               	movwf	tblptrl,c
   388  000FF8  0E17               	movlw	high __pidataBANK0
   389  000FFA  6EF7               	movwf	tblptrh,c
   390  000FFC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   391  000FFE  6EF8               	movwf	tblptru,c
   392  001000  EE00  F0F2         	lfsr	0,__pdataBANK0
   393  001004  EE10 F005          	lfsr	1,5
   394  001008                     copy_data1:
   395  001008  0009               	tblrd		*+
   396  00100A  CFF5 FFEE          	movff	tablat,postinc0
   397  00100E  50E5               	movf	postdec1,w,c
   398  001010  50E1               	movf	fsr1l,w,c
   399  001012  E1FA               	bnz	copy_data1
   400                           
   401                           ; Initialize objects allocated to COMRAM (1 bytes)
   402                           ; load TBLPTR registers with __pidataCOMRAM
   403  001014  0EE6               	movlw	low __pidataCOMRAM
   404  001016  6EF6               	movwf	tblptrl,c
   405  001018  0E17               	movlw	high __pidataCOMRAM
   406  00101A  6EF7               	movwf	tblptrh,c
   407  00101C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   408  00101E  6EF8               	movwf	tblptru,c
   409  001020  0009               	tblrd		*+	;fetch initializer
   410  001022  CFF5 F03D          	movff	tablat,__pdataCOMRAM
   411                           
   412                           ; Clear objects allocated to BANK2 (120 bytes)
   413  001026  EE02  F000         	lfsr	0,__pbssBANK2
   414  00102A  0E78               	movlw	120
   415  00102C                     clear_0:
   416  00102C  6AEE               	clrf	postinc0,c
   417  00102E  06E8               	decf	wreg,f,c
   418  001030  E1FD               	bnz	clear_0
   419                           
   420                           ; Clear objects allocated to BANK1 (256 bytes)
   421  001032  EE01  F000         	lfsr	0,__pbssBANK1
   422  001036  EE11 F000          	lfsr	1,256
   423  00103A                     clear_1:
   424  00103A  6AEE               	clrf	postinc0,c
   425  00103C  50E5               	movf	postdec1,w,c
   426  00103E  50E1               	movf	fsr1l,w,c
   427  001040  E1FC               	bnz	clear_1
   428  001042  50E2               	movf	fsr1h,w,c
   429  001044  E1FA               	bnz	clear_1
   430                           
   431                           ; Clear objects allocated to BANK0 (91 bytes)
   432  001046  EE00  F060         	lfsr	0,__pbssBANK0
   433  00104A  0E5B               	movlw	91
   434  00104C                     clear_2:
   435  00104C  6AEE               	clrf	postinc0,c
   436  00104E  06E8               	decf	wreg,f,c
   437  001050  E1FD               	bnz	clear_2
   438                           
   439                           ; Clear objects allocated to COMRAM (9 bytes)
   440  001052  EE00  F034         	lfsr	0,__pbssCOMRAM
   441  001056  0E09               	movlw	9
   442  001058                     clear_3:
   443  001058  6AEE               	clrf	postinc0,c
   444  00105A  06E8               	decf	wreg,f,c
   445  00105C  E1FD               	bnz	clear_3
   446  00105E                     end_of_initialization:
   447                           	opt stack 0
   448  00105E                     __end_of__initialization:
   449                           	opt stack 0
   450  00105E  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   451  001060  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   452  001062  0E00               	movlw	low (__Lmediumconst shr (0+16))
   453  001064  6EF8               	movwf	tblptru,c
   454  001066  0100               	movlb	0
   455  001068  EF36  F008         	goto	_main	;jump to C main() function
   456                           tblptru	equ	0xFF8
   457                           tblptrh	equ	0xFF7
   458                           tblptrl	equ	0xFF6
   459                           tablat	equ	0xFF5
   460                           postinc0	equ	0xFEE
   461                           wreg	equ	0xFE8
   462                           postdec1	equ	0xFE5
   463                           fsr1h	equ	0xFE2
   464                           fsr1l	equ	0xFE1
   465                           
   466                           	psect	bssCOMRAM
   467  000034                     __pbssCOMRAM:
   468                           	opt stack 0
   469  000034                     ISR@LastTime:
   470                           	opt stack 0
   471  000034                     	ds	2
   472  000036                     ISR@NextTime:
   473                           	opt stack 0
   474  000036                     	ds	2
   475  000038                     _SysTickCounter:
   476                           	opt stack 0
   477  000038                     	ds	2
   478  00003A                     __PRIMASK_temp:
   479                           	opt stack 0
   480  00003A                     	ds	2
   481  00003C                     	ds	1
   482                           tblptru	equ	0xFF8
   483                           tblptrh	equ	0xFF7
   484                           tblptrl	equ	0xFF6
   485                           tablat	equ	0xFF5
   486                           postinc0	equ	0xFEE
   487                           wreg	equ	0xFE8
   488                           postdec1	equ	0xFE5
   489                           fsr1h	equ	0xFE2
   490                           fsr1l	equ	0xFE1
   491                           
   492                           	psect	dataCOMRAM
   493  00003D                     __pdataCOMRAM:
   494                           	opt stack 0
   495  00003D                     	ds	1
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1h	equ	0xFE2
   504                           fsr1l	equ	0xFE1
   505                           
   506                           	psect	bssBANK0
   507  000060                     __pbssBANK0:
   508                           	opt stack 0
   509  000060                     _TMR_TimerArray:
   510                           	opt stack 0
   511  000060                     	ds	32
   512  000080                     _CurrentFrame:
   513                           	opt stack 0
   514  000080                     	ds	4
   515  000084                     _TestColor:
   516                           	opt stack 0
   517  000084                     	ds	4
   518  000088                     ES_Timer_Tick_Resp@NewEvent:
   519                           	opt stack 0
   520  000088                     	ds	3
   521  00008B                     ES_Timer_Tick_Resp@NeedsProcessing:
   522                           	opt stack 0
   523  00008B                     	ds	2
   524  00008D                     Pattern_RGBPatterns@PatternConfigs:
   525                           	opt stack 0
   526  00008D                     	ds	2
   527  00008F                     _FramePointer:
   528                           	opt stack 0
   529  00008F                     	ds	2
   530  000091                     _Ready:
   531                           	opt stack 0
   532  000091                     	ds	2
   533  000093                     _TMR_ActiveFlags:
   534                           	opt stack 0
   535  000093                     	ds	2
   536  000095                     ES_Timer_Tick_Resp@NextTimer2Process:
   537                           	opt stack 0
   538  000095                     	ds	1
   539  000096                     Pattern_RGBPatterns@Length:
   540                           	opt stack 0
   541  000096                     	ds	1
   542  000097                     SPI32_ControlService@CurrentState:
   543                           	opt stack 0
   544  000097                     	ds	1
   545  000098                     SPI32_ControlService@MyPriority:
   546                           	opt stack 0
   547  000098                     	ds	1
   548  000099                     _CurrentState:
   549                           	opt stack 0
   550  000099                     	ds	1
   551  00009A                     _FrameIndex:
   552                           	opt stack 0
   553  00009A                     	ds	1
   554  00009B                     _Length:
   555                           	opt stack 0
   556  00009B                     	ds	1
   557  00009C                     _MyPriority:
   558                           	opt stack 0
   559  00009C                     	ds	1
   560  00009D                     _NumFrames:
   561                           	opt stack 0
   562  00009D                     	ds	1
   563  00009E                     _PatternStepCounter:
   564                           	opt stack 0
   565  00009E                     	ds	1
   566  00009F                     _TickCount:
   567                           	opt stack 0
   568  00009F                     	ds	1
   569  0000A0                     _Queue0:
   570                           	opt stack 0
   571  0000A0                     	ds	12
   572  0000AC                     _Queue1:
   573                           	opt stack 0
   574  0000AC                     	ds	12
   575  0000B8                     ES_Run@ThisEvent:
   576                           	opt stack 0
   577  0000B8                     	ds	3
   578                           tblptru	equ	0xFF8
   579                           tblptrh	equ	0xFF7
   580                           tblptrl	equ	0xFF6
   581                           tablat	equ	0xFF5
   582                           postinc0	equ	0xFEE
   583                           wreg	equ	0xFE8
   584                           postdec1	equ	0xFE5
   585                           fsr1h	equ	0xFE2
   586                           fsr1l	equ	0xFE1
   587                           
   588                           	psect	dataBANK0
   589  0000F2                     __pdataBANK0:
   590                           	opt stack 0
   591  0000F2                     _PatternConfigs:
   592                           	opt stack 0
   593  0000F2                     	ds	5
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           postinc0	equ	0xFEE
   599                           wreg	equ	0xFE8
   600                           postdec1	equ	0xFE5
   601                           fsr1h	equ	0xFE2
   602                           fsr1l	equ	0xFE1
   603                           
   604                           	psect	bssBANK1
   605  000100                     __pbssBANK1:
   606                           	opt stack 0
   607  000100                     _OffFrames:
   608                           	opt stack 0
   609  000100                     	ds	128
   610  000180                     _PixelFrames:
   611                           	opt stack 0
   612  000180                     	ds	128
   613                           tblptru	equ	0xFF8
   614                           tblptrh	equ	0xFF7
   615                           tblptrl	equ	0xFF6
   616                           tablat	equ	0xFF5
   617                           postinc0	equ	0xFEE
   618                           wreg	equ	0xFE8
   619                           postdec1	equ	0xFE5
   620                           fsr1h	equ	0xFE2
   621                           fsr1l	equ	0xFE1
   622                           
   623                           	psect	bssBANK2
   624  000200                     __pbssBANK2:
   625                           	opt stack 0
   626  000200                     _PixelPattern:
   627                           	opt stack 0
   628  000200                     	ds	120
   629                           tblptru	equ	0xFF8
   630                           tblptrh	equ	0xFF7
   631                           tblptrl	equ	0xFF6
   632                           tablat	equ	0xFF5
   633                           postinc0	equ	0xFEE
   634                           wreg	equ	0xFE8
   635                           postdec1	equ	0xFE5
   636                           fsr1h	equ	0xFE2
   637                           fsr1l	equ	0xFE1
   638                           
   639                           	psect	dataBANK2
   640  000278                     __pdataBANK2:
   641                           	opt stack 0
   642  000278                     	ds	52
   643                           tblptru	equ	0xFF8
   644                           tblptrh	equ	0xFF7
   645                           tblptrl	equ	0xFF6
   646                           tablat	equ	0xFF5
   647                           postinc0	equ	0xFEE
   648                           wreg	equ	0xFE8
   649                           postdec1	equ	0xFE5
   650                           fsr1h	equ	0xFE2
   651                           fsr1l	equ	0xFE1
   652                           
   653                           	psect	cstackBANK0
   654  0000BB                     __pcstackBANK0:
   655                           	opt stack 0
   656  0000BB                     ??_DotStar_Init:
   657  0000BB                     ??_ES_Timer_StopTimer:
   658  0000BB                     ?_printf:
   659                           	opt stack 0
   660  0000BB                     ?___awmod:
   661                           	opt stack 0
   662  0000BB                     ?_GetNextFrame:
   663                           	opt stack 0
   664  0000BB                     ?___lmul:
   665                           	opt stack 0
   666  0000BB                     ?___llmod:
   667                           	opt stack 0
   668  0000BB                     ES_CheckUserEvents@i:
   669                           	opt stack 0
   670  0000BB                     SPI32_SendByte@newByte:
   671                           	opt stack 0
   672  0000BB                     ___lbmod@divisor:
   673                           	opt stack 0
   674  0000BB                     ES_GetMSBitSet@Val2Check:
   675                           	opt stack 0
   676  0000BB                     __HW_Timer_Init@Rate:
   677                           	opt stack 0
   678  0000BB                     ES_InitQueue@pBlock:
   679                           	opt stack 0
   680  0000BB                     ES_Timer_InitTimer@NewTime:
   681                           	opt stack 0
   682  0000BB                     SetupPattern@configs:
   683                           	opt stack 0
   684  0000BB                     printf@f:
   685                           	opt stack 0
   686  0000BB                     ___awmod@dividend:
   687                           	opt stack 0
   688  0000BB                     memcpy@d1:
   689                           	opt stack 0
   690  0000BB                     ___lmul@multiplier:
   691                           	opt stack 0
   692  0000BB                     ___llmod@dividend:
   693                           	opt stack 0
   694                           
   695                           ; 4 bytes @ 0x0
   696  0000BB                     	ds	1
   697  0000BC                     ___lbmod@dividend:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x1
   701  0000BC                     	ds	1
   702  0000BD                     ??_ES_GetMSBitSet:
   703  0000BD                     ??_ES_Timer_InitTimer:
   704  0000BD                     ES_InitQueue@BlockSize:
   705                           	opt stack 0
   706  0000BD                     DotStar_Init@numPixels:
   707                           	opt stack 0
   708  0000BD                     SetupPattern@numPixels:
   709                           	opt stack 0
   710  0000BD                     ___lbmod@counter:
   711                           	opt stack 0
   712  0000BD                     ES_Timer_Init@Rate:
   713                           	opt stack 0
   714  0000BD                     printf@ap:
   715                           	opt stack 0
   716  0000BD                     ___awmod@divisor:
   717                           	opt stack 0
   718  0000BD                     memcpy@s1:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x2
   722  0000BD                     	ds	1
   723  0000BE                     DotStar_Init@i:
   724                           	opt stack 0
   725  0000BE                     ___lbmod@rem:
   726                           	opt stack 0
   727  0000BE                     ES_InitQueue@pThisQueue:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x3
   731  0000BE                     	ds	1
   732  0000BF                     ES_Timer_StopTimer@Num:
   733                           	opt stack 0
   734  0000BF                     ES_Timer_InitTimer@Num:
   735                           	opt stack 0
   736  0000BF                     printf@c:
   737                           	opt stack 0
   738  0000BF                     ___awmod@counter:
   739                           	opt stack 0
   740  0000BF                     memcpy@n:
   741                           	opt stack 0
   742  0000BF                     ___lmul@multiplicand:
   743                           	opt stack 0
   744  0000BF                     ___llmod@divisor:
   745                           	opt stack 0
   746                           
   747                           ; 4 bytes @ 0x4
   748  0000BF                     	ds	1
   749  0000C0                     ___awmod@sign:
   750                           	opt stack 0
   751                           
   752                           ; 1 bytes @ 0x5
   753  0000C0                     	ds	1
   754  0000C1                     ?___wmul:
   755                           	opt stack 0
   756  0000C1                     ___wmul@multiplier:
   757                           	opt stack 0
   758  0000C1                     memcpy@d:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x6
   762  0000C1                     	ds	1
   763  0000C2                     ES_GetMSBitSet@ReturnVal:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x7
   767  0000C2                     	ds	1
   768  0000C3                     ES_GetMSBitSet@Nybble2Test:
   769                           	opt stack 0
   770  0000C3                     ___llmod@counter:
   771                           	opt stack 0
   772  0000C3                     ___wmul@multiplicand:
   773                           	opt stack 0
   774  0000C3                     memcpy@s:
   775                           	opt stack 0
   776  0000C3                     ___lmul@product:
   777                           	opt stack 0
   778                           
   779                           ; 4 bytes @ 0x8
   780  0000C3                     	ds	1
   781  0000C4                     ES_GetMSBitSet@LoopCntr:
   782                           	opt stack 0
   783                           
   784                           ; 1 bytes @ 0x9
   785  0000C4                     	ds	1
   786  0000C5                     ___wmul@product:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0xA
   790  0000C5                     	ds	2
   791  0000C7                     ?_UpdatePattern:
   792                           	opt stack 0
   793  0000C7                     ES_EnQueueFIFO@pBlock:
   794                           	opt stack 0
   795  0000C7                     ES_DeQueue@pBlock:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0xC
   799  0000C7                     	ds	2
   800  0000C9                     ??_UpdatePattern:
   801  0000C9                     ES_DeQueue@pReturnEvent:
   802                           	opt stack 0
   803  0000C9                     ES_EnQueueFIFO@Event2Add:
   804                           	opt stack 0
   805                           
   806                           ; 3 bytes @ 0xE
   807  0000C9                     	ds	2
   808  0000CB                     ??_ES_DeQueue:
   809                           
   810                           ; 1 bytes @ 0x10
   811  0000CB                     	ds	1
   812  0000CC                     ??_ES_EnQueueFIFO:
   813                           
   814                           ; 1 bytes @ 0x11
   815  0000CC                     	ds	1
   816  0000CD                     ES_DeQueue@SaveCrit:
   817                           	opt stack 0
   818  0000CD                     UpdatePattern@brightness:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x12
   822  0000CD                     	ds	1
   823  0000CE                     ES_DeQueue@NumLeft:
   824                           	opt stack 0
   825  0000CE                     UpdatePattern@patternID:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x13
   829  0000CE                     	ds	1
   830  0000CF                     ES_EnQueueFIFO@SaveCrit:
   831                           	opt stack 0
   832  0000CF                     UpdatePattern@i:
   833                           	opt stack 0
   834  0000CF                     ES_DeQueue@pThisQueue:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x14
   838  0000CF                     	ds	1
   839  0000D0                     ES_EnQueueFIFO@pThisQueue:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x15
   843  0000D0                     	ds	2
   844  0000D2                     ES_PostToService@TheEvent:
   845                           	opt stack 0
   846                           
   847                           ; 3 bytes @ 0x17
   848  0000D2                     	ds	3
   849  0000D5                     ??_ES_PostToService:
   850                           
   851                           ; 1 bytes @ 0x1A
   852  0000D5                     	ds	2
   853  0000D7                     ES_PostToService@WhichService:
   854                           	opt stack 0
   855                           
   856                           ; 1 bytes @ 0x1C
   857  0000D7                     	ds	1
   858  0000D8                     InitPatternControlService@ThisEvent:
   859                           	opt stack 0
   860  0000D8                     PostPatternControlService@ThisEvent:
   861                           	opt stack 0
   862  0000D8                     InitSPI32ControlService@ThisEvent:
   863                           	opt stack 0
   864  0000D8                     PostSPI32ControlService@ThisEvent:
   865                           	opt stack 0
   866                           
   867                           ; 3 bytes @ 0x1D
   868  0000D8                     	ds	3
   869  0000DB                     ??_ES_Timer_Tick_Resp:
   870  0000DB                     InitPatternControlService@Priority:
   871                           	opt stack 0
   872  0000DB                     InitSPI32ControlService@Priority:
   873                           	opt stack 0
   874  0000DB                     SPI32_TransmitFrames@framePointer:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x20
   878  0000DB                     	ds	1
   879  0000DC                     ES_Initialize@NewRate:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x21
   883  0000DC                     	ds	1
   884  0000DD                     SPI32_TransmitFrames@numFrames:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x22
   888  0000DD                     	ds	1
   889  0000DE                     ES_Initialize@i:
   890                           	opt stack 0
   891  0000DE                     SPI32_TransmitFrames@transmitEvent:
   892                           	opt stack 0
   893                           
   894                           ; 3 bytes @ 0x23
   895  0000DE                     	ds	1
   896  0000DF                     
   897                           ; 1 bytes @ 0x24
   898  0000DF                     	ds	2
   899  0000E1                     DotStar_Show@pixelPointer:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x26
   903  0000E1                     	ds	2
   904  0000E3                     ?_RunPatternControlService:
   905                           	opt stack 0
   906  0000E3                     ?_RunSPI32ControlService:
   907                           	opt stack 0
   908  0000E3                     RunPatternControlService@ThisEvent:
   909                           	opt stack 0
   910  0000E3                     RunSPI32ControlService@ThisEvent:
   911                           	opt stack 0
   912                           
   913                           ; 3 bytes @ 0x28
   914  0000E3                     	ds	3
   915  0000E6                     ??_RunSPI32ControlService:
   916  0000E6                     RunPatternControlService@ReturnEvent:
   917                           	opt stack 0
   918                           
   919                           ; 3 bytes @ 0x2B
   920  0000E6                     	ds	1
   921  0000E7                     RunSPI32ControlService@ReturnEvent:
   922                           	opt stack 0
   923                           
   924                           ; 3 bytes @ 0x2C
   925  0000E7                     	ds	2
   926  0000E9                     RunPatternControlService@testEvent:
   927                           	opt stack 0
   928                           
   929                           ; 3 bytes @ 0x2E
   930  0000E9                     	ds	3
   931  0000EC                     ??_ES_Run:
   932                           
   933                           ; 1 bytes @ 0x31
   934  0000EC                     	ds	4
   935  0000F0                     ES_Run@HighestPrior:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x35
   939  0000F0                     	ds	1
   940  0000F1                     main@ErrorType:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x36
   944  0000F1                     	ds	1
   945                           tblptru	equ	0xFF8
   946                           tblptrh	equ	0xFF7
   947                           tblptrl	equ	0xFF6
   948                           tablat	equ	0xFF5
   949                           postinc0	equ	0xFEE
   950                           wreg	equ	0xFE8
   951                           postdec1	equ	0xFE5
   952                           fsr1h	equ	0xFE2
   953                           fsr1l	equ	0xFE1
   954                           
   955                           	psect	cstackCOMRAM
   956  000001                     __pcstackCOMRAM:
   957                           	opt stack 0
   958  000001                     ?i2___awmod:
   959                           	opt stack 0
   960  000001                     i2___awmod@dividend:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x0
   964  000001                     	ds	2
   965  000003                     i2___awmod@divisor:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x2
   969  000003                     	ds	2
   970  000005                     i2___awmod@counter:
   971                           	opt stack 0
   972                           
   973                           ; 1 bytes @ 0x4
   974  000005                     	ds	1
   975  000006                     i2___awmod@sign:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x5
   979  000006                     	ds	1
   980  000007                     ?i2___wmul:
   981                           	opt stack 0
   982  000007                     i2___wmul@multiplier:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0x6
   986  000007                     	ds	2
   987  000009                     i2___wmul@multiplicand:
   988                           	opt stack 0
   989                           
   990                           ; 2 bytes @ 0x8
   991  000009                     	ds	2
   992  00000B                     i2___wmul@product:
   993                           	opt stack 0
   994                           
   995                           ; 2 bytes @ 0xA
   996  00000B                     	ds	2
   997  00000D                     i2ES_EnQueueFIFO@pBlock:
   998                           	opt stack 0
   999                           
  1000                           ; 2 bytes @ 0xC
  1001  00000D                     	ds	2
  1002  00000F                     i2ES_EnQueueFIFO@Event2Add:
  1003                           	opt stack 0
  1004                           
  1005                           ; 3 bytes @ 0xE
  1006  00000F                     	ds	3
  1007  000012                     ??i2_ES_EnQueueFIFO:
  1008                           
  1009                           ; 1 bytes @ 0x11
  1010  000012                     	ds	3
  1011  000015                     i2ES_EnQueueFIFO@SaveCrit:
  1012                           	opt stack 0
  1013                           
  1014                           ; 1 bytes @ 0x14
  1015  000015                     	ds	1
  1016  000016                     i2ES_EnQueueFIFO@pThisQueue:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0x15
  1020  000016                     	ds	2
  1021  000018                     i2ES_PostToService@TheEvent:
  1022                           	opt stack 0
  1023                           
  1024                           ; 3 bytes @ 0x17
  1025  000018                     	ds	3
  1026  00001B                     ??i2_ES_PostToService:
  1027                           
  1028                           ; 1 bytes @ 0x1A
  1029  00001B                     	ds	2
  1030  00001D                     i2ES_PostToService@WhichService:
  1031                           	opt stack 0
  1032                           
  1033                           ; 1 bytes @ 0x1C
  1034  00001D                     	ds	1
  1035  00001E                     i2PostSPI32ControlService@ThisEvent:
  1036                           	opt stack 0
  1037                           
  1038                           ; 3 bytes @ 0x1D
  1039  00001E                     	ds	3
  1040  000021                     SPI32_EOTResponse@EOTevent:
  1041                           	opt stack 0
  1042                           
  1043                           ; 3 bytes @ 0x20
  1044  000021                     	ds	3
  1045  000024                     ??_ISR:
  1046                           
  1047                           ; 1 bytes @ 0x23
  1048  000024                     	ds	16
  1049                           tblptru	equ	0xFF8
  1050                           tblptrh	equ	0xFF7
  1051                           tblptrl	equ	0xFF6
  1052                           tablat	equ	0xFF5
  1053                           postinc0	equ	0xFEE
  1054                           wreg	equ	0xFE8
  1055                           postdec1	equ	0xFE5
  1056                           fsr1h	equ	0xFE2
  1057                           fsr1l	equ	0xFE1
  1058                           
  1059 ;;
  1060 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1061 ;;
  1062 ;; *************** function _main *****************
  1063 ;; Defined at:
  1064 ;;		line 24 in file "main.c"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;		None
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;  ErrorType       1   54[BANK0 ] enum E15647
  1069 ;; Return value:  Size  Location     Type
  1070 ;;                  2  521[None  ] int 
  1071 ;; Registers used:
  1072 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1078 ;;      Params:         0       0       0       0
  1079 ;;      Locals:         0       1       0       0
  1080 ;;      Temps:          0       0       0       0
  1081 ;;      Totals:         0       1       0       0
  1082 ;;Total ram usage:        1 bytes
  1083 ;; Hardware stack levels required when called:   15
  1084 ;; This function calls:
  1085 ;;		_ES_Initialize
  1086 ;;		_ES_Run
  1087 ;;		_printf
  1088 ;; This function is called by:
  1089 ;;		Startup code after reset
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           	psect	text0
  1094  00106C                     __ptext0:
  1095                           	opt stack 0
  1096  00106C                     _main:
  1097                           	opt stack 16
  1098                           
  1099                           ;main.c: 27: IRCF0 = 1;
  1100                           
  1101                           ;incstack = 0
  1102  00106C  88D3               	bsf	4051,4,c	;volatile
  1103                           
  1104                           ;main.c: 28: IRCF1 = 1;
  1105  00106E  8AD3               	bsf	4051,5,c	;volatile
  1106                           
  1107                           ;main.c: 29: IRCF2 = 1;
  1108  001070  8CD3               	bsf	4051,6,c	;volatile
  1109                           
  1110                           ;main.c: 37: ES_Return_t ErrorType;
  1111                           ;main.c: 53: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
  1112  001072  0E9C               	movlw	156
  1113  001074  0100               	movlb	0	; () banked
  1114  001076  6FDD               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
  1115  001078  0E3F               	movlw	63
  1116  00107A  6FDC               	movwf	ES_Initialize@NewRate& (0+255),b
  1117  00107C  EC9C  F004         	call	_ES_Initialize	;wreg free
  1118  001080  0100               	movlb	0	; () banked
  1119  001082  6FF1               	movwf	main@ErrorType& (0+255),b
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;main.c: 54: if ( ErrorType == Success ) {
  1123  001084  0100               	movlb	0	; () banked
  1124  001086  51F1               	movf	main@ErrorType& (0+255),w,b
  1125  001088  0100               	movlb	0	; () banked
  1126  00108A  A4D8               	btfss	status,2,c
  1127  00108C  D029               	goto	l2820
  1128                           
  1129                           ; BSR set to: 0
  1130                           ;main.c: 56: ErrorType = ES_Run();
  1131  00108E  EC22  F004         	call	_ES_Run	;wreg free
  1132  001092  0100               	movlb	0	; () banked
  1133  001094  6FF1               	movwf	main@ErrorType& (0+255),b
  1134                           
  1135                           ; BSR set to: 0
  1136                           ;main.c: 58: }
  1137                           ;main.c: 60: switch (ErrorType){
  1138  001096  D024               	goto	l2820
  1139  001098                     l2810:
  1140                           
  1141                           ; BSR set to: 0
  1142                           ;main.c: 62: printf("Failed on attempt to Post\n");
  1143  001098  0E64               	movlw	low STR_1
  1144  00109A  0100               	movlb	0	; () banked
  1145  00109C  6FBB               	movwf	printf@f& (0+255),b
  1146  00109E  0E03               	movlw	high STR_1
  1147  0010A0  0100               	movlb	0	; () banked
  1148  0010A2  6FBC               	movwf	(printf@f+1)& (0+255),b
  1149  0010A4  ECED  F00A         	call	_printf	;wreg free
  1150                           
  1151                           ;main.c: 63: break;
  1152  0010A8  D027               	goto	l529
  1153  0010AA                     l2812:
  1154                           
  1155                           ;main.c: 65: printf("Failed on NULL pointer\n");
  1156  0010AA  0E7F               	movlw	low STR_2
  1157  0010AC  0100               	movlb	0	; () banked
  1158  0010AE  6FBB               	movwf	printf@f& (0+255),b
  1159  0010B0  0E03               	movlw	high STR_2
  1160  0010B2  0100               	movlb	0	; () banked
  1161  0010B4  6FBC               	movwf	(printf@f+1)& (0+255),b
  1162  0010B6  ECED  F00A         	call	_printf	;wreg free
  1163                           
  1164                           ;main.c: 66: break;
  1165  0010BA  D01E               	goto	l529
  1166  0010BC                     l2814:
  1167                           
  1168                           ;main.c: 68: printf("Failed Initialization\n");
  1169  0010BC  0E97               	movlw	low STR_3
  1170  0010BE  0100               	movlb	0	; () banked
  1171  0010C0  6FBB               	movwf	printf@f& (0+255),b
  1172  0010C2  0E03               	movlw	high STR_3
  1173  0010C4  0100               	movlb	0	; () banked
  1174  0010C6  6FBC               	movwf	(printf@f+1)& (0+255),b
  1175  0010C8  ECED  F00A         	call	_printf	;wreg free
  1176                           
  1177                           ;main.c: 69: break;
  1178  0010CC  D015               	goto	l529
  1179  0010CE                     l2816:
  1180                           
  1181                           ;main.c: 71: printf("Other Failure\n");
  1182  0010CE  0EAE               	movlw	low STR_4
  1183  0010D0  0100               	movlb	0	; () banked
  1184  0010D2  6FBB               	movwf	printf@f& (0+255),b
  1185  0010D4  0E03               	movlw	high STR_4
  1186  0010D6  0100               	movlb	0	; () banked
  1187  0010D8  6FBC               	movwf	(printf@f+1)& (0+255),b
  1188  0010DA  ECED  F00A         	call	_printf	;wreg free
  1189                           
  1190                           ;main.c: 73: }
  1191                           
  1192                           ;main.c: 72: break;
  1193  0010DE  D00C               	goto	l529
  1194  0010E0                     l2820:
  1195  0010E0  0100               	movlb	0	; () banked
  1196  0010E2  51F1               	movf	main@ErrorType& (0+255),w,b
  1197                           
  1198                           ; Switch size 1, requested type "space"
  1199                           ; Number of cases is 3, Range of values is 1 to 5
  1200                           ; switch strategies available:
  1201                           ; Name         Instructions Cycles
  1202                           ; simple_byte           10     6 (average)
  1203                           ;	Chosen strategy is simple_byte
  1204  0010E4  0A01               	xorlw	1	; case 1
  1205  0010E6  B4D8               	btfsc	status,2,c
  1206  0010E8  D7D7               	goto	l2810
  1207  0010EA  0A02               	xorlw	2	; case 3
  1208  0010EC  B4D8               	btfsc	status,2,c
  1209  0010EE  D7DD               	goto	l2812
  1210  0010F0  0A06               	xorlw	6	; case 5
  1211  0010F2  B4D8               	btfsc	status,2,c
  1212  0010F4  D7E3               	goto	l2814
  1213  0010F6  D7EB               	goto	l2816
  1214  0010F8                     l529:
  1215                           
  1216                           ;main.c: 75: ;
  1217  0010F8  D7FF               	goto	l529
  1218  0010FA                     __end_of_main:
  1219                           	opt stack 0
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           postinc0	equ	0xFEE
  1225                           wreg	equ	0xFE8
  1226                           postdec1	equ	0xFE5
  1227                           fsr1h	equ	0xFE2
  1228                           fsr1l	equ	0xFE1
  1229                           status	equ	0xFD8
  1230                           
  1231 ;; *************** function _printf *****************
  1232 ;; Defined at:
  1233 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1236 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;  tmpval          4    0        struct .
  1239 ;;  cp              3    0        PTR const unsigned char 
  1240 ;;  ap              2    2[BANK0 ] PTR void [1]
  1241 ;;		 -> ?_printf(2), 
  1242 ;;  len             2    0        unsigned int 
  1243 ;;  val             2    0        unsigned int 
  1244 ;;  c               1    4[BANK0 ] char 
  1245 ;;  flag            1    0        unsigned char 
  1246 ;;  prec            1    0        char 
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  2    0[BANK0 ] int 
  1249 ;; Registers used:
  1250 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1256 ;;      Params:         0       2       0       0
  1257 ;;      Locals:         0       3       0       0
  1258 ;;      Temps:          0       0       0       0
  1259 ;;      Totals:         0       5       0       0
  1260 ;;Total ram usage:        5 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:    7
  1263 ;; This function calls:
  1264 ;;		_putch
  1265 ;; This function is called by:
  1266 ;;		_main
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           	psect	text1
  1271  0015DA                     __ptext1:
  1272                           	opt stack 0
  1273  0015DA                     _printf:
  1274                           	opt stack 23
  1275                           
  1276                           ;doprnt.c: 466: va_list ap;
  1277                           ;doprnt.c: 499: signed char c;
  1278                           ;doprnt.c: 506: signed char prec;
  1279                           ;doprnt.c: 508: unsigned char flag;
  1280                           ;doprnt.c: 523: union {
  1281                           ;doprnt.c: 524: unsigned long vd;
  1282                           ;doprnt.c: 525: double integ;
  1283                           ;doprnt.c: 526: } tmpval;
  1284                           ;doprnt.c: 528: unsigned int val;
  1285                           ;doprnt.c: 529: unsigned len;
  1286                           ;doprnt.c: 530: const char * cp;
  1287                           ;doprnt.c: 533: *ap = __va_start();
  1288                           
  1289                           ;incstack = 0
  1290  0015DA  0EBD               	movlw	low (?_printf+2)
  1291  0015DC  0100               	movlb	0	; () banked
  1292  0015DE  6FBD               	movwf	printf@ap& (0+255),b
  1293  0015E0  0E00               	movlw	high (?_printf+2)
  1294  0015E2  0100               	movlb	0	; () banked
  1295  0015E4  6FBE               	movwf	(printf@ap+1)& (0+255),b
  1296                           
  1297                           ;doprnt.c: 536: while(c = *f++) {
  1298  0015E6  D004               	goto	l2656
  1299  0015E8                     l2654:
  1300                           
  1301                           ; BSR set to: 0
  1302                           ;doprnt.c: 540: {
  1303                           ;doprnt.c: 541: (putch(c) );
  1304  0015E8  0100               	movlb	0	; () banked
  1305  0015EA  51BF               	movf	printf@c& (0+255),w,b
  1306  0015EC  ECF2  F00B         	call	_putch
  1307  0015F0                     l2656:
  1308  0015F0  C0BB  FFF6         	movff	printf@f,tblptrl
  1309  0015F4  C0BC  FFF7         	movff	printf@f+1,tblptrh
  1310  0015F8  0100               	movlb	0	; () banked
  1311  0015FA  4BBB               	infsnz	printf@f& (0+255),f,b
  1312  0015FC  2BBC               	incf	(printf@f+1)& (0+255),f,b
  1313  0015FE                     	if	0	;tblptru may be non-zero
  1314  0015FE                     	endif
  1315  0015FE                     	if	0	;tblptru may be non-zero
  1316  0015FE                     	endif
  1317  0015FE  0008               	tblrd		*
  1318  001600  CFF5 F0BF          	movff	tablat,printf@c
  1319  001604  0100               	movlb	0	; () banked
  1320  001606  51BF               	movf	printf@c& (0+255),w,b
  1321  001608  B4D8               	btfsc	status,2,c
  1322  00160A  0012               	return	
  1323  00160C  D7ED               	goto	l2654
  1324  00160E                     __end_of_printf:
  1325                           	opt stack 0
  1326                           tblptru	equ	0xFF8
  1327                           tblptrh	equ	0xFF7
  1328                           tblptrl	equ	0xFF6
  1329                           tablat	equ	0xFF5
  1330                           postinc0	equ	0xFEE
  1331                           wreg	equ	0xFE8
  1332                           postdec1	equ	0xFE5
  1333                           fsr1h	equ	0xFE2
  1334                           fsr1l	equ	0xFE1
  1335                           status	equ	0xFD8
  1336                           
  1337 ;; *************** function _putch *****************
  1338 ;; Defined at:
  1339 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\putch.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;  c               1    wreg     unsigned char 
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;  c               1    0[COMRAM] unsigned char 
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  1    wreg      void 
  1346 ;; Registers used:
  1347 ;;		wreg
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1353 ;;      Params:         0       0       0       0
  1354 ;;      Locals:         0       0       0       0
  1355 ;;      Temps:          0       0       0       0
  1356 ;;      Totals:         0       0       0       0
  1357 ;;Total ram usage:        0 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; Hardware stack levels required when called:    6
  1360 ;; This function calls:
  1361 ;;		Nothing
  1362 ;; This function is called by:
  1363 ;;		_printf
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           	psect	text2
  1368  0017E4                     __ptext2:
  1369                           	opt stack 0
  1370  0017E4                     _putch:
  1371                           	opt stack 23
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;incstack = 0
  1375  0017E4  0012               	return		;funcret
  1376  0017E6                     __end_of_putch:
  1377                           	opt stack 0
  1378                           tblptru	equ	0xFF8
  1379                           tblptrh	equ	0xFF7
  1380                           tblptrl	equ	0xFF6
  1381                           tablat	equ	0xFF5
  1382                           postinc0	equ	0xFEE
  1383                           wreg	equ	0xFE8
  1384                           postdec1	equ	0xFE5
  1385                           fsr1h	equ	0xFE2
  1386                           fsr1l	equ	0xFE1
  1387                           status	equ	0xFD8
  1388                           
  1389 ;; *************** function _ES_Run *****************
  1390 ;; Defined at:
  1391 ;;		line 277 in file "ES_Framework.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;		None
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  HighestPrior    1   53[BANK0 ] unsigned char 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      enum E15495
  1398 ;; Registers used:
  1399 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1405 ;;      Params:         0       0       0       0
  1406 ;;      Locals:         0       1       0       0
  1407 ;;      Temps:          0       4       0       0
  1408 ;;      Totals:         0       5       0       0
  1409 ;;Total ram usage:        5 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; Hardware stack levels required when called:   14
  1412 ;; This function calls:
  1413 ;;		_ES_CheckUserEvents
  1414 ;;		_ES_DeQueue
  1415 ;;		_ES_GetMSBitSet
  1416 ;;		_RunPatternControlService
  1417 ;;		_RunSPI32ControlService
  1418 ;;		__HW_Process_Pending_Ints
  1419 ;; This function is called by:
  1420 ;;		_main
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           	psect	text3
  1425  000844                     __ptext3:
  1426                           	opt stack 0
  1427  000844                     _ES_Run:
  1428                           	opt stack 16
  1429                           
  1430                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1431                           
  1432                           ;incstack = 0
  1433                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1434                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1435                           ;ES_Framework.c: 282: while(1){
  1436  000844  D06B               	goto	l2638
  1437  000846                     l2626:
  1438                           
  1439                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1440  000846  C091  F0BB         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1441  00084A  C092  F0BC         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1442  00084E  ECFA  F006         	call	_ES_GetMSBitSet	;wreg free
  1443  000852  0100               	movlb	0	; () banked
  1444  000854  6FF0               	movwf	ES_Run@HighestPrior& (0+255),b
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1448  000856  0100               	movlb	0	; () banked
  1449  000858  51F0               	movf	ES_Run@HighestPrior& (0+255),w,b
  1450  00085A  0D03               	mullw	3
  1451  00085C  0E58               	movlw	low _EventQueues
  1452  00085E  24F3               	addwf	prodl,w,c
  1453  000860  6EF6               	movwf	tblptrl,c
  1454  000862  0E03               	movlw	high _EventQueues
  1455  000864  20F4               	addwfc	prodh,w,c
  1456  000866  6EF7               	movwf	tblptrh,c
  1457  000868                     	if	0	;There are less than 3 active tblptr bytes
  1458  000868                     	endif
  1459  000868  0009               	tblrd		*+
  1460  00086A  CFF5 F0C7          	movff	tablat,ES_DeQueue@pBlock
  1461  00086E  000A               	tblrd		*-
  1462  000870  CFF5 F0C8          	movff	tablat,ES_DeQueue@pBlock+1
  1463  000874  0EB8               	movlw	low ES_Run@ThisEvent
  1464  000876  0100               	movlb	0	; () banked
  1465  000878  6FC9               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1466  00087A  0E00               	movlw	high ES_Run@ThisEvent
  1467  00087C  0100               	movlb	0	; () banked
  1468  00087E  6FCA               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1469  000880  EC85  F002         	call	_ES_DeQueue	;wreg free
  1470  000884  0900               	iorlw	0
  1471  000886  A4D8               	btfss	status,2,c
  1472  000888  D01F               	goto	l2632
  1473                           
  1474                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1475  00088A  0100               	movlb	0	; () banked
  1476  00088C  51F0               	movf	ES_Run@HighestPrior& (0+255),w,b
  1477  00088E  0D02               	mullw	2
  1478  000890  0E01               	movlw	low _BitNum2SetMask
  1479  000892  24F3               	addwf	prodl,w,c
  1480  000894  6EF6               	movwf	tblptrl,c
  1481  000896  0E03               	movlw	high _BitNum2SetMask
  1482  000898  20F4               	addwfc	prodh,w,c
  1483  00089A  6EF7               	movwf	tblptrh,c
  1484  00089C                     	if	0	;There are less than 3 active tblptr bytes
  1485  00089C                     	endif
  1486  00089C  0009               	tblrd		*+
  1487  00089E  CFF5 F0EC          	movff	tablat,??_ES_Run
  1488  0008A2  0009               	tblrd		*+
  1489  0008A4  CFF5 F0ED          	movff	tablat,??_ES_Run+1
  1490  0008A8  0100               	movlb	0	; () banked
  1491  0008AA  1DEC               	comf	??_ES_Run& (0+255),w,b
  1492  0008AC  0100               	movlb	0	; () banked
  1493  0008AE  6FEE               	movwf	(??_ES_Run+2)& (0+255),b
  1494  0008B0  0100               	movlb	0	; () banked
  1495  0008B2  1DED               	comf	(??_ES_Run+1)& (0+255),w,b
  1496  0008B4  0100               	movlb	0	; () banked
  1497  0008B6  6FEF               	movwf	(??_ES_Run+3)& (0+255),b
  1498  0008B8  0100               	movlb	0	; () banked
  1499  0008BA  51EE               	movf	(??_ES_Run+2)& (0+255),w,b
  1500  0008BC  0100               	movlb	0	; () banked
  1501  0008BE  1791               	andwf	_Ready& (0+255),f,b
  1502  0008C0  0100               	movlb	0	; () banked
  1503  0008C2  51EF               	movf	(??_ES_Run+3)& (0+255),w,b
  1504  0008C4  0100               	movlb	0	; () banked
  1505  0008C6  1792               	andwf	(_Ready+1)& (0+255),f,b
  1506  0008C8                     l2632:
  1507                           
  1508                           ;ES_Framework.c: 291: }
  1509                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1510  0008C8  C0B8  F0E3         	movff	ES_Run@ThisEvent,RunSPI32ControlService@ThisEvent
  1511  0008CC  C0B9  F0E4         	movff	ES_Run@ThisEvent+1,RunSPI32ControlService@ThisEvent+1
  1512  0008D0  C0BA  F0E5         	movff	ES_Run@ThisEvent+2,RunSPI32ControlService@ThisEvent+2
  1513  0008D4  0100               	movlb	0	; () banked
  1514  0008D6  51F0               	movf	ES_Run@HighestPrior& (0+255),w,b
  1515  0008D8  0D04               	mullw	4
  1516  0008DA  0E02               	movlw	2
  1517  0008DC  26F3               	addwf	prodl,f,c
  1518  0008DE  0E00               	movlw	0
  1519  0008E0  22F4               	addwfc	prodh,f,c
  1520  0008E2  0E50               	movlw	low _ServDescList
  1521  0008E4  24F3               	addwf	prodl,w,c
  1522  0008E6  6EF6               	movwf	tblptrl,c
  1523  0008E8  0E03               	movlw	high _ServDescList
  1524  0008EA  20F4               	addwfc	prodh,w,c
  1525  0008EC  6EF7               	movwf	tblptrh,c
  1526  0008EE                     	if	0	;There are less than 3 active tblptr bytes
  1527  0008EE                     	endif
  1528  0008EE  D801               	call	u1738
  1529  0008F0  D00C               	goto	u1739
  1530  0008F2                     u1738:
  1531  0008F2  0005               	push	
  1532  0008F4  6EFA               	movwf	pclath,c
  1533  0008F6  0009               	tblrd		*+
  1534  0008F8  50F5               	movf	tablat,w,c
  1535  0008FA  6EFD               	movwf	tosl,c
  1536  0008FC  0009               	tblrd		*+
  1537  0008FE  50F5               	movf	tablat,w,c
  1538  000900  6EFE               	movwf	tosh,c
  1539  000902  50F8               	movf	tblptru,w,c
  1540  000904  6EFF               	movwf	tosu,c
  1541  000906  50FA               	movf	pclath,w,c
  1542  000908  0012               	return		;indir
  1543  00090A                     u1739:
  1544  00090A  0EE3               	movlw	low ?_RunSPI32ControlService
  1545  00090C  6ED9               	movwf	fsr2l,c
  1546  00090E  0E00               	movlw	high ?_RunSPI32ControlService
  1547  000910  6EDA               	movwf	fsr2h,c
  1548  000912  50DF               	movf	indf2,w,c
  1549  000914  B4D8               	btfsc	status,2,c
  1550  000916  D002               	goto	l2638
  1551                           
  1552                           ;ES_Framework.c: 293: return FailedRun;
  1553  000918  0E02               	movlw	2
  1554  00091A  0012               	return	
  1555  00091C                     l2638:
  1556  00091C  ECA3  F00B         	call	__HW_Process_Pending_Ints	;wreg free
  1557  000920  0900               	iorlw	0
  1558  000922  B4D8               	btfsc	status,2,c
  1559  000924  D006               	goto	l2642
  1560  000926  0100               	movlb	0	; () banked
  1561  000928  5191               	movf	_Ready& (0+255),w,b
  1562  00092A  0100               	movlb	0	; () banked
  1563  00092C  1192               	iorwf	(_Ready+1)& (0+255),w,b
  1564  00092E  A4D8               	btfss	status,2,c
  1565  000930  D78A               	goto	l2626
  1566  000932                     l2642:
  1567                           
  1568                           ;ES_Framework.c: 294: }
  1569                           ;ES_Framework.c: 295: }
  1570                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1571  000932  EC15  F00A         	call	_ES_CheckUserEvents	;wreg free
  1572  000936  D7F2               	goto	l2638
  1573  000938                     __end_of_ES_Run:
  1574                           	opt stack 0
  1575                           tosu	equ	0xFFF
  1576                           tosh	equ	0xFFE
  1577                           tosl	equ	0xFFD
  1578                           pclath	equ	0xFFA
  1579                           tblptru	equ	0xFF8
  1580                           tblptrh	equ	0xFF7
  1581                           tblptrl	equ	0xFF6
  1582                           tablat	equ	0xFF5
  1583                           prodh	equ	0xFF4
  1584                           prodl	equ	0xFF3
  1585                           postinc0	equ	0xFEE
  1586                           wreg	equ	0xFE8
  1587                           postdec1	equ	0xFE5
  1588                           fsr1h	equ	0xFE2
  1589                           fsr1l	equ	0xFE1
  1590                           indf2	equ	0xFDF
  1591                           fsr2h	equ	0xFDA
  1592                           fsr2l	equ	0xFD9
  1593                           status	equ	0xFD8
  1594                           
  1595 ;; *************** function __HW_Process_Pending_Ints *****************
  1596 ;; Defined at:
  1597 ;;		line 207 in file "ES_Port.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;		None
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;		None
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  1    wreg      unsigned char 
  1604 ;; Registers used:
  1605 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1611 ;;      Params:         0       0       0       0
  1612 ;;      Locals:         0       0       0       0
  1613 ;;      Temps:          0       0       0       0
  1614 ;;      Totals:         0       0       0       0
  1615 ;;Total ram usage:        0 bytes
  1616 ;; Hardware stack levels used:    1
  1617 ;; Hardware stack levels required when called:   11
  1618 ;; This function calls:
  1619 ;;		_ES_Timer_Tick_Resp
  1620 ;; This function is called by:
  1621 ;;		_ES_Run
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text4
  1626  001746                     __ptext4:
  1627                           	opt stack 0
  1628  001746                     __HW_Process_Pending_Ints:
  1629                           	opt stack 18
  1630                           
  1631                           ;ES_Port.c: 209: while (TickCount > 0)
  1632                           
  1633                           ;incstack = 0
  1634  001746  D004               	goto	l2448
  1635  001748                     l2444:
  1636                           
  1637                           ;ES_Port.c: 210: {
  1638                           ;ES_Port.c: 212: ES_Timer_Tick_Resp();
  1639  001748  EC19  F003         	call	_ES_Timer_Tick_Resp	;wreg free
  1640                           
  1641                           ;ES_Port.c: 213: TickCount--;
  1642  00174C  0100               	movlb	0	; () banked
  1643  00174E  079F               	decf	_TickCount& (0+255),f,b	;volatile
  1644  001750                     l2448:
  1645  001750  0100               	movlb	0	; () banked
  1646  001752  519F               	movf	_TickCount& (0+255),w,b	;volatile
  1647  001754  A4D8               	btfss	status,2,c
  1648  001756  D7F8               	goto	l2444
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;ES_Port.c: 214: }
  1652                           ;ES_Port.c: 216: return 1;
  1653                           
  1654                           ; BSR set to: 0
  1655  001758  0E01               	movlw	1
  1656  00175A  0012               	return	
  1657  00175C                     __end_of__HW_Process_Pending_Ints:
  1658                           	opt stack 0
  1659                           tosu	equ	0xFFF
  1660                           tosh	equ	0xFFE
  1661                           tosl	equ	0xFFD
  1662                           pclath	equ	0xFFA
  1663                           tblptru	equ	0xFF8
  1664                           tblptrh	equ	0xFF7
  1665                           tblptrl	equ	0xFF6
  1666                           tablat	equ	0xFF5
  1667                           prodh	equ	0xFF4
  1668                           prodl	equ	0xFF3
  1669                           postinc0	equ	0xFEE
  1670                           wreg	equ	0xFE8
  1671                           postdec1	equ	0xFE5
  1672                           fsr1h	equ	0xFE2
  1673                           fsr1l	equ	0xFE1
  1674                           indf2	equ	0xFDF
  1675                           fsr2h	equ	0xFDA
  1676                           fsr2l	equ	0xFD9
  1677                           status	equ	0xFD8
  1678                           
  1679 ;; *************** function _ES_Timer_Tick_Resp *****************
  1680 ;; Defined at:
  1681 ;;		line 284 in file "ES_Timers.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;		None
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;		None
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1695 ;;      Params:         0       0       0       0
  1696 ;;      Locals:         0       0       0       0
  1697 ;;      Temps:          0       4       0       0
  1698 ;;      Totals:         0       4       0       0
  1699 ;;Total ram usage:        4 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; Hardware stack levels required when called:   10
  1702 ;; This function calls:
  1703 ;;		Absolute function
  1704 ;;		_ES_GetMSBitSet
  1705 ;;		_PostPatternControlService
  1706 ;;		_PostSPI32ControlService
  1707 ;; This function is called by:
  1708 ;;		__HW_Process_Pending_Ints
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           	psect	text5
  1713  000632                     __ptext5:
  1714                           	opt stack 0
  1715  000632                     _ES_Timer_Tick_Resp:
  1716                           	opt stack 18
  1717                           
  1718                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1719                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1720                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1721                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;incstack = 0
  1725  000632  0100               	movlb	0	; () banked
  1726  000634  5193               	movf	_TMR_ActiveFlags& (0+255),w,b
  1727  000636  0100               	movlb	0	; () banked
  1728  000638  1194               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1729  00063A  B4D8               	btfsc	status,2,c
  1730  00063C  0012               	return	
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;ES_Timers.c: 291: {
  1734                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1735  00063E  C093  F08B         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1736  000642  C094  F08C         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1737  000646                     l2302:
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1741  000646  C08B  F0BB         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1742  00064A  C08C  F0BC         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1743  00064E  ECFA  F006         	call	_ES_GetMSBitSet	;wreg free
  1744  000652  0100               	movlb	0	; () banked
  1745  000654  6F95               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1749  000656  0100               	movlb	0	; () banked
  1750  000658  5195               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1751  00065A  0D02               	mullw	2
  1752  00065C  0E60               	movlw	low _TMR_TimerArray
  1753  00065E  24F3               	addwf	prodl,w,c
  1754  000660  6ED9               	movwf	fsr2l,c
  1755  000662  0E00               	movlw	high _TMR_TimerArray
  1756  000664  20F4               	addwfc	prodh,w,c
  1757  000666  6EDA               	movwf	fsr2h,c
  1758  000668  06DE               	decf	postinc2,f,c
  1759  00066A  0E00               	movlw	0
  1760  00066C  5ADD               	subwfb	postdec2,f,c
  1761  00066E  50DE               	movf	postinc2,w,c
  1762  000670  10DE               	iorwf	postinc2,w,c
  1763  000672  A4D8               	btfss	status,2,c
  1764  000674  D043               	goto	l2314
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;ES_Timers.c: 299: {
  1768                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1769  000676  0E03               	movlw	3
  1770  000678  0100               	movlb	0	; () banked
  1771  00067A  6F88               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1775  00067C  C095  F089         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1776  000680  0100               	movlb	0	; () banked
  1777  000682  6B8A               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1781  000684  C088  F0D8         	movff	ES_Timer_Tick_Resp@NewEvent,PostSPI32ControlService@ThisEvent
  1782  000688  C089  F0D9         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostSPI32ControlService@ThisEvent+1
  1783  00068C  C08A  F0DA         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostSPI32ControlService@ThisEvent+2
  1784  000690  0100               	movlb	0	; () banked
  1785  000692  5195               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1786  000694  0D02               	mullw	2
  1787  000696  0E21               	movlw	low _Timer2PostFunc
  1788  000698  24F3               	addwf	prodl,w,c
  1789  00069A  6EF6               	movwf	tblptrl,c
  1790  00069C  0E03               	movlw	high _Timer2PostFunc
  1791  00069E  20F4               	addwfc	prodh,w,c
  1792  0006A0  6EF7               	movwf	tblptrh,c
  1793  0006A2                     	if	0	;There are less than 3 active tblptr bytes
  1794  0006A2                     	endif
  1795  0006A2  D801               	call	u1388
  1796  0006A4  D00C               	goto	l2312
  1797  0006A6                     u1388:
  1798  0006A6  0005               	push	
  1799  0006A8  6EFA               	movwf	pclath,c
  1800  0006AA  0009               	tblrd		*+
  1801  0006AC  50F5               	movf	tablat,w,c
  1802  0006AE  6EFD               	movwf	tosl,c
  1803  0006B0  0009               	tblrd		*+
  1804  0006B2  50F5               	movf	tablat,w,c
  1805  0006B4  6EFE               	movwf	tosh,c
  1806  0006B6  50F8               	movf	tblptru,w,c
  1807  0006B8  6EFF               	movwf	tosu,c
  1808  0006BA  50FA               	movf	pclath,w,c
  1809  0006BC  0012               	return		;indir
  1810  0006BE                     l2312:
  1811                           
  1812                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1813  0006BE  0100               	movlb	0	; () banked
  1814  0006C0  5195               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1815  0006C2  0D02               	mullw	2
  1816  0006C4  0E01               	movlw	low _BitNum2SetMask
  1817  0006C6  24F3               	addwf	prodl,w,c
  1818  0006C8  6EF6               	movwf	tblptrl,c
  1819  0006CA  0E03               	movlw	high _BitNum2SetMask
  1820  0006CC  20F4               	addwfc	prodh,w,c
  1821  0006CE  6EF7               	movwf	tblptrh,c
  1822  0006D0                     	if	0	;There are less than 3 active tblptr bytes
  1823  0006D0                     	endif
  1824  0006D0  0009               	tblrd		*+
  1825  0006D2  CFF5 F0DB          	movff	tablat,??_ES_Timer_Tick_Resp
  1826  0006D6  0009               	tblrd		*+
  1827  0006D8  CFF5 F0DC          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1828  0006DC  0100               	movlb	0	; () banked
  1829  0006DE  1DDB               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1830  0006E0  0100               	movlb	0	; () banked
  1831  0006E2  6FDD               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1832  0006E4  0100               	movlb	0	; () banked
  1833  0006E6  1DDC               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1834  0006E8  0100               	movlb	0	; () banked
  1835  0006EA  6FDE               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1836  0006EC  0100               	movlb	0	; () banked
  1837  0006EE  51DD               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1838  0006F0  0100               	movlb	0	; () banked
  1839  0006F2  1793               	andwf	_TMR_ActiveFlags& (0+255),f,b
  1840  0006F4  0100               	movlb	0	; () banked
  1841  0006F6  51DE               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1842  0006F8  0100               	movlb	0	; () banked
  1843  0006FA  1794               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  1844  0006FC                     l2314:
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;ES_Timers.c: 306: }
  1848                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1849  0006FC  0100               	movlb	0	; () banked
  1850  0006FE  5195               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1851  000700  0D02               	mullw	2
  1852  000702  0E01               	movlw	low _BitNum2SetMask
  1853  000704  24F3               	addwf	prodl,w,c
  1854  000706  6EF6               	movwf	tblptrl,c
  1855  000708  0E03               	movlw	high _BitNum2SetMask
  1856  00070A  20F4               	addwfc	prodh,w,c
  1857  00070C  6EF7               	movwf	tblptrh,c
  1858  00070E                     	if	0	;There are less than 3 active tblptr bytes
  1859  00070E                     	endif
  1860  00070E  0009               	tblrd		*+
  1861  000710  CFF5 F0DB          	movff	tablat,??_ES_Timer_Tick_Resp
  1862  000714  0009               	tblrd		*+
  1863  000716  CFF5 F0DC          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1864  00071A  0100               	movlb	0	; () banked
  1865  00071C  1DDB               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1866  00071E  0100               	movlb	0	; () banked
  1867  000720  6FDD               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1868  000722  0100               	movlb	0	; () banked
  1869  000724  1DDC               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1870  000726  0100               	movlb	0	; () banked
  1871  000728  6FDE               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1872  00072A  0100               	movlb	0	; () banked
  1873  00072C  51DD               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1874  00072E  0100               	movlb	0	; () banked
  1875  000730  178B               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  1876  000732  0100               	movlb	0	; () banked
  1877  000734  51DE               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1878  000736  0100               	movlb	0	; () banked
  1879  000738  178C               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1883  00073A  0100               	movlb	0	; () banked
  1884  00073C  518B               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  1885  00073E  0100               	movlb	0	; () banked
  1886  000740  118C               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  1887  000742  B4D8               	btfsc	status,2,c
  1888  000744  0012               	return	
  1889  000746  D77F               	goto	l2302
  1890  000748                     __end_of_ES_Timer_Tick_Resp:
  1891                           	opt stack 0
  1892                           tosu	equ	0xFFF
  1893                           tosh	equ	0xFFE
  1894                           tosl	equ	0xFFD
  1895                           pclath	equ	0xFFA
  1896                           tblptru	equ	0xFF8
  1897                           tblptrh	equ	0xFF7
  1898                           tblptrl	equ	0xFF6
  1899                           tablat	equ	0xFF5
  1900                           prodh	equ	0xFF4
  1901                           prodl	equ	0xFF3
  1902                           postinc0	equ	0xFEE
  1903                           wreg	equ	0xFE8
  1904                           postdec1	equ	0xFE5
  1905                           fsr1h	equ	0xFE2
  1906                           fsr1l	equ	0xFE1
  1907                           indf2	equ	0xFDF
  1908                           postinc2	equ	0xFDE
  1909                           postdec2	equ	0xFDD
  1910                           fsr2h	equ	0xFDA
  1911                           fsr2l	equ	0xFD9
  1912                           status	equ	0xFD8
  1913                           
  1914 ;; *************** function _ES_GetMSBitSet *****************
  1915 ;; Defined at:
  1916 ;;		line 79 in file "ES_LookupTables.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;  LoopCntr        1    9[BANK0 ] char 
  1921 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  1922 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  1923 ;; Return value:  Size  Location     Type
  1924 ;;                  1    wreg      unsigned char 
  1925 ;; Registers used:
  1926 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1927 ;; Tracked objects:
  1928 ;;		On entry : 0/0
  1929 ;;		On exit  : 0/0
  1930 ;;		Unchanged: 0/0
  1931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1932 ;;      Params:         0       2       0       0
  1933 ;;      Locals:         0       3       0       0
  1934 ;;      Temps:          0       5       0       0
  1935 ;;      Totals:         0      10       0       0
  1936 ;;Total ram usage:       10 bytes
  1937 ;; Hardware stack levels used:    1
  1938 ;; Hardware stack levels required when called:    6
  1939 ;; This function calls:
  1940 ;;		Nothing
  1941 ;; This function is called by:
  1942 ;;		_ES_Run
  1943 ;;		_ES_Timer_Tick_Resp
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           	psect	text6
  1948  000DF4                     __ptext6:
  1949                           	opt stack 0
  1950  000DF4                     _ES_GetMSBitSet:
  1951                           	opt stack 21
  1952                           
  1953                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1954                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1955                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;incstack = 0
  1959  000DF4  0E80               	movlw	128
  1960  000DF6  0100               	movlb	0	; () banked
  1961  000DF8  6FC2               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1962                           
  1963                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1964  000DFA  0E03               	movlw	3
  1965  000DFC  0100               	movlb	0	; () banked
  1966  000DFE  6FC4               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  1967  000E00                     l2194:
  1968                           
  1969                           ; BSR set to: 0
  1970                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1971  000E00  0100               	movlb	0	; () banked
  1972  000E02  BFC4               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  1973  000E04  D046               	goto	l2208
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1977                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1978                           ;ES_LookupTables.c: 91: 0x0F);
  1979                           
  1980                           ; BSR set to: 0
  1981                           
  1982                           ; BSR set to: 0
  1983  000E06  0100               	movlb	0	; () banked
  1984  000E08  51C4               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1985  000E0A  0D04               	mullw	4
  1986  000E0C  CFF3 F0BD          	movff	prodl,??_ES_GetMSBitSet
  1987  000E10  C0BB  F0BE         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1988  000E14  C0BC  F0BF         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1989  000E18  0100               	movlb	0	; () banked
  1990  000E1A  2BBD               	incf	??_ES_GetMSBitSet& (0+255),f,b
  1991  000E1C  D004               	goto	u1244
  1992  000E1E                     u1245:
  1993  000E1E  0100               	movlb	0	; () banked
  1994  000E20  90D8               	bcf	status,0,c
  1995  000E22  33BF               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1996  000E24  33BE               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  1997  000E26                     u1244:
  1998  000E26  0100               	movlb	0	; () banked
  1999  000E28  2FBD               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  2000  000E2A  D7F9               	goto	u1245
  2001  000E2C  0100               	movlb	0	; () banked
  2002  000E2E  51BE               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2003  000E30  0B0F               	andlw	15
  2004  000E32  0100               	movlb	0	; () banked
  2005  000E34  6FC3               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  2009  000E36  0100               	movlb	0	; () banked
  2010  000E38  51C3               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2011  000E3A  0100               	movlb	0	; () banked
  2012  000E3C  B4D8               	btfsc	status,2,c
  2013  000E3E  D026               	goto	l2204
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  2017                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  2018  000E40  0EFF               	movlw	255
  2019  000E42  0100               	movlb	0	; () banked
  2020  000E44  6FBD               	movwf	??_ES_GetMSBitSet& (0+255),b
  2021  000E46  0EFF               	movlw	255
  2022  000E48  0100               	movlb	0	; () banked
  2023  000E4A  6FBE               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  2024  000E4C  0100               	movlb	0	; () banked
  2025  000E4E  51C3               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2026  000E50  0100               	movlb	0	; () banked
  2027  000E52  6FBF               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  2028  000E54  6BC0               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  2029  000E56  0100               	movlb	0	; () banked
  2030  000E58  51BD               	movf	??_ES_GetMSBitSet& (0+255),w,b
  2031  000E5A  0100               	movlb	0	; () banked
  2032  000E5C  27BF               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2033  000E5E  0100               	movlb	0	; () banked
  2034  000E60  51BE               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2035  000E62  0100               	movlb	0	; () banked
  2036  000E64  23C0               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  2037  000E66  0E41               	movlw	low _Nybble2MSBitNum
  2038  000E68  0100               	movlb	0	; () banked
  2039  000E6A  25BF               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  2040  000E6C  6EF6               	movwf	tblptrl,c
  2041  000E6E  0E03               	movlw	high _Nybble2MSBitNum
  2042  000E70  21C0               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  2043  000E72  6EF7               	movwf	tblptrh,c
  2044  000E74                     	if	0	;There are less than 3 active tblptr bytes
  2045  000E74                     	endif
  2046  000E74  0008               	tblrd		*
  2047  000E76  CFF5 F0C1          	movff	tablat,??_ES_GetMSBitSet+4
  2048  000E7A  0100               	movlb	0	; () banked
  2049  000E7C  51C4               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2050  000E7E  0D04               	mullw	4
  2051  000E80  50F3               	movf	prodl,w,c
  2052  000E82  0100               	movlb	0	; () banked
  2053  000E84  25C1               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  2054  000E86  0100               	movlb	0	; () banked
  2055  000E88  6FC2               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2056                           
  2057                           ;ES_LookupTables.c: 96: break;
  2058  000E8A  D003               	goto	l2208
  2059  000E8C                     l2204:
  2060                           
  2061                           ; BSR set to: 0
  2062  000E8C  0100               	movlb	0	; () banked
  2063  000E8E  07C4               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  2064  000E90  D7B7               	goto	l2194
  2065  000E92                     l2208:
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;ES_LookupTables.c: 97: }
  2069                           ;ES_LookupTables.c: 98: }
  2070                           ;ES_LookupTables.c: 99: return ReturnVal;
  2071  000E92  0100               	movlb	0	; () banked
  2072  000E94  51C2               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  2073  000E96  0012               	return	
  2074  000E98                     __end_of_ES_GetMSBitSet:
  2075                           	opt stack 0
  2076                           tosu	equ	0xFFF
  2077                           tosh	equ	0xFFE
  2078                           tosl	equ	0xFFD
  2079                           pclath	equ	0xFFA
  2080                           tblptru	equ	0xFF8
  2081                           tblptrh	equ	0xFF7
  2082                           tblptrl	equ	0xFF6
  2083                           tablat	equ	0xFF5
  2084                           prodh	equ	0xFF4
  2085                           prodl	equ	0xFF3
  2086                           postinc0	equ	0xFEE
  2087                           wreg	equ	0xFE8
  2088                           postdec1	equ	0xFE5
  2089                           fsr1h	equ	0xFE2
  2090                           fsr1l	equ	0xFE1
  2091                           indf2	equ	0xFDF
  2092                           postinc2	equ	0xFDE
  2093                           postdec2	equ	0xFDD
  2094                           fsr2h	equ	0xFDA
  2095                           fsr2l	equ	0xFD9
  2096                           status	equ	0xFD8
  2097                           
  2098 ;; *************** function _RunPatternControlService *****************
  2099 ;; Defined at:
  2100 ;;		line 157 in file "Pattern_ControlService.c"
  2101 ;; Parameters:    Size  Location     Type
  2102 ;;  ThisEvent       3   40[BANK0 ] struct ES_Event_t
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;  testEvent       3   46[BANK0 ] struct ES_Event_t
  2105 ;;  ReturnEvent     3   43[BANK0 ] struct ES_Event_t
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  3   40[BANK0 ] struct ES_Event_t
  2108 ;; Registers used:
  2109 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2115 ;;      Params:         0       3       0       0
  2116 ;;      Locals:         0       6       0       0
  2117 ;;      Temps:          0       0       0       0
  2118 ;;      Totals:         0       9       0       0
  2119 ;;Total ram usage:        9 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:   13
  2122 ;; This function calls:
  2123 ;;		_PausePattern
  2124 ;;		_PostPatternControlService
  2125 ;;		_ShowPattern
  2126 ;;		_StopPattern
  2127 ;; This function is called by:
  2128 ;;		_ES_Run
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text7
  2133  000BD6                     __ptext7:
  2134                           	opt stack 0
  2135  000BD6                     _RunPatternControlService:
  2136                           	opt stack 16
  2137                           
  2138                           ;Pattern_ControlService.c: 159: ES_Event ReturnEvent;
  2139                           ;Pattern_ControlService.c: 160: ReturnEvent.EventType = ES_NO_EVENT;
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;incstack = 0
  2143  000BD6  0E00               	movlw	0
  2144  000BD8  0100               	movlb	0	; () banked
  2145  000BDA  6FE6               	movwf	RunPatternControlService@ReturnEvent& (0+255),b
  2146                           
  2147                           ;Pattern_ControlService.c: 162: switch(CurrentState){
  2148  000BDC  D049               	goto	l2520
  2149  000BDE                     l2478:
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;Pattern_ControlService.c: 165: if(ThisEvent.EventType == ES_INIT){
  2153  000BDE  0E02               	movlw	2
  2154  000BE0  0100               	movlb	0	; () banked
  2155  000BE2  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2156  000BE4  A4D8               	btfss	status,2,c
  2157  000BE6  D052               	goto	l324
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;Pattern_ControlService.c: 169: CurrentState = Pattern_Off;
  2161  000BE8  0E01               	movlw	1
  2162  000BEA  0100               	movlb	0	; () banked
  2163  000BEC  6F99               	movwf	_CurrentState& (0+255),b
  2164                           
  2165                           ;Pattern_ControlService.c: 172: ES_Event testEvent;
  2166                           ;Pattern_ControlService.c: 173: testEvent.EventType = PATTERN_START;
  2167  000BEE  0E05               	movlw	5
  2168  000BF0  0100               	movlb	0	; () banked
  2169  000BF2  6FE9               	movwf	RunPatternControlService@testEvent& (0+255),b
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;Pattern_ControlService.c: 174: PostPatternControlService(testEvent);
  2173  000BF4  C0E9  F0D8         	movff	RunPatternControlService@testEvent,PostPatternControlService@ThisEvent
  2174  000BF8  C0EA  F0D9         	movff	RunPatternControlService@testEvent+1,PostPatternControlService@ThisEvent+1
  2175  000BFC  C0EB  F0DA         	movff	RunPatternControlService@testEvent+2,PostPatternControlService@ThisEvent+2
  2176  000C00  ECAE  F00B         	call	_PostPatternControlService	;wreg free
  2177                           
  2178                           ;Pattern_ControlService.c: 176: }
  2179                           ;Pattern_ControlService.c: 177: break;
  2180  000C04  D043               	goto	l324
  2181  000C06                     l2484:
  2182                           
  2183                           ;Pattern_ControlService.c: 181: if(ThisEvent.EventType == PATTERN_START){
  2184  000C06  0E05               	movlw	5
  2185  000C08  0100               	movlb	0	; () banked
  2186  000C0A  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2187  000C0C  A4D8               	btfss	status,2,c
  2188  000C0E  D03E               	goto	l324
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;Pattern_ControlService.c: 183: ShowPattern();
  2192  000C10  EC34  F00B         	call	_ShowPattern	;wreg free
  2193  000C14                     l2488:
  2194                           
  2195                           ;Pattern_ControlService.c: 185: CurrentState = Pattern_Running;
  2196  000C14  0E02               	movlw	2
  2197  000C16  D029               	goto	L4
  2198  000C18                     l2490:
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;Pattern_ControlService.c: 191: if(ThisEvent.EventType == ES_TIMEOUT){
  2202  000C18  0E03               	movlw	3
  2203  000C1A  0100               	movlb	0	; () banked
  2204  000C1C  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2205  000C1E  A4D8               	btfss	status,2,c
  2206  000C20  D003               	goto	l2494
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;Pattern_ControlService.c: 193: ShowPattern();
  2210  000C22  EC34  F00B         	call	_ShowPattern	;wreg free
  2211                           
  2212                           ;Pattern_ControlService.c: 194: }
  2213  000C26  D032               	goto	l324
  2214  000C28                     l2494:
  2215                           
  2216                           ;Pattern_ControlService.c: 196: else if(ThisEvent.EventType == PATTERN_END){
  2217  000C28  0E06               	movlw	6
  2218  000C2A  0100               	movlb	0	; () banked
  2219  000C2C  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2220  000C2E  A4D8               	btfss	status,2,c
  2221  000C30  D003               	goto	l2500
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;Pattern_ControlService.c: 198: StopPattern();
  2225  000C32  EC6B  F00B         	call	_StopPattern	;wreg free
  2226  000C36  D018               	goto	L12
  2227  000C38                     l2500:
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;Pattern_ControlService.c: 203: else if(ThisEvent.EventType == PATTERN_PAUSE){
  2231  000C38  0E07               	movlw	7
  2232  000C3A  0100               	movlb	0	; () banked
  2233  000C3C  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2234  000C3E  A4D8               	btfss	status,2,c
  2235  000C40  D025               	goto	l324
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;Pattern_ControlService.c: 205: PausePattern();
  2239  000C42  ECE6  F00B         	call	_PausePattern	;wreg free
  2240                           
  2241                           ;Pattern_ControlService.c: 207: CurrentState = Pattern_Paused;
  2242  000C46  0E03               	movlw	3
  2243  000C48  D010               	goto	L4
  2244  000C4A                     l2506:
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;Pattern_ControlService.c: 213: if(ThisEvent.EventType == PATTERN_UNPAUSE){
  2248  000C4A  0E08               	movlw	8
  2249  000C4C  0100               	movlb	0	; () banked
  2250  000C4E  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2251  000C50  A4D8               	btfss	status,2,c
  2252  000C52  D003               	goto	l2512
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;Pattern_ControlService.c: 215: ShowPattern();
  2256  000C54  EC34  F00B         	call	_ShowPattern	;wreg free
  2257  000C58  D7DD               	goto	l2488
  2258  000C5A                     l2512:
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;Pattern_ControlService.c: 220: else if(ThisEvent.EventType == PATTERN_END){
  2262  000C5A  0E06               	movlw	6
  2263  000C5C  0100               	movlb	0	; () banked
  2264  000C5E  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2265  000C60  A4D8               	btfss	status,2,c
  2266  000C62  D014               	goto	l324
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;Pattern_ControlService.c: 222: StopPattern();
  2270  000C64  EC6B  F00B         	call	_StopPattern	;wreg free
  2271  000C68                     L12:
  2272                           
  2273                           ;Pattern_ControlService.c: 224: CurrentState = Pattern_Off;
  2274  000C68  0E01               	movlw	1
  2275  000C6A                     L4:
  2276  000C6A  0100               	movlb	0	; () banked
  2277  000C6C  6F99               	movwf	_CurrentState& (0+255),b
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;Pattern_ControlService.c: 227: }
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;Pattern_ControlService.c: 225: }
  2284                           ;Pattern_ControlService.c: 226: break;
  2285                           
  2286                           ; BSR set to: 0
  2287  000C6E  D00E               	goto	l324
  2288  000C70                     l2520:
  2289                           
  2290                           ; BSR set to: 0
  2291  000C70  0100               	movlb	0	; () banked
  2292  000C72  5199               	movf	_CurrentState& (0+255),w,b
  2293                           
  2294                           ; Switch size 1, requested type "space"
  2295                           ; Number of cases is 4, Range of values is 0 to 3
  2296                           ; switch strategies available:
  2297                           ; Name         Instructions Cycles
  2298                           ; simple_byte           13     7 (average)
  2299                           ;	Chosen strategy is simple_byte
  2300  000C74  0A00               	xorlw	0	; case 0
  2301  000C76  B4D8               	btfsc	status,2,c
  2302  000C78  D7B2               	goto	l2478
  2303  000C7A  0A01               	xorlw	1	; case 1
  2304  000C7C  B4D8               	btfsc	status,2,c
  2305  000C7E  D7C3               	goto	l2484
  2306  000C80  0A03               	xorlw	3	; case 2
  2307  000C82  B4D8               	btfsc	status,2,c
  2308  000C84  D7C9               	goto	l2490
  2309  000C86  0A01               	xorlw	1	; case 3
  2310  000C88  B4D8               	btfsc	status,2,c
  2311  000C8A  D7DF               	goto	l2506
  2312  000C8C                     l324:
  2313                           
  2314                           ;Pattern_ControlService.c: 228: return ReturnEvent;
  2315  000C8C  C0E6  F0E3         	movff	RunPatternControlService@ReturnEvent,?_RunPatternControlService
  2316  000C90  C0E7  F0E4         	movff	RunPatternControlService@ReturnEvent+1,?_RunPatternControlService+1
  2317  000C94  C0E8  F0E5         	movff	RunPatternControlService@ReturnEvent+2,?_RunPatternControlService+2
  2318  000C98  0012               	return		;funcret
  2319  000C9A                     __end_of_RunPatternControlService:
  2320                           	opt stack 0
  2321                           tosu	equ	0xFFF
  2322                           tosh	equ	0xFFE
  2323                           tosl	equ	0xFFD
  2324                           pclath	equ	0xFFA
  2325                           tblptru	equ	0xFF8
  2326                           tblptrh	equ	0xFF7
  2327                           tblptrl	equ	0xFF6
  2328                           tablat	equ	0xFF5
  2329                           prodh	equ	0xFF4
  2330                           prodl	equ	0xFF3
  2331                           postinc0	equ	0xFEE
  2332                           wreg	equ	0xFE8
  2333                           postdec1	equ	0xFE5
  2334                           fsr1h	equ	0xFE2
  2335                           fsr1l	equ	0xFE1
  2336                           indf2	equ	0xFDF
  2337                           postinc2	equ	0xFDE
  2338                           postdec2	equ	0xFDD
  2339                           fsr2h	equ	0xFDA
  2340                           fsr2l	equ	0xFD9
  2341                           status	equ	0xFD8
  2342                           
  2343 ;; *************** function _RunSPI32ControlService *****************
  2344 ;; Defined at:
  2345 ;;		line 138 in file "SPI32_ControlService.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;  ThisEvent       3   40[BANK0 ] struct ES_Event_t
  2348 ;; Auto vars:     Size  Location     Type
  2349 ;;  ReturnEvent     3   44[BANK0 ] struct ES_Event_t
  2350 ;; Return value:  Size  Location     Type
  2351 ;;                  3   40[BANK0 ] struct ES_Event_t
  2352 ;; Registers used:
  2353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2354 ;; Tracked objects:
  2355 ;;		On entry : 0/0
  2356 ;;		On exit  : 0/0
  2357 ;;		Unchanged: 0/0
  2358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2359 ;;      Params:         0       3       0       0
  2360 ;;      Locals:         0       3       0       0
  2361 ;;      Temps:          0       1       0       0
  2362 ;;      Totals:         0       7       0       0
  2363 ;;Total ram usage:        7 bytes
  2364 ;; Hardware stack levels used:    1
  2365 ;; Hardware stack levels required when called:    7
  2366 ;; This function calls:
  2367 ;;		_GetNextFrame
  2368 ;;		_SPI32_SendByte
  2369 ;; This function is called by:
  2370 ;;		_ES_Run
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           	psect	text8
  2375  000748                     __ptext8:
  2376                           	opt stack 0
  2377  000748                     _RunSPI32ControlService:
  2378                           	opt stack 22
  2379                           
  2380                           ;SPI32_ControlService.c: 140: ES_Event ReturnEvent;
  2381                           ;SPI32_ControlService.c: 141: ReturnEvent.EventType = ES_NO_EVENT;
  2382                           
  2383                           ;incstack = 0
  2384  000748  0E00               	movlw	0
  2385  00074A  0100               	movlb	0	; () banked
  2386  00074C  6FE7               	movwf	RunSPI32ControlService@ReturnEvent& (0+255),b
  2387                           
  2388                           ;SPI32_ControlService.c: 143: switch ( CurrentState ) {
  2389  00074E  D05F               	goto	l2588
  2390  000750                     l2544:
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;SPI32_ControlService.c: 148: if(ThisEvent.EventType == ES_INIT){
  2394  000750  0E02               	movlw	2
  2395  000752  0100               	movlb	0	; () banked
  2396  000754  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2397  000756  A4D8               	btfss	status,2,c
  2398  000758  D06E               	goto	l453
  2399  00075A  D055               	goto	l2584
  2400  00075C                     l2548:
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;SPI32_ControlService.c: 159: if(ThisEvent.EventType == SPI32_TRANSMIT){
  2404  00075C  0E09               	movlw	9
  2405  00075E  0100               	movlb	0	; () banked
  2406  000760  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2407  000762  A4D8               	btfss	status,2,c
  2408  000764  D068               	goto	l453
  2409                           
  2410                           ; BSR set to: 0
  2411                           ;SPI32_ControlService.c: 161: CurrentFrame = GetNextFrame();
  2412  000766  EC20  F00B         	call	_GetNextFrame	;wreg free
  2413  00076A  C0BB  F080         	movff	?_GetNextFrame,_CurrentFrame
  2414  00076E  C0BC  F081         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2415  000772  C0BD  F082         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2416  000776  C0BE  F083         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2417                           
  2418                           ;SPI32_ControlService.c: 163: SPI32_SendByte(CurrentFrame);
  2419  00077A  0100               	movlb	0	; () banked
  2420  00077C  5180               	movf	_CurrentFrame& (0+255),w,b
  2421  00077E  ECDD  F00B         	call	_SPI32_SendByte
  2422  000782                     l2554:
  2423                           
  2424                           ;SPI32_ControlService.c: 165: CurrentState = SPI32_SendingByte1;
  2425  000782  0E02               	movlw	2
  2426  000784  D041               	goto	L10
  2427  000786                     l2556:
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;SPI32_ControlService.c: 172: if(ThisEvent.EventType == ES_TIMEOUT){
  2431  000786  0E03               	movlw	3
  2432  000788  0100               	movlb	0	; () banked
  2433  00078A  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2434  00078C  A4D8               	btfss	status,2,c
  2435  00078E  D053               	goto	l453
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;SPI32_ControlService.c: 174: SPI32_SendByte(CurrentFrame>>8);
  2439  000790  0100               	movlb	0	; () banked
  2440  000792  5181               	movf	(_CurrentFrame+1)& (0+255),w,b
  2441  000794  ECDD  F00B         	call	_SPI32_SendByte
  2442                           
  2443                           ;SPI32_ControlService.c: 176: CurrentState = SPI32_SendingByte2;
  2444  000798  0E03               	movlw	3
  2445  00079A  D036               	goto	L10
  2446  00079C                     l2562:
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;SPI32_ControlService.c: 184: if(ThisEvent.EventType == ES_TIMEOUT){
  2450  00079C  0E03               	movlw	3
  2451  00079E  0100               	movlb	0	; () banked
  2452  0007A0  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2453  0007A2  A4D8               	btfss	status,2,c
  2454  0007A4  D048               	goto	l453
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;SPI32_ControlService.c: 186: SPI32_SendByte(CurrentFrame>>16);
  2458  0007A6  0100               	movlb	0	; () banked
  2459  0007A8  5182               	movf	(_CurrentFrame+2)& (0+255),w,b
  2460  0007AA  ECDD  F00B         	call	_SPI32_SendByte
  2461                           
  2462                           ;SPI32_ControlService.c: 188: CurrentState = SPI32_SendingByte3;
  2463  0007AE  0E04               	movlw	4
  2464  0007B0  D02B               	goto	L10
  2465  0007B2                     l2568:
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;SPI32_ControlService.c: 196: if(ThisEvent.EventType == ES_TIMEOUT){
  2469  0007B2  0E03               	movlw	3
  2470  0007B4  0100               	movlb	0	; () banked
  2471  0007B6  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2472  0007B8  A4D8               	btfss	status,2,c
  2473  0007BA  D03D               	goto	l453
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;SPI32_ControlService.c: 198: SPI32_SendByte(CurrentFrame>>24);
  2477  0007BC  0100               	movlb	0	; () banked
  2478  0007BE  5183               	movf	(_CurrentFrame+3)& (0+255),w,b
  2479  0007C0  ECDD  F00B         	call	_SPI32_SendByte
  2480                           
  2481                           ;SPI32_ControlService.c: 200: CurrentState = SPI32_SendingByte4;
  2482  0007C4  0E05               	movlw	5
  2483  0007C6  D020               	goto	L10
  2484  0007C8                     l2574:
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;SPI32_ControlService.c: 207: if(ThisEvent.EventType == ES_TIMEOUT){
  2488  0007C8  0E03               	movlw	3
  2489  0007CA  0100               	movlb	0	; () banked
  2490  0007CC  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2491  0007CE  A4D8               	btfss	status,2,c
  2492  0007D0  D032               	goto	l453
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;SPI32_ControlService.c: 209: if(FrameIndex++ < NumFrames){
  2496  0007D2  0100               	movlb	0	; () banked
  2497  0007D4  2B9A               	incf	_FrameIndex& (0+255),f,b
  2498  0007D6  059A               	decf	_FrameIndex& (0+255),w,b
  2499  0007D8  0100               	movlb	0	; () banked
  2500  0007DA  6FE6               	movwf	??_RunSPI32ControlService& (0+255),b
  2501  0007DC  0100               	movlb	0	; () banked
  2502  0007DE  519D               	movf	_NumFrames& (0+255),w,b
  2503  0007E0  0100               	movlb	0	; () banked
  2504  0007E2  5DE6               	subwf	??_RunSPI32ControlService& (0+255),w,b
  2505  0007E4  B0D8               	btfsc	status,0,c
  2506  0007E6  D00F               	goto	l2584
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;SPI32_ControlService.c: 211: CurrentFrame = GetNextFrame();
  2510  0007E8  EC20  F00B         	call	_GetNextFrame	;wreg free
  2511  0007EC  C0BB  F080         	movff	?_GetNextFrame,_CurrentFrame
  2512  0007F0  C0BC  F081         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2513  0007F4  C0BD  F082         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2514  0007F8  C0BE  F083         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2515                           
  2516                           ;SPI32_ControlService.c: 213: SPI32_SendByte(CurrentFrame);
  2517  0007FC  0100               	movlb	0	; () banked
  2518  0007FE  5180               	movf	_CurrentFrame& (0+255),w,b
  2519  000800  ECDD  F00B         	call	_SPI32_SendByte
  2520  000804  D7BE               	goto	l2554
  2521  000806                     l2584:
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;SPI32_ControlService.c: 218: else{
  2525                           ;SPI32_ControlService.c: 220: CurrentState = SPI32_Waiting4Send;
  2526  000806  0E01               	movlw	1
  2527  000808                     L10:
  2528  000808  0100               	movlb	0	; () banked
  2529  00080A  6F97               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;SPI32_ControlService.c: 225: }
  2533                           
  2534                           ; BSR set to: 0
  2535                           ;SPI32_ControlService.c: 221: }
  2536                           ;SPI32_ControlService.c: 222: }
  2537                           ;SPI32_ControlService.c: 223: break;
  2538                           
  2539                           ; BSR set to: 0
  2540  00080C  D014               	goto	l453
  2541  00080E                     l2588:
  2542                           
  2543                           ; BSR set to: 0
  2544  00080E  0100               	movlb	0	; () banked
  2545  000810  5197               	movf	SPI32_ControlService@CurrentState& (0+255),w,b
  2546                           
  2547                           ; Switch size 1, requested type "space"
  2548                           ; Number of cases is 6, Range of values is 0 to 5
  2549                           ; switch strategies available:
  2550                           ; Name         Instructions Cycles
  2551                           ; simple_byte           19    10 (average)
  2552                           ;	Chosen strategy is simple_byte
  2553  000812  0A00               	xorlw	0	; case 0
  2554  000814  B4D8               	btfsc	status,2,c
  2555  000816  D79C               	goto	l2544
  2556  000818  0A01               	xorlw	1	; case 1
  2557  00081A  B4D8               	btfsc	status,2,c
  2558  00081C  D79F               	goto	l2548
  2559  00081E  0A03               	xorlw	3	; case 2
  2560  000820  B4D8               	btfsc	status,2,c
  2561  000822  D7B1               	goto	l2556
  2562  000824  0A01               	xorlw	1	; case 3
  2563  000826  B4D8               	btfsc	status,2,c
  2564  000828  D7B9               	goto	l2562
  2565  00082A  0A07               	xorlw	7	; case 4
  2566  00082C  B4D8               	btfsc	status,2,c
  2567  00082E  D7C1               	goto	l2568
  2568  000830  0A01               	xorlw	1	; case 5
  2569  000832  B4D8               	btfsc	status,2,c
  2570  000834  D7C9               	goto	l2574
  2571  000836                     l453:
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;SPI32_ControlService.c: 226: return ReturnEvent;
  2575  000836  C0E7  F0E3         	movff	RunSPI32ControlService@ReturnEvent,?_RunSPI32ControlService
  2576  00083A  C0E8  F0E4         	movff	RunSPI32ControlService@ReturnEvent+1,?_RunSPI32ControlService+1
  2577  00083E  C0E9  F0E5         	movff	RunSPI32ControlService@ReturnEvent+2,?_RunSPI32ControlService+2
  2578                           
  2579                           ; BSR set to: 0
  2580  000842  0012               	return		;funcret
  2581  000844                     __end_of_RunSPI32ControlService:
  2582                           	opt stack 0
  2583                           tosu	equ	0xFFF
  2584                           tosh	equ	0xFFE
  2585                           tosl	equ	0xFFD
  2586                           pclath	equ	0xFFA
  2587                           tblptru	equ	0xFF8
  2588                           tblptrh	equ	0xFF7
  2589                           tblptrl	equ	0xFF6
  2590                           tablat	equ	0xFF5
  2591                           prodh	equ	0xFF4
  2592                           prodl	equ	0xFF3
  2593                           postinc0	equ	0xFEE
  2594                           wreg	equ	0xFE8
  2595                           postdec1	equ	0xFE5
  2596                           fsr1h	equ	0xFE2
  2597                           fsr1l	equ	0xFE1
  2598                           indf2	equ	0xFDF
  2599                           postinc2	equ	0xFDE
  2600                           postdec2	equ	0xFDD
  2601                           fsr2h	equ	0xFDA
  2602                           fsr2l	equ	0xFD9
  2603                           status	equ	0xFD8
  2604                           
  2605 ;; *************** function _SPI32_SendByte *****************
  2606 ;; Defined at:
  2607 ;;		line 84 in file "SPI32_HW.c"
  2608 ;; Parameters:    Size  Location     Type
  2609 ;;  newByte         1    wreg     unsigned char 
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;  newByte         1    0[BANK0 ] unsigned char 
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  1    wreg      void 
  2614 ;; Registers used:
  2615 ;;		wreg
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2621 ;;      Params:         0       0       0       0
  2622 ;;      Locals:         0       1       0       0
  2623 ;;      Temps:          0       0       0       0
  2624 ;;      Totals:         0       1       0       0
  2625 ;;Total ram usage:        1 bytes
  2626 ;; Hardware stack levels used:    1
  2627 ;; Hardware stack levels required when called:    6
  2628 ;; This function calls:
  2629 ;;		Nothing
  2630 ;; This function is called by:
  2631 ;;		_RunSPI32ControlService
  2632 ;; This function uses a non-reentrant model
  2633 ;;
  2634                           
  2635                           	psect	text9
  2636  0017BA                     __ptext9:
  2637                           	opt stack 0
  2638  0017BA                     _SPI32_SendByte:
  2639                           	opt stack 22
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;incstack = 0
  2643                           ;SPI32_SendByte@newByte stored from wreg
  2644  0017BA  0100               	movlb	0	; () banked
  2645  0017BC  6FBB               	movwf	SPI32_SendByte@newByte& (0+255),b
  2646                           
  2647                           ;SPI32_HW.c: 97: SSPBUF = newByte;
  2648  0017BE  C0BB  FFC9         	movff	SPI32_SendByte@newByte,4041	;volatile
  2649  0017C2  0012               	return		;funcret
  2650  0017C4                     __end_of_SPI32_SendByte:
  2651                           	opt stack 0
  2652                           tosu	equ	0xFFF
  2653                           tosh	equ	0xFFE
  2654                           tosl	equ	0xFFD
  2655                           pclath	equ	0xFFA
  2656                           tblptru	equ	0xFF8
  2657                           tblptrh	equ	0xFF7
  2658                           tblptrl	equ	0xFF6
  2659                           tablat	equ	0xFF5
  2660                           prodh	equ	0xFF4
  2661                           prodl	equ	0xFF3
  2662                           postinc0	equ	0xFEE
  2663                           wreg	equ	0xFE8
  2664                           postdec1	equ	0xFE5
  2665                           fsr1h	equ	0xFE2
  2666                           fsr1l	equ	0xFE1
  2667                           indf2	equ	0xFDF
  2668                           postinc2	equ	0xFDE
  2669                           postdec2	equ	0xFDD
  2670                           fsr2h	equ	0xFDA
  2671                           fsr2l	equ	0xFD9
  2672                           status	equ	0xFD8
  2673                           
  2674 ;; *************** function _GetNextFrame *****************
  2675 ;; Defined at:
  2676 ;;		line 248 in file "SPI32_ControlService.c"
  2677 ;; Parameters:    Size  Location     Type
  2678 ;;		None
  2679 ;; Auto vars:     Size  Location     Type
  2680 ;;		None
  2681 ;; Return value:  Size  Location     Type
  2682 ;;                  4    0[BANK0 ] unsigned long 
  2683 ;; Registers used:
  2684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2685 ;; Tracked objects:
  2686 ;;		On entry : 0/0
  2687 ;;		On exit  : 0/0
  2688 ;;		Unchanged: 0/0
  2689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2690 ;;      Params:         0       4       0       0
  2691 ;;      Locals:         0       0       0       0
  2692 ;;      Temps:          0       0       0       0
  2693 ;;      Totals:         0       4       0       0
  2694 ;;Total ram usage:        4 bytes
  2695 ;; Hardware stack levels used:    1
  2696 ;; Hardware stack levels required when called:    6
  2697 ;; This function calls:
  2698 ;;		Nothing
  2699 ;; This function is called by:
  2700 ;;		_RunSPI32ControlService
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           	psect	text10
  2705  001640                     __ptext10:
  2706                           	opt stack 0
  2707  001640                     _GetNextFrame:
  2708                           	opt stack 22
  2709                           
  2710                           ;SPI32_ControlService.c: 249: return *(FramePointer+FrameIndex);
  2711                           
  2712                           ;incstack = 0
  2713  001640  0100               	movlb	0	; () banked
  2714  001642  519A               	movf	_FrameIndex& (0+255),w,b
  2715  001644  0D04               	mullw	4
  2716  001646  50F3               	movf	prodl,w,c
  2717  001648  0100               	movlb	0	; () banked
  2718  00164A  258F               	addwf	_FramePointer& (0+255),w,b
  2719  00164C  6ED9               	movwf	fsr2l,c
  2720  00164E  50F4               	movf	prodh,w,c
  2721  001650  0100               	movlb	0	; () banked
  2722  001652  2190               	addwfc	(_FramePointer+1)& (0+255),w,b
  2723  001654  6EDA               	movwf	fsr2h,c
  2724  001656  CFDE F0BB          	movff	postinc2,?_GetNextFrame
  2725  00165A  CFDE F0BC          	movff	postinc2,?_GetNextFrame+1
  2726  00165E  CFDE F0BD          	movff	postinc2,?_GetNextFrame+2
  2727  001662  CFDE F0BE          	movff	postinc2,?_GetNextFrame+3
  2728  001666  0012               	return	
  2729  001668                     __end_of_GetNextFrame:
  2730                           	opt stack 0
  2731                           tosu	equ	0xFFF
  2732                           tosh	equ	0xFFE
  2733                           tosl	equ	0xFFD
  2734                           pclath	equ	0xFFA
  2735                           tblptru	equ	0xFF8
  2736                           tblptrh	equ	0xFF7
  2737                           tblptrl	equ	0xFF6
  2738                           tablat	equ	0xFF5
  2739                           prodh	equ	0xFF4
  2740                           prodl	equ	0xFF3
  2741                           postinc0	equ	0xFEE
  2742                           wreg	equ	0xFE8
  2743                           postdec1	equ	0xFE5
  2744                           fsr1h	equ	0xFE2
  2745                           fsr1l	equ	0xFE1
  2746                           indf2	equ	0xFDF
  2747                           postinc2	equ	0xFDE
  2748                           postdec2	equ	0xFDD
  2749                           fsr2h	equ	0xFDA
  2750                           fsr2l	equ	0xFD9
  2751                           status	equ	0xFD8
  2752                           
  2753 ;; *************** function _StopPattern *****************
  2754 ;; Defined at:
  2755 ;;		line 280 in file "Pattern_ControlService.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;		None
  2758 ;; Auto vars:     Size  Location     Type
  2759 ;;		None
  2760 ;; Return value:  Size  Location     Type
  2761 ;;                  1    wreg      void 
  2762 ;; Registers used:
  2763 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2764 ;; Tracked objects:
  2765 ;;		On entry : 0/0
  2766 ;;		On exit  : 0/0
  2767 ;;		Unchanged: 0/0
  2768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2769 ;;      Params:         0       0       0       0
  2770 ;;      Locals:         0       0       0       0
  2771 ;;      Temps:          0       0       0       0
  2772 ;;      Totals:         0       0       0       0
  2773 ;;Total ram usage:        0 bytes
  2774 ;; Hardware stack levels used:    1
  2775 ;; Hardware stack levels required when called:   12
  2776 ;; This function calls:
  2777 ;;		_DotStar_Off
  2778 ;;		_ES_Timer_StopTimer
  2779 ;;		_ResetPattern
  2780 ;; This function is called by:
  2781 ;;		_RunPatternControlService
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           	psect	text11
  2786  0016D6                     __ptext11:
  2787                           	opt stack 0
  2788  0016D6                     _StopPattern:
  2789                           	opt stack 16
  2790                           
  2791                           ;Pattern_ControlService.c: 281: PatternConfigs[0] = 0;
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;incstack = 0
  2795  0016D6  0E00               	movlw	0
  2796  0016D8  0100               	movlb	0	; () banked
  2797  0016DA  6FF2               	movwf	_PatternConfigs& (0+255),b
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;Pattern_ControlService.c: 283: ES_Timer_StopTimer(0);
  2801  0016DC  0E00               	movlw	0
  2802  0016DE  ECC9  F009         	call	_ES_Timer_StopTimer
  2803                           
  2804                           ;Pattern_ControlService.c: 285: DotStar_Off();
  2805  0016E2  EC79  F00B         	call	_DotStar_Off	;wreg free
  2806                           
  2807                           ;Pattern_ControlService.c: 287: ResetPattern();
  2808  0016E6  ECE2  F00B         	call	_ResetPattern	;wreg free
  2809                           
  2810                           ;Pattern_ControlService.c: 289: PatternConfigs[0] = 0;
  2811  0016EA  0E00               	movlw	0
  2812  0016EC  0100               	movlb	0	; () banked
  2813  0016EE  6FF2               	movwf	_PatternConfigs& (0+255),b
  2814                           
  2815                           ; BSR set to: 0
  2816  0016F0  0012               	return		;funcret
  2817  0016F2                     __end_of_StopPattern:
  2818                           	opt stack 0
  2819                           tosu	equ	0xFFF
  2820                           tosh	equ	0xFFE
  2821                           tosl	equ	0xFFD
  2822                           pclath	equ	0xFFA
  2823                           tblptru	equ	0xFF8
  2824                           tblptrh	equ	0xFF7
  2825                           tblptrl	equ	0xFF6
  2826                           tablat	equ	0xFF5
  2827                           prodh	equ	0xFF4
  2828                           prodl	equ	0xFF3
  2829                           postinc0	equ	0xFEE
  2830                           wreg	equ	0xFE8
  2831                           postdec1	equ	0xFE5
  2832                           fsr1h	equ	0xFE2
  2833                           fsr1l	equ	0xFE1
  2834                           indf2	equ	0xFDF
  2835                           postinc2	equ	0xFDE
  2836                           postdec2	equ	0xFDD
  2837                           fsr2h	equ	0xFDA
  2838                           fsr2l	equ	0xFD9
  2839                           status	equ	0xFD8
  2840                           
  2841 ;; *************** function _ResetPattern *****************
  2842 ;; Defined at:
  2843 ;;		line 120 in file "Pattern_RGBPatterns.c"
  2844 ;; Parameters:    Size  Location     Type
  2845 ;;		None
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;		None
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  1    wreg      void 
  2850 ;; Registers used:
  2851 ;;		wreg, status,2
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2857 ;;      Params:         0       0       0       0
  2858 ;;      Locals:         0       0       0       0
  2859 ;;      Temps:          0       0       0       0
  2860 ;;      Totals:         0       0       0       0
  2861 ;;Total ram usage:        0 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:    6
  2864 ;; This function calls:
  2865 ;;		Nothing
  2866 ;; This function is called by:
  2867 ;;		_StopPattern
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           	psect	text12
  2872  0017C4                     __ptext12:
  2873                           	opt stack 0
  2874  0017C4                     _ResetPattern:
  2875                           	opt stack 21
  2876                           
  2877                           ;Pattern_RGBPatterns.c: 122: PatternStepCounter=0;
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;incstack = 0
  2881  0017C4  0E00               	movlw	0
  2882  0017C6  0100               	movlb	0	; () banked
  2883  0017C8  6F9E               	movwf	_PatternStepCounter& (0+255),b
  2884                           
  2885                           ; BSR set to: 0
  2886  0017CA  0012               	return		;funcret
  2887  0017CC                     __end_of_ResetPattern:
  2888                           	opt stack 0
  2889                           tosu	equ	0xFFF
  2890                           tosh	equ	0xFFE
  2891                           tosl	equ	0xFFD
  2892                           pclath	equ	0xFFA
  2893                           tblptru	equ	0xFF8
  2894                           tblptrh	equ	0xFF7
  2895                           tblptrl	equ	0xFF6
  2896                           tablat	equ	0xFF5
  2897                           prodh	equ	0xFF4
  2898                           prodl	equ	0xFF3
  2899                           postinc0	equ	0xFEE
  2900                           wreg	equ	0xFE8
  2901                           postdec1	equ	0xFE5
  2902                           fsr1h	equ	0xFE2
  2903                           fsr1l	equ	0xFE1
  2904                           indf2	equ	0xFDF
  2905                           postinc2	equ	0xFDE
  2906                           postdec2	equ	0xFDD
  2907                           fsr2h	equ	0xFDA
  2908                           fsr2l	equ	0xFD9
  2909                           status	equ	0xFD8
  2910                           
  2911 ;; *************** function _DotStar_Off *****************
  2912 ;; Defined at:
  2913 ;;		line 73 in file "Pattern_DotStarLED.c"
  2914 ;; Parameters:    Size  Location     Type
  2915 ;;		None
  2916 ;; Auto vars:     Size  Location     Type
  2917 ;;		None
  2918 ;; Return value:  Size  Location     Type
  2919 ;;                  1    wreg      void 
  2920 ;; Registers used:
  2921 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2922 ;; Tracked objects:
  2923 ;;		On entry : 0/0
  2924 ;;		On exit  : 0/0
  2925 ;;		Unchanged: 0/0
  2926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2927 ;;      Params:         0       0       0       0
  2928 ;;      Locals:         0       0       0       0
  2929 ;;      Temps:          0       0       0       0
  2930 ;;      Totals:         0       0       0       0
  2931 ;;Total ram usage:        0 bytes
  2932 ;; Hardware stack levels used:    1
  2933 ;; Hardware stack levels required when called:   11
  2934 ;; This function calls:
  2935 ;;		_SPI32_TransmitFrames
  2936 ;; This function is called by:
  2937 ;;		_StopPattern
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           	psect	text13
  2942  0016F2                     __ptext13:
  2943                           	opt stack 0
  2944  0016F2                     _DotStar_Off:
  2945                           	opt stack 16
  2946                           
  2947                           ;Pattern_DotStarLED.c: 75: SPI32_TransmitFrames(OffFrames,Length+2);
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;incstack = 0
  2951  0016F2  0E00               	movlw	low _OffFrames
  2952  0016F4  0100               	movlb	0	; () banked
  2953  0016F6  6FDB               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  2954  0016F8  0E01               	movlw	high _OffFrames
  2955  0016FA  0100               	movlb	0	; () banked
  2956  0016FC  6FDC               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  2957  0016FE  0100               	movlb	0	; () banked
  2958  001700  519B               	movf	_Length& (0+255),w,b
  2959  001702  0F02               	addlw	2
  2960  001704  0100               	movlb	0	; () banked
  2961  001706  6FDD               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  2962  001708  EC07  F00B         	call	_SPI32_TransmitFrames	;wreg free
  2963  00170C  0012               	return		;funcret
  2964  00170E                     __end_of_DotStar_Off:
  2965                           	opt stack 0
  2966                           tosu	equ	0xFFF
  2967                           tosh	equ	0xFFE
  2968                           tosl	equ	0xFFD
  2969                           pclath	equ	0xFFA
  2970                           tblptru	equ	0xFF8
  2971                           tblptrh	equ	0xFF7
  2972                           tblptrl	equ	0xFF6
  2973                           tablat	equ	0xFF5
  2974                           prodh	equ	0xFF4
  2975                           prodl	equ	0xFF3
  2976                           postinc0	equ	0xFEE
  2977                           wreg	equ	0xFE8
  2978                           postdec1	equ	0xFE5
  2979                           fsr1h	equ	0xFE2
  2980                           fsr1l	equ	0xFE1
  2981                           indf2	equ	0xFDF
  2982                           postinc2	equ	0xFDE
  2983                           postdec2	equ	0xFDD
  2984                           fsr2h	equ	0xFDA
  2985                           fsr2l	equ	0xFD9
  2986                           status	equ	0xFD8
  2987                           
  2988 ;; *************** function _ShowPattern *****************
  2989 ;; Defined at:
  2990 ;;		line 270 in file "Pattern_ControlService.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;		None
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;		None
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      void 
  2997 ;; Registers used:
  2998 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3004 ;;      Params:         0       0       0       0
  3005 ;;      Locals:         0       0       0       0
  3006 ;;      Temps:          0       0       0       0
  3007 ;;      Totals:         0       0       0       0
  3008 ;;Total ram usage:        0 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:   12
  3011 ;; This function calls:
  3012 ;;		_DotStar_Show
  3013 ;;		_ES_Timer_InitTimer
  3014 ;;		_UpdatePattern
  3015 ;; This function is called by:
  3016 ;;		_RunPatternControlService
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           	psect	text14
  3021  001668                     __ptext14:
  3022                           	opt stack 0
  3023  001668                     _ShowPattern:
  3024                           	opt stack 16
  3025                           
  3026                           ;Pattern_ControlService.c: 272: ES_Timer_InitTimer(0,PatternConfigs[4]);
  3027                           
  3028                           ;incstack = 0
  3029  001668  C0F6  F0BB         	movff	_PatternConfigs+4,ES_Timer_InitTimer@NewTime
  3030  00166C  0100               	movlb	0	; () banked
  3031  00166E  6BBC               	clrf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  3032  001670  0E00               	movlw	0
  3033  001672  EC7D  F008         	call	_ES_Timer_InitTimer
  3034                           
  3035                           ;Pattern_ControlService.c: 274: DotStar_Show(UpdatePattern());
  3036  001676  ECDF  F001         	call	_UpdatePattern	;wreg free
  3037  00167A  C0C7  F0E1         	movff	?_UpdatePattern,DotStar_Show@pixelPointer
  3038  00167E  C0C8  F0E2         	movff	?_UpdatePattern+1,DotStar_Show@pixelPointer+1
  3039  001682  EC5C  F00A         	call	_DotStar_Show	;wreg free
  3040                           
  3041                           ;Pattern_ControlService.c: 276: PatternConfigs[0] = 1;
  3042  001686  0E01               	movlw	1
  3043  001688  0100               	movlb	0	; () banked
  3044  00168A  6FF2               	movwf	_PatternConfigs& (0+255),b
  3045                           
  3046                           ; BSR set to: 0
  3047  00168C  0012               	return		;funcret
  3048  00168E                     __end_of_ShowPattern:
  3049                           	opt stack 0
  3050                           tosu	equ	0xFFF
  3051                           tosh	equ	0xFFE
  3052                           tosl	equ	0xFFD
  3053                           pclath	equ	0xFFA
  3054                           tblptru	equ	0xFF8
  3055                           tblptrh	equ	0xFF7
  3056                           tblptrl	equ	0xFF6
  3057                           tablat	equ	0xFF5
  3058                           prodh	equ	0xFF4
  3059                           prodl	equ	0xFF3
  3060                           postinc0	equ	0xFEE
  3061                           wreg	equ	0xFE8
  3062                           postdec1	equ	0xFE5
  3063                           fsr1h	equ	0xFE2
  3064                           fsr1l	equ	0xFE1
  3065                           indf2	equ	0xFDF
  3066                           postinc2	equ	0xFDE
  3067                           postdec2	equ	0xFDD
  3068                           fsr2h	equ	0xFDA
  3069                           fsr2l	equ	0xFD9
  3070                           status	equ	0xFD8
  3071                           
  3072 ;; *************** function _UpdatePattern *****************
  3073 ;; Defined at:
  3074 ;;		line 76 in file "Pattern_RGBPatterns.c"
  3075 ;; Parameters:    Size  Location     Type
  3076 ;;		None
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;  i               1   20[BANK0 ] unsigned char 
  3079 ;;  patternID       1   19[BANK0 ] unsigned char 
  3080 ;;  brightness      1   18[BANK0 ] unsigned char 
  3081 ;; Return value:  Size  Location     Type
  3082 ;;                  2   12[BANK0 ] PTR unsigned long 
  3083 ;; Registers used:
  3084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3090 ;;      Params:         0       2       0       0
  3091 ;;      Locals:         0       3       0       0
  3092 ;;      Temps:          0       4       0       0
  3093 ;;      Totals:         0       9       0       0
  3094 ;;Total ram usage:        9 bytes
  3095 ;; Hardware stack levels used:    1
  3096 ;; Hardware stack levels required when called:    7
  3097 ;; This function calls:
  3098 ;;		___lbmod
  3099 ;;		___llmod
  3100 ;;		___lmul
  3101 ;; This function is called by:
  3102 ;;		_ShowPattern
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           	psect	text15
  3107  0003BE                     __ptext15:
  3108                           	opt stack 0
  3109  0003BE                     _UpdatePattern:
  3110                           	opt stack 20
  3111                           
  3112                           ;Pattern_RGBPatterns.c: 78: uint8_t patternID = PatternConfigs[1];
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;incstack = 0
  3116  0003BE  0100               	movlb	0	; () banked
  3117  0003C0  EE20 F001          	lfsr	2,1
  3118  0003C4  518D               	movf	Pattern_RGBPatterns@PatternConfigs& (0+255),w,b
  3119  0003C6  26D9               	addwf	fsr2l,f,c
  3120  0003C8  518E               	movf	(Pattern_RGBPatterns@PatternConfigs+1)& (0+255),w,b
  3121  0003CA  22DA               	addwfc	fsr2h,f,c
  3122  0003CC  50DF               	movf	indf2,w,c
  3123  0003CE  0100               	movlb	0	; () banked
  3124  0003D0  6FCE               	movwf	UpdatePattern@patternID& (0+255),b
  3125                           
  3126                           ;Pattern_RGBPatterns.c: 79: uint8_t brightness = PatternConfigs[2];
  3127  0003D2  0100               	movlb	0	; () banked
  3128  0003D4  EE20 F002          	lfsr	2,2
  3129  0003D8  518D               	movf	Pattern_RGBPatterns@PatternConfigs& (0+255),w,b
  3130  0003DA  26D9               	addwf	fsr2l,f,c
  3131  0003DC  518E               	movf	(Pattern_RGBPatterns@PatternConfigs+1)& (0+255),w,b
  3132  0003DE  22DA               	addwfc	fsr2h,f,c
  3133  0003E0  50DF               	movf	indf2,w,c
  3134  0003E2  0100               	movlb	0	; () banked
  3135  0003E4  6FCD               	movwf	UpdatePattern@brightness& (0+255),b
  3136                           
  3137                           ;Pattern_RGBPatterns.c: 82: switch(patternID){
  3138  0003E6  D076               	goto	l2254
  3139  0003E8                     l2238:
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;Pattern_RGBPatterns.c: 107: for(uint8_t i=0;i<Length;i++){
  3143  0003E8  0E00               	movlw	0
  3144  0003EA  0100               	movlb	0	; () banked
  3145  0003EC  6FCF               	movwf	UpdatePattern@i& (0+255),b
  3146  0003EE  D03F               	goto	l2244
  3147  0003F0                     l2240:
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;Pattern_RGBPatterns.c: 108: PixelPattern[i] = (0xFF000000 | (i == PatternStepCounter)*T
      +                          estColor);
  3151  0003F0  0100               	movlb	0	; () banked
  3152  0003F2  519E               	movf	_PatternStepCounter& (0+255),w,b
  3153  0003F4  0100               	movlb	0	; () banked
  3154  0003F6  19CF               	xorwf	UpdatePattern@i& (0+255),w,b
  3155  0003F8  A4D8               	btfss	status,2,c
  3156  0003FA  D002               	goto	u1310
  3157  0003FC  0E01               	movlw	1
  3158  0003FE  D001               	goto	u1320
  3159  000400                     u1310:
  3160  000400  0E00               	movlw	0
  3161  000402                     u1320:
  3162  000402  0100               	movlb	0	; () banked
  3163  000404  6FBB               	movwf	___lmul@multiplier& (0+255),b
  3164  000406  6BBC               	clrf	(___lmul@multiplier+1)& (0+255),b
  3165  000408  6BBD               	clrf	(___lmul@multiplier+2)& (0+255),b
  3166  00040A  6BBE               	clrf	(___lmul@multiplier+3)& (0+255),b
  3167  00040C  C084  F0BF         	movff	_TestColor,___lmul@multiplicand
  3168  000410  C085  F0C0         	movff	_TestColor+1,___lmul@multiplicand+1
  3169  000414  C086  F0C1         	movff	_TestColor+2,___lmul@multiplicand+2
  3170  000418  C087  F0C2         	movff	_TestColor+3,___lmul@multiplicand+3
  3171  00041C  ECBD  F008         	call	___lmul	;wreg free
  3172  000420  0E00               	movlw	0
  3173  000422  0100               	movlb	0	; () banked
  3174  000424  11BB               	iorwf	?___lmul& (0+255),w,b
  3175  000426  0100               	movlb	0	; () banked
  3176  000428  6FC9               	movwf	??_UpdatePattern& (0+255),b
  3177  00042A  0E00               	movlw	0
  3178  00042C  0100               	movlb	0	; () banked
  3179  00042E  11BC               	iorwf	(?___lmul+1)& (0+255),w,b
  3180  000430  0100               	movlb	0	; () banked
  3181  000432  6FCA               	movwf	(??_UpdatePattern+1)& (0+255),b
  3182  000434  0E00               	movlw	0
  3183  000436  0100               	movlb	0	; () banked
  3184  000438  11BD               	iorwf	(?___lmul+2)& (0+255),w,b
  3185  00043A  0100               	movlb	0	; () banked
  3186  00043C  6FCB               	movwf	(??_UpdatePattern+2)& (0+255),b
  3187  00043E  0EFF               	movlw	255
  3188  000440  0100               	movlb	0	; () banked
  3189  000442  11BE               	iorwf	(?___lmul+3)& (0+255),w,b
  3190  000444  0100               	movlb	0	; () banked
  3191  000446  6FCC               	movwf	(??_UpdatePattern+3)& (0+255),b
  3192  000448  0100               	movlb	0	; () banked
  3193  00044A  51CF               	movf	UpdatePattern@i& (0+255),w,b
  3194  00044C  0D04               	mullw	4
  3195  00044E  0E00               	movlw	low _PixelPattern
  3196  000450  24F3               	addwf	prodl,w,c
  3197  000452  6ED9               	movwf	fsr2l,c
  3198  000454  0E02               	movlw	high _PixelPattern
  3199  000456  20F4               	addwfc	prodh,w,c
  3200  000458  6EDA               	movwf	fsr2h,c
  3201  00045A  C0C9  FFDE         	movff	??_UpdatePattern,postinc2
  3202  00045E  C0CA  FFDE         	movff	??_UpdatePattern+1,postinc2
  3203  000462  C0CB  FFDE         	movff	??_UpdatePattern+2,postinc2
  3204  000466  C0CC  FFDE         	movff	??_UpdatePattern+3,postinc2
  3205                           
  3206                           ; BSR set to: 0
  3207  00046A  0100               	movlb	0	; () banked
  3208  00046C  2BCF               	incf	UpdatePattern@i& (0+255),f,b
  3209  00046E                     l2244:
  3210                           
  3211                           ; BSR set to: 0
  3212  00046E  0100               	movlb	0	; () banked
  3213  000470  5196               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3214  000472  0100               	movlb	0	; () banked
  3215  000474  5DCF               	subwf	UpdatePattern@i& (0+255),w,b
  3216  000476  A0D8               	btfss	status,0,c
  3217  000478  D7BB               	goto	l2240
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;Pattern_RGBPatterns.c: 109: }
  3221                           ;Pattern_RGBPatterns.c: 110: if(PatternStepCounter++%Length == 0){
  3222                           
  3223                           ; BSR set to: 0
  3224  00047A  C096  F0BB         	movff	Pattern_RGBPatterns@Length,___lbmod@divisor
  3225  00047E  0100               	movlb	0	; () banked
  3226  000480  2B9E               	incf	_PatternStepCounter& (0+255),f,b
  3227  000482  059E               	decf	_PatternStepCounter& (0+255),w,b
  3228  000484  EC3A  F00A         	call	___lbmod
  3229  000488  0900               	iorlw	0
  3230  00048A  A4D8               	btfss	status,2,c
  3231  00048C  D037               	goto	l2256
  3232                           
  3233                           ;Pattern_RGBPatterns.c: 111: TestColor = TestColor++%13;
  3234  00048E  C084  F0BB         	movff	_TestColor,___llmod@dividend
  3235  000492  C085  F0BC         	movff	_TestColor+1,___llmod@dividend+1
  3236  000496  C086  F0BD         	movff	_TestColor+2,___llmod@dividend+2
  3237  00049A  C087  F0BE         	movff	_TestColor+3,___llmod@dividend+3
  3238  00049E  0E0D               	movlw	13
  3239  0004A0  0100               	movlb	0	; () banked
  3240  0004A2  6FBF               	movwf	___llmod@divisor& (0+255),b
  3241  0004A4  0E00               	movlw	0
  3242  0004A6  6FC0               	movwf	(___llmod@divisor+1)& (0+255),b
  3243  0004A8  0E00               	movlw	0
  3244  0004AA  6FC1               	movwf	(___llmod@divisor+2)& (0+255),b
  3245  0004AC  0E00               	movlw	0
  3246  0004AE  6FC2               	movwf	(___llmod@divisor+3)& (0+255),b
  3247  0004B0  EC9D  F007         	call	___llmod	;wreg free
  3248  0004B4  C0BB  F084         	movff	?___llmod,_TestColor
  3249  0004B8  C0BC  F085         	movff	?___llmod+1,_TestColor+1
  3250  0004BC  C0BD  F086         	movff	?___llmod+2,_TestColor+2
  3251  0004C0  C0BE  F087         	movff	?___llmod+3,_TestColor+3
  3252  0004C4  0E01               	movlw	1
  3253  0004C6  0100               	movlb	0	; () banked
  3254  0004C8  2784               	addwf	_TestColor& (0+255),f,b
  3255  0004CA  0E00               	movlw	0
  3256  0004CC  2385               	addwfc	(_TestColor+1)& (0+255),f,b
  3257  0004CE  2386               	addwfc	(_TestColor+2)& (0+255),f,b
  3258  0004D0  2387               	addwfc	(_TestColor+3)& (0+255),f,b
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;Pattern_RGBPatterns.c: 115: }
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;Pattern_RGBPatterns.c: 112: }
  3265                           ;Pattern_RGBPatterns.c: 113: break;
  3266  0004D2  D014               	goto	l2256
  3267  0004D4                     l2254:
  3268                           
  3269                           ; BSR set to: 0
  3270  0004D4  0100               	movlb	0	; () banked
  3271  0004D6  51CE               	movf	UpdatePattern@patternID& (0+255),w,b
  3272                           
  3273                           ; Switch size 1, requested type "space"
  3274                           ; Number of cases is 6, Range of values is 0 to 255
  3275                           ; switch strategies available:
  3276                           ; Name         Instructions Cycles
  3277                           ; simple_byte           19    10 (average)
  3278                           ;	Chosen strategy is simple_byte
  3279  0004D8  0A00               	xorlw	0	; case 0
  3280  0004DA  B4D8               	btfsc	status,2,c
  3281  0004DC  D00F               	goto	l2256
  3282  0004DE  0A01               	xorlw	1	; case 1
  3283  0004E0  B4D8               	btfsc	status,2,c
  3284  0004E2  D00C               	goto	l2256
  3285  0004E4  0A03               	xorlw	3	; case 2
  3286  0004E6  B4D8               	btfsc	status,2,c
  3287  0004E8  D009               	goto	l2256
  3288  0004EA  0A01               	xorlw	1	; case 3
  3289  0004EC  B4D8               	btfsc	status,2,c
  3290  0004EE  D006               	goto	l2256
  3291  0004F0  0A07               	xorlw	7	; case 4
  3292  0004F2  B4D8               	btfsc	status,2,c
  3293  0004F4  D003               	goto	l2256
  3294  0004F6  0AFB               	xorlw	251	; case 255
  3295  0004F8  B4D8               	btfsc	status,2,c
  3296  0004FA  D776               	goto	l2238
  3297  0004FC                     l2256:
  3298                           
  3299                           ;Pattern_RGBPatterns.c: 117: return PixelPattern;
  3300  0004FC  0E00               	movlw	low _PixelPattern
  3301  0004FE  0100               	movlb	0	; () banked
  3302  000500  6FC7               	movwf	?_UpdatePattern& (0+255),b
  3303  000502  0E02               	movlw	high _PixelPattern
  3304  000504  0100               	movlb	0	; () banked
  3305  000506  6FC8               	movwf	(?_UpdatePattern+1)& (0+255),b
  3306  000508  0012               	return	
  3307  00050A                     __end_of_UpdatePattern:
  3308                           	opt stack 0
  3309                           tosu	equ	0xFFF
  3310                           tosh	equ	0xFFE
  3311                           tosl	equ	0xFFD
  3312                           pclath	equ	0xFFA
  3313                           tblptru	equ	0xFF8
  3314                           tblptrh	equ	0xFF7
  3315                           tblptrl	equ	0xFF6
  3316                           tablat	equ	0xFF5
  3317                           prodh	equ	0xFF4
  3318                           prodl	equ	0xFF3
  3319                           postinc0	equ	0xFEE
  3320                           wreg	equ	0xFE8
  3321                           postdec1	equ	0xFE5
  3322                           fsr1h	equ	0xFE2
  3323                           fsr1l	equ	0xFE1
  3324                           indf2	equ	0xFDF
  3325                           postinc2	equ	0xFDE
  3326                           postdec2	equ	0xFDD
  3327                           fsr2h	equ	0xFDA
  3328                           fsr2l	equ	0xFD9
  3329                           status	equ	0xFD8
  3330                           
  3331 ;; *************** function ___lmul *****************
  3332 ;; Defined at:
  3333 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3336 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;  product         4    8[BANK0 ] unsigned long 
  3339 ;; Return value:  Size  Location     Type
  3340 ;;                  4    0[BANK0 ] unsigned long 
  3341 ;; Registers used:
  3342 ;;		wreg, status,2, status,0
  3343 ;; Tracked objects:
  3344 ;;		On entry : 0/0
  3345 ;;		On exit  : 0/0
  3346 ;;		Unchanged: 0/0
  3347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3348 ;;      Params:         0       8       0       0
  3349 ;;      Locals:         0       4       0       0
  3350 ;;      Temps:          0       0       0       0
  3351 ;;      Totals:         0      12       0       0
  3352 ;;Total ram usage:       12 bytes
  3353 ;; Hardware stack levels used:    1
  3354 ;; Hardware stack levels required when called:    6
  3355 ;; This function calls:
  3356 ;;		Nothing
  3357 ;; This function is called by:
  3358 ;;		_UpdatePattern
  3359 ;; This function uses a non-reentrant model
  3360 ;;
  3361                           
  3362                           	psect	text16
  3363  00117A                     __ptext16:
  3364                           	opt stack 0
  3365  00117A                     ___lmul:
  3366                           	opt stack 20
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;incstack = 0
  3370  00117A  0E00               	movlw	0
  3371  00117C  0100               	movlb	0	; () banked
  3372  00117E  6FC3               	movwf	___lmul@product& (0+255),b
  3373  001180  0E00               	movlw	0
  3374  001182  6FC4               	movwf	(___lmul@product+1)& (0+255),b
  3375  001184  0E00               	movlw	0
  3376  001186  6FC5               	movwf	(___lmul@product+2)& (0+255),b
  3377  001188  0E00               	movlw	0
  3378  00118A  6FC6               	movwf	(___lmul@product+3)& (0+255),b
  3379  00118C                     l2110:
  3380                           
  3381                           ; BSR set to: 0
  3382  00118C  0100               	movlb	0	; () banked
  3383  00118E  A1BB               	btfss	___lmul@multiplier& (0+255),0,b
  3384  001190  D010               	goto	l2114
  3385                           
  3386                           ; BSR set to: 0
  3387  001192  0100               	movlb	0	; () banked
  3388  001194  51BF               	movf	___lmul@multiplicand& (0+255),w,b
  3389  001196  0100               	movlb	0	; () banked
  3390  001198  27C3               	addwf	___lmul@product& (0+255),f,b
  3391  00119A  0100               	movlb	0	; () banked
  3392  00119C  51C0               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  3393  00119E  0100               	movlb	0	; () banked
  3394  0011A0  23C4               	addwfc	(___lmul@product+1)& (0+255),f,b
  3395  0011A2  0100               	movlb	0	; () banked
  3396  0011A4  51C1               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  3397  0011A6  0100               	movlb	0	; () banked
  3398  0011A8  23C5               	addwfc	(___lmul@product+2)& (0+255),f,b
  3399  0011AA  0100               	movlb	0	; () banked
  3400  0011AC  51C2               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  3401  0011AE  0100               	movlb	0	; () banked
  3402  0011B0  23C6               	addwfc	(___lmul@product+3)& (0+255),f,b
  3403  0011B2                     l2114:
  3404                           
  3405                           ; BSR set to: 0
  3406  0011B2  0100               	movlb	0	; () banked
  3407  0011B4  90D8               	bcf	status,0,c
  3408  0011B6  37BF               	rlcf	___lmul@multiplicand& (0+255),f,b
  3409  0011B8  37C0               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  3410  0011BA  37C1               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  3411  0011BC  37C2               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  3412                           
  3413                           ; BSR set to: 0
  3414  0011BE  0100               	movlb	0	; () banked
  3415  0011C0  90D8               	bcf	status,0,c
  3416  0011C2  33BE               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  3417  0011C4  33BD               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  3418  0011C6  33BC               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  3419  0011C8  33BB               	rrcf	___lmul@multiplier& (0+255),f,b
  3420  0011CA  0100               	movlb	0	; () banked
  3421  0011CC  51BB               	movf	___lmul@multiplier& (0+255),w,b
  3422  0011CE  0100               	movlb	0	; () banked
  3423  0011D0  11BC               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  3424  0011D2  0100               	movlb	0	; () banked
  3425  0011D4  11BD               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  3426  0011D6  0100               	movlb	0	; () banked
  3427  0011D8  11BE               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  3428  0011DA  A4D8               	btfss	status,2,c
  3429  0011DC  D7D7               	goto	l2110
  3430                           
  3431                           ; BSR set to: 0
  3432  0011DE  C0C3  F0BB         	movff	___lmul@product,?___lmul
  3433  0011E2  C0C4  F0BC         	movff	___lmul@product+1,?___lmul+1
  3434  0011E6  C0C5  F0BD         	movff	___lmul@product+2,?___lmul+2
  3435  0011EA  C0C6  F0BE         	movff	___lmul@product+3,?___lmul+3
  3436                           
  3437                           ; BSR set to: 0
  3438  0011EE  0012               	return		;funcret
  3439  0011F0                     __end_of___lmul:
  3440                           	opt stack 0
  3441                           tosu	equ	0xFFF
  3442                           tosh	equ	0xFFE
  3443                           tosl	equ	0xFFD
  3444                           pclath	equ	0xFFA
  3445                           tblptru	equ	0xFF8
  3446                           tblptrh	equ	0xFF7
  3447                           tblptrl	equ	0xFF6
  3448                           tablat	equ	0xFF5
  3449                           prodh	equ	0xFF4
  3450                           prodl	equ	0xFF3
  3451                           postinc0	equ	0xFEE
  3452                           wreg	equ	0xFE8
  3453                           postdec1	equ	0xFE5
  3454                           fsr1h	equ	0xFE2
  3455                           fsr1l	equ	0xFE1
  3456                           indf2	equ	0xFDF
  3457                           postinc2	equ	0xFDE
  3458                           postdec2	equ	0xFDD
  3459                           fsr2h	equ	0xFDA
  3460                           fsr2l	equ	0xFD9
  3461                           status	equ	0xFD8
  3462                           
  3463 ;; *************** function ___llmod *****************
  3464 ;; Defined at:
  3465 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;  dividend        4    0[BANK0 ] unsigned long 
  3468 ;;  divisor         4    4[BANK0 ] unsigned long 
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;  counter         1    8[BANK0 ] unsigned char 
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  4    0[BANK0 ] unsigned long 
  3473 ;; Registers used:
  3474 ;;		wreg, status,2, status,0
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3480 ;;      Params:         0       8       0       0
  3481 ;;      Locals:         0       1       0       0
  3482 ;;      Temps:          0       0       0       0
  3483 ;;      Totals:         0       9       0       0
  3484 ;;Total ram usage:        9 bytes
  3485 ;; Hardware stack levels used:    1
  3486 ;; Hardware stack levels required when called:    6
  3487 ;; This function calls:
  3488 ;;		Nothing
  3489 ;; This function is called by:
  3490 ;;		_UpdatePattern
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           	psect	text17
  3495  000F3A                     __ptext17:
  3496                           	opt stack 0
  3497  000F3A                     ___llmod:
  3498                           	opt stack 20
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;incstack = 0
  3502  000F3A  0100               	movlb	0	; () banked
  3503  000F3C  51BF               	movf	___llmod@divisor& (0+255),w,b
  3504  000F3E  0100               	movlb	0	; () banked
  3505  000F40  11C0               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  3506  000F42  0100               	movlb	0	; () banked
  3507  000F44  11C1               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  3508  000F46  0100               	movlb	0	; () banked
  3509  000F48  11C2               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  3510  000F4A  B4D8               	btfsc	status,2,c
  3511  000F4C  D03A               	goto	l901
  3512                           
  3513                           ; BSR set to: 0
  3514  000F4E  0E01               	movlw	1
  3515  000F50  0100               	movlb	0	; () banked
  3516  000F52  6FC3               	movwf	___llmod@counter& (0+255),b
  3517  000F54  D008               	goto	l2140
  3518  000F56                     l2138:
  3519                           
  3520                           ; BSR set to: 0
  3521  000F56  0100               	movlb	0	; () banked
  3522  000F58  90D8               	bcf	status,0,c
  3523  000F5A  37BF               	rlcf	___llmod@divisor& (0+255),f,b
  3524  000F5C  37C0               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  3525  000F5E  37C1               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  3526  000F60  37C2               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  3527  000F62  0100               	movlb	0	; () banked
  3528  000F64  2BC3               	incf	___llmod@counter& (0+255),f,b
  3529  000F66                     l2140:
  3530                           
  3531                           ; BSR set to: 0
  3532  000F66  0100               	movlb	0	; () banked
  3533  000F68  AFC2               	btfss	(___llmod@divisor+3)& (0+255),7,b
  3534  000F6A  D7F5               	goto	l2138
  3535  000F6C                     l2142:
  3536                           
  3537                           ; BSR set to: 0
  3538  000F6C  0100               	movlb	0	; () banked
  3539  000F6E  51BF               	movf	___llmod@divisor& (0+255),w,b
  3540  000F70  0100               	movlb	0	; () banked
  3541  000F72  5DBB               	subwf	___llmod@dividend& (0+255),w,b
  3542  000F74  0100               	movlb	0	; () banked
  3543  000F76  51C0               	movf	(___llmod@divisor+1)& (0+255),w,b
  3544  000F78  0100               	movlb	0	; () banked
  3545  000F7A  59BC               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  3546  000F7C  0100               	movlb	0	; () banked
  3547  000F7E  51C1               	movf	(___llmod@divisor+2)& (0+255),w,b
  3548  000F80  0100               	movlb	0	; () banked
  3549  000F82  59BD               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  3550  000F84  0100               	movlb	0	; () banked
  3551  000F86  51C2               	movf	(___llmod@divisor+3)& (0+255),w,b
  3552  000F88  0100               	movlb	0	; () banked
  3553  000F8A  59BE               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  3554  000F8C  A0D8               	btfss	status,0,c
  3555  000F8E  D010               	goto	l2146
  3556                           
  3557                           ; BSR set to: 0
  3558  000F90  0100               	movlb	0	; () banked
  3559  000F92  51BF               	movf	___llmod@divisor& (0+255),w,b
  3560  000F94  0100               	movlb	0	; () banked
  3561  000F96  5FBB               	subwf	___llmod@dividend& (0+255),f,b
  3562  000F98  0100               	movlb	0	; () banked
  3563  000F9A  51C0               	movf	(___llmod@divisor+1)& (0+255),w,b
  3564  000F9C  0100               	movlb	0	; () banked
  3565  000F9E  5BBC               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  3566  000FA0  0100               	movlb	0	; () banked
  3567  000FA2  51C1               	movf	(___llmod@divisor+2)& (0+255),w,b
  3568  000FA4  0100               	movlb	0	; () banked
  3569  000FA6  5BBD               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  3570  000FA8  0100               	movlb	0	; () banked
  3571  000FAA  51C2               	movf	(___llmod@divisor+3)& (0+255),w,b
  3572  000FAC  0100               	movlb	0	; () banked
  3573  000FAE  5BBE               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  3574  000FB0                     l2146:
  3575                           
  3576                           ; BSR set to: 0
  3577  000FB0  0100               	movlb	0	; () banked
  3578  000FB2  90D8               	bcf	status,0,c
  3579  000FB4  33C2               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  3580  000FB6  33C1               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  3581  000FB8  33C0               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  3582  000FBA  33BF               	rrcf	___llmod@divisor& (0+255),f,b
  3583                           
  3584                           ; BSR set to: 0
  3585  000FBC  0100               	movlb	0	; () banked
  3586  000FBE  2FC3               	decfsz	___llmod@counter& (0+255),f,b
  3587  000FC0  D7D5               	goto	l2142
  3588  000FC2                     l901:
  3589                           
  3590                           ; BSR set to: 0
  3591  000FC2  C0BB  F0BB         	movff	___llmod@dividend,?___llmod
  3592  000FC6  C0BC  F0BC         	movff	___llmod@dividend+1,?___llmod+1
  3593  000FCA  C0BD  F0BD         	movff	___llmod@dividend+2,?___llmod+2
  3594  000FCE  C0BE  F0BE         	movff	___llmod@dividend+3,?___llmod+3
  3595                           
  3596                           ; BSR set to: 0
  3597  000FD2  0012               	return		;funcret
  3598  000FD4                     __end_of___llmod:
  3599                           	opt stack 0
  3600                           tosu	equ	0xFFF
  3601                           tosh	equ	0xFFE
  3602                           tosl	equ	0xFFD
  3603                           pclath	equ	0xFFA
  3604                           tblptru	equ	0xFF8
  3605                           tblptrh	equ	0xFF7
  3606                           tblptrl	equ	0xFF6
  3607                           tablat	equ	0xFF5
  3608                           prodh	equ	0xFF4
  3609                           prodl	equ	0xFF3
  3610                           postinc0	equ	0xFEE
  3611                           wreg	equ	0xFE8
  3612                           postdec1	equ	0xFE5
  3613                           fsr1h	equ	0xFE2
  3614                           fsr1l	equ	0xFE1
  3615                           indf2	equ	0xFDF
  3616                           postinc2	equ	0xFDE
  3617                           postdec2	equ	0xFDD
  3618                           fsr2h	equ	0xFDA
  3619                           fsr2l	equ	0xFD9
  3620                           status	equ	0xFD8
  3621                           
  3622 ;; *************** function _ES_Timer_InitTimer *****************
  3623 ;; Defined at:
  3624 ;;		line 229 in file "ES_Timers.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;  Num             1    wreg     unsigned char 
  3627 ;;  NewTime         2    0[BANK0 ] unsigned int 
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;  Num             1    4[BANK0 ] unsigned char 
  3630 ;; Return value:  Size  Location     Type
  3631 ;;                  1    wreg      enum E15473
  3632 ;; Registers used:
  3633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3634 ;; Tracked objects:
  3635 ;;		On entry : 0/0
  3636 ;;		On exit  : 0/0
  3637 ;;		Unchanged: 0/0
  3638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3639 ;;      Params:         0       2       0       0
  3640 ;;      Locals:         0       1       0       0
  3641 ;;      Temps:          0       2       0       0
  3642 ;;      Totals:         0       5       0       0
  3643 ;;Total ram usage:        5 bytes
  3644 ;; Hardware stack levels used:    1
  3645 ;; Hardware stack levels required when called:    6
  3646 ;; This function calls:
  3647 ;;		Nothing
  3648 ;; This function is called by:
  3649 ;;		_ShowPattern
  3650 ;; This function uses a non-reentrant model
  3651 ;;
  3652                           
  3653                           	psect	text18
  3654  0010FA                     __ptext18:
  3655                           	opt stack 0
  3656  0010FA                     _ES_Timer_InitTimer:
  3657                           	opt stack 21
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;incstack = 0
  3661                           ;ES_Timer_InitTimer@Num stored from wreg
  3662  0010FA  0100               	movlb	0	; () banked
  3663  0010FC  6FBF               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  3664                           
  3665                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  3666                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  3667                           ;ES_Timers.c: 236: (NewTime == 0) )
  3668  0010FE  0E10               	movlw	16
  3669  001100  0100               	movlb	0	; () banked
  3670  001102  61BF               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  3671  001104  0012               	return	
  3672                           
  3673                           ; BSR set to: 0
  3674  001106  0100               	movlb	0	; () banked
  3675  001108  51BF               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  3676  00110A  0D02               	mullw	2
  3677  00110C  0E21               	movlw	low _Timer2PostFunc
  3678  00110E  24F3               	addwf	prodl,w,c
  3679  001110  6EF6               	movwf	tblptrl,c
  3680  001112  0E03               	movlw	high _Timer2PostFunc
  3681  001114  20F4               	addwfc	prodh,w,c
  3682  001116  6EF7               	movwf	tblptrh,c
  3683  001118                     	if	0	;There are less than 3 active tblptr bytes
  3684  001118                     	endif
  3685  001118  0009               	tblrd		*+
  3686  00111A  50F5               	movf	tablat,w,c
  3687  00111C  0009               	tblrd		*+
  3688  00111E  10F5               	iorwf	tablat,w,c
  3689  001120  B4D8               	btfsc	status,2,c
  3690  001122  0012               	return	
  3691                           
  3692                           ; BSR set to: 0
  3693  001124  0100               	movlb	0	; () banked
  3694  001126  51BB               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  3695  001128  0100               	movlb	0	; () banked
  3696  00112A  11BC               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  3697  00112C  B4D8               	btfsc	status,2,c
  3698  00112E  0012               	return	
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  3702                           
  3703                           ; BSR set to: 0
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  3707                           ;	Return value of _ES_Timer_InitTimer is never used
  3708  001130  0100               	movlb	0	; () banked
  3709  001132  51BF               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  3710  001134  0D02               	mullw	2
  3711  001136  0E60               	movlw	low _TMR_TimerArray
  3712  001138  24F3               	addwf	prodl,w,c
  3713  00113A  6ED9               	movwf	fsr2l,c
  3714  00113C  0E00               	movlw	high _TMR_TimerArray
  3715  00113E  20F4               	addwfc	prodh,w,c
  3716  001140  6EDA               	movwf	fsr2h,c
  3717  001142  C0BB  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  3718  001146  C0BC  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  3722  00114A  0100               	movlb	0	; () banked
  3723  00114C  51BF               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  3724  00114E  0D02               	mullw	2
  3725  001150  0E01               	movlw	low _BitNum2SetMask
  3726  001152  24F3               	addwf	prodl,w,c
  3727  001154  6EF6               	movwf	tblptrl,c
  3728  001156  0E03               	movlw	high _BitNum2SetMask
  3729  001158  20F4               	addwfc	prodh,w,c
  3730  00115A  6EF7               	movwf	tblptrh,c
  3731  00115C                     	if	0	;There are less than 3 active tblptr bytes
  3732  00115C                     	endif
  3733  00115C  0009               	tblrd		*+
  3734  00115E  CFF5 F0BD          	movff	tablat,??_ES_Timer_InitTimer
  3735  001162  0009               	tblrd		*+
  3736  001164  CFF5 F0BE          	movff	tablat,??_ES_Timer_InitTimer+1
  3737  001168  0100               	movlb	0	; () banked
  3738  00116A  51BD               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  3739  00116C  0100               	movlb	0	; () banked
  3740  00116E  1393               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  3741  001170  0100               	movlb	0	; () banked
  3742  001172  51BE               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  3743  001174  0100               	movlb	0	; () banked
  3744  001176  1394               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  3745  001178  0012               	return	
  3746  00117A                     __end_of_ES_Timer_InitTimer:
  3747                           	opt stack 0
  3748                           tosu	equ	0xFFF
  3749                           tosh	equ	0xFFE
  3750                           tosl	equ	0xFFD
  3751                           pclath	equ	0xFFA
  3752                           tblptru	equ	0xFF8
  3753                           tblptrh	equ	0xFF7
  3754                           tblptrl	equ	0xFF6
  3755                           tablat	equ	0xFF5
  3756                           prodh	equ	0xFF4
  3757                           prodl	equ	0xFF3
  3758                           postinc0	equ	0xFEE
  3759                           wreg	equ	0xFE8
  3760                           postdec1	equ	0xFE5
  3761                           fsr1h	equ	0xFE2
  3762                           fsr1l	equ	0xFE1
  3763                           indf2	equ	0xFDF
  3764                           postinc2	equ	0xFDE
  3765                           postdec2	equ	0xFDD
  3766                           fsr2h	equ	0xFDA
  3767                           fsr2l	equ	0xFD9
  3768                           status	equ	0xFD8
  3769                           
  3770 ;; *************** function _DotStar_Show *****************
  3771 ;; Defined at:
  3772 ;;		line 66 in file "Pattern_DotStarLED.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;  pixelPointer    2   38[BANK0 ] PTR unsigned long 
  3775 ;;		 -> PixelPattern(120), 
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;		None
  3778 ;; Return value:  Size  Location     Type
  3779 ;;                  1    wreg      void 
  3780 ;; Registers used:
  3781 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3782 ;; Tracked objects:
  3783 ;;		On entry : 0/0
  3784 ;;		On exit  : 0/0
  3785 ;;		Unchanged: 0/0
  3786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3787 ;;      Params:         0       2       0       0
  3788 ;;      Locals:         0       0       0       0
  3789 ;;      Temps:          0       0       0       0
  3790 ;;      Totals:         0       2       0       0
  3791 ;;Total ram usage:        2 bytes
  3792 ;; Hardware stack levels used:    1
  3793 ;; Hardware stack levels required when called:   11
  3794 ;; This function calls:
  3795 ;;		_SPI32_TransmitFrames
  3796 ;;		_memcpy
  3797 ;; This function is called by:
  3798 ;;		_ShowPattern
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text19
  3803  0014B8                     __ptext19:
  3804                           	opt stack 0
  3805  0014B8                     _DotStar_Show:
  3806                           	opt stack 16
  3807                           
  3808                           ;Pattern_DotStarLED.c: 68: memcpy(PixelFrames+sizeof(uint32_t), pixelPointer, sizeof(uin
      +                          t32_t)*Length);
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;incstack = 0
  3812  0014B8  0E90               	movlw	low (_PixelFrames+16)
  3813  0014BA  0100               	movlb	0	; () banked
  3814  0014BC  6FBB               	movwf	memcpy@d1& (0+255),b
  3815  0014BE  0E01               	movlw	high (_PixelFrames+16)
  3816  0014C0  0100               	movlb	0	; () banked
  3817  0014C2  6FBC               	movwf	(memcpy@d1+1)& (0+255),b
  3818  0014C4  C0E1  F0BD         	movff	DotStar_Show@pixelPointer,memcpy@s1
  3819  0014C8  C0E2  F0BE         	movff	DotStar_Show@pixelPointer+1,memcpy@s1+1
  3820  0014CC  0100               	movlb	0	; () banked
  3821  0014CE  519B               	movf	_Length& (0+255),w,b
  3822  0014D0  0D04               	mullw	4
  3823  0014D2  CFF3 F0BF          	movff	prodl,memcpy@n
  3824  0014D6  CFF4 F0C0          	movff	prodh,memcpy@n+1
  3825  0014DA  ECF0  F009         	call	_memcpy	;wreg free
  3826                           
  3827                           ;Pattern_DotStarLED.c: 70: SPI32_TransmitFrames(PixelFrames,Length+2);
  3828  0014DE  0E80               	movlw	low _PixelFrames
  3829  0014E0  0100               	movlb	0	; () banked
  3830  0014E2  6FDB               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  3831  0014E4  0E01               	movlw	high _PixelFrames
  3832  0014E6  0100               	movlb	0	; () banked
  3833  0014E8  6FDC               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  3834  0014EA  0100               	movlb	0	; () banked
  3835  0014EC  519B               	movf	_Length& (0+255),w,b
  3836  0014EE  0F02               	addlw	2
  3837  0014F0  0100               	movlb	0	; () banked
  3838  0014F2  6FDD               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  3839  0014F4  EC07  F00B         	call	_SPI32_TransmitFrames	;wreg free
  3840  0014F8  0012               	return		;funcret
  3841  0014FA                     __end_of_DotStar_Show:
  3842                           	opt stack 0
  3843                           tosu	equ	0xFFF
  3844                           tosh	equ	0xFFE
  3845                           tosl	equ	0xFFD
  3846                           pclath	equ	0xFFA
  3847                           tblptru	equ	0xFF8
  3848                           tblptrh	equ	0xFF7
  3849                           tblptrl	equ	0xFF6
  3850                           tablat	equ	0xFF5
  3851                           prodh	equ	0xFF4
  3852                           prodl	equ	0xFF3
  3853                           postinc0	equ	0xFEE
  3854                           wreg	equ	0xFE8
  3855                           postdec1	equ	0xFE5
  3856                           fsr1h	equ	0xFE2
  3857                           fsr1l	equ	0xFE1
  3858                           indf2	equ	0xFDF
  3859                           postinc2	equ	0xFDE
  3860                           postdec2	equ	0xFDD
  3861                           fsr2h	equ	0xFDA
  3862                           fsr2l	equ	0xFD9
  3863                           status	equ	0xFD8
  3864                           
  3865 ;; *************** function _memcpy *****************
  3866 ;; Defined at:
  3867 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memcpy.c"
  3868 ;; Parameters:    Size  Location     Type
  3869 ;;  d1              2    0[BANK0 ] PTR void 
  3870 ;;		 -> PixelFrames(128), 
  3871 ;;  s1              2    2[BANK0 ] PTR const void 
  3872 ;;		 -> PixelPattern(120), 
  3873 ;;  n               2    4[BANK0 ] unsigned int 
  3874 ;; Auto vars:     Size  Location     Type
  3875 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  3876 ;;		 -> PixelPattern(120), 
  3877 ;;  d               2    6[BANK0 ] PTR unsigned char 
  3878 ;;		 -> PixelFrames(128), 
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  2    0[BANK0 ] PTR void 
  3881 ;; Registers used:
  3882 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3888 ;;      Params:         0       6       0       0
  3889 ;;      Locals:         0       4       0       0
  3890 ;;      Temps:          0       0       0       0
  3891 ;;      Totals:         0      10       0       0
  3892 ;;Total ram usage:       10 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    6
  3895 ;; This function calls:
  3896 ;;		Nothing
  3897 ;; This function is called by:
  3898 ;;		_DotStar_Show
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           	psect	text20
  3903  0013E0                     __ptext20:
  3904                           	opt stack 0
  3905  0013E0                     _memcpy:
  3906                           	opt stack 20
  3907                           
  3908                           ;incstack = 0
  3909  0013E0  C0BD  F0C3         	movff	memcpy@s1,memcpy@s
  3910  0013E4  C0BE  F0C4         	movff	memcpy@s1+1,memcpy@s+1
  3911  0013E8  C0BB  F0C1         	movff	memcpy@d1,memcpy@d
  3912  0013EC  C0BC  F0C2         	movff	memcpy@d1+1,memcpy@d+1
  3913  0013F0  D010               	goto	l2094
  3914  0013F2                     l2088:
  3915  0013F2  C0C3  FFD9         	movff	memcpy@s,fsr2l
  3916  0013F6  C0C4  FFDA         	movff	memcpy@s+1,fsr2h
  3917  0013FA  C0C1  FFE1         	movff	memcpy@d,fsr1l
  3918  0013FE  C0C2  FFE2         	movff	memcpy@d+1,fsr1h
  3919  001402  CFDF FFE7          	movff	indf2,indf1
  3920  001406  0100               	movlb	0	; () banked
  3921  001408  4BC3               	infsnz	memcpy@s& (0+255),f,b
  3922  00140A  2BC4               	incf	(memcpy@s+1)& (0+255),f,b
  3923                           
  3924                           ; BSR set to: 0
  3925  00140C  0100               	movlb	0	; () banked
  3926  00140E  4BC1               	infsnz	memcpy@d& (0+255),f,b
  3927  001410  2BC2               	incf	(memcpy@d+1)& (0+255),f,b
  3928  001412                     l2094:
  3929  001412  0100               	movlb	0	; () banked
  3930  001414  07BF               	decf	memcpy@n& (0+255),f,b
  3931  001416  A0D8               	btfss	status,0,c
  3932  001418  07C0               	decf	(memcpy@n+1)& (0+255),f,b
  3933  00141A  0100               	movlb	0	; () banked
  3934  00141C  29BF               	incf	memcpy@n& (0+255),w,b
  3935  00141E  E1E9               	bnz	l2088
  3936  001420  0100               	movlb	0	; () banked
  3937  001422  29C0               	incf	(memcpy@n+1)& (0+255),w,b
  3938  001424  B4D8               	btfsc	status,2,c
  3939  001426  0012               	return	
  3940  001428  D7E4               	goto	l2088
  3941  00142A                     __end_of_memcpy:
  3942                           	opt stack 0
  3943                           tosu	equ	0xFFF
  3944                           tosh	equ	0xFFE
  3945                           tosl	equ	0xFFD
  3946                           pclath	equ	0xFFA
  3947                           tblptru	equ	0xFF8
  3948                           tblptrh	equ	0xFF7
  3949                           tblptrl	equ	0xFF6
  3950                           tablat	equ	0xFF5
  3951                           prodh	equ	0xFF4
  3952                           prodl	equ	0xFF3
  3953                           postinc0	equ	0xFEE
  3954                           wreg	equ	0xFE8
  3955                           indf1	equ	0xFE7
  3956                           postdec1	equ	0xFE5
  3957                           fsr1h	equ	0xFE2
  3958                           fsr1l	equ	0xFE1
  3959                           indf2	equ	0xFDF
  3960                           postinc2	equ	0xFDE
  3961                           postdec2	equ	0xFDD
  3962                           fsr2h	equ	0xFDA
  3963                           fsr2l	equ	0xFD9
  3964                           status	equ	0xFD8
  3965                           
  3966 ;; *************** function _SPI32_TransmitFrames *****************
  3967 ;; Defined at:
  3968 ;;		line 229 in file "SPI32_ControlService.c"
  3969 ;; Parameters:    Size  Location     Type
  3970 ;;  framePointer    2   32[BANK0 ] PTR unsigned long 
  3971 ;;		 -> OffFrames(128), PixelFrames(128), 
  3972 ;;  numFrames       1   34[BANK0 ] unsigned char 
  3973 ;; Auto vars:     Size  Location     Type
  3974 ;;  transmitEven    3   35[BANK0 ] struct ES_Event_t
  3975 ;; Return value:  Size  Location     Type
  3976 ;;                  1    wreg      void 
  3977 ;; Registers used:
  3978 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3979 ;; Tracked objects:
  3980 ;;		On entry : 0/0
  3981 ;;		On exit  : 0/0
  3982 ;;		Unchanged: 0/0
  3983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3984 ;;      Params:         0       3       0       0
  3985 ;;      Locals:         0       3       0       0
  3986 ;;      Temps:          0       0       0       0
  3987 ;;      Totals:         0       6       0       0
  3988 ;;Total ram usage:        6 bytes
  3989 ;; Hardware stack levels used:    1
  3990 ;; Hardware stack levels required when called:   10
  3991 ;; This function calls:
  3992 ;;		_PostSPI32ControlService
  3993 ;; This function is called by:
  3994 ;;		_DotStar_Show
  3995 ;;		_DotStar_Off
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           	psect	text21
  4000  00160E                     __ptext21:
  4001                           	opt stack 0
  4002  00160E                     _SPI32_TransmitFrames:
  4003                           	opt stack 16
  4004                           
  4005                           ;SPI32_ControlService.c: 231: if(CurrentState == SPI32_Waiting4Send){
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;incstack = 0
  4009  00160E  0100               	movlb	0	; () banked
  4010  001610  0597               	decf	SPI32_ControlService@CurrentState& (0+255),w,b
  4011  001612  A4D8               	btfss	status,2,c
  4012  001614  0012               	return	
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;SPI32_ControlService.c: 233: FrameIndex = 0;
  4016  001616  0E00               	movlw	0
  4017  001618  0100               	movlb	0	; () banked
  4018  00161A  6F9A               	movwf	_FrameIndex& (0+255),b
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;SPI32_ControlService.c: 235: FramePointer = framePointer;
  4022  00161C  C0DB  F08F         	movff	SPI32_TransmitFrames@framePointer,_FramePointer
  4023  001620  C0DC  F090         	movff	SPI32_TransmitFrames@framePointer+1,_FramePointer+1
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;SPI32_ControlService.c: 237: NumFrames = numFrames;
  4027  001624  C0DD  F09D         	movff	SPI32_TransmitFrames@numFrames,_NumFrames
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;SPI32_ControlService.c: 238: ES_Event transmitEvent;
  4031                           ;SPI32_ControlService.c: 239: transmitEvent.EventType = SPI32_TRANSMIT;
  4032  001628  0E09               	movlw	9
  4033  00162A  0100               	movlb	0	; () banked
  4034  00162C  6FDE               	movwf	SPI32_TransmitFrames@transmitEvent& (0+255),b
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;SPI32_ControlService.c: 240: PostSPI32ControlService(transmitEvent);
  4038  00162E  C0DE  F0D8         	movff	SPI32_TransmitFrames@transmitEvent,PostSPI32ControlService@ThisEvent
  4039  001632  C0DF  F0D9         	movff	SPI32_TransmitFrames@transmitEvent+1,PostSPI32ControlService@ThisEvent+1
  4040  001636  C0E0  F0DA         	movff	SPI32_TransmitFrames@transmitEvent+2,PostSPI32ControlService@ThisEvent+2
  4041  00163A  EC87  F00B         	call	_PostSPI32ControlService	;wreg free
  4042  00163E  0012               	return	
  4043  001640                     __end_of_SPI32_TransmitFrames:
  4044                           	opt stack 0
  4045                           tosu	equ	0xFFF
  4046                           tosh	equ	0xFFE
  4047                           tosl	equ	0xFFD
  4048                           pclath	equ	0xFFA
  4049                           tblptru	equ	0xFF8
  4050                           tblptrh	equ	0xFF7
  4051                           tblptrl	equ	0xFF6
  4052                           tablat	equ	0xFF5
  4053                           prodh	equ	0xFF4
  4054                           prodl	equ	0xFF3
  4055                           postinc0	equ	0xFEE
  4056                           wreg	equ	0xFE8
  4057                           indf1	equ	0xFE7
  4058                           postdec1	equ	0xFE5
  4059                           fsr1h	equ	0xFE2
  4060                           fsr1l	equ	0xFE1
  4061                           indf2	equ	0xFDF
  4062                           postinc2	equ	0xFDE
  4063                           postdec2	equ	0xFDD
  4064                           fsr2h	equ	0xFDA
  4065                           fsr2l	equ	0xFD9
  4066                           status	equ	0xFD8
  4067                           
  4068 ;; *************** function _PostPatternControlService *****************
  4069 ;; Defined at:
  4070 ;;		line 135 in file "Pattern_ControlService.c"
  4071 ;; Parameters:    Size  Location     Type
  4072 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;		None
  4075 ;; Return value:  Size  Location     Type
  4076 ;;                  1    wreg      unsigned char 
  4077 ;; Registers used:
  4078 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4079 ;; Tracked objects:
  4080 ;;		On entry : 0/0
  4081 ;;		On exit  : 0/0
  4082 ;;		Unchanged: 0/0
  4083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4084 ;;      Params:         0       3       0       0
  4085 ;;      Locals:         0       0       0       0
  4086 ;;      Temps:          0       0       0       0
  4087 ;;      Totals:         0       3       0       0
  4088 ;;Total ram usage:        3 bytes
  4089 ;; Hardware stack levels used:    1
  4090 ;; Hardware stack levels required when called:    9
  4091 ;; This function calls:
  4092 ;;		_ES_PostToService
  4093 ;; This function is called by:
  4094 ;;		_RunPatternControlService
  4095 ;;		_ES_Timer_Tick_Resp
  4096 ;;		_PostToList
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100                           	psect	text22
  4101  00175C                     __ptext22:
  4102                           	opt stack 0
  4103  00175C                     _PostPatternControlService:
  4104                           	opt stack 18
  4105                           
  4106                           ;Pattern_ControlService.c: 137: return ES_PostToService( MyPriority, ThisEvent);
  4107                           
  4108                           ;incstack = 0
  4109  00175C  C0D8  F0D2         	movff	PostPatternControlService@ThisEvent,ES_PostToService@TheEvent
  4110  001760  C0D9  F0D3         	movff	PostPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  4111  001764  C0DA  F0D4         	movff	PostPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  4112  001768  0100               	movlb	0	; () banked
  4113  00176A  519C               	movf	_MyPriority& (0+255),w,b
  4114  00176C  ECF8  F008         	call	_ES_PostToService
  4115  001770  0012               	return	
  4116  001772                     __end_of_PostPatternControlService:
  4117                           	opt stack 0
  4118                           tosu	equ	0xFFF
  4119                           tosh	equ	0xFFE
  4120                           tosl	equ	0xFFD
  4121                           pclath	equ	0xFFA
  4122                           tblptru	equ	0xFF8
  4123                           tblptrh	equ	0xFF7
  4124                           tblptrl	equ	0xFF6
  4125                           tablat	equ	0xFF5
  4126                           prodh	equ	0xFF4
  4127                           prodl	equ	0xFF3
  4128                           postinc0	equ	0xFEE
  4129                           wreg	equ	0xFE8
  4130                           indf1	equ	0xFE7
  4131                           postdec1	equ	0xFE5
  4132                           fsr1h	equ	0xFE2
  4133                           fsr1l	equ	0xFE1
  4134                           indf2	equ	0xFDF
  4135                           postinc2	equ	0xFDE
  4136                           postdec2	equ	0xFDD
  4137                           fsr2h	equ	0xFDA
  4138                           fsr2l	equ	0xFD9
  4139                           status	equ	0xFD8
  4140                           
  4141 ;; *************** function _PostSPI32ControlService *****************
  4142 ;; Defined at:
  4143 ;;		line 117 in file "SPI32_ControlService.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;		None
  4148 ;; Return value:  Size  Location     Type
  4149 ;;                  1    wreg      unsigned char 
  4150 ;; Registers used:
  4151 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4157 ;;      Params:         0       3       0       0
  4158 ;;      Locals:         0       0       0       0
  4159 ;;      Temps:          0       0       0       0
  4160 ;;      Totals:         0       3       0       0
  4161 ;;Total ram usage:        3 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:    9
  4164 ;; This function calls:
  4165 ;;		_ES_PostToService
  4166 ;; This function is called by:
  4167 ;;		_SPI32_TransmitFrames
  4168 ;;		_ES_Timer_Tick_Resp
  4169 ;;		_PostToList
  4170 ;; This function uses a non-reentrant model
  4171 ;;
  4172                           
  4173                           	psect	text23
  4174  00170E                     __ptext23:
  4175                           	opt stack 0
  4176  00170E                     _PostSPI32ControlService:
  4177                           	opt stack 0
  4178                           
  4179                           ;Skip over the trampoline to the duplicate function for level 2
  4180  00170E  B23E               	btfsc	btemp,1,c
  4181  001710  EFC4  F00B         	goto	i2_PostSPI32ControlService
  4182  001714                     _PostSPI32ControlService$intlevel0:
  4183                           	opt stack 18
  4184                           
  4185                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  4186                           
  4187                           ;incstack = 0
  4188  001714  C0D8  F0D2         	movff	PostSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  4189  001718  C0D9  F0D3         	movff	PostSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  4190  00171C  C0DA  F0D4         	movff	PostSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  4191  001720  0100               	movlb	0	; () banked
  4192  001722  5198               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  4193  001724  ECF8  F008         	call	_ES_PostToService
  4194  001728  0012               	return	
  4195  00172A                     __end_of_PostSPI32ControlService:
  4196                           	opt stack 0
  4197                           tosu	equ	0xFFF
  4198                           tosh	equ	0xFFE
  4199                           tosl	equ	0xFFD
  4200                           pclath	equ	0xFFA
  4201                           tblptru	equ	0xFF8
  4202                           tblptrh	equ	0xFF7
  4203                           tblptrl	equ	0xFF6
  4204                           tablat	equ	0xFF5
  4205                           prodh	equ	0xFF4
  4206                           prodl	equ	0xFF3
  4207                           postinc0	equ	0xFEE
  4208                           wreg	equ	0xFE8
  4209                           indf1	equ	0xFE7
  4210                           postdec1	equ	0xFE5
  4211                           fsr1h	equ	0xFE2
  4212                           fsr1l	equ	0xFE1
  4213                           indf2	equ	0xFDF
  4214                           postinc2	equ	0xFDE
  4215                           postdec2	equ	0xFDD
  4216                           fsr2h	equ	0xFDA
  4217                           fsr2l	equ	0xFD9
  4218                           status	equ	0xFD8
  4219                           
  4220 ;; *************** function _PausePattern *****************
  4221 ;; Defined at:
  4222 ;;		line 293 in file "Pattern_ControlService.c"
  4223 ;; Parameters:    Size  Location     Type
  4224 ;;		None
  4225 ;; Auto vars:     Size  Location     Type
  4226 ;;		None
  4227 ;; Return value:  Size  Location     Type
  4228 ;;                  1    wreg      void 
  4229 ;; Registers used:
  4230 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4231 ;; Tracked objects:
  4232 ;;		On entry : 0/0
  4233 ;;		On exit  : 0/0
  4234 ;;		Unchanged: 0/0
  4235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4236 ;;      Params:         0       0       0       0
  4237 ;;      Locals:         0       0       0       0
  4238 ;;      Temps:          0       0       0       0
  4239 ;;      Totals:         0       0       0       0
  4240 ;;Total ram usage:        0 bytes
  4241 ;; Hardware stack levels used:    1
  4242 ;; Hardware stack levels required when called:    7
  4243 ;; This function calls:
  4244 ;;		_ES_Timer_StopTimer
  4245 ;; This function is called by:
  4246 ;;		_RunPatternControlService
  4247 ;; This function uses a non-reentrant model
  4248 ;;
  4249                           
  4250                           	psect	text24
  4251  0017CC                     __ptext24:
  4252                           	opt stack 0
  4253  0017CC                     _PausePattern:
  4254                           	opt stack 21
  4255                           
  4256                           ;Pattern_ControlService.c: 295: ES_Timer_StopTimer(0);
  4257                           
  4258                           ;incstack = 0
  4259  0017CC  0E00               	movlw	0
  4260  0017CE  ECC9  F009         	call	_ES_Timer_StopTimer
  4261  0017D2  0012               	return		;funcret
  4262  0017D4                     __end_of_PausePattern:
  4263                           	opt stack 0
  4264                           tosu	equ	0xFFF
  4265                           tosh	equ	0xFFE
  4266                           tosl	equ	0xFFD
  4267                           pclath	equ	0xFFA
  4268                           tblptru	equ	0xFF8
  4269                           tblptrh	equ	0xFF7
  4270                           tblptrl	equ	0xFF6
  4271                           tablat	equ	0xFF5
  4272                           prodh	equ	0xFF4
  4273                           prodl	equ	0xFF3
  4274                           postinc0	equ	0xFEE
  4275                           wreg	equ	0xFE8
  4276                           indf1	equ	0xFE7
  4277                           postdec1	equ	0xFE5
  4278                           fsr1h	equ	0xFE2
  4279                           fsr1l	equ	0xFE1
  4280                           indf2	equ	0xFDF
  4281                           postinc2	equ	0xFDE
  4282                           postdec2	equ	0xFDD
  4283                           fsr2h	equ	0xFDA
  4284                           fsr2l	equ	0xFD9
  4285                           status	equ	0xFD8
  4286                           
  4287 ;; *************** function _ES_Timer_StopTimer *****************
  4288 ;; Defined at:
  4289 ;;		line 205 in file "ES_Timers.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;  Num             1    wreg     unsigned char 
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;  Num             1    4[BANK0 ] unsigned char 
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      enum E15473
  4296 ;; Registers used:
  4297 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4303 ;;      Params:         0       0       0       0
  4304 ;;      Locals:         0       1       0       0
  4305 ;;      Temps:          0       4       0       0
  4306 ;;      Totals:         0       5       0       0
  4307 ;;Total ram usage:        5 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    6
  4310 ;; This function calls:
  4311 ;;		Nothing
  4312 ;; This function is called by:
  4313 ;;		_StopPattern
  4314 ;;		_PausePattern
  4315 ;; This function uses a non-reentrant model
  4316 ;;
  4317                           
  4318                           	psect	text25
  4319  001392                     __ptext25:
  4320                           	opt stack 0
  4321  001392                     _ES_Timer_StopTimer:
  4322                           	opt stack 21
  4323                           
  4324                           ;incstack = 0
  4325                           ;ES_Timer_StopTimer@Num stored from wreg
  4326  001392  0100               	movlb	0	; () banked
  4327  001394  6FBF               	movwf	ES_Timer_StopTimer@Num& (0+255),b
  4328                           
  4329                           ;ES_Timers.c: 207: if( Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0])) )
  4330  001396  0E0F               	movlw	15
  4331  001398  0100               	movlb	0	; () banked
  4332  00139A  65BF               	cpfsgt	ES_Timer_StopTimer@Num& (0+255),b
  4333  00139C  D001               	goto	l2216
  4334  00139E  0012               	return	
  4335  0013A0                     l2216:
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;ES_Timers.c: 209: TMR_ActiveFlags &= ~BitNum2SetMask[Num];
  4339  0013A0  0100               	movlb	0	; () banked
  4340  0013A2  51BF               	movf	ES_Timer_StopTimer@Num& (0+255),w,b
  4341  0013A4  0D02               	mullw	2
  4342  0013A6  0E01               	movlw	low _BitNum2SetMask
  4343  0013A8  24F3               	addwf	prodl,w,c
  4344  0013AA  6EF6               	movwf	tblptrl,c
  4345  0013AC  0E03               	movlw	high _BitNum2SetMask
  4346  0013AE  20F4               	addwfc	prodh,w,c
  4347  0013B0  6EF7               	movwf	tblptrh,c
  4348  0013B2                     	if	0	;There are less than 3 active tblptr bytes
  4349  0013B2                     	endif
  4350  0013B2  0009               	tblrd		*+
  4351  0013B4  CFF5 F0BB          	movff	tablat,??_ES_Timer_StopTimer
  4352  0013B8  0009               	tblrd		*+
  4353  0013BA  CFF5 F0BC          	movff	tablat,??_ES_Timer_StopTimer+1
  4354  0013BE  0100               	movlb	0	; () banked
  4355  0013C0  1DBB               	comf	??_ES_Timer_StopTimer& (0+255),w,b
  4356  0013C2  0100               	movlb	0	; () banked
  4357  0013C4  6FBD               	movwf	(??_ES_Timer_StopTimer+2)& (0+255),b
  4358  0013C6  0100               	movlb	0	; () banked
  4359  0013C8  1DBC               	comf	(??_ES_Timer_StopTimer+1)& (0+255),w,b
  4360  0013CA  0100               	movlb	0	; () banked
  4361  0013CC  6FBE               	movwf	(??_ES_Timer_StopTimer+3)& (0+255),b
  4362  0013CE  0100               	movlb	0	; () banked
  4363  0013D0  51BD               	movf	(??_ES_Timer_StopTimer+2)& (0+255),w,b
  4364  0013D2  0100               	movlb	0	; () banked
  4365  0013D4  1793               	andwf	_TMR_ActiveFlags& (0+255),f,b
  4366  0013D6  0100               	movlb	0	; () banked
  4367  0013D8  51BE               	movf	(??_ES_Timer_StopTimer+3)& (0+255),w,b
  4368  0013DA  0100               	movlb	0	; () banked
  4369  0013DC  1794               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  4370  0013DE  0012               	return	
  4371  0013E0                     __end_of_ES_Timer_StopTimer:
  4372                           	opt stack 0
  4373                           tosu	equ	0xFFF
  4374                           tosh	equ	0xFFE
  4375                           tosl	equ	0xFFD
  4376                           pclath	equ	0xFFA
  4377                           tblptru	equ	0xFF8
  4378                           tblptrh	equ	0xFF7
  4379                           tblptrl	equ	0xFF6
  4380                           tablat	equ	0xFF5
  4381                           prodh	equ	0xFF4
  4382                           prodl	equ	0xFF3
  4383                           postinc0	equ	0xFEE
  4384                           wreg	equ	0xFE8
  4385                           indf1	equ	0xFE7
  4386                           postdec1	equ	0xFE5
  4387                           fsr1h	equ	0xFE2
  4388                           fsr1l	equ	0xFE1
  4389                           indf2	equ	0xFDF
  4390                           postinc2	equ	0xFDE
  4391                           postdec2	equ	0xFDD
  4392                           fsr2h	equ	0xFDA
  4393                           fsr2l	equ	0xFD9
  4394                           status	equ	0xFD8
  4395                           
  4396 ;; *************** function _ES_DeQueue *****************
  4397 ;; Defined at:
  4398 ;;		line 164 in file "ES_Queue.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  4401 ;;		 -> Queue1(12), Queue0(12), 
  4402 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  4403 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  4406 ;;		 -> Queue1(12), Queue0(12), 
  4407 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  4408 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  4409 ;; Return value:  Size  Location     Type
  4410 ;;                  1    wreg      unsigned char 
  4411 ;; Registers used:
  4412 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4413 ;; Tracked objects:
  4414 ;;		On entry : 0/0
  4415 ;;		On exit  : 0/0
  4416 ;;		Unchanged: 0/0
  4417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4418 ;;      Params:         0       4       0       0
  4419 ;;      Locals:         0       4       0       0
  4420 ;;      Temps:          0       2       0       0
  4421 ;;      Totals:         0      10       0       0
  4422 ;;Total ram usage:       10 bytes
  4423 ;; Hardware stack levels used:    1
  4424 ;; Hardware stack levels required when called:    7
  4425 ;; This function calls:
  4426 ;;		___lbmod
  4427 ;;		___wmul
  4428 ;; This function is called by:
  4429 ;;		_ES_Run
  4430 ;;		_ES_RecallEvents
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           	psect	text26
  4435  00050A                     __ptext26:
  4436                           	opt stack 0
  4437  00050A                     _ES_DeQueue:
  4438                           	opt stack 22
  4439                           
  4440                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  4441                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  4442                           ;ES_Queue.c: 168: uint8_t NumLeft;
  4443                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;incstack = 0
  4447  00050A  C0C7  F0CF         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  4448  00050E  C0C8  F0D0         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  4449                           
  4450                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  4451  000512  0100               	movlb	0	; () banked
  4452  000514  EE20 F002          	lfsr	2,2
  4453  000518  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4454  00051A  26D9               	addwf	fsr2l,f,c
  4455  00051C  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4456  00051E  22DA               	addwfc	fsr2h,f,c
  4457  000520  50DF               	movf	indf2,w,c
  4458  000522  B4D8               	btfsc	status,2,c
  4459  000524  D06F               	goto	l2420
  4460                           
  4461                           ; BSR set to: 0
  4462                           
  4463                           ;ES_Queue.c: 172: {
  4464                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  4465  000526  CFF2 F0CD          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  4466  00052A  9EF2               	bcf	intcon,7,c	;volatile
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  4470                           
  4471                           ; BSR set to: 0
  4472  00052C  0100               	movlb	0	; () banked
  4473  00052E  EE20 F001          	lfsr	2,1
  4474  000532  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4475  000534  26D9               	addwf	fsr2l,f,c
  4476  000536  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4477  000538  22DA               	addwfc	fsr2h,f,c
  4478  00053A  50DF               	movf	indf2,w,c
  4479  00053C  0100               	movlb	0	; () banked
  4480  00053E  6FCB               	movwf	??_ES_DeQueue& (0+255),b
  4481  000540  0E01               	movlw	1
  4482  000542  0100               	movlb	0	; () banked
  4483  000544  25CB               	addwf	??_ES_DeQueue& (0+255),w,b
  4484  000546  0100               	movlb	0	; () banked
  4485  000548  6FC1               	movwf	___wmul@multiplier& (0+255),b
  4486  00054A  0100               	movlb	0	; () banked
  4487  00054C  6BC2               	clrf	(___wmul@multiplier+1)& (0+255),b
  4488  00054E  0E00               	movlw	0
  4489  000550  23C2               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  4490  000552  0E00               	movlw	0
  4491  000554  0100               	movlb	0	; () banked
  4492  000556  6FC4               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4493  000558  0E03               	movlw	3
  4494  00055A  6FC3               	movwf	___wmul@multiplicand& (0+255),b
  4495  00055C  ECB8  F00A         	call	___wmul	;wreg free
  4496  000560  0100               	movlb	0	; () banked
  4497  000562  51C1               	movf	?___wmul& (0+255),w,b
  4498  000564  0100               	movlb	0	; () banked
  4499  000566  25C7               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  4500  000568  6ED9               	movwf	fsr2l,c
  4501  00056A  0100               	movlb	0	; () banked
  4502  00056C  51C2               	movf	(?___wmul+1)& (0+255),w,b
  4503  00056E  0100               	movlb	0	; () banked
  4504  000570  21C8               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  4505  000572  6EDA               	movwf	fsr2h,c
  4506  000574  C0C9  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  4507  000578  C0CA  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  4508  00057C  CFDE FFE6          	movff	postinc2,postinc1
  4509  000580  CFDE FFE6          	movff	postinc2,postinc1
  4510  000584  CFDE FFE6          	movff	postinc2,postinc1
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  4514  000588  0100               	movlb	0	; () banked
  4515  00058A  EE20 F001          	lfsr	2,1
  4516  00058E  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4517  000590  26D9               	addwf	fsr2l,f,c
  4518  000592  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4519  000594  22DA               	addwfc	fsr2h,f,c
  4520  000596  2ADF               	incf	indf2,f,c
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  4524  000598  C0CF  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  4525  00059C  C0D0  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  4526  0005A0  0100               	movlb	0	; () banked
  4527  0005A2  EE10 F001          	lfsr	1,1
  4528  0005A6  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4529  0005A8  26E1               	addwf	fsr1l,f,c
  4530  0005AA  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4531  0005AC  22E2               	addwfc	fsr1h,f,c
  4532  0005AE  50DE               	movf	postinc2,w,c
  4533  0005B0  5CE6               	subwf	postinc1,w,c
  4534  0005B2  A0D8               	btfss	status,0,c
  4535  0005B4  D019               	goto	l2416
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  4539  0005B6  0100               	movlb	0	; () banked
  4540  0005B8  EE20 F001          	lfsr	2,1
  4541  0005BC  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4542  0005BE  26D9               	addwf	fsr2l,f,c
  4543  0005C0  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4544  0005C2  22DA               	addwfc	fsr2h,f,c
  4545  0005C4  C0CF  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  4546  0005C8  C0D0  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  4547  0005CC  50E7               	movf	indf1,w,c
  4548  0005CE  0100               	movlb	0	; () banked
  4549  0005D0  6FBB               	movwf	___lbmod@divisor& (0+255),b
  4550  0005D2  0100               	movlb	0	; () banked
  4551  0005D4  EE10 F001          	lfsr	1,1
  4552  0005D8  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4553  0005DA  26E1               	addwf	fsr1l,f,c
  4554  0005DC  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4555  0005DE  22E2               	addwfc	fsr1h,f,c
  4556  0005E0  50E7               	movf	indf1,w,c
  4557  0005E2  EC3A  F00A         	call	___lbmod
  4558  0005E6  6EDF               	movwf	indf2,c
  4559  0005E8                     l2416:
  4560                           
  4561                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  4562  0005E8  0100               	movlb	0	; () banked
  4563  0005EA  EE20 F002          	lfsr	2,2
  4564  0005EE  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4565  0005F0  26D9               	addwf	fsr2l,f,c
  4566  0005F2  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4567  0005F4  22DA               	addwfc	fsr2h,f,c
  4568  0005F6  06DF               	decf	indf2,f,c
  4569  0005F8  50DF               	movf	indf2,w,c
  4570  0005FA  0100               	movlb	0	; () banked
  4571  0005FC  6FCE               	movwf	ES_DeQueue@NumLeft& (0+255),b
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  4575  0005FE  C0CD  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  4576                           
  4577                           ;ES_Queue.c: 183: }else {
  4578  000602  D014               	goto	l2426
  4579  000604                     l2420:
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  4583  000604  C0C9  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  4584  000608  C0CA  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  4585  00060C  0E00               	movlw	0
  4586  00060E  6EDF               	movwf	indf2,c
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  4590  000610  0100               	movlb	0	; () banked
  4591  000612  EE20 F001          	lfsr	2,1
  4592  000616  51C9               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  4593  000618  26D9               	addwf	fsr2l,f,c
  4594  00061A  51CA               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  4595  00061C  22DA               	addwfc	fsr2h,f,c
  4596  00061E  0E00               	movlw	0
  4597  000620  6EDE               	movwf	postinc2,c
  4598  000622  0E00               	movlw	0
  4599  000624  6EDD               	movwf	postdec2,c
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;ES_Queue.c: 186: NumLeft = 0;
  4603  000626  0E00               	movlw	0
  4604  000628  0100               	movlb	0	; () banked
  4605  00062A  6FCE               	movwf	ES_DeQueue@NumLeft& (0+255),b
  4606  00062C                     l2426:
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;ES_Queue.c: 187: }
  4610                           ;ES_Queue.c: 188: return NumLeft;
  4611  00062C  0100               	movlb	0	; () banked
  4612  00062E  51CE               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  4613  000630  0012               	return	
  4614  000632                     __end_of_ES_DeQueue:
  4615                           	opt stack 0
  4616                           tosu	equ	0xFFF
  4617                           tosh	equ	0xFFE
  4618                           tosl	equ	0xFFD
  4619                           pclath	equ	0xFFA
  4620                           tblptru	equ	0xFF8
  4621                           tblptrh	equ	0xFF7
  4622                           tblptrl	equ	0xFF6
  4623                           tablat	equ	0xFF5
  4624                           prodh	equ	0xFF4
  4625                           prodl	equ	0xFF3
  4626                           intcon	equ	0xFF2
  4627                           postinc0	equ	0xFEE
  4628                           wreg	equ	0xFE8
  4629                           indf1	equ	0xFE7
  4630                           postinc1	equ	0xFE6
  4631                           postdec1	equ	0xFE5
  4632                           fsr1h	equ	0xFE2
  4633                           fsr1l	equ	0xFE1
  4634                           indf2	equ	0xFDF
  4635                           postinc2	equ	0xFDE
  4636                           postdec2	equ	0xFDD
  4637                           fsr2h	equ	0xFDA
  4638                           fsr2l	equ	0xFD9
  4639                           status	equ	0xFD8
  4640                           
  4641 ;; *************** function ___lbmod *****************
  4642 ;; Defined at:
  4643 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;  dividend        1    wreg     unsigned char 
  4646 ;;  divisor         1    0[BANK0 ] unsigned char 
  4647 ;; Auto vars:     Size  Location     Type
  4648 ;;  dividend        1    1[BANK0 ] unsigned char 
  4649 ;;  rem             1    3[BANK0 ] unsigned char 
  4650 ;;  counter         1    2[BANK0 ] unsigned char 
  4651 ;; Return value:  Size  Location     Type
  4652 ;;                  1    wreg      unsigned char 
  4653 ;; Registers used:
  4654 ;;		wreg, status,2, status,0
  4655 ;; Tracked objects:
  4656 ;;		On entry : 0/0
  4657 ;;		On exit  : 0/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4660 ;;      Params:         0       1       0       0
  4661 ;;      Locals:         0       3       0       0
  4662 ;;      Temps:          0       0       0       0
  4663 ;;      Totals:         0       4       0       0
  4664 ;;Total ram usage:        4 bytes
  4665 ;; Hardware stack levels used:    1
  4666 ;; Hardware stack levels required when called:    6
  4667 ;; This function calls:
  4668 ;;		Nothing
  4669 ;; This function is called by:
  4670 ;;		_ES_DeQueue
  4671 ;;		_UpdatePattern
  4672 ;; This function uses a non-reentrant model
  4673 ;;
  4674                           
  4675                           	psect	text27
  4676  001474                     __ptext27:
  4677                           	opt stack 0
  4678  001474                     ___lbmod:
  4679                           	opt stack 20
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;incstack = 0
  4683                           ;___lbmod@dividend stored from wreg
  4684  001474  0100               	movlb	0	; () banked
  4685  001476  6FBC               	movwf	___lbmod@dividend& (0+255),b
  4686  001478  0E08               	movlw	8
  4687  00147A  0100               	movlb	0	; () banked
  4688  00147C  6FBD               	movwf	___lbmod@counter& (0+255),b
  4689  00147E  0E00               	movlw	0
  4690  001480  0100               	movlb	0	; () banked
  4691  001482  6FBE               	movwf	___lbmod@rem& (0+255),b
  4692  001484                     l2120:
  4693                           
  4694                           ; BSR set to: 0
  4695  001484  90D8               	bcf	status,0,c
  4696  001486  0100               	movlb	0	; () banked
  4697  001488  35BC               	rlcf	___lbmod@dividend& (0+255),w,b
  4698  00148A  0100               	movlb	0	; () banked
  4699  00148C  35BE               	rlcf	___lbmod@rem& (0+255),w,b
  4700  00148E  0100               	movlb	0	; () banked
  4701  001490  6FBE               	movwf	___lbmod@rem& (0+255),b
  4702                           
  4703                           ; BSR set to: 0
  4704  001492  0100               	movlb	0	; () banked
  4705  001494  90D8               	bcf	status,0,c
  4706  001496  37BC               	rlcf	___lbmod@dividend& (0+255),f,b
  4707                           
  4708                           ; BSR set to: 0
  4709  001498  0100               	movlb	0	; () banked
  4710  00149A  51BB               	movf	___lbmod@divisor& (0+255),w,b
  4711  00149C  0100               	movlb	0	; () banked
  4712  00149E  5DBE               	subwf	___lbmod@rem& (0+255),w,b
  4713  0014A0  A0D8               	btfss	status,0,c
  4714  0014A2  D004               	goto	l2128
  4715                           
  4716                           ; BSR set to: 0
  4717  0014A4  0100               	movlb	0	; () banked
  4718  0014A6  51BB               	movf	___lbmod@divisor& (0+255),w,b
  4719  0014A8  0100               	movlb	0	; () banked
  4720  0014AA  5FBE               	subwf	___lbmod@rem& (0+255),f,b
  4721  0014AC                     l2128:
  4722                           
  4723                           ; BSR set to: 0
  4724  0014AC  0100               	movlb	0	; () banked
  4725  0014AE  2FBD               	decfsz	___lbmod@counter& (0+255),f,b
  4726  0014B0  D7E9               	goto	l2120
  4727                           
  4728                           ; BSR set to: 0
  4729                           
  4730                           ; BSR set to: 0
  4731  0014B2  0100               	movlb	0	; () banked
  4732  0014B4  51BE               	movf	___lbmod@rem& (0+255),w,b
  4733  0014B6  0012               	return	
  4734  0014B8                     __end_of___lbmod:
  4735                           	opt stack 0
  4736                           tosu	equ	0xFFF
  4737                           tosh	equ	0xFFE
  4738                           tosl	equ	0xFFD
  4739                           pclath	equ	0xFFA
  4740                           tblptru	equ	0xFF8
  4741                           tblptrh	equ	0xFF7
  4742                           tblptrl	equ	0xFF6
  4743                           tablat	equ	0xFF5
  4744                           prodh	equ	0xFF4
  4745                           prodl	equ	0xFF3
  4746                           intcon	equ	0xFF2
  4747                           postinc0	equ	0xFEE
  4748                           wreg	equ	0xFE8
  4749                           indf1	equ	0xFE7
  4750                           postinc1	equ	0xFE6
  4751                           postdec1	equ	0xFE5
  4752                           fsr1h	equ	0xFE2
  4753                           fsr1l	equ	0xFE1
  4754                           indf2	equ	0xFDF
  4755                           postinc2	equ	0xFDE
  4756                           postdec2	equ	0xFDD
  4757                           fsr2h	equ	0xFDA
  4758                           fsr2l	equ	0xFD9
  4759                           status	equ	0xFD8
  4760                           
  4761 ;; *************** function _ES_CheckUserEvents *****************
  4762 ;; Defined at:
  4763 ;;		line 46 in file "ES_CheckEvents.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;		None
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;  i               1    0[BANK0 ] unsigned char 
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  1    wreg      unsigned char 
  4770 ;; Registers used:
  4771 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4777 ;;      Params:         0       0       0       0
  4778 ;;      Locals:         0       1       0       0
  4779 ;;      Temps:          0       0       0       0
  4780 ;;      Totals:         0       1       0       0
  4781 ;;Total ram usage:        1 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; Hardware stack levels required when called:    7
  4784 ;; This function calls:
  4785 ;;		_Check4Keystroke
  4786 ;; This function is called by:
  4787 ;;		_ES_Run
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           	psect	text28
  4792  00142A                     __ptext28:
  4793                           	opt stack 0
  4794  00142A                     _ES_CheckUserEvents:
  4795                           	opt stack 22
  4796                           
  4797                           ;ES_CheckEvents.c: 48: uint8_t i;
  4798                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;incstack = 0
  4802  00142A  0E00               	movlw	0
  4803  00142C  0100               	movlb	0	; () banked
  4804  00142E  6FBB               	movwf	ES_CheckUserEvents@i& (0+255),b
  4805  001430  0100               	movlb	0	; () banked
  4806  001432  51BB               	movf	ES_CheckUserEvents@i& (0+255),w,b
  4807  001434  0100               	movlb	0	; () banked
  4808  001436  A4D8               	btfss	status,2,c
  4809  001438  0012               	return	
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  4813                           
  4814                           ; BSR set to: 0
  4815                           
  4816                           ; BSR set to: 0
  4817  00143A  0100               	movlb	0	; () banked
  4818  00143C  51BB               	movf	ES_CheckUserEvents@i& (0+255),w,b
  4819  00143E  0D02               	mullw	2
  4820  001440  0E5E               	movlw	low _ES_EventList
  4821  001442  24F3               	addwf	prodl,w,c
  4822  001444  6EF6               	movwf	tblptrl,c
  4823  001446  0E03               	movlw	high _ES_EventList
  4824  001448  20F4               	addwfc	prodh,w,c
  4825  00144A  6EF7               	movwf	tblptrh,c
  4826  00144C                     	if	0	;There are less than 3 active tblptr bytes
  4827  00144C                     	endif
  4828  00144C  D801               	call	u1448
  4829  00144E  D00C               	goto	u1449
  4830  001450                     u1448:
  4831  001450  0005               	push	
  4832  001452  6EFA               	movwf	pclath,c
  4833  001454  0009               	tblrd		*+
  4834  001456  50F5               	movf	tablat,w,c
  4835  001458  6EFD               	movwf	tosl,c
  4836  00145A  0009               	tblrd		*+
  4837  00145C  50F5               	movf	tablat,w,c
  4838  00145E  6EFE               	movwf	tosh,c
  4839  001460  50F8               	movf	tblptru,w,c
  4840  001462  6EFF               	movwf	tosu,c
  4841  001464  50FA               	movf	pclath,w,c
  4842  001466  0012               	return		;indir
  4843  001468                     u1449:
  4844  001468  06E8               	decf	wreg,f,c
  4845  00146A  B4D8               	btfsc	status,2,c
  4846  00146C  0012               	return	
  4847                           
  4848                           ;ES_CheckEvents.c: 52: break;
  4849  00146E  0100               	movlb	0	; () banked
  4850  001470  2BBB               	incf	ES_CheckUserEvents@i& (0+255),f,b
  4851  001472  D7DE               	goto	L11
  4852  001474                     __end_of_ES_CheckUserEvents:
  4853                           	opt stack 0
  4854                           tosu	equ	0xFFF
  4855                           tosh	equ	0xFFE
  4856                           tosl	equ	0xFFD
  4857                           pclath	equ	0xFFA
  4858                           tblptru	equ	0xFF8
  4859                           tblptrh	equ	0xFF7
  4860                           tblptrl	equ	0xFF6
  4861                           tablat	equ	0xFF5
  4862                           prodh	equ	0xFF4
  4863                           prodl	equ	0xFF3
  4864                           intcon	equ	0xFF2
  4865                           postinc0	equ	0xFEE
  4866                           wreg	equ	0xFE8
  4867                           indf1	equ	0xFE7
  4868                           postinc1	equ	0xFE6
  4869                           postdec1	equ	0xFE5
  4870                           fsr1h	equ	0xFE2
  4871                           fsr1l	equ	0xFE1
  4872                           indf2	equ	0xFDF
  4873                           postinc2	equ	0xFDE
  4874                           postdec2	equ	0xFDD
  4875                           fsr2h	equ	0xFDA
  4876                           fsr2l	equ	0xFD9
  4877                           status	equ	0xFD8
  4878                           
  4879 ;; *************** function _Check4Keystroke *****************
  4880 ;; Defined at:
  4881 ;;		line 62 in file "EventCheckers.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;		None
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;		None
  4886 ;; Return value:  Size  Location     Type
  4887 ;;                  1    wreg      unsigned char 
  4888 ;; Registers used:
  4889 ;;		wreg
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4895 ;;      Params:         0       0       0       0
  4896 ;;      Locals:         0       0       0       0
  4897 ;;      Temps:          0       0       0       0
  4898 ;;      Totals:         0       0       0       0
  4899 ;;Total ram usage:        0 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    6
  4902 ;; This function calls:
  4903 ;;		Nothing
  4904 ;; This function is called by:
  4905 ;;		_ES_CheckUserEvents
  4906 ;; This function uses a non-reentrant model
  4907 ;;
  4908                           
  4909                           	psect	text29
  4910  0017E0                     __ptext29:
  4911                           	opt stack 0
  4912  0017E0                     _Check4Keystroke:
  4913                           	opt stack 22
  4914                           
  4915                           ;EventCheckers.c: 78: return 0;
  4916                           
  4917                           ;incstack = 0
  4918  0017E0  0E00               	movlw	0
  4919  0017E2  0012               	return	
  4920  0017E4                     __end_of_Check4Keystroke:
  4921                           	opt stack 0
  4922                           tosu	equ	0xFFF
  4923                           tosh	equ	0xFFE
  4924                           tosl	equ	0xFFD
  4925                           pclath	equ	0xFFA
  4926                           tblptru	equ	0xFF8
  4927                           tblptrh	equ	0xFF7
  4928                           tblptrl	equ	0xFF6
  4929                           tablat	equ	0xFF5
  4930                           prodh	equ	0xFF4
  4931                           prodl	equ	0xFF3
  4932                           intcon	equ	0xFF2
  4933                           postinc0	equ	0xFEE
  4934                           wreg	equ	0xFE8
  4935                           indf1	equ	0xFE7
  4936                           postinc1	equ	0xFE6
  4937                           postdec1	equ	0xFE5
  4938                           fsr1h	equ	0xFE2
  4939                           fsr1l	equ	0xFE1
  4940                           indf2	equ	0xFDF
  4941                           postinc2	equ	0xFDE
  4942                           postdec2	equ	0xFDD
  4943                           fsr2h	equ	0xFDA
  4944                           fsr2l	equ	0xFD9
  4945                           status	equ	0xFD8
  4946                           
  4947 ;; *************** function _ES_Initialize *****************
  4948 ;; Defined at:
  4949 ;;		line 242 in file "ES_Framework.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;  NewRate         2   33[BANK0 ] enum E15424
  4952 ;; Auto vars:     Size  Location     Type
  4953 ;;  i               1   35[BANK0 ] unsigned char 
  4954 ;; Return value:  Size  Location     Type
  4955 ;;                  1    wreg      enum E15495
  4956 ;; Registers used:
  4957 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4958 ;; Tracked objects:
  4959 ;;		On entry : 0/0
  4960 ;;		On exit  : 0/0
  4961 ;;		Unchanged: 0/0
  4962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4963 ;;      Params:         0       2       0       0
  4964 ;;      Locals:         0       1       0       0
  4965 ;;      Temps:          0       0       0       0
  4966 ;;      Totals:         0       3       0       0
  4967 ;;Total ram usage:        3 bytes
  4968 ;; Hardware stack levels used:    1
  4969 ;; Hardware stack levels required when called:   10
  4970 ;; This function calls:
  4971 ;;		_ES_InitQueue
  4972 ;;		_ES_Timer_Init
  4973 ;;		_InitPatternControlService
  4974 ;;		_InitSPI32ControlService
  4975 ;; This function is called by:
  4976 ;;		_main
  4977 ;; This function uses a non-reentrant model
  4978 ;;
  4979                           
  4980                           	psect	text30
  4981  000938                     __ptext30:
  4982                           	opt stack 0
  4983  000938                     _ES_Initialize:
  4984                           	opt stack 20
  4985                           
  4986                           ;ES_Framework.c: 243: uint8_t i;
  4987                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  4988                           
  4989                           ;incstack = 0
  4990  000938  C0DC  F0BD         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  4991  00093C  C0DD  F0BE         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  4992  000940  ECD6  F00B         	call	_ES_Timer_Init	;wreg free
  4993                           
  4994                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  4995  000944  0E00               	movlw	0
  4996  000946  0100               	movlb	0	; () banked
  4997  000948  6FDE               	movwf	ES_Initialize@i& (0+255),b
  4998  00094A                     l2598:
  4999                           
  5000                           ; BSR set to: 0
  5001  00094A  0E01               	movlw	1
  5002  00094C  0100               	movlb	0	; () banked
  5003  00094E  65DE               	cpfsgt	ES_Initialize@i& (0+255),b
  5004  000950  D001               	goto	l2602
  5005  000952  D066               	goto	l2622
  5006  000954                     l2602:
  5007                           
  5008                           ; BSR set to: 0
  5009                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  5010                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  5011  000954  0100               	movlb	0	; () banked
  5012  000956  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5013  000958  0D04               	mullw	4
  5014  00095A  0E50               	movlw	low _ServDescList
  5015  00095C  24F3               	addwf	prodl,w,c
  5016  00095E  6EF6               	movwf	tblptrl,c
  5017  000960  0E03               	movlw	high _ServDescList
  5018  000962  20F4               	addwfc	prodh,w,c
  5019  000964  6EF7               	movwf	tblptrh,c
  5020  000966                     	if	0	;There are less than 3 active tblptr bytes
  5021  000966                     	endif
  5022  000966  0009               	tblrd		*+
  5023  000968  50F5               	movf	tablat,w,c
  5024  00096A  0009               	tblrd		*+
  5025  00096C  10F5               	iorwf	tablat,w,c
  5026  00096E  B4D8               	btfsc	status,2,c
  5027  000970  D013               	goto	l2606
  5028                           
  5029                           ; BSR set to: 0
  5030  000972  0100               	movlb	0	; () banked
  5031  000974  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5032  000976  0D04               	mullw	4
  5033  000978  0E02               	movlw	2
  5034  00097A  26F3               	addwf	prodl,f,c
  5035  00097C  0E00               	movlw	0
  5036  00097E  22F4               	addwfc	prodh,f,c
  5037  000980  0E50               	movlw	low _ServDescList
  5038  000982  24F3               	addwf	prodl,w,c
  5039  000984  6EF6               	movwf	tblptrl,c
  5040  000986  0E03               	movlw	high _ServDescList
  5041  000988  20F4               	addwfc	prodh,w,c
  5042  00098A  6EF7               	movwf	tblptrh,c
  5043  00098C                     	if	0	;There are less than 3 active tblptr bytes
  5044  00098C                     	endif
  5045  00098C  0009               	tblrd		*+
  5046  00098E  50F5               	movf	tablat,w,c
  5047  000990  0009               	tblrd		*+
  5048  000992  10F5               	iorwf	tablat,w,c
  5049  000994  A4D8               	btfss	status,2,c
  5050  000996  D002               	goto	l2610
  5051  000998                     l2606:
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;ES_Framework.c: 249: return FailedPointer;
  5055  000998  0E03               	movlw	3
  5056                           
  5057                           ; BSR set to: 0
  5058  00099A  0012               	return	
  5059  00099C                     l2610:
  5060                           
  5061                           ; BSR set to: 0
  5062                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  5063  00099C  0100               	movlb	0	; () banked
  5064  00099E  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5065  0009A0  0D03               	mullw	3
  5066  0009A2  0E58               	movlw	low _EventQueues
  5067  0009A4  24F3               	addwf	prodl,w,c
  5068  0009A6  6EF6               	movwf	tblptrl,c
  5069  0009A8  0E03               	movlw	high _EventQueues
  5070  0009AA  20F4               	addwfc	prodh,w,c
  5071  0009AC  6EF7               	movwf	tblptrh,c
  5072  0009AE                     	if	0	;There are less than 3 active tblptr bytes
  5073  0009AE                     	endif
  5074  0009AE  0009               	tblrd		*+
  5075  0009B0  CFF5 F0BB          	movff	tablat,ES_InitQueue@pBlock
  5076  0009B4  000A               	tblrd		*-
  5077  0009B6  CFF5 F0BC          	movff	tablat,ES_InitQueue@pBlock+1
  5078  0009BA  0100               	movlb	0	; () banked
  5079  0009BC  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5080  0009BE  0D03               	mullw	3
  5081  0009C0  0E02               	movlw	2
  5082  0009C2  26F3               	addwf	prodl,f,c
  5083  0009C4  0E00               	movlw	0
  5084  0009C6  22F4               	addwfc	prodh,f,c
  5085  0009C8  0E58               	movlw	low _EventQueues
  5086  0009CA  24F3               	addwf	prodl,w,c
  5087  0009CC  6EF6               	movwf	tblptrl,c
  5088  0009CE  0E03               	movlw	high _EventQueues
  5089  0009D0  20F4               	addwfc	prodh,w,c
  5090  0009D2  6EF7               	movwf	tblptrh,c
  5091  0009D4                     	if	0	;There are less than 3 active tblptr bytes
  5092  0009D4                     	endif
  5093  0009D4  0008               	tblrd		*
  5094  0009D6  CFF5 F0BD          	movff	tablat,ES_InitQueue@BlockSize
  5095  0009DA  EC7D  F00A         	call	_ES_InitQueue	;wreg free
  5096                           
  5097                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  5098  0009DE  0100               	movlb	0	; () banked
  5099  0009E0  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5100  0009E2  0D04               	mullw	4
  5101  0009E4  0E50               	movlw	low _ServDescList
  5102  0009E6  24F3               	addwf	prodl,w,c
  5103  0009E8  6EF6               	movwf	tblptrl,c
  5104  0009EA  0E03               	movlw	high _ServDescList
  5105  0009EC  20F4               	addwfc	prodh,w,c
  5106  0009EE  6EF7               	movwf	tblptrh,c
  5107  0009F0                     	if	0	;There are less than 3 active tblptr bytes
  5108  0009F0                     	endif
  5109  0009F0  D801               	call	u1698
  5110  0009F2  D00E               	goto	u1699
  5111  0009F4                     u1698:
  5112  0009F4  0005               	push	
  5113  0009F6  6EFA               	movwf	pclath,c
  5114  0009F8  0009               	tblrd		*+
  5115  0009FA  50F5               	movf	tablat,w,c
  5116  0009FC  6EFD               	movwf	tosl,c
  5117  0009FE  0009               	tblrd		*+
  5118  000A00  50F5               	movf	tablat,w,c
  5119  000A02  6EFE               	movwf	tosh,c
  5120  000A04  50F8               	movf	tblptru,w,c
  5121  000A06  6EFF               	movwf	tosu,c
  5122  000A08  50FA               	movf	pclath,w,c
  5123  000A0A  0100               	movlb	0	; () banked
  5124  000A0C  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5125  000A0E  0012               	return		;indir
  5126  000A10                     u1699:
  5127  000A10  06E8               	decf	wreg,f,c
  5128  000A12  B4D8               	btfsc	status,2,c
  5129  000A14  D002               	goto	l2618
  5130                           
  5131                           ;ES_Framework.c: 254: return FailedInit;
  5132  000A16  0E05               	movlw	5
  5133  000A18  0012               	return	
  5134  000A1A                     l2618:
  5135  000A1A  0100               	movlb	0	; () banked
  5136  000A1C  2BDE               	incf	ES_Initialize@i& (0+255),f,b
  5137  000A1E  D795               	goto	l2598
  5138  000A20                     l2622:
  5139                           
  5140                           ; BSR set to: 0
  5141                           ;ES_Framework.c: 255: }
  5142                           ;ES_Framework.c: 256: return Success;
  5143  000A20  0E00               	movlw	0
  5144  000A22  0012               	return	
  5145  000A24                     __end_of_ES_Initialize:
  5146                           	opt stack 0
  5147                           tosu	equ	0xFFF
  5148                           tosh	equ	0xFFE
  5149                           tosl	equ	0xFFD
  5150                           pclath	equ	0xFFA
  5151                           tblptru	equ	0xFF8
  5152                           tblptrh	equ	0xFF7
  5153                           tblptrl	equ	0xFF6
  5154                           tablat	equ	0xFF5
  5155                           prodh	equ	0xFF4
  5156                           prodl	equ	0xFF3
  5157                           intcon	equ	0xFF2
  5158                           postinc0	equ	0xFEE
  5159                           wreg	equ	0xFE8
  5160                           indf1	equ	0xFE7
  5161                           postinc1	equ	0xFE6
  5162                           postdec1	equ	0xFE5
  5163                           fsr1h	equ	0xFE2
  5164                           fsr1l	equ	0xFE1
  5165                           indf2	equ	0xFDF
  5166                           postinc2	equ	0xFDE
  5167                           postdec2	equ	0xFDD
  5168                           fsr2h	equ	0xFDA
  5169                           fsr2l	equ	0xFD9
  5170                           status	equ	0xFD8
  5171                           
  5172 ;; *************** function _InitPatternControlService *****************
  5173 ;; Defined at:
  5174 ;;		line 97 in file "Pattern_ControlService.c"
  5175 ;; Parameters:    Size  Location     Type
  5176 ;;  Priority        1    wreg     unsigned char 
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;  Priority        1   32[BANK0 ] unsigned char 
  5179 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  1    wreg      unsigned char 
  5182 ;; Registers used:
  5183 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5189 ;;      Params:         0       0       0       0
  5190 ;;      Locals:         0       4       0       0
  5191 ;;      Temps:          0       0       0       0
  5192 ;;      Totals:         0       4       0       0
  5193 ;;Total ram usage:        4 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; Hardware stack levels required when called:    9
  5196 ;; This function calls:
  5197 ;;		_DotStar_Init
  5198 ;;		_ES_PostToService
  5199 ;;		_SetupPattern
  5200 ;; This function is called by:
  5201 ;;		_ES_Initialize
  5202 ;; This function uses a non-reentrant model
  5203 ;;
  5204                           
  5205                           	psect	text31
  5206  001340                     __ptext31:
  5207                           	opt stack 0
  5208  001340                     _InitPatternControlService:
  5209                           	opt stack 20
  5210                           
  5211                           ;incstack = 0
  5212                           ;InitPatternControlService@Priority stored from wreg
  5213  001340  0100               	movlb	0	; () banked
  5214  001342  6FDB               	movwf	InitPatternControlService@Priority& (0+255),b
  5215                           
  5216                           ;Pattern_ControlService.c: 99: ES_Event ThisEvent;
  5217                           ;Pattern_ControlService.c: 101: MyPriority = Priority;
  5218  001344  C0DB  F09C         	movff	InitPatternControlService@Priority,_MyPriority
  5219                           
  5220                           ;Pattern_ControlService.c: 103: DotStar_Init(11);
  5221  001348  0E0B               	movlw	11
  5222  00134A  EC83  F005         	call	_DotStar_Init
  5223                           
  5224                           ;Pattern_ControlService.c: 104: SetupPattern(PatternConfigs, 11);
  5225  00134E  0EF2               	movlw	low _PatternConfigs
  5226  001350  0100               	movlb	0	; () banked
  5227  001352  6FBB               	movwf	SetupPattern@configs& (0+255),b
  5228  001354  0E00               	movlw	high _PatternConfigs
  5229  001356  0100               	movlb	0	; () banked
  5230  001358  6FBC               	movwf	(SetupPattern@configs+1)& (0+255),b
  5231  00135A  0E0B               	movlw	11
  5232  00135C  0100               	movlb	0	; () banked
  5233  00135E  6FBD               	movwf	SetupPattern@numPixels& (0+255),b
  5234  001360  ECCF  F00B         	call	_SetupPattern	;wreg free
  5235                           
  5236                           ;Pattern_ControlService.c: 106: CurrentState = Pattern_Startup;
  5237  001364  0E00               	movlw	0
  5238  001366  0100               	movlb	0	; () banked
  5239  001368  6F99               	movwf	_CurrentState& (0+255),b
  5240                           
  5241                           ; BSR set to: 0
  5242                           ;Pattern_ControlService.c: 108: ThisEvent.EventType = ES_INIT;
  5243  00136A  0E02               	movlw	2
  5244  00136C  0100               	movlb	0	; () banked
  5245  00136E  6FD8               	movwf	InitPatternControlService@ThisEvent& (0+255),b
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;Pattern_ControlService.c: 109: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  5249  001370  C0D8  F0D2         	movff	InitPatternControlService@ThisEvent,ES_PostToService@TheEvent
  5250  001374  C0D9  F0D3         	movff	InitPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  5251  001378  C0DA  F0D4         	movff	InitPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  5252  00137C  0100               	movlb	0	; () banked
  5253  00137E  519C               	movf	_MyPriority& (0+255),w,b
  5254  001380  ECF8  F008         	call	_ES_PostToService
  5255  001384  06E8               	decf	wreg,f,c
  5256  001386  A4D8               	btfss	status,2,c
  5257  001388  D002               	goto	l2472
  5258                           
  5259                           ;Pattern_ControlService.c: 110: {
  5260                           ;Pattern_ControlService.c: 111: return 1;
  5261  00138A  0E01               	movlw	1
  5262                           
  5263                           ;Pattern_ControlService.c: 112: }else
  5264  00138C  0012               	return	
  5265  00138E                     l2472:
  5266                           
  5267                           ;Pattern_ControlService.c: 113: {
  5268                           ;Pattern_ControlService.c: 114: return 0;
  5269  00138E  0E00               	movlw	0
  5270  001390  0012               	return	
  5271  001392                     __end_of_InitPatternControlService:
  5272                           	opt stack 0
  5273                           tosu	equ	0xFFF
  5274                           tosh	equ	0xFFE
  5275                           tosl	equ	0xFFD
  5276                           pclath	equ	0xFFA
  5277                           tblptru	equ	0xFF8
  5278                           tblptrh	equ	0xFF7
  5279                           tblptrl	equ	0xFF6
  5280                           tablat	equ	0xFF5
  5281                           prodh	equ	0xFF4
  5282                           prodl	equ	0xFF3
  5283                           intcon	equ	0xFF2
  5284                           postinc0	equ	0xFEE
  5285                           wreg	equ	0xFE8
  5286                           indf1	equ	0xFE7
  5287                           postinc1	equ	0xFE6
  5288                           postdec1	equ	0xFE5
  5289                           fsr1h	equ	0xFE2
  5290                           fsr1l	equ	0xFE1
  5291                           indf2	equ	0xFDF
  5292                           postinc2	equ	0xFDE
  5293                           postdec2	equ	0xFDD
  5294                           fsr2h	equ	0xFDA
  5295                           fsr2l	equ	0xFD9
  5296                           status	equ	0xFD8
  5297                           
  5298 ;; *************** function _InitSPI32ControlService *****************
  5299 ;; Defined at:
  5300 ;;		line 80 in file "SPI32_ControlService.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;  Priority        1    wreg     unsigned char 
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;  Priority        1   32[BANK0 ] unsigned char 
  5305 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  1    wreg      unsigned char 
  5308 ;; Registers used:
  5309 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5315 ;;      Params:         0       0       0       0
  5316 ;;      Locals:         0       4       0       0
  5317 ;;      Temps:          0       0       0       0
  5318 ;;      Totals:         0       4       0       0
  5319 ;;Total ram usage:        4 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    9
  5322 ;; This function calls:
  5323 ;;		_ES_PostToService
  5324 ;;		_SPI32_Init
  5325 ;; This function is called by:
  5326 ;;		_ES_Initialize
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           	psect	text32
  5331  001536                     __ptext32:
  5332                           	opt stack 0
  5333  001536                     _InitSPI32ControlService:
  5334                           	opt stack 20
  5335                           
  5336                           ;incstack = 0
  5337                           ;InitSPI32ControlService@Priority stored from wreg
  5338  001536  0100               	movlb	0	; () banked
  5339  001538  6FDB               	movwf	InitSPI32ControlService@Priority& (0+255),b
  5340                           
  5341                           ;SPI32_ControlService.c: 82: ES_Event ThisEvent;
  5342                           ;SPI32_ControlService.c: 84: MyPriority = Priority;
  5343  00153A  C0DB  F098         	movff	InitSPI32ControlService@Priority,SPI32_ControlService@MyPriority
  5344                           
  5345                           ;SPI32_ControlService.c: 86: SPI32_Init();
  5346  00153E  ECEA  F00B         	call	_SPI32_Init	;wreg free
  5347                           
  5348                           ;SPI32_ControlService.c: 88: CurrentState = SPI32_Startup;
  5349  001542  0E00               	movlw	0
  5350  001544  0100               	movlb	0	; () banked
  5351  001546  6F97               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  5352                           
  5353                           ; BSR set to: 0
  5354                           ;SPI32_ControlService.c: 90: ThisEvent.EventType = ES_INIT;
  5355  001548  0E02               	movlw	2
  5356  00154A  0100               	movlb	0	; () banked
  5357  00154C  6FD8               	movwf	InitSPI32ControlService@ThisEvent& (0+255),b
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;SPI32_ControlService.c: 91: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  5361  00154E  C0D8  F0D2         	movff	InitSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  5362  001552  C0D9  F0D3         	movff	InitSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  5363  001556  C0DA  F0D4         	movff	InitSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  5364  00155A  0100               	movlb	0	; () banked
  5365  00155C  5198               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  5366  00155E  ECF8  F008         	call	_ES_PostToService
  5367  001562  06E8               	decf	wreg,f,c
  5368  001564  A4D8               	btfss	status,2,c
  5369  001566  D002               	goto	l2538
  5370                           
  5371                           ;SPI32_ControlService.c: 92: {
  5372                           ;SPI32_ControlService.c: 93: return 1;
  5373  001568  0E01               	movlw	1
  5374                           
  5375                           ;SPI32_ControlService.c: 94: }else
  5376  00156A  0012               	return	
  5377  00156C                     l2538:
  5378                           
  5379                           ;SPI32_ControlService.c: 95: {
  5380                           ;SPI32_ControlService.c: 96: return 0;
  5381  00156C  0E00               	movlw	0
  5382  00156E  0012               	return	
  5383  001570                     __end_of_InitSPI32ControlService:
  5384                           	opt stack 0
  5385                           tosu	equ	0xFFF
  5386                           tosh	equ	0xFFE
  5387                           tosl	equ	0xFFD
  5388                           pclath	equ	0xFFA
  5389                           tblptru	equ	0xFF8
  5390                           tblptrh	equ	0xFF7
  5391                           tblptrl	equ	0xFF6
  5392                           tablat	equ	0xFF5
  5393                           prodh	equ	0xFF4
  5394                           prodl	equ	0xFF3
  5395                           intcon	equ	0xFF2
  5396                           postinc0	equ	0xFEE
  5397                           wreg	equ	0xFE8
  5398                           indf1	equ	0xFE7
  5399                           postinc1	equ	0xFE6
  5400                           postdec1	equ	0xFE5
  5401                           fsr1h	equ	0xFE2
  5402                           fsr1l	equ	0xFE1
  5403                           indf2	equ	0xFDF
  5404                           postinc2	equ	0xFDE
  5405                           postdec2	equ	0xFDD
  5406                           fsr2h	equ	0xFDA
  5407                           fsr2l	equ	0xFD9
  5408                           status	equ	0xFD8
  5409                           
  5410 ;; *************** function _SPI32_Init *****************
  5411 ;; Defined at:
  5412 ;;		line 64 in file "SPI32_HW.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;		None
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;		None
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  1    wreg      void 
  5419 ;; Registers used:
  5420 ;;		wreg, status,2, cstack
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5426 ;;      Params:         0       0       0       0
  5427 ;;      Locals:         0       0       0       0
  5428 ;;      Temps:          0       0       0       0
  5429 ;;      Totals:         0       0       0       0
  5430 ;;Total ram usage:        0 bytes
  5431 ;; Hardware stack levels used:    1
  5432 ;; Hardware stack levels required when called:    7
  5433 ;; This function calls:
  5434 ;;		_HW_Init
  5435 ;; This function is called by:
  5436 ;;		_InitSPI32ControlService
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text33
  5441  0017D4                     __ptext33:
  5442                           	opt stack 0
  5443  0017D4                     _SPI32_Init:
  5444                           	opt stack 21
  5445                           
  5446                           ;SPI32_HW.c: 66: HW_Init();
  5447                           
  5448                           ;incstack = 0
  5449  0017D4  EC5A  F00B         	call	_HW_Init	;wreg free
  5450  0017D8  0012               	return		;funcret
  5451  0017DA                     __end_of_SPI32_Init:
  5452                           	opt stack 0
  5453                           tosu	equ	0xFFF
  5454                           tosh	equ	0xFFE
  5455                           tosl	equ	0xFFD
  5456                           pclath	equ	0xFFA
  5457                           tblptru	equ	0xFF8
  5458                           tblptrh	equ	0xFF7
  5459                           tblptrl	equ	0xFF6
  5460                           tablat	equ	0xFF5
  5461                           prodh	equ	0xFF4
  5462                           prodl	equ	0xFF3
  5463                           intcon	equ	0xFF2
  5464                           postinc0	equ	0xFEE
  5465                           wreg	equ	0xFE8
  5466                           indf1	equ	0xFE7
  5467                           postinc1	equ	0xFE6
  5468                           postdec1	equ	0xFE5
  5469                           fsr1h	equ	0xFE2
  5470                           fsr1l	equ	0xFE1
  5471                           indf2	equ	0xFDF
  5472                           postinc2	equ	0xFDE
  5473                           postdec2	equ	0xFDD
  5474                           fsr2h	equ	0xFDA
  5475                           fsr2l	equ	0xFD9
  5476                           status	equ	0xFD8
  5477                           
  5478 ;; *************** function _HW_Init *****************
  5479 ;; Defined at:
  5480 ;;		line 117 in file "SPI32_HW.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;		None
  5483 ;; Auto vars:     Size  Location     Type
  5484 ;;		None
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  1    wreg      void 
  5487 ;; Registers used:
  5488 ;;		wreg, status,2
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5494 ;;      Params:         0       0       0       0
  5495 ;;      Locals:         0       0       0       0
  5496 ;;      Temps:          0       0       0       0
  5497 ;;      Totals:         0       0       0       0
  5498 ;;Total ram usage:        0 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    6
  5501 ;; This function calls:
  5502 ;;		Nothing
  5503 ;; This function is called by:
  5504 ;;		_SPI32_Init
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           	psect	text34
  5509  0016B4                     __ptext34:
  5510                           	opt stack 0
  5511  0016B4                     _HW_Init:
  5512                           	opt stack 21
  5513                           
  5514                           ;SPI32_HW.c: 123: PORTC = 0x00;
  5515                           
  5516                           ;incstack = 0
  5517  0016B4  0E00               	movlw	0
  5518  0016B6  6E82               	movwf	3970,c	;volatile
  5519                           
  5520                           ;SPI32_HW.c: 124: LATC = 0x00;
  5521  0016B8  0E00               	movlw	0
  5522  0016BA  6E8B               	movwf	3979,c	;volatile
  5523                           
  5524                           ;SPI32_HW.c: 125: ADCON1 = 0x0F;
  5525  0016BC  0E0F               	movlw	15
  5526  0016BE  6EC1               	movwf	4033,c	;volatile
  5527                           
  5528                           ;SPI32_HW.c: 126: TRISC = 0x00;
  5529  0016C0  0E00               	movlw	0
  5530  0016C2  6E94               	movwf	3988,c	;volatile
  5531                           
  5532                           ;SPI32_HW.c: 128: SSPIE = 1;
  5533  0016C4  869D               	bsf	3997,3,c	;volatile
  5534                           
  5535                           ;SPI32_HW.c: 132: SSPCON1 = 0x00;
  5536  0016C6  0E00               	movlw	0
  5537  0016C8  6EC6               	movwf	4038,c	;volatile
  5538                           
  5539                           ;SPI32_HW.c: 133: SSPSTAT = 0b01000000;
  5540  0016CA  0E40               	movlw	64
  5541  0016CC  6EC7               	movwf	4039,c	;volatile
  5542                           
  5543                           ;SPI32_HW.c: 134: SSPADD = 0xFF;
  5544  0016CE  68C8               	setf	4040,c	;volatile
  5545                           
  5546                           ;SPI32_HW.c: 135: SSPCON1 = 0b00110010;
  5547  0016D0  0E32               	movlw	50
  5548  0016D2  6EC6               	movwf	4038,c	;volatile
  5549  0016D4  0012               	return		;funcret
  5550  0016D6                     __end_of_HW_Init:
  5551                           	opt stack 0
  5552                           tosu	equ	0xFFF
  5553                           tosh	equ	0xFFE
  5554                           tosl	equ	0xFFD
  5555                           pclath	equ	0xFFA
  5556                           tblptru	equ	0xFF8
  5557                           tblptrh	equ	0xFF7
  5558                           tblptrl	equ	0xFF6
  5559                           tablat	equ	0xFF5
  5560                           prodh	equ	0xFF4
  5561                           prodl	equ	0xFF3
  5562                           intcon	equ	0xFF2
  5563                           postinc0	equ	0xFEE
  5564                           wreg	equ	0xFE8
  5565                           indf1	equ	0xFE7
  5566                           postinc1	equ	0xFE6
  5567                           postdec1	equ	0xFE5
  5568                           fsr1h	equ	0xFE2
  5569                           fsr1l	equ	0xFE1
  5570                           indf2	equ	0xFDF
  5571                           postinc2	equ	0xFDE
  5572                           postdec2	equ	0xFDD
  5573                           fsr2h	equ	0xFDA
  5574                           fsr2l	equ	0xFD9
  5575                           status	equ	0xFD8
  5576                           
  5577 ;; *************** function _SetupPattern *****************
  5578 ;; Defined at:
  5579 ;;		line 69 in file "Pattern_RGBPatterns.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  configs         2    0[BANK0 ] PTR unsigned char 
  5582 ;;		 -> PatternConfigs(5), 
  5583 ;;  numPixels       1    2[BANK0 ] unsigned char 
  5584 ;; Auto vars:     Size  Location     Type
  5585 ;;		None
  5586 ;; Return value:  Size  Location     Type
  5587 ;;                  1    wreg      void 
  5588 ;; Registers used:
  5589 ;;		wreg, status,2, status,0
  5590 ;; Tracked objects:
  5591 ;;		On entry : 0/0
  5592 ;;		On exit  : 0/0
  5593 ;;		Unchanged: 0/0
  5594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5595 ;;      Params:         0       3       0       0
  5596 ;;      Locals:         0       0       0       0
  5597 ;;      Temps:          0       0       0       0
  5598 ;;      Totals:         0       3       0       0
  5599 ;;Total ram usage:        3 bytes
  5600 ;; Hardware stack levels used:    1
  5601 ;; Hardware stack levels required when called:    6
  5602 ;; This function calls:
  5603 ;;		Nothing
  5604 ;; This function is called by:
  5605 ;;		_InitPatternControlService
  5606 ;; This function uses a non-reentrant model
  5607 ;;
  5608                           
  5609                           	psect	text35
  5610  00179E                     __ptext35:
  5611                           	opt stack 0
  5612  00179E                     _SetupPattern:
  5613                           	opt stack 22
  5614                           
  5615                           ;Pattern_RGBPatterns.c: 71: PatternConfigs = configs;
  5616                           
  5617                           ;incstack = 0
  5618  00179E  C0BB  F08D         	movff	SetupPattern@configs,Pattern_RGBPatterns@PatternConfigs
  5619  0017A2  C0BC  F08E         	movff	SetupPattern@configs+1,Pattern_RGBPatterns@PatternConfigs+1
  5620                           
  5621                           ;Pattern_RGBPatterns.c: 73: Length = numPixels;
  5622  0017A6  C0BD  F096         	movff	SetupPattern@numPixels,Pattern_RGBPatterns@Length
  5623  0017AA  0012               	return		;funcret
  5624  0017AC                     __end_of_SetupPattern:
  5625                           	opt stack 0
  5626                           tosu	equ	0xFFF
  5627                           tosh	equ	0xFFE
  5628                           tosl	equ	0xFFD
  5629                           pclath	equ	0xFFA
  5630                           tblptru	equ	0xFF8
  5631                           tblptrh	equ	0xFF7
  5632                           tblptrl	equ	0xFF6
  5633                           tablat	equ	0xFF5
  5634                           prodh	equ	0xFF4
  5635                           prodl	equ	0xFF3
  5636                           intcon	equ	0xFF2
  5637                           postinc0	equ	0xFEE
  5638                           wreg	equ	0xFE8
  5639                           indf1	equ	0xFE7
  5640                           postinc1	equ	0xFE6
  5641                           postdec1	equ	0xFE5
  5642                           fsr1h	equ	0xFE2
  5643                           fsr1l	equ	0xFE1
  5644                           indf2	equ	0xFDF
  5645                           postinc2	equ	0xFDE
  5646                           postdec2	equ	0xFDD
  5647                           fsr2h	equ	0xFDA
  5648                           fsr2l	equ	0xFD9
  5649                           status	equ	0xFD8
  5650                           
  5651 ;; *************** function _ES_PostToService *****************
  5652 ;; Defined at:
  5653 ;;		line 351 in file "ES_Framework.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;  WhichService    1    wreg     unsigned char 
  5656 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;  WhichService    1   28[BANK0 ] unsigned char 
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  1    wreg      unsigned char 
  5661 ;; Registers used:
  5662 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5668 ;;      Params:         0       3       0       0
  5669 ;;      Locals:         0       1       0       0
  5670 ;;      Temps:          0       2       0       0
  5671 ;;      Totals:         0       6       0       0
  5672 ;;Total ram usage:        6 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:    8
  5675 ;; This function calls:
  5676 ;;		_ES_EnQueueFIFO
  5677 ;; This function is called by:
  5678 ;;		_InitPatternControlService
  5679 ;;		_PostPatternControlService
  5680 ;;		_InitSPI32ControlService
  5681 ;;		_PostSPI32ControlService
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           	psect	text36
  5686  0011F0                     __ptext36:
  5687                           	opt stack 0
  5688  0011F0                     _ES_PostToService:
  5689                           	opt stack 18
  5690                           
  5691                           ;incstack = 0
  5692                           ;ES_PostToService@WhichService stored from wreg
  5693  0011F0  0100               	movlb	0	; () banked
  5694  0011F2  6FD7               	movwf	ES_PostToService@WhichService& (0+255),b
  5695                           
  5696                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  5697                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  5698                           ;ES_Framework.c: 354: 1 )){
  5699  0011F4  0E02               	movlw	2
  5700  0011F6  0100               	movlb	0	; () banked
  5701  0011F8  61D7               	cpfslt	ES_PostToService@WhichService& (0+255),b
  5702  0011FA  D033               	goto	l2078
  5703                           
  5704                           ; BSR set to: 0
  5705  0011FC  0100               	movlb	0	; () banked
  5706  0011FE  51D7               	movf	ES_PostToService@WhichService& (0+255),w,b
  5707  001200  0D03               	mullw	3
  5708  001202  0E58               	movlw	low _EventQueues
  5709  001204  24F3               	addwf	prodl,w,c
  5710  001206  6EF6               	movwf	tblptrl,c
  5711  001208  0E03               	movlw	high _EventQueues
  5712  00120A  20F4               	addwfc	prodh,w,c
  5713  00120C  6EF7               	movwf	tblptrh,c
  5714  00120E                     	if	0	;There are less than 3 active tblptr bytes
  5715  00120E                     	endif
  5716  00120E  0009               	tblrd		*+
  5717  001210  CFF5 F0C7          	movff	tablat,ES_EnQueueFIFO@pBlock
  5718  001214  000A               	tblrd		*-
  5719  001216  CFF5 F0C8          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  5720  00121A  C0D2  F0C9         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  5721  00121E  C0D3  F0CA         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  5722  001222  C0D4  F0CB         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  5723  001226  EC12  F005         	call	_ES_EnQueueFIFO	;wreg free
  5724  00122A  06E8               	decf	wreg,f,c
  5725  00122C  A4D8               	btfss	status,2,c
  5726  00122E  D019               	goto	l2078
  5727                           
  5728                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  5729  001230  0100               	movlb	0	; () banked
  5730  001232  51D7               	movf	ES_PostToService@WhichService& (0+255),w,b
  5731  001234  0D02               	mullw	2
  5732  001236  0E01               	movlw	low _BitNum2SetMask
  5733  001238  24F3               	addwf	prodl,w,c
  5734  00123A  6EF6               	movwf	tblptrl,c
  5735  00123C  0E03               	movlw	high _BitNum2SetMask
  5736  00123E  20F4               	addwfc	prodh,w,c
  5737  001240  6EF7               	movwf	tblptrh,c
  5738  001242                     	if	0	;There are less than 3 active tblptr bytes
  5739  001242                     	endif
  5740  001242  0009               	tblrd		*+
  5741  001244  CFF5 F0D5          	movff	tablat,??_ES_PostToService
  5742  001248  0009               	tblrd		*+
  5743  00124A  CFF5 F0D6          	movff	tablat,??_ES_PostToService+1
  5744  00124E  0100               	movlb	0	; () banked
  5745  001250  51D5               	movf	??_ES_PostToService& (0+255),w,b
  5746  001252  0100               	movlb	0	; () banked
  5747  001254  1391               	iorwf	_Ready& (0+255),f,b
  5748  001256  0100               	movlb	0	; () banked
  5749  001258  51D6               	movf	(??_ES_PostToService+1)& (0+255),w,b
  5750  00125A  0100               	movlb	0	; () banked
  5751  00125C  1392               	iorwf	(_Ready+1)& (0+255),f,b
  5752                           
  5753                           ; BSR set to: 0
  5754                           ;ES_Framework.c: 356: return 1;
  5755  00125E  0E01               	movlw	1
  5756                           
  5757                           ; BSR set to: 0
  5758                           ;ES_Framework.c: 357: } else
  5759                           
  5760                           ; BSR set to: 0
  5761  001260  0012               	return	
  5762  001262                     l2078:
  5763                           
  5764                           ;ES_Framework.c: 358: return 0;
  5765  001262  0E00               	movlw	0
  5766  001264  0012               	return	
  5767  001266                     __end_of_ES_PostToService:
  5768                           	opt stack 0
  5769                           tosu	equ	0xFFF
  5770                           tosh	equ	0xFFE
  5771                           tosl	equ	0xFFD
  5772                           pclath	equ	0xFFA
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           intcon	equ	0xFF2
  5780                           postinc0	equ	0xFEE
  5781                           wreg	equ	0xFE8
  5782                           indf1	equ	0xFE7
  5783                           postinc1	equ	0xFE6
  5784                           postdec1	equ	0xFE5
  5785                           fsr1h	equ	0xFE2
  5786                           fsr1l	equ	0xFE1
  5787                           indf2	equ	0xFDF
  5788                           postinc2	equ	0xFDE
  5789                           postdec2	equ	0xFDD
  5790                           fsr2h	equ	0xFDA
  5791                           fsr2l	equ	0xFD9
  5792                           status	equ	0xFD8
  5793                           
  5794 ;; *************** function _ES_EnQueueFIFO *****************
  5795 ;; Defined at:
  5796 ;;		line 85 in file "ES_Queue.c"
  5797 ;; Parameters:    Size  Location     Type
  5798 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  5799 ;;		 -> Queue1(12), Queue0(12), 
  5800 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  5801 ;; Auto vars:     Size  Location     Type
  5802 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  5803 ;;		 -> Queue1(12), Queue0(12), 
  5804 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  1    wreg      unsigned char 
  5807 ;; Registers used:
  5808 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5814 ;;      Params:         0       5       0       0
  5815 ;;      Locals:         0       3       0       0
  5816 ;;      Temps:          0       3       0       0
  5817 ;;      Totals:         0      11       0       0
  5818 ;;Total ram usage:       11 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; Hardware stack levels required when called:    7
  5821 ;; This function calls:
  5822 ;;		___awmod
  5823 ;;		___wmul
  5824 ;; This function is called by:
  5825 ;;		_ES_PostToService
  5826 ;;		_ES_PostAll
  5827 ;; This function uses a non-reentrant model
  5828 ;;
  5829                           
  5830                           	psect	text37
  5831  000A24                     __ptext37:
  5832                           	opt stack 0
  5833  000A24                     _ES_EnQueueFIFO:
  5834                           	opt stack 18
  5835                           
  5836                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  5837                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  5838                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  5839                           
  5840                           ;incstack = 0
  5841  000A24  C0C7  F0D0         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  5842  000A28  C0C8  F0D1         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  5843                           
  5844                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  5845  000A2C  C0D0  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5846  000A30  C0D1  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5847  000A34  0100               	movlb	0	; () banked
  5848  000A36  EE10 F002          	lfsr	1,2
  5849  000A3A  51D0               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5850  000A3C  26E1               	addwf	fsr1l,f,c
  5851  000A3E  51D1               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5852  000A40  22E2               	addwfc	fsr1h,f,c
  5853  000A42  50DE               	movf	postinc2,w,c
  5854  000A44  5CE6               	subwf	postinc1,w,c
  5855  000A46  B0D8               	btfsc	status,0,c
  5856  000A48  D05C               	goto	l2062
  5857                           
  5858                           ; BSR set to: 0
  5859                           
  5860                           ;ES_Queue.c: 92: {
  5861                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  5862  000A4A  CFF2 F0CF          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  5863  000A4E  9EF2               	bcf	intcon,7,c	;volatile
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  5867                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  5868                           
  5869                           ; BSR set to: 0
  5870  000A50  C0D0  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5871  000A54  C0D1  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5872  000A58  50DF               	movf	indf2,w,c
  5873  000A5A  0100               	movlb	0	; () banked
  5874  000A5C  6FCC               	movwf	??_ES_EnQueueFIFO& (0+255),b
  5875  000A5E  0100               	movlb	0	; () banked
  5876  000A60  51CC               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  5877  000A62  0100               	movlb	0	; () banked
  5878  000A64  6FBD               	movwf	___awmod@divisor& (0+255),b
  5879  000A66  6BBE               	clrf	(___awmod@divisor+1)& (0+255),b
  5880  000A68  0100               	movlb	0	; () banked
  5881  000A6A  EE20 F002          	lfsr	2,2
  5882  000A6E  51D0               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5883  000A70  26D9               	addwf	fsr2l,f,c
  5884  000A72  51D1               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5885  000A74  22DA               	addwfc	fsr2h,f,c
  5886  000A76  50DF               	movf	indf2,w,c
  5887  000A78  0100               	movlb	0	; () banked
  5888  000A7A  6FCD               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  5889  000A7C  0100               	movlb	0	; () banked
  5890  000A7E  EE20 F001          	lfsr	2,1
  5891  000A82  51D0               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5892  000A84  26D9               	addwf	fsr2l,f,c
  5893  000A86  51D1               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5894  000A88  22DA               	addwfc	fsr2h,f,c
  5895  000A8A  50DF               	movf	indf2,w,c
  5896  000A8C  0100               	movlb	0	; () banked
  5897  000A8E  6FCE               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  5898  000A90  0100               	movlb	0	; () banked
  5899  000A92  51CE               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  5900  000A94  0100               	movlb	0	; () banked
  5901  000A96  25CD               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  5902  000A98  0100               	movlb	0	; () banked
  5903  000A9A  6FBB               	movwf	___awmod@dividend& (0+255),b
  5904  000A9C  0100               	movlb	0	; () banked
  5905  000A9E  6BBC               	clrf	(___awmod@dividend+1)& (0+255),b
  5906  000AA0  0100               	movlb	0	; () banked
  5907  000AA2  37BC               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  5908  000AA4  EC4C  F007         	call	___awmod	;wreg free
  5909  000AA8  0E01               	movlw	1
  5910  000AAA  0100               	movlb	0	; () banked
  5911  000AAC  25BB               	addwf	?___awmod& (0+255),w,b
  5912  000AAE  0100               	movlb	0	; () banked
  5913  000AB0  6FC1               	movwf	___wmul@multiplier& (0+255),b
  5914  000AB2  0E00               	movlw	0
  5915  000AB4  0100               	movlb	0	; () banked
  5916  000AB6  21BC               	addwfc	(?___awmod+1)& (0+255),w,b
  5917  000AB8  0100               	movlb	0	; () banked
  5918  000ABA  6FC2               	movwf	(___wmul@multiplier+1)& (0+255),b
  5919  000ABC  0E00               	movlw	0
  5920  000ABE  0100               	movlb	0	; () banked
  5921  000AC0  6FC4               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5922  000AC2  0E03               	movlw	3
  5923  000AC4  6FC3               	movwf	___wmul@multiplicand& (0+255),b
  5924  000AC6  ECB8  F00A         	call	___wmul	;wreg free
  5925  000ACA  0100               	movlb	0	; () banked
  5926  000ACC  51C1               	movf	?___wmul& (0+255),w,b
  5927  000ACE  0100               	movlb	0	; () banked
  5928  000AD0  25C7               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  5929  000AD2  6ED9               	movwf	fsr2l,c
  5930  000AD4  0100               	movlb	0	; () banked
  5931  000AD6  51C2               	movf	(?___wmul+1)& (0+255),w,b
  5932  000AD8  0100               	movlb	0	; () banked
  5933  000ADA  21C8               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  5934  000ADC  6EDA               	movwf	fsr2h,c
  5935  000ADE  C0C9  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  5936  000AE2  C0CA  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  5937  000AE6  C0CB  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  5941  000AEA  0100               	movlb	0	; () banked
  5942  000AEC  EE20 F002          	lfsr	2,2
  5943  000AF0  51D0               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5944  000AF2  26D9               	addwf	fsr2l,f,c
  5945  000AF4  51D1               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5946  000AF6  22DA               	addwfc	fsr2h,f,c
  5947  000AF8  2ADF               	incf	indf2,f,c
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  5951  000AFA  C0CF  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;ES_Queue.c: 101: return(1);
  5955  000AFE  0E01               	movlw	1
  5956                           
  5957                           ; BSR set to: 0
  5958                           ;ES_Queue.c: 102: }else
  5959                           
  5960                           ; BSR set to: 0
  5961  000B00  0012               	return	
  5962  000B02                     l2062:
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;ES_Queue.c: 103: return(0);
  5966  000B02  0E00               	movlw	0
  5967                           
  5968                           ; BSR set to: 0
  5969  000B04  0012               	return	
  5970  000B06                     __end_of_ES_EnQueueFIFO:
  5971                           	opt stack 0
  5972                           tosu	equ	0xFFF
  5973                           tosh	equ	0xFFE
  5974                           tosl	equ	0xFFD
  5975                           pclath	equ	0xFFA
  5976                           tblptru	equ	0xFF8
  5977                           tblptrh	equ	0xFF7
  5978                           tblptrl	equ	0xFF6
  5979                           tablat	equ	0xFF5
  5980                           prodh	equ	0xFF4
  5981                           prodl	equ	0xFF3
  5982                           intcon	equ	0xFF2
  5983                           postinc0	equ	0xFEE
  5984                           wreg	equ	0xFE8
  5985                           indf1	equ	0xFE7
  5986                           postinc1	equ	0xFE6
  5987                           postdec1	equ	0xFE5
  5988                           fsr1h	equ	0xFE2
  5989                           fsr1l	equ	0xFE1
  5990                           indf2	equ	0xFDF
  5991                           postinc2	equ	0xFDE
  5992                           postdec2	equ	0xFDD
  5993                           fsr2h	equ	0xFDA
  5994                           fsr2l	equ	0xFD9
  5995                           status	equ	0xFD8
  5996                           
  5997 ;; *************** function ___wmul *****************
  5998 ;; Defined at:
  5999 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  6000 ;; Parameters:    Size  Location     Type
  6001 ;;  multiplier      2    6[BANK0 ] unsigned int 
  6002 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;  product         2   10[BANK0 ] unsigned int 
  6005 ;; Return value:  Size  Location     Type
  6006 ;;                  2    6[BANK0 ] unsigned int 
  6007 ;; Registers used:
  6008 ;;		wreg, status,2, status,0, prodl, prodh
  6009 ;; Tracked objects:
  6010 ;;		On entry : 0/0
  6011 ;;		On exit  : 0/0
  6012 ;;		Unchanged: 0/0
  6013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6014 ;;      Params:         0       4       0       0
  6015 ;;      Locals:         0       2       0       0
  6016 ;;      Temps:          0       0       0       0
  6017 ;;      Totals:         0       6       0       0
  6018 ;;Total ram usage:        6 bytes
  6019 ;; Hardware stack levels used:    1
  6020 ;; Hardware stack levels required when called:    6
  6021 ;; This function calls:
  6022 ;;		Nothing
  6023 ;; This function is called by:
  6024 ;;		_ES_EnQueueFIFO
  6025 ;;		_ES_DeQueue
  6026 ;;		i2_ES_EnQueueFIFO
  6027 ;;		_ES_EnQueueLIFO
  6028 ;; This function uses a non-reentrant model
  6029 ;;
  6030                           
  6031                           	psect	text38
  6032  001570                     __ptext38:
  6033                           	opt stack 0
  6034  001570                     ___wmul:
  6035                           	opt stack 18
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;incstack = 0
  6039  001570  0100               	movlb	0	; () banked
  6040  001572  51C1               	movf	___wmul@multiplier& (0+255),w,b
  6041  001574  0100               	movlb	0	; () banked
  6042  001576  03C3               	mulwf	___wmul@multiplicand& (0+255),b
  6043  001578  CFF3 F0C5          	movff	prodl,___wmul@product
  6044  00157C  CFF4 F0C6          	movff	prodh,___wmul@product+1
  6045  001580  0100               	movlb	0	; () banked
  6046  001582  51C1               	movf	___wmul@multiplier& (0+255),w,b
  6047  001584  0100               	movlb	0	; () banked
  6048  001586  03C4               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6049  001588  50F3               	movf	prodl,w,c
  6050  00158A  0100               	movlb	0	; () banked
  6051  00158C  27C6               	addwf	(___wmul@product+1)& (0+255),f,b
  6052  00158E  0100               	movlb	0	; () banked
  6053  001590  51C2               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6054  001592  0100               	movlb	0	; () banked
  6055  001594  03C3               	mulwf	___wmul@multiplicand& (0+255),b
  6056  001596  50F3               	movf	prodl,w,c
  6057  001598  0100               	movlb	0	; () banked
  6058  00159A  27C6               	addwf	(___wmul@product+1)& (0+255),f,b
  6059                           
  6060                           ; BSR set to: 0
  6061  00159C  C0C5  F0C1         	movff	___wmul@product,?___wmul
  6062  0015A0  C0C6  F0C2         	movff	___wmul@product+1,?___wmul+1
  6063  0015A4  0012               	return	
  6064  0015A6                     __end_of___wmul:
  6065                           	opt stack 0
  6066                           tosu	equ	0xFFF
  6067                           tosh	equ	0xFFE
  6068                           tosl	equ	0xFFD
  6069                           pclath	equ	0xFFA
  6070                           tblptru	equ	0xFF8
  6071                           tblptrh	equ	0xFF7
  6072                           tblptrl	equ	0xFF6
  6073                           tablat	equ	0xFF5
  6074                           prodh	equ	0xFF4
  6075                           prodl	equ	0xFF3
  6076                           intcon	equ	0xFF2
  6077                           postinc0	equ	0xFEE
  6078                           wreg	equ	0xFE8
  6079                           indf1	equ	0xFE7
  6080                           postinc1	equ	0xFE6
  6081                           postdec1	equ	0xFE5
  6082                           fsr1h	equ	0xFE2
  6083                           fsr1l	equ	0xFE1
  6084                           indf2	equ	0xFDF
  6085                           postinc2	equ	0xFDE
  6086                           postdec2	equ	0xFDD
  6087                           fsr2h	equ	0xFDA
  6088                           fsr2l	equ	0xFD9
  6089                           status	equ	0xFD8
  6090                           
  6091 ;; *************** function ___awmod *****************
  6092 ;; Defined at:
  6093 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  6094 ;; Parameters:    Size  Location     Type
  6095 ;;  dividend        2    0[BANK0 ] int 
  6096 ;;  divisor         2    2[BANK0 ] int 
  6097 ;; Auto vars:     Size  Location     Type
  6098 ;;  sign            1    5[BANK0 ] unsigned char 
  6099 ;;  counter         1    4[BANK0 ] unsigned char 
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  2    0[BANK0 ] int 
  6102 ;; Registers used:
  6103 ;;		wreg, status,2, status,0
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6109 ;;      Params:         0       4       0       0
  6110 ;;      Locals:         0       2       0       0
  6111 ;;      Temps:          0       0       0       0
  6112 ;;      Totals:         0       6       0       0
  6113 ;;Total ram usage:        6 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; Hardware stack levels required when called:    6
  6116 ;; This function calls:
  6117 ;;		Nothing
  6118 ;; This function is called by:
  6119 ;;		_ES_EnQueueFIFO
  6120 ;;		i2_ES_EnQueueFIFO
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           	psect	text39
  6125  000E98                     __ptext39:
  6126                           	opt stack 0
  6127  000E98                     ___awmod:
  6128                           	opt stack 18
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;incstack = 0
  6132  000E98  0E00               	movlw	0
  6133  000E9A  0100               	movlb	0	; () banked
  6134  000E9C  6FC0               	movwf	___awmod@sign& (0+255),b
  6135                           
  6136                           ; BSR set to: 0
  6137  000E9E  0100               	movlb	0	; () banked
  6138  000EA0  AFBC               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6139  000EA2  D008               	goto	l2018
  6140                           
  6141                           ; BSR set to: 0
  6142  000EA4  0100               	movlb	0	; () banked
  6143  000EA6  6DBB               	negf	___awmod@dividend& (0+255),b
  6144  000EA8  1FBC               	comf	(___awmod@dividend+1)& (0+255),f,b
  6145  000EAA  B0D8               	btfsc	status,0,c
  6146  000EAC  2BBC               	incf	(___awmod@dividend+1)& (0+255),f,b
  6147                           
  6148                           ; BSR set to: 0
  6149  000EAE  0E01               	movlw	1
  6150  000EB0  0100               	movlb	0	; () banked
  6151  000EB2  6FC0               	movwf	___awmod@sign& (0+255),b
  6152  000EB4                     l2018:
  6153                           
  6154                           ; BSR set to: 0
  6155  000EB4  0100               	movlb	0	; () banked
  6156  000EB6  AFBE               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6157  000EB8  D005               	goto	l2022
  6158                           
  6159                           ; BSR set to: 0
  6160  000EBA  0100               	movlb	0	; () banked
  6161  000EBC  6DBD               	negf	___awmod@divisor& (0+255),b
  6162  000EBE  1FBE               	comf	(___awmod@divisor+1)& (0+255),f,b
  6163  000EC0  B0D8               	btfsc	status,0,c
  6164  000EC2  2BBE               	incf	(___awmod@divisor+1)& (0+255),f,b
  6165  000EC4                     l2022:
  6166                           
  6167                           ; BSR set to: 0
  6168  000EC4  0100               	movlb	0	; () banked
  6169  000EC6  51BD               	movf	___awmod@divisor& (0+255),w,b
  6170  000EC8  0100               	movlb	0	; () banked
  6171  000ECA  11BE               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6172  000ECC  B4D8               	btfsc	status,2,c
  6173  000ECE  D026               	goto	l2038
  6174                           
  6175                           ; BSR set to: 0
  6176  000ED0  0E01               	movlw	1
  6177  000ED2  0100               	movlb	0	; () banked
  6178  000ED4  6FBF               	movwf	___awmod@counter& (0+255),b
  6179  000ED6  D006               	goto	l2028
  6180  000ED8                     l2026:
  6181                           
  6182                           ; BSR set to: 0
  6183  000ED8  0100               	movlb	0	; () banked
  6184  000EDA  90D8               	bcf	status,0,c
  6185  000EDC  37BD               	rlcf	___awmod@divisor& (0+255),f,b
  6186  000EDE  37BE               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6187  000EE0  0100               	movlb	0	; () banked
  6188  000EE2  2BBF               	incf	___awmod@counter& (0+255),f,b
  6189  000EE4                     l2028:
  6190                           
  6191                           ; BSR set to: 0
  6192  000EE4  0100               	movlb	0	; () banked
  6193  000EE6  AFBE               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6194  000EE8  D7F7               	goto	l2026
  6195  000EEA                     l2030:
  6196                           
  6197                           ; BSR set to: 0
  6198  000EEA  0100               	movlb	0	; () banked
  6199  000EEC  51BD               	movf	___awmod@divisor& (0+255),w,b
  6200  000EEE  0100               	movlb	0	; () banked
  6201  000EF0  5DBB               	subwf	___awmod@dividend& (0+255),w,b
  6202  000EF2  0100               	movlb	0	; () banked
  6203  000EF4  51BE               	movf	(___awmod@divisor+1)& (0+255),w,b
  6204  000EF6  0100               	movlb	0	; () banked
  6205  000EF8  59BC               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6206  000EFA  A0D8               	btfss	status,0,c
  6207  000EFC  D008               	goto	l2034
  6208                           
  6209                           ; BSR set to: 0
  6210  000EFE  0100               	movlb	0	; () banked
  6211  000F00  51BD               	movf	___awmod@divisor& (0+255),w,b
  6212  000F02  0100               	movlb	0	; () banked
  6213  000F04  5FBB               	subwf	___awmod@dividend& (0+255),f,b
  6214  000F06  0100               	movlb	0	; () banked
  6215  000F08  51BE               	movf	(___awmod@divisor+1)& (0+255),w,b
  6216  000F0A  0100               	movlb	0	; () banked
  6217  000F0C  5BBC               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6218  000F0E                     l2034:
  6219                           
  6220                           ; BSR set to: 0
  6221  000F0E  0100               	movlb	0	; () banked
  6222  000F10  90D8               	bcf	status,0,c
  6223  000F12  33BE               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6224  000F14  33BD               	rrcf	___awmod@divisor& (0+255),f,b
  6225                           
  6226                           ; BSR set to: 0
  6227  000F16  0100               	movlb	0	; () banked
  6228  000F18  2FBF               	decfsz	___awmod@counter& (0+255),f,b
  6229  000F1A  D7E7               	goto	l2030
  6230  000F1C                     l2038:
  6231                           
  6232                           ; BSR set to: 0
  6233  000F1C  0100               	movlb	0	; () banked
  6234  000F1E  51C0               	movf	___awmod@sign& (0+255),w,b
  6235  000F20  0100               	movlb	0	; () banked
  6236  000F22  B4D8               	btfsc	status,2,c
  6237  000F24  D005               	goto	l2042
  6238                           
  6239                           ; BSR set to: 0
  6240  000F26  0100               	movlb	0	; () banked
  6241  000F28  6DBB               	negf	___awmod@dividend& (0+255),b
  6242  000F2A  1FBC               	comf	(___awmod@dividend+1)& (0+255),f,b
  6243  000F2C  B0D8               	btfsc	status,0,c
  6244  000F2E  2BBC               	incf	(___awmod@dividend+1)& (0+255),f,b
  6245  000F30                     l2042:
  6246                           
  6247                           ; BSR set to: 0
  6248  000F30  C0BB  F0BB         	movff	___awmod@dividend,?___awmod
  6249  000F34  C0BC  F0BC         	movff	___awmod@dividend+1,?___awmod+1
  6250  000F38  0012               	return	
  6251  000F3A                     __end_of___awmod:
  6252                           	opt stack 0
  6253                           tosu	equ	0xFFF
  6254                           tosh	equ	0xFFE
  6255                           tosl	equ	0xFFD
  6256                           pclath	equ	0xFFA
  6257                           tblptru	equ	0xFF8
  6258                           tblptrh	equ	0xFF7
  6259                           tblptrl	equ	0xFF6
  6260                           tablat	equ	0xFF5
  6261                           prodh	equ	0xFF4
  6262                           prodl	equ	0xFF3
  6263                           intcon	equ	0xFF2
  6264                           postinc0	equ	0xFEE
  6265                           wreg	equ	0xFE8
  6266                           indf1	equ	0xFE7
  6267                           postinc1	equ	0xFE6
  6268                           postdec1	equ	0xFE5
  6269                           fsr1h	equ	0xFE2
  6270                           fsr1l	equ	0xFE1
  6271                           indf2	equ	0xFDF
  6272                           postinc2	equ	0xFDE
  6273                           postdec2	equ	0xFDD
  6274                           fsr2h	equ	0xFDA
  6275                           fsr2l	equ	0xFD9
  6276                           status	equ	0xFD8
  6277                           
  6278 ;; *************** function _DotStar_Init *****************
  6279 ;; Defined at:
  6280 ;;		line 41 in file "Pattern_DotStarLED.c"
  6281 ;; Parameters:    Size  Location     Type
  6282 ;;  numPixels       1    wreg     unsigned char 
  6283 ;; Auto vars:     Size  Location     Type
  6284 ;;  numPixels       1    2[BANK0 ] unsigned char 
  6285 ;;  i               1    3[BANK0 ] unsigned char 
  6286 ;; Return value:  Size  Location     Type
  6287 ;;                  1    wreg      void 
  6288 ;; Registers used:
  6289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6290 ;; Tracked objects:
  6291 ;;		On entry : 0/0
  6292 ;;		On exit  : 0/0
  6293 ;;		Unchanged: 0/0
  6294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6295 ;;      Params:         0       0       0       0
  6296 ;;      Locals:         0       2       0       0
  6297 ;;      Temps:          0       2       0       0
  6298 ;;      Totals:         0       4       0       0
  6299 ;;Total ram usage:        4 bytes
  6300 ;; Hardware stack levels used:    1
  6301 ;; Hardware stack levels required when called:    6
  6302 ;; This function calls:
  6303 ;;		Nothing
  6304 ;; This function is called by:
  6305 ;;		_InitPatternControlService
  6306 ;; This function uses a non-reentrant model
  6307 ;;
  6308                           
  6309                           	psect	text40
  6310  000B06                     __ptext40:
  6311                           	opt stack 0
  6312  000B06                     _DotStar_Init:
  6313                           	opt stack 22
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;incstack = 0
  6317                           ;DotStar_Init@numPixels stored from wreg
  6318  000B06  0100               	movlb	0	; () banked
  6319  000B08  6FBD               	movwf	DotStar_Init@numPixels& (0+255),b
  6320                           
  6321                           ;Pattern_DotStarLED.c: 50: Length = numPixels;
  6322  000B0A  C0BD  F09B         	movff	DotStar_Init@numPixels,_Length
  6323                           
  6324                           ;Pattern_DotStarLED.c: 52: PixelFrames[0] = 0xffffffff;
  6325  000B0E  0101               	movlb	1	; () banked
  6326  000B10  6980               	setf	_PixelFrames& (0+255),b
  6327  000B12  6981               	setf	(_PixelFrames+1)& (0+255),b
  6328  000B14  6982               	setf	(_PixelFrames+2)& (0+255),b
  6329  000B16  6983               	setf	(_PixelFrames+3)& (0+255),b
  6330                           
  6331                           ; BSR set to: 1
  6332                           ;Pattern_DotStarLED.c: 53: PixelFrames[Length+1] = 0x0;
  6333  000B18  0100               	movlb	0	; () banked
  6334  000B1A  519B               	movf	_Length& (0+255),w,b
  6335  000B1C  0100               	movlb	0	; () banked
  6336  000B1E  6FBB               	movwf	??_DotStar_Init& (0+255),b
  6337  000B20  6BBC               	clrf	(??_DotStar_Init+1)& (0+255),b
  6338  000B22  0100               	movlb	0	; () banked
  6339  000B24  90D8               	bcf	status,0,c
  6340  000B26  37BB               	rlcf	??_DotStar_Init& (0+255),f,b
  6341  000B28  37BC               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6342  000B2A  0100               	movlb	0	; () banked
  6343  000B2C  90D8               	bcf	status,0,c
  6344  000B2E  37BB               	rlcf	??_DotStar_Init& (0+255),f,b
  6345  000B30  37BC               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6346  000B32  0E04               	movlw	4
  6347  000B34  0100               	movlb	0	; () banked
  6348  000B36  27BB               	addwf	??_DotStar_Init& (0+255),f,b
  6349  000B38  0E00               	movlw	0
  6350  000B3A  23BC               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  6351  000B3C  0E80               	movlw	low _PixelFrames
  6352  000B3E  0100               	movlb	0	; () banked
  6353  000B40  25BB               	addwf	??_DotStar_Init& (0+255),w,b
  6354  000B42  6ED9               	movwf	fsr2l,c
  6355  000B44  0E01               	movlw	high _PixelFrames
  6356  000B46  0100               	movlb	0	; () banked
  6357  000B48  21BC               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  6358  000B4A  6EDA               	movwf	fsr2h,c
  6359  000B4C  6ADE               	clrf	postinc2,c
  6360  000B4E  6ADE               	clrf	postinc2,c
  6361  000B50  6ADE               	clrf	postinc2,c
  6362  000B52  6ADD               	clrf	postdec2,c
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;Pattern_DotStarLED.c: 55: OffFrames[0] = 0xffffffff;
  6366  000B54  0101               	movlb	1	; () banked
  6367  000B56  6900               	setf	_OffFrames& (0+255),b
  6368  000B58  6901               	setf	(_OffFrames+1)& (0+255),b
  6369  000B5A  6902               	setf	(_OffFrames+2)& (0+255),b
  6370  000B5C  6903               	setf	(_OffFrames+3)& (0+255),b
  6371                           
  6372                           ; BSR set to: 1
  6373                           ;Pattern_DotStarLED.c: 56: OffFrames[Length+1] = 0x0;
  6374  000B5E  0100               	movlb	0	; () banked
  6375  000B60  519B               	movf	_Length& (0+255),w,b
  6376  000B62  0100               	movlb	0	; () banked
  6377  000B64  6FBB               	movwf	??_DotStar_Init& (0+255),b
  6378  000B66  6BBC               	clrf	(??_DotStar_Init+1)& (0+255),b
  6379  000B68  0100               	movlb	0	; () banked
  6380  000B6A  90D8               	bcf	status,0,c
  6381  000B6C  37BB               	rlcf	??_DotStar_Init& (0+255),f,b
  6382  000B6E  37BC               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6383  000B70  0100               	movlb	0	; () banked
  6384  000B72  90D8               	bcf	status,0,c
  6385  000B74  37BB               	rlcf	??_DotStar_Init& (0+255),f,b
  6386  000B76  37BC               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6387  000B78  0E04               	movlw	4
  6388  000B7A  0100               	movlb	0	; () banked
  6389  000B7C  27BB               	addwf	??_DotStar_Init& (0+255),f,b
  6390  000B7E  0E00               	movlw	0
  6391  000B80  23BC               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  6392  000B82  0E00               	movlw	low _OffFrames
  6393  000B84  0100               	movlb	0	; () banked
  6394  000B86  25BB               	addwf	??_DotStar_Init& (0+255),w,b
  6395  000B88  6ED9               	movwf	fsr2l,c
  6396  000B8A  0E01               	movlw	high _OffFrames
  6397  000B8C  0100               	movlb	0	; () banked
  6398  000B8E  21BC               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  6399  000B90  6EDA               	movwf	fsr2h,c
  6400  000B92  6ADE               	clrf	postinc2,c
  6401  000B94  6ADE               	clrf	postinc2,c
  6402  000B96  6ADE               	clrf	postinc2,c
  6403  000B98  6ADD               	clrf	postdec2,c
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;Pattern_DotStarLED.c: 57: for(uint8_t i=1;i<=Length;i++){
  6407  000B9A  0E01               	movlw	1
  6408  000B9C  0100               	movlb	0	; () banked
  6409  000B9E  6FBE               	movwf	DotStar_Init@i& (0+255),b
  6410  000BA0  D013               	goto	l2338
  6411  000BA2                     l2334:
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;Pattern_DotStarLED.c: 58: OffFrames[i] = 0xe0000000;
  6415  000BA2  0100               	movlb	0	; () banked
  6416  000BA4  51BE               	movf	DotStar_Init@i& (0+255),w,b
  6417  000BA6  0D04               	mullw	4
  6418  000BA8  0E00               	movlw	low _OffFrames
  6419  000BAA  24F3               	addwf	prodl,w,c
  6420  000BAC  6ED9               	movwf	fsr2l,c
  6421  000BAE  0E01               	movlw	high _OffFrames
  6422  000BB0  20F4               	addwfc	prodh,w,c
  6423  000BB2  6EDA               	movwf	fsr2h,c
  6424  000BB4  0E00               	movlw	0
  6425  000BB6  6EDE               	movwf	postinc2,c
  6426  000BB8  0E00               	movlw	0
  6427  000BBA  6EDE               	movwf	postinc2,c
  6428  000BBC  0E00               	movlw	0
  6429  000BBE  6EDE               	movwf	postinc2,c
  6430  000BC0  0EE0               	movlw	224
  6431  000BC2  6EDD               	movwf	postdec2,c
  6432                           
  6433                           ; BSR set to: 0
  6434  000BC4  0100               	movlb	0	; () banked
  6435  000BC6  2BBE               	incf	DotStar_Init@i& (0+255),f,b
  6436  000BC8                     l2338:
  6437                           
  6438                           ; BSR set to: 0
  6439  000BC8  0100               	movlb	0	; () banked
  6440  000BCA  51BE               	movf	DotStar_Init@i& (0+255),w,b
  6441  000BCC  0100               	movlb	0	; () banked
  6442  000BCE  5D9B               	subwf	_Length& (0+255),w,b
  6443  000BD0  A0D8               	btfss	status,0,c
  6444  000BD2  0012               	return	
  6445  000BD4  D7E6               	goto	l2334
  6446  000BD6                     __end_of_DotStar_Init:
  6447                           	opt stack 0
  6448                           tosu	equ	0xFFF
  6449                           tosh	equ	0xFFE
  6450                           tosl	equ	0xFFD
  6451                           pclath	equ	0xFFA
  6452                           tblptru	equ	0xFF8
  6453                           tblptrh	equ	0xFF7
  6454                           tblptrl	equ	0xFF6
  6455                           tablat	equ	0xFF5
  6456                           prodh	equ	0xFF4
  6457                           prodl	equ	0xFF3
  6458                           intcon	equ	0xFF2
  6459                           postinc0	equ	0xFEE
  6460                           wreg	equ	0xFE8
  6461                           indf1	equ	0xFE7
  6462                           postinc1	equ	0xFE6
  6463                           postdec1	equ	0xFE5
  6464                           fsr1h	equ	0xFE2
  6465                           fsr1l	equ	0xFE1
  6466                           indf2	equ	0xFDF
  6467                           postinc2	equ	0xFDE
  6468                           postdec2	equ	0xFDD
  6469                           fsr2h	equ	0xFDA
  6470                           fsr2l	equ	0xFD9
  6471                           status	equ	0xFD8
  6472                           
  6473 ;; *************** function _ES_Timer_Init *****************
  6474 ;; Defined at:
  6475 ;;		line 130 in file "ES_Timers.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;  Rate            2    2[BANK0 ] enum E15424
  6478 ;; Auto vars:     Size  Location     Type
  6479 ;;		None
  6480 ;; Return value:  Size  Location     Type
  6481 ;;                  1    wreg      void 
  6482 ;; Registers used:
  6483 ;;		wreg, status,2, cstack
  6484 ;; Tracked objects:
  6485 ;;		On entry : 0/0
  6486 ;;		On exit  : 0/0
  6487 ;;		Unchanged: 0/0
  6488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6489 ;;      Params:         0       2       0       0
  6490 ;;      Locals:         0       0       0       0
  6491 ;;      Temps:          0       0       0       0
  6492 ;;      Totals:         0       2       0       0
  6493 ;;Total ram usage:        2 bytes
  6494 ;; Hardware stack levels used:    1
  6495 ;; Hardware stack levels required when called:    7
  6496 ;; This function calls:
  6497 ;;		__HW_Timer_Init
  6498 ;; This function is called by:
  6499 ;;		_ES_Initialize
  6500 ;; This function uses a non-reentrant model
  6501 ;;
  6502                           
  6503                           	psect	text41
  6504  0017AC                     __ptext41:
  6505                           	opt stack 0
  6506  0017AC                     _ES_Timer_Init:
  6507                           	opt stack 22
  6508                           
  6509                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;incstack = 0
  6513  0017AC  C0BD  F0BB         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  6514  0017B0  C0BE  F0BC         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  6515  0017B4  EC95  F00B         	call	__HW_Timer_Init	;wreg free
  6516  0017B8  0012               	return		;funcret
  6517  0017BA                     __end_of_ES_Timer_Init:
  6518                           	opt stack 0
  6519                           tosu	equ	0xFFF
  6520                           tosh	equ	0xFFE
  6521                           tosl	equ	0xFFD
  6522                           pclath	equ	0xFFA
  6523                           tblptru	equ	0xFF8
  6524                           tblptrh	equ	0xFF7
  6525                           tblptrl	equ	0xFF6
  6526                           tablat	equ	0xFF5
  6527                           prodh	equ	0xFF4
  6528                           prodl	equ	0xFF3
  6529                           intcon	equ	0xFF2
  6530                           postinc0	equ	0xFEE
  6531                           wreg	equ	0xFE8
  6532                           indf1	equ	0xFE7
  6533                           postinc1	equ	0xFE6
  6534                           postdec1	equ	0xFE5
  6535                           fsr1h	equ	0xFE2
  6536                           fsr1l	equ	0xFE1
  6537                           indf2	equ	0xFDF
  6538                           postinc2	equ	0xFDE
  6539                           postdec2	equ	0xFDD
  6540                           fsr2h	equ	0xFDA
  6541                           fsr2l	equ	0xFD9
  6542                           status	equ	0xFD8
  6543                           
  6544 ;; *************** function __HW_Timer_Init *****************
  6545 ;; Defined at:
  6546 ;;		line 71 in file "ES_Port.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;  Rate            2    0[BANK0 ] enum E15412
  6549 ;; Auto vars:     Size  Location     Type
  6550 ;;		None
  6551 ;; Return value:  Size  Location     Type
  6552 ;;                  1    wreg      void 
  6553 ;; Registers used:
  6554 ;;		wreg, status,2
  6555 ;; Tracked objects:
  6556 ;;		On entry : 0/0
  6557 ;;		On exit  : 0/0
  6558 ;;		Unchanged: 0/0
  6559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6560 ;;      Params:         0       2       0       0
  6561 ;;      Locals:         0       0       0       0
  6562 ;;      Temps:          0       0       0       0
  6563 ;;      Totals:         0       2       0       0
  6564 ;;Total ram usage:        2 bytes
  6565 ;; Hardware stack levels used:    1
  6566 ;; Hardware stack levels required when called:    6
  6567 ;; This function calls:
  6568 ;;		Nothing
  6569 ;; This function is called by:
  6570 ;;		_ES_Timer_Init
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           	psect	text42
  6575  00172A                     __ptext42:
  6576                           	opt stack 0
  6577  00172A                     __HW_Timer_Init:
  6578                           	opt stack 22
  6579                           
  6580                           ;ES_Port.c: 79: PIE1 = 0b00000100;
  6581                           
  6582                           ;incstack = 0
  6583  00172A  0E04               	movlw	4
  6584  00172C  6E9D               	movwf	3997,c	;volatile
  6585                           
  6586                           ;ES_Port.c: 84: INTCON = 0b01000000;
  6587  00172E  0E40               	movlw	64
  6588  001730  6EF2               	movwf	intcon,c	;volatile
  6589                           
  6590                           ;ES_Port.c: 90: CCP1CON = 0b00001010;
  6591  001732  0E0A               	movlw	10
  6592  001734  6EBD               	movwf	4029,c	;volatile
  6593                           
  6594                           ;ES_Port.c: 94: CCPR1L = 0b00000001;
  6595  001736  0E01               	movlw	1
  6596  001738  6EBE               	movwf	4030,c	;volatile
  6597                           
  6598                           ;ES_Port.c: 98: CCPR1H = 0b00000000;
  6599  00173A  0E00               	movlw	0
  6600  00173C  6EBF               	movwf	4031,c	;volatile
  6601                           
  6602                           ;ES_Port.c: 106: T1CON = 0b00100001;
  6603  00173E  0E21               	movlw	33
  6604  001740  6ECD               	movwf	4045,c	;volatile
  6605                           
  6606                           ;ES_Port.c: 108: {GIE = 1;};
  6607  001742  8EF2               	bsf	intcon,7,c	;volatile
  6608  001744  0012               	return		;funcret
  6609  001746                     __end_of__HW_Timer_Init:
  6610                           	opt stack 0
  6611                           tosu	equ	0xFFF
  6612                           tosh	equ	0xFFE
  6613                           tosl	equ	0xFFD
  6614                           pclath	equ	0xFFA
  6615                           tblptru	equ	0xFF8
  6616                           tblptrh	equ	0xFF7
  6617                           tblptrl	equ	0xFF6
  6618                           tablat	equ	0xFF5
  6619                           prodh	equ	0xFF4
  6620                           prodl	equ	0xFF3
  6621                           intcon	equ	0xFF2
  6622                           postinc0	equ	0xFEE
  6623                           wreg	equ	0xFE8
  6624                           indf1	equ	0xFE7
  6625                           postinc1	equ	0xFE6
  6626                           postdec1	equ	0xFE5
  6627                           fsr1h	equ	0xFE2
  6628                           fsr1l	equ	0xFE1
  6629                           indf2	equ	0xFDF
  6630                           postinc2	equ	0xFDE
  6631                           postdec2	equ	0xFDD
  6632                           fsr2h	equ	0xFDA
  6633                           fsr2l	equ	0xFD9
  6634                           status	equ	0xFD8
  6635                           
  6636 ;; *************** function _ES_InitQueue *****************
  6637 ;; Defined at:
  6638 ;;		line 58 in file "ES_Queue.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  6641 ;;		 -> Queue1(12), Queue0(12), 
  6642 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  6643 ;; Auto vars:     Size  Location     Type
  6644 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  6645 ;;		 -> Queue1(12), Queue0(12), 
  6646 ;; Return value:  Size  Location     Type
  6647 ;;                  1    wreg      unsigned char 
  6648 ;; Registers used:
  6649 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6650 ;; Tracked objects:
  6651 ;;		On entry : 0/0
  6652 ;;		On exit  : 0/0
  6653 ;;		Unchanged: 0/0
  6654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6655 ;;      Params:         0       3       0       0
  6656 ;;      Locals:         0       2       0       0
  6657 ;;      Temps:          0       0       0       0
  6658 ;;      Totals:         0       5       0       0
  6659 ;;Total ram usage:        5 bytes
  6660 ;; Hardware stack levels used:    1
  6661 ;; Hardware stack levels required when called:    6
  6662 ;; This function calls:
  6663 ;;		Nothing
  6664 ;; This function is called by:
  6665 ;;		_ES_Initialize
  6666 ;; This function uses a non-reentrant model
  6667 ;;
  6668                           
  6669                           	psect	text43
  6670  0014FA                     __ptext43:
  6671                           	opt stack 0
  6672  0014FA                     _ES_InitQueue:
  6673                           	opt stack 23
  6674                           
  6675                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  6676                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  6677                           
  6678                           ;incstack = 0
  6679  0014FA  C0BB  F0BE         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  6680  0014FE  C0BC  F0BF         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  6681                           
  6682                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  6683  001502  0100               	movlb	0	; () banked
  6684  001504  05BD               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  6685  001506  C0BE  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  6686  00150A  C0BF  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  6687  00150E  6EDF               	movwf	indf2,c
  6688                           
  6689                           ; BSR set to: 0
  6690                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  6691  001510  0100               	movlb	0	; () banked
  6692  001512  EE20 F001          	lfsr	2,1
  6693  001516  51BE               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  6694  001518  26D9               	addwf	fsr2l,f,c
  6695  00151A  51BF               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  6696  00151C  22DA               	addwfc	fsr2h,f,c
  6697  00151E  0E00               	movlw	0
  6698  001520  6EDF               	movwf	indf2,c
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  6702  001522  0100               	movlb	0	; () banked
  6703  001524  EE20 F002          	lfsr	2,2
  6704  001528  51BE               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  6705  00152A  26D9               	addwf	fsr2l,f,c
  6706  00152C  51BF               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  6707  00152E  22DA               	addwfc	fsr2h,f,c
  6708  001530  0E00               	movlw	0
  6709  001532  6EDF               	movwf	indf2,c
  6710  001534  0012               	return	
  6711  001536                     __end_of_ES_InitQueue:
  6712                           	opt stack 0
  6713                           tosu	equ	0xFFF
  6714                           tosh	equ	0xFFE
  6715                           tosl	equ	0xFFD
  6716                           pclath	equ	0xFFA
  6717                           tblptru	equ	0xFF8
  6718                           tblptrh	equ	0xFF7
  6719                           tblptrl	equ	0xFF6
  6720                           tablat	equ	0xFF5
  6721                           prodh	equ	0xFF4
  6722                           prodl	equ	0xFF3
  6723                           intcon	equ	0xFF2
  6724                           postinc0	equ	0xFEE
  6725                           wreg	equ	0xFE8
  6726                           indf1	equ	0xFE7
  6727                           postinc1	equ	0xFE6
  6728                           postdec1	equ	0xFE5
  6729                           fsr1h	equ	0xFE2
  6730                           fsr1l	equ	0xFE1
  6731                           indf2	equ	0xFDF
  6732                           postinc2	equ	0xFDE
  6733                           postdec2	equ	0xFDD
  6734                           fsr2h	equ	0xFDA
  6735                           fsr2l	equ	0xFD9
  6736                           status	equ	0xFD8
  6737                           
  6738 ;; *************** function _ISR *****************
  6739 ;; Defined at:
  6740 ;;		line 111 in file "ES_Port.c"
  6741 ;; Parameters:    Size  Location     Type
  6742 ;;		None
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;		None
  6745 ;; Return value:  Size  Location     Type
  6746 ;;                  1    wreg      void 
  6747 ;; Registers used:
  6748 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6749 ;; Tracked objects:
  6750 ;;		On entry : 0/0
  6751 ;;		On exit  : 0/0
  6752 ;;		Unchanged: 0/0
  6753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6754 ;;      Params:         0       0       0       0
  6755 ;;      Locals:         0       0       0       0
  6756 ;;      Temps:         16       0       0       0
  6757 ;;      Totals:        16       0       0       0
  6758 ;;Total ram usage:       16 bytes
  6759 ;; Hardware stack levels used:    1
  6760 ;; Hardware stack levels required when called:    5
  6761 ;; This function calls:
  6762 ;;		_SPI32_EOTResponse
  6763 ;; This function is called by:
  6764 ;;		Interrupt level 2
  6765 ;; This function uses a non-reentrant model
  6766 ;;
  6767                           
  6768                           	psect	intcode
  6769  000008                     __pintcode:
  6770                           	opt stack 0
  6771  000008                     _ISR:
  6772                           	opt stack 16
  6773                           
  6774                           ; BSR set to: 0
  6775                           ;incstack = 0
  6776  000008  823E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6777  00000A  CFFA F026          	movff	pclath,??_ISR+2
  6778  00000E  CFFB F027          	movff	pclatu,??_ISR+3
  6779  000012  EDA7  F006         	call	int_func,f	;refresh shadow registers
  6780                           tosu	equ	0xFFF
  6781                           tosh	equ	0xFFE
  6782                           tosl	equ	0xFFD
  6783                           pclatu	equ	0xFFB
  6784                           pclath	equ	0xFFA
  6785                           tblptru	equ	0xFF8
  6786                           tblptrh	equ	0xFF7
  6787                           tblptrl	equ	0xFF6
  6788                           tablat	equ	0xFF5
  6789                           prodh	equ	0xFF4
  6790                           prodl	equ	0xFF3
  6791                           intcon	equ	0xFF2
  6792                           postinc0	equ	0xFEE
  6793                           wreg	equ	0xFE8
  6794                           indf1	equ	0xFE7
  6795                           postinc1	equ	0xFE6
  6796                           postdec1	equ	0xFE5
  6797                           fsr1h	equ	0xFE2
  6798                           fsr1l	equ	0xFE1
  6799                           indf2	equ	0xFDF
  6800                           postinc2	equ	0xFDE
  6801                           postdec2	equ	0xFDD
  6802                           fsr2h	equ	0xFDA
  6803                           fsr2l	equ	0xFD9
  6804                           status	equ	0xFD8
  6805                           
  6806                           	psect	intcode_body
  6807  000D4E                     __pintcode_body:
  6808                           	opt stack 16
  6809  000D4E                     int_func:
  6810                           	opt stack 16
  6811  000D4E  0006               	pop		; remove dummy address from shadow register refresh
  6812  000D50  CFE9 F028          	movff	fsr0l,??_ISR+4
  6813  000D54  CFEA F029          	movff	fsr0h,??_ISR+5
  6814  000D58  CFE1 F02A          	movff	fsr1l,??_ISR+6
  6815  000D5C  CFE2 F02B          	movff	fsr1h,??_ISR+7
  6816  000D60  CFD9 F02C          	movff	fsr2l,??_ISR+8
  6817  000D64  CFDA F02D          	movff	fsr2h,??_ISR+9
  6818  000D68  CFF3 F02E          	movff	prodl,??_ISR+10
  6819  000D6C  CFF4 F02F          	movff	prodh,??_ISR+11
  6820  000D70  CFF6 F030          	movff	tblptrl,??_ISR+12
  6821  000D74  CFF7 F031          	movff	tblptrh,??_ISR+13
  6822  000D78  CFF8 F032          	movff	tblptru,??_ISR+14
  6823  000D7C  CFF5 F033          	movff	tablat,??_ISR+15
  6824                           
  6825                           ;ES_Port.c: 114: static unsigned int LastTime;
  6826                           ;ES_Port.c: 115: static unsigned int NextTime;
  6827                           ;ES_Port.c: 117: if (CCP1IF == 1)
  6828  000D80  A49E               	btfss	3998,2,c	;volatile
  6829  000D82  D015               	goto	i2l2744
  6830                           
  6831                           ;ES_Port.c: 118: {
  6832                           ;ES_Port.c: 119: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  6833  000D84  50BF               	movf	4031,w,c	;volatile
  6834  000D86  6E24               	movwf	??_ISR& (0+255),c
  6835  000D88  50BE               	movf	4030,w,c	;volatile
  6836  000D8A  6E34               	movwf	ISR@LastTime,c
  6837  000D8C  C024  F035         	movff	??_ISR,ISR@LastTime+1
  6838                           
  6839                           ;ES_Port.c: 120: NextTime = LastTime + ((32000000L/4/4)/100);
  6840  000D90  0E20               	movlw	32
  6841  000D92  2434               	addwf	ISR@LastTime,w,c
  6842  000D94  6E36               	movwf	ISR@NextTime,c
  6843  000D96  0E4E               	movlw	78
  6844  000D98  2035               	addwfc	ISR@LastTime+1,w,c
  6845  000D9A  6E37               	movwf	ISR@NextTime+1,c
  6846                           
  6847                           ;ES_Port.c: 121: CCPR1H = (unsigned char)(NextTime >> 8);
  6848  000D9C  5037               	movf	ISR@NextTime+1,w,c
  6849  000D9E  6EBF               	movwf	4031,c	;volatile
  6850                           
  6851                           ;ES_Port.c: 122: CCPR1L = (unsigned char)(NextTime & 0xFF);
  6852  000DA0  C036  FFBE         	movff	ISR@NextTime,4030	;volatile
  6853                           
  6854                           ;ES_Port.c: 123: CCP1IF = 0;
  6855  000DA4  949E               	bcf	3998,2,c	;volatile
  6856                           
  6857                           ;ES_Port.c: 124: TickCount++;
  6858  000DA6  0100               	movlb	0	; () banked
  6859  000DA8  2B9F               	incf	_TickCount& (0+255),f,b	;volatile
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;ES_Port.c: 125: SysTickCounter++;
  6863  000DAA  4A38               	infsnz	_SysTickCounter,f,c	;volatile
  6864  000DAC  2A39               	incf	_SysTickCounter+1,f,c	;volatile
  6865  000DAE                     i2l2744:
  6866                           
  6867                           ;ES_Port.c: 126: }
  6868                           ;ES_Port.c: 127: if (SSPIF == 1)
  6869  000DAE  A69E               	btfss	3998,3,c	;volatile
  6870  000DB0  D003               	goto	i2l149
  6871                           
  6872                           ;ES_Port.c: 128: {
  6873                           ;ES_Port.c: 129: SSPIF = 0;
  6874  000DB2  969E               	bcf	3998,3,c	;volatile
  6875                           
  6876                           ;ES_Port.c: 130: SPI32_EOTResponse();
  6877  000DB4  ECB9  F00B         	call	_SPI32_EOTResponse	;wreg free
  6878  000DB8                     i2l149:
  6879  000DB8  C033  FFF5         	movff	??_ISR+15,tablat
  6880  000DBC  C032  FFF8         	movff	??_ISR+14,tblptru
  6881  000DC0  C031  FFF7         	movff	??_ISR+13,tblptrh
  6882  000DC4  C030  FFF6         	movff	??_ISR+12,tblptrl
  6883  000DC8  C02F  FFF4         	movff	??_ISR+11,prodh
  6884  000DCC  C02E  FFF3         	movff	??_ISR+10,prodl
  6885  000DD0  C02D  FFDA         	movff	??_ISR+9,fsr2h
  6886  000DD4  C02C  FFD9         	movff	??_ISR+8,fsr2l
  6887  000DD8  C02B  FFE2         	movff	??_ISR+7,fsr1h
  6888  000DDC  C02A  FFE1         	movff	??_ISR+6,fsr1l
  6889  000DE0  C029  FFEA         	movff	??_ISR+5,fsr0h
  6890  000DE4  C028  FFE9         	movff	??_ISR+4,fsr0l
  6891  000DE8  C027  FFFB         	movff	??_ISR+3,pclatu
  6892  000DEC  C026  FFFA         	movff	??_ISR+2,pclath
  6893  000DF0  923E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6894  000DF2  0011               	retfie		f
  6895  000DF4                     __end_of_ISR:
  6896                           	opt stack 0
  6897                           tosu	equ	0xFFF
  6898                           tosh	equ	0xFFE
  6899                           tosl	equ	0xFFD
  6900                           pclatu	equ	0xFFB
  6901                           pclath	equ	0xFFA
  6902                           tblptru	equ	0xFF8
  6903                           tblptrh	equ	0xFF7
  6904                           tblptrl	equ	0xFF6
  6905                           tablat	equ	0xFF5
  6906                           prodh	equ	0xFF4
  6907                           prodl	equ	0xFF3
  6908                           intcon	equ	0xFF2
  6909                           postinc0	equ	0xFEE
  6910                           fsr0h	equ	0xFEA
  6911                           fsr0l	equ	0xFE9
  6912                           wreg	equ	0xFE8
  6913                           indf1	equ	0xFE7
  6914                           postinc1	equ	0xFE6
  6915                           postdec1	equ	0xFE5
  6916                           fsr1h	equ	0xFE2
  6917                           fsr1l	equ	0xFE1
  6918                           indf2	equ	0xFDF
  6919                           postinc2	equ	0xFDE
  6920                           postdec2	equ	0xFDD
  6921                           fsr2h	equ	0xFDA
  6922                           fsr2l	equ	0xFD9
  6923                           status	equ	0xFD8
  6924                           
  6925 ;; *************** function _SPI32_EOTResponse *****************
  6926 ;; Defined at:
  6927 ;;		line 156 in file "SPI32_HW.c"
  6928 ;; Parameters:    Size  Location     Type
  6929 ;;		None
  6930 ;; Auto vars:     Size  Location     Type
  6931 ;;  EOTevent        3   32[COMRAM] struct ES_Event_t
  6932 ;; Return value:  Size  Location     Type
  6933 ;;                  1    wreg      void 
  6934 ;; Registers used:
  6935 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6936 ;; Tracked objects:
  6937 ;;		On entry : 0/0
  6938 ;;		On exit  : 0/0
  6939 ;;		Unchanged: 0/0
  6940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6941 ;;      Params:         0       0       0       0
  6942 ;;      Locals:         3       0       0       0
  6943 ;;      Temps:          0       0       0       0
  6944 ;;      Totals:         3       0       0       0
  6945 ;;Total ram usage:        3 bytes
  6946 ;; Hardware stack levels used:    1
  6947 ;; Hardware stack levels required when called:    4
  6948 ;; This function calls:
  6949 ;;		i2_PostSPI32ControlService
  6950 ;; This function is called by:
  6951 ;;		_ISR
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           	psect	text45
  6956  001772                     __ptext45:
  6957                           	opt stack 0
  6958  001772                     _SPI32_EOTResponse:
  6959                           	opt stack 16
  6960                           
  6961                           ;SPI32_HW.c: 159: ES_Event EOTevent;
  6962                           ;SPI32_HW.c: 160: EOTevent.EventType = ES_TIMEOUT;
  6963                           
  6964                           ;incstack = 0
  6965  001772  0E03               	movlw	3
  6966  001774  6E21               	movwf	SPI32_EOTResponse@EOTevent,c
  6967                           
  6968                           ;SPI32_HW.c: 161: PostSPI32ControlService(EOTevent);
  6969  001776  C021  F01E         	movff	SPI32_EOTResponse@EOTevent,i2PostSPI32ControlService@ThisEvent
  6970  00177A  C022  F01F         	movff	SPI32_EOTResponse@EOTevent+1,i2PostSPI32ControlService@ThisEvent+1
  6971  00177E  C023  F020         	movff	SPI32_EOTResponse@EOTevent+2,i2PostSPI32ControlService@ThisEvent+2
  6972  001782  ECC4  F00B         	call	i2_PostSPI32ControlService	;wreg free
  6973  001786  0012               	return		;funcret
  6974  001788                     __end_of_SPI32_EOTResponse:
  6975                           	opt stack 0
  6976                           tosu	equ	0xFFF
  6977                           tosh	equ	0xFFE
  6978                           tosl	equ	0xFFD
  6979                           pclatu	equ	0xFFB
  6980                           pclath	equ	0xFFA
  6981                           tblptru	equ	0xFF8
  6982                           tblptrh	equ	0xFF7
  6983                           tblptrl	equ	0xFF6
  6984                           tablat	equ	0xFF5
  6985                           prodh	equ	0xFF4
  6986                           prodl	equ	0xFF3
  6987                           intcon	equ	0xFF2
  6988                           postinc0	equ	0xFEE
  6989                           fsr0h	equ	0xFEA
  6990                           fsr0l	equ	0xFE9
  6991                           wreg	equ	0xFE8
  6992                           indf1	equ	0xFE7
  6993                           postinc1	equ	0xFE6
  6994                           postdec1	equ	0xFE5
  6995                           fsr1h	equ	0xFE2
  6996                           fsr1l	equ	0xFE1
  6997                           indf2	equ	0xFDF
  6998                           postinc2	equ	0xFDE
  6999                           postdec2	equ	0xFDD
  7000                           fsr2h	equ	0xFDA
  7001                           fsr2l	equ	0xFD9
  7002                           status	equ	0xFD8
  7003                           
  7004 ;; *************** function i2_PostSPI32ControlService *****************
  7005 ;; Defined at:
  7006 ;;		line 117 in file "SPI32_ControlService.c"
  7007 ;; Parameters:    Size  Location     Type
  7008 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;		None
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  1    wreg      unsigned char 
  7013 ;; Registers used:
  7014 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7020 ;;      Params:         3       0       0       0
  7021 ;;      Locals:         0       0       0       0
  7022 ;;      Temps:          0       0       0       0
  7023 ;;      Totals:         3       0       0       0
  7024 ;;Total ram usage:        3 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    3
  7027 ;; This function calls:
  7028 ;;		i2_ES_PostToService
  7029 ;; This function is called by:
  7030 ;;		_SPI32_EOTResponse
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           	psect	text46
  7035  001788                     __ptext46:
  7036                           	opt stack 0
  7037  001788                     i2_PostSPI32ControlService:
  7038                           	opt stack 16
  7039                           
  7040                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  7041                           ;	Return value of i2_PostSPI32ControlService is never used
  7042                           
  7043                           ;incstack = 0
  7044  001788  C01E  F018         	movff	i2PostSPI32ControlService@ThisEvent,i2ES_PostToService@TheEvent
  7045  00178C  C01F  F019         	movff	i2PostSPI32ControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
  7046  001790  C020  F01A         	movff	i2PostSPI32ControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
  7047  001794  0100               	movlb	0	; () banked
  7048  001796  5198               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  7049  001798  EC6B  F009         	call	i2_ES_PostToService
  7050  00179C  0012               	return	
  7051  00179E                     __end_ofi2_PostSPI32ControlService:
  7052                           	opt stack 0
  7053                           tosu	equ	0xFFF
  7054                           tosh	equ	0xFFE
  7055                           tosl	equ	0xFFD
  7056                           pclatu	equ	0xFFB
  7057                           pclath	equ	0xFFA
  7058                           tblptru	equ	0xFF8
  7059                           tblptrh	equ	0xFF7
  7060                           tblptrl	equ	0xFF6
  7061                           tablat	equ	0xFF5
  7062                           prodh	equ	0xFF4
  7063                           prodl	equ	0xFF3
  7064                           intcon	equ	0xFF2
  7065                           postinc0	equ	0xFEE
  7066                           fsr0h	equ	0xFEA
  7067                           fsr0l	equ	0xFE9
  7068                           wreg	equ	0xFE8
  7069                           indf1	equ	0xFE7
  7070                           postinc1	equ	0xFE6
  7071                           postdec1	equ	0xFE5
  7072                           fsr1h	equ	0xFE2
  7073                           fsr1l	equ	0xFE1
  7074                           indf2	equ	0xFDF
  7075                           postinc2	equ	0xFDE
  7076                           postdec2	equ	0xFDD
  7077                           fsr2h	equ	0xFDA
  7078                           fsr2l	equ	0xFD9
  7079                           status	equ	0xFD8
  7080                           
  7081 ;; *************** function i2_ES_PostToService *****************
  7082 ;; Defined at:
  7083 ;;		line 351 in file "ES_Framework.c"
  7084 ;; Parameters:    Size  Location     Type
  7085 ;;  WhichService    1    wreg     unsigned char 
  7086 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
  7087 ;; Auto vars:     Size  Location     Type
  7088 ;;  WhichService    1   28[COMRAM] unsigned char 
  7089 ;; Return value:  Size  Location     Type
  7090 ;;                  1    wreg      unsigned char 
  7091 ;; Registers used:
  7092 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7093 ;; Tracked objects:
  7094 ;;		On entry : 0/0
  7095 ;;		On exit  : 0/0
  7096 ;;		Unchanged: 0/0
  7097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7098 ;;      Params:         3       0       0       0
  7099 ;;      Locals:         1       0       0       0
  7100 ;;      Temps:          2       0       0       0
  7101 ;;      Totals:         6       0       0       0
  7102 ;;Total ram usage:        6 bytes
  7103 ;; Hardware stack levels used:    1
  7104 ;; Hardware stack levels required when called:    2
  7105 ;; This function calls:
  7106 ;;		i2_ES_EnQueueFIFO
  7107 ;; This function is called by:
  7108 ;;		i2_PostSPI32ControlService
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           	psect	text47
  7113  0012D6                     __ptext47:
  7114                           	opt stack 0
  7115  0012D6                     i2_ES_PostToService:
  7116                           	opt stack 16
  7117                           
  7118                           ;incstack = 0
  7119                           ;i2ES_PostToService@WhichService stored from wreg
  7120  0012D6  6E1D               	movwf	i2ES_PostToService@WhichService,c
  7121                           
  7122                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  7123                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  7124                           ;ES_Framework.c: 354: 1 )){
  7125  0012D8  0E02               	movlw	2
  7126  0012DA  601D               	cpfslt	i2ES_PostToService@WhichService,c
  7127  0012DC  D02F               	goto	i2l2382
  7128  0012DE  501D               	movf	i2ES_PostToService@WhichService,w,c
  7129  0012E0  0D03               	mullw	3
  7130  0012E2  0E58               	movlw	low _EventQueues
  7131  0012E4  24F3               	addwf	prodl,w,c
  7132  0012E6  6EF6               	movwf	tblptrl,c
  7133  0012E8  0E03               	movlw	high _EventQueues
  7134  0012EA  20F4               	addwfc	prodh,w,c
  7135  0012EC  6EF7               	movwf	tblptrh,c
  7136  0012EE                     	if	0	;There are less than 3 active tblptr bytes
  7137  0012EE                     	endif
  7138  0012EE  0009               	tblrd		*+
  7139  0012F0  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
  7140  0012F4  000A               	tblrd		*-
  7141  0012F6  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
  7142  0012FA  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
  7143  0012FE  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
  7144  001302  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
  7145  001306  EC4D  F006         	call	i2_ES_EnQueueFIFO	;wreg free
  7146  00130A  06E8               	decf	wreg,f,c
  7147  00130C  A4D8               	btfss	status,2,c
  7148  00130E  D016               	goto	i2l2382
  7149                           
  7150                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  7151  001310  501D               	movf	i2ES_PostToService@WhichService,w,c
  7152  001312  0D02               	mullw	2
  7153  001314  0E01               	movlw	low _BitNum2SetMask
  7154  001316  24F3               	addwf	prodl,w,c
  7155  001318  6EF6               	movwf	tblptrl,c
  7156  00131A  0E03               	movlw	high _BitNum2SetMask
  7157  00131C  20F4               	addwfc	prodh,w,c
  7158  00131E  6EF7               	movwf	tblptrh,c
  7159  001320                     	if	0	;There are less than 3 active tblptr bytes
  7160  001320                     	endif
  7161  001320  0009               	tblrd		*+
  7162  001322  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
  7163  001326  0009               	tblrd		*+
  7164  001328  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
  7165  00132C  501B               	movf	??i2_ES_PostToService,w,c
  7166  00132E  0100               	movlb	0	; () banked
  7167  001330  1391               	iorwf	_Ready& (0+255),f,b
  7168  001332  501C               	movf	??i2_ES_PostToService+1,w,c
  7169  001334  0100               	movlb	0	; () banked
  7170  001336  1392               	iorwf	(_Ready+1)& (0+255),f,b
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;ES_Framework.c: 356: return 1;
  7174  001338  0E01               	movlw	1
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;ES_Framework.c: 357: } else
  7178                           
  7179                           ; BSR set to: 0
  7180  00133A  0012               	return	
  7181  00133C                     i2l2382:
  7182                           
  7183                           ;ES_Framework.c: 358: return 0;
  7184  00133C  0E00               	movlw	0
  7185  00133E  0012               	return	
  7186  001340                     __end_ofi2_ES_PostToService:
  7187                           	opt stack 0
  7188                           tosu	equ	0xFFF
  7189                           tosh	equ	0xFFE
  7190                           tosl	equ	0xFFD
  7191                           pclatu	equ	0xFFB
  7192                           pclath	equ	0xFFA
  7193                           tblptru	equ	0xFF8
  7194                           tblptrh	equ	0xFF7
  7195                           tblptrl	equ	0xFF6
  7196                           tablat	equ	0xFF5
  7197                           prodh	equ	0xFF4
  7198                           prodl	equ	0xFF3
  7199                           intcon	equ	0xFF2
  7200                           postinc0	equ	0xFEE
  7201                           fsr0h	equ	0xFEA
  7202                           fsr0l	equ	0xFE9
  7203                           wreg	equ	0xFE8
  7204                           indf1	equ	0xFE7
  7205                           postinc1	equ	0xFE6
  7206                           postdec1	equ	0xFE5
  7207                           fsr1h	equ	0xFE2
  7208                           fsr1l	equ	0xFE1
  7209                           indf2	equ	0xFDF
  7210                           postinc2	equ	0xFDE
  7211                           postdec2	equ	0xFDD
  7212                           fsr2h	equ	0xFDA
  7213                           fsr2l	equ	0xFD9
  7214                           status	equ	0xFD8
  7215                           
  7216 ;; *************** function i2_ES_EnQueueFIFO *****************
  7217 ;; Defined at:
  7218 ;;		line 85 in file "ES_Queue.c"
  7219 ;; Parameters:    Size  Location     Type
  7220 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
  7221 ;;		 -> Queue1(12), Queue0(12), 
  7222 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
  7223 ;; Auto vars:     Size  Location     Type
  7224 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
  7225 ;;		 -> Queue1(12), Queue0(12), 
  7226 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
  7227 ;; Return value:  Size  Location     Type
  7228 ;;                  1    wreg      unsigned char 
  7229 ;; Registers used:
  7230 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7231 ;; Tracked objects:
  7232 ;;		On entry : 0/0
  7233 ;;		On exit  : 0/0
  7234 ;;		Unchanged: 0/0
  7235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7236 ;;      Params:         5       0       0       0
  7237 ;;      Locals:         3       0       0       0
  7238 ;;      Temps:          3       0       0       0
  7239 ;;      Totals:        11       0       0       0
  7240 ;;Total ram usage:       11 bytes
  7241 ;; Hardware stack levels used:    1
  7242 ;; Hardware stack levels required when called:    1
  7243 ;; This function calls:
  7244 ;;		i2___awmod
  7245 ;;		i2___wmul
  7246 ;; This function is called by:
  7247 ;;		i2_ES_PostToService
  7248 ;; This function uses a non-reentrant model
  7249 ;;
  7250                           
  7251                           	psect	text48
  7252  000C9A                     __ptext48:
  7253                           	opt stack 0
  7254  000C9A                     i2_ES_EnQueueFIFO:
  7255                           	opt stack 16
  7256                           
  7257                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  7258                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  7259                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  7260                           
  7261                           ;incstack = 0
  7262  000C9A  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
  7263  000C9E  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
  7264                           
  7265                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  7266  000CA2  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  7267  000CA6  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  7268  000CAA  EE10 F002          	lfsr	1,2
  7269  000CAE  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  7270  000CB0  26E1               	addwf	fsr1l,f,c
  7271  000CB2  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  7272  000CB4  22E2               	addwfc	fsr1h,f,c
  7273  000CB6  50DE               	movf	postinc2,w,c
  7274  000CB8  5CE6               	subwf	postinc1,w,c
  7275  000CBA  B0D8               	btfsc	status,0,c
  7276  000CBC  D046               	goto	i2l2290
  7277                           
  7278                           ;ES_Queue.c: 92: {
  7279                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  7280  000CBE  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
  7281  000CC2  9EF2               	bcf	intcon,7,c	;volatile
  7282                           
  7283                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  7284                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  7285  000CC4  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  7286  000CC8  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  7287  000CCC  50DF               	movf	indf2,w,c
  7288  000CCE  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
  7289  000CD0  5012               	movf	??i2_ES_EnQueueFIFO,w,c
  7290  000CD2  6E03               	movwf	i2___awmod@divisor,c
  7291  000CD4  6A04               	clrf	i2___awmod@divisor+1,c
  7292  000CD6  EE20 F002          	lfsr	2,2
  7293  000CDA  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  7294  000CDC  26D9               	addwf	fsr2l,f,c
  7295  000CDE  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  7296  000CE0  22DA               	addwfc	fsr2h,f,c
  7297  000CE2  50DF               	movf	indf2,w,c
  7298  000CE4  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
  7299  000CE6  EE20 F001          	lfsr	2,1
  7300  000CEA  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  7301  000CEC  26D9               	addwf	fsr2l,f,c
  7302  000CEE  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  7303  000CF0  22DA               	addwfc	fsr2h,f,c
  7304  000CF2  50DF               	movf	indf2,w,c
  7305  000CF4  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
  7306  000CF6  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
  7307  000CF8  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
  7308  000CFA  6E01               	movwf	i2___awmod@dividend,c
  7309  000CFC  6A02               	clrf	i2___awmod@dividend+1,c
  7310  000CFE  3602               	rlcf	i2___awmod@dividend+1,f,c
  7311  000D00  EC33  F009         	call	i2___awmod	;wreg free
  7312  000D04  0E01               	movlw	1
  7313  000D06  2401               	addwf	?i2___awmod,w,c
  7314  000D08  6E07               	movwf	i2___wmul@multiplier,c
  7315  000D0A  0E00               	movlw	0
  7316  000D0C  2002               	addwfc	?i2___awmod+1,w,c
  7317  000D0E  6E08               	movwf	i2___wmul@multiplier+1,c
  7318  000D10  0E00               	movlw	0
  7319  000D12  6E0A               	movwf	i2___wmul@multiplicand+1,c
  7320  000D14  0E03               	movlw	3
  7321  000D16  6E09               	movwf	i2___wmul@multiplicand,c
  7322  000D18  EC47  F00B         	call	i2___wmul	;wreg free
  7323  000D1C  5007               	movf	?i2___wmul,w,c
  7324  000D1E  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
  7325  000D20  6ED9               	movwf	fsr2l,c
  7326  000D22  5008               	movf	?i2___wmul+1,w,c
  7327  000D24  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
  7328  000D26  6EDA               	movwf	fsr2h,c
  7329  000D28  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
  7330  000D2C  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
  7331  000D30  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
  7332                           
  7333                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  7334  000D34  EE20 F002          	lfsr	2,2
  7335  000D38  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  7336  000D3A  26D9               	addwf	fsr2l,f,c
  7337  000D3C  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  7338  000D3E  22DA               	addwfc	fsr2h,f,c
  7339  000D40  2ADF               	incf	indf2,f,c
  7340                           
  7341                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  7342  000D42  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  7343                           
  7344                           ;ES_Queue.c: 101: return(1);
  7345  000D46  0E01               	movlw	1
  7346                           
  7347                           ;ES_Queue.c: 102: }else
  7348  000D48  0012               	return	
  7349  000D4A                     i2l2290:
  7350                           
  7351                           ;ES_Queue.c: 103: return(0);
  7352  000D4A  0E00               	movlw	0
  7353  000D4C  0012               	return	
  7354  000D4E                     __end_ofi2_ES_EnQueueFIFO:
  7355                           	opt stack 0
  7356                           tosu	equ	0xFFF
  7357                           tosh	equ	0xFFE
  7358                           tosl	equ	0xFFD
  7359                           pclatu	equ	0xFFB
  7360                           pclath	equ	0xFFA
  7361                           tblptru	equ	0xFF8
  7362                           tblptrh	equ	0xFF7
  7363                           tblptrl	equ	0xFF6
  7364                           tablat	equ	0xFF5
  7365                           prodh	equ	0xFF4
  7366                           prodl	equ	0xFF3
  7367                           intcon	equ	0xFF2
  7368                           postinc0	equ	0xFEE
  7369                           fsr0h	equ	0xFEA
  7370                           fsr0l	equ	0xFE9
  7371                           wreg	equ	0xFE8
  7372                           indf1	equ	0xFE7
  7373                           postinc1	equ	0xFE6
  7374                           postdec1	equ	0xFE5
  7375                           fsr1h	equ	0xFE2
  7376                           fsr1l	equ	0xFE1
  7377                           indf2	equ	0xFDF
  7378                           postinc2	equ	0xFDE
  7379                           postdec2	equ	0xFDD
  7380                           fsr2h	equ	0xFDA
  7381                           fsr2l	equ	0xFD9
  7382                           status	equ	0xFD8
  7383                           
  7384 ;; *************** function i2___wmul *****************
  7385 ;; Defined at:
  7386 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  7387 ;; Parameters:    Size  Location     Type
  7388 ;;  multiplier      2    6[COMRAM] unsigned int 
  7389 ;;  multiplicand    2    8[COMRAM] unsigned int 
  7390 ;; Auto vars:     Size  Location     Type
  7391 ;;  __wmul          2   10[COMRAM] unsigned int 
  7392 ;; Return value:  Size  Location     Type
  7393 ;;                  2    6[COMRAM] unsigned int 
  7394 ;; Registers used:
  7395 ;;		wreg, status,2, status,0, prodl, prodh
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/0
  7398 ;;		On exit  : 0/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7401 ;;      Params:         4       0       0       0
  7402 ;;      Locals:         2       0       0       0
  7403 ;;      Temps:          0       0       0       0
  7404 ;;      Totals:         6       0       0       0
  7405 ;;Total ram usage:        6 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; This function calls:
  7408 ;;		Nothing
  7409 ;; This function is called by:
  7410 ;;		i2_ES_EnQueueFIFO
  7411 ;; This function uses a non-reentrant model
  7412 ;;
  7413                           
  7414                           	psect	text49
  7415  00168E                     __ptext49:
  7416                           	opt stack 0
  7417  00168E                     i2___wmul:
  7418                           	opt stack 16
  7419                           
  7420                           ;incstack = 0
  7421  00168E  5007               	movf	i2___wmul@multiplier,w,c
  7422  001690  0209               	mulwf	i2___wmul@multiplicand,c
  7423  001692  CFF3 F00B          	movff	prodl,i2___wmul@product
  7424  001696  CFF4 F00C          	movff	prodh,i2___wmul@product+1
  7425  00169A  5007               	movf	i2___wmul@multiplier,w,c
  7426  00169C  020A               	mulwf	i2___wmul@multiplicand+1,c
  7427  00169E  50F3               	movf	prodl,w,c
  7428  0016A0  260C               	addwf	i2___wmul@product+1,f,c
  7429  0016A2  5008               	movf	i2___wmul@multiplier+1,w,c
  7430  0016A4  0209               	mulwf	i2___wmul@multiplicand,c
  7431  0016A6  50F3               	movf	prodl,w,c
  7432  0016A8  260C               	addwf	i2___wmul@product+1,f,c
  7433  0016AA  C00B  F007         	movff	i2___wmul@product,?i2___wmul
  7434  0016AE  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
  7435  0016B2  0012               	return	
  7436  0016B4                     __end_ofi2___wmul:
  7437                           	opt stack 0
  7438                           tosu	equ	0xFFF
  7439                           tosh	equ	0xFFE
  7440                           tosl	equ	0xFFD
  7441                           pclatu	equ	0xFFB
  7442                           pclath	equ	0xFFA
  7443                           tblptru	equ	0xFF8
  7444                           tblptrh	equ	0xFF7
  7445                           tblptrl	equ	0xFF6
  7446                           tablat	equ	0xFF5
  7447                           prodh	equ	0xFF4
  7448                           prodl	equ	0xFF3
  7449                           intcon	equ	0xFF2
  7450                           postinc0	equ	0xFEE
  7451                           fsr0h	equ	0xFEA
  7452                           fsr0l	equ	0xFE9
  7453                           wreg	equ	0xFE8
  7454                           indf1	equ	0xFE7
  7455                           postinc1	equ	0xFE6
  7456                           postdec1	equ	0xFE5
  7457                           fsr1h	equ	0xFE2
  7458                           fsr1l	equ	0xFE1
  7459                           indf2	equ	0xFDF
  7460                           postinc2	equ	0xFDE
  7461                           postdec2	equ	0xFDD
  7462                           fsr2h	equ	0xFDA
  7463                           fsr2l	equ	0xFD9
  7464                           status	equ	0xFD8
  7465                           
  7466 ;; *************** function i2___awmod *****************
  7467 ;; Defined at:
  7468 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  7469 ;; Parameters:    Size  Location     Type
  7470 ;;  dividend        2    0[COMRAM] int 
  7471 ;;  divisor         2    2[COMRAM] int 
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;  __awmod         1    5[COMRAM] unsigned char 
  7474 ;;  __awmod         1    4[COMRAM] unsigned char 
  7475 ;; Return value:  Size  Location     Type
  7476 ;;                  2    0[COMRAM] int 
  7477 ;; Registers used:
  7478 ;;		wreg, status,2, status,0
  7479 ;; Tracked objects:
  7480 ;;		On entry : 0/0
  7481 ;;		On exit  : 0/0
  7482 ;;		Unchanged: 0/0
  7483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7484 ;;      Params:         4       0       0       0
  7485 ;;      Locals:         2       0       0       0
  7486 ;;      Temps:          0       0       0       0
  7487 ;;      Totals:         6       0       0       0
  7488 ;;Total ram usage:        6 bytes
  7489 ;; Hardware stack levels used:    1
  7490 ;; This function calls:
  7491 ;;		Nothing
  7492 ;; This function is called by:
  7493 ;;		i2_ES_EnQueueFIFO
  7494 ;; This function uses a non-reentrant model
  7495 ;;
  7496                           
  7497                           	psect	text50
  7498  001266                     __ptext50:
  7499                           	opt stack 0
  7500  001266                     i2___awmod:
  7501                           	opt stack 16
  7502                           
  7503                           ;incstack = 0
  7504  001266  0E00               	movlw	0
  7505  001268  6E06               	movwf	i2___awmod@sign,c
  7506  00126A  AE02               	btfss	i2___awmod@dividend+1,7,c
  7507  00126C  D006               	goto	i2l2164
  7508  00126E  6C01               	negf	i2___awmod@dividend,c
  7509  001270  1E02               	comf	i2___awmod@dividend+1,f,c
  7510  001272  B0D8               	btfsc	status,0,c
  7511  001274  2A02               	incf	i2___awmod@dividend+1,f,c
  7512  001276  0E01               	movlw	1
  7513  001278  6E06               	movwf	i2___awmod@sign,c
  7514  00127A                     i2l2164:
  7515  00127A  AE04               	btfss	i2___awmod@divisor+1,7,c
  7516  00127C  D004               	goto	i2l2168
  7517  00127E  6C03               	negf	i2___awmod@divisor,c
  7518  001280  1E04               	comf	i2___awmod@divisor+1,f,c
  7519  001282  B0D8               	btfsc	status,0,c
  7520  001284  2A04               	incf	i2___awmod@divisor+1,f,c
  7521  001286                     i2l2168:
  7522  001286  5003               	movf	i2___awmod@divisor,w,c
  7523  001288  1004               	iorwf	i2___awmod@divisor+1,w,c
  7524  00128A  B4D8               	btfsc	status,2,c
  7525  00128C  D018               	goto	i2l2184
  7526  00128E  0E01               	movlw	1
  7527  001290  6E05               	movwf	i2___awmod@counter,c
  7528  001292  D004               	goto	i2l2174
  7529  001294                     i2l2172:
  7530  001294  90D8               	bcf	status,0,c
  7531  001296  3603               	rlcf	i2___awmod@divisor,f,c
  7532  001298  3604               	rlcf	i2___awmod@divisor+1,f,c
  7533  00129A  2A05               	incf	i2___awmod@counter,f,c
  7534  00129C                     i2l2174:
  7535  00129C  AE04               	btfss	i2___awmod@divisor+1,7,c
  7536  00129E  D7FA               	goto	i2l2172
  7537  0012A0                     i2l2176:
  7538  0012A0  5003               	movf	i2___awmod@divisor,w,c
  7539  0012A2  5C01               	subwf	i2___awmod@dividend,w,c
  7540  0012A4  5004               	movf	i2___awmod@divisor+1,w,c
  7541  0012A6  5802               	subwfb	i2___awmod@dividend+1,w,c
  7542  0012A8  A0D8               	btfss	status,0,c
  7543  0012AA  D004               	goto	i2l2180
  7544  0012AC  5003               	movf	i2___awmod@divisor,w,c
  7545  0012AE  5E01               	subwf	i2___awmod@dividend,f,c
  7546  0012B0  5004               	movf	i2___awmod@divisor+1,w,c
  7547  0012B2  5A02               	subwfb	i2___awmod@dividend+1,f,c
  7548  0012B4                     i2l2180:
  7549  0012B4  90D8               	bcf	status,0,c
  7550  0012B6  3204               	rrcf	i2___awmod@divisor+1,f,c
  7551  0012B8  3203               	rrcf	i2___awmod@divisor,f,c
  7552  0012BA  2E05               	decfsz	i2___awmod@counter,f,c
  7553  0012BC  D7F1               	goto	i2l2176
  7554  0012BE                     i2l2184:
  7555  0012BE  5006               	movf	i2___awmod@sign,w,c
  7556  0012C0  B4D8               	btfsc	status,2,c
  7557  0012C2  D004               	goto	i2l2188
  7558  0012C4  6C01               	negf	i2___awmod@dividend,c
  7559  0012C6  1E02               	comf	i2___awmod@dividend+1,f,c
  7560  0012C8  B0D8               	btfsc	status,0,c
  7561  0012CA  2A02               	incf	i2___awmod@dividend+1,f,c
  7562  0012CC                     i2l2188:
  7563  0012CC  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  7564  0012D0  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  7565  0012D4  0012               	return	
  7566  0012D6                     __end_ofi2___awmod:
  7567                           	opt stack 0
  7568                           tosu	equ	0xFFF
  7569                           tosh	equ	0xFFE
  7570                           tosl	equ	0xFFD
  7571                           pclatu	equ	0xFFB
  7572                           pclath	equ	0xFFA
  7573                           tblptru	equ	0xFF8
  7574                           tblptrh	equ	0xFF7
  7575                           tblptrl	equ	0xFF6
  7576                           tablat	equ	0xFF5
  7577                           prodh	equ	0xFF4
  7578                           prodl	equ	0xFF3
  7579                           intcon	equ	0xFF2
  7580                           postinc0	equ	0xFEE
  7581                           fsr0h	equ	0xFEA
  7582                           fsr0l	equ	0xFE9
  7583                           wreg	equ	0xFE8
  7584                           indf1	equ	0xFE7
  7585                           postinc1	equ	0xFE6
  7586                           postdec1	equ	0xFE5
  7587                           fsr1h	equ	0xFE2
  7588                           fsr1l	equ	0xFE1
  7589                           indf2	equ	0xFDF
  7590                           postinc2	equ	0xFDE
  7591                           postdec2	equ	0xFDD
  7592                           fsr2h	equ	0xFDA
  7593                           fsr2l	equ	0xFD9
  7594                           status	equ	0xFD8
  7595                           tosu	equ	0xFFF
  7596                           tosh	equ	0xFFE
  7597                           tosl	equ	0xFFD
  7598                           pclatu	equ	0xFFB
  7599                           pclath	equ	0xFFA
  7600                           tblptru	equ	0xFF8
  7601                           tblptrh	equ	0xFF7
  7602                           tblptrl	equ	0xFF6
  7603                           tablat	equ	0xFF5
  7604                           prodh	equ	0xFF4
  7605                           prodl	equ	0xFF3
  7606                           intcon	equ	0xFF2
  7607                           postinc0	equ	0xFEE
  7608                           fsr0h	equ	0xFEA
  7609                           fsr0l	equ	0xFE9
  7610                           wreg	equ	0xFE8
  7611                           indf1	equ	0xFE7
  7612                           postinc1	equ	0xFE6
  7613                           postdec1	equ	0xFE5
  7614                           fsr1h	equ	0xFE2
  7615                           fsr1l	equ	0xFE1
  7616                           indf2	equ	0xFDF
  7617                           postinc2	equ	0xFDE
  7618                           postdec2	equ	0xFDD
  7619                           fsr2h	equ	0xFDA
  7620                           fsr2l	equ	0xFD9
  7621                           status	equ	0xFD8
  7622                           
  7623                           	psect	text51
  7624  000000                     __ptext51:
  7625                           	opt stack 0
  7626                           tosu	equ	0xFFF
  7627                           tosh	equ	0xFFE
  7628                           tosl	equ	0xFFD
  7629                           pclatu	equ	0xFFB
  7630                           pclath	equ	0xFFA
  7631                           tblptru	equ	0xFF8
  7632                           tblptrh	equ	0xFF7
  7633                           tblptrl	equ	0xFF6
  7634                           tablat	equ	0xFF5
  7635                           prodh	equ	0xFF4
  7636                           prodl	equ	0xFF3
  7637                           intcon	equ	0xFF2
  7638                           postinc0	equ	0xFEE
  7639                           fsr0h	equ	0xFEA
  7640                           fsr0l	equ	0xFE9
  7641                           wreg	equ	0xFE8
  7642                           indf1	equ	0xFE7
  7643                           postinc1	equ	0xFE6
  7644                           postdec1	equ	0xFE5
  7645                           fsr1h	equ	0xFE2
  7646                           fsr1l	equ	0xFE1
  7647                           indf2	equ	0xFDF
  7648                           postinc2	equ	0xFDE
  7649                           postdec2	equ	0xFDD
  7650                           fsr2h	equ	0xFDA
  7651                           fsr2l	equ	0xFD9
  7652                           status	equ	0xFD8
  7653                           
  7654                           	psect	rparam
  7655  0000                     tosu	equ	0xFFF
  7656                           tosh	equ	0xFFE
  7657                           tosl	equ	0xFFD
  7658                           pclatu	equ	0xFFB
  7659                           pclath	equ	0xFFA
  7660                           tblptru	equ	0xFF8
  7661                           tblptrh	equ	0xFF7
  7662                           tblptrl	equ	0xFF6
  7663                           tablat	equ	0xFF5
  7664                           prodh	equ	0xFF4
  7665                           prodl	equ	0xFF3
  7666                           intcon	equ	0xFF2
  7667                           postinc0	equ	0xFEE
  7668                           fsr0h	equ	0xFEA
  7669                           fsr0l	equ	0xFE9
  7670                           wreg	equ	0xFE8
  7671                           indf1	equ	0xFE7
  7672                           postinc1	equ	0xFE6
  7673                           postdec1	equ	0xFE5
  7674                           fsr1h	equ	0xFE2
  7675                           fsr1l	equ	0xFE1
  7676                           indf2	equ	0xFDF
  7677                           postinc2	equ	0xFDE
  7678                           postdec2	equ	0xFDD
  7679                           fsr2h	equ	0xFDA
  7680                           fsr2l	equ	0xFD9
  7681                           status	equ	0xFD8
  7682                           
  7683                           	psect	temp
  7684  00003E                     btemp:
  7685                           	opt stack 0
  7686  00003E                     	ds	1
  7687  0000                     int$flags	set	btemp
  7688                           tosu	equ	0xFFF
  7689                           tosh	equ	0xFFE
  7690                           tosl	equ	0xFFD
  7691                           pclatu	equ	0xFFB
  7692                           pclath	equ	0xFFA
  7693                           tblptru	equ	0xFF8
  7694                           tblptrh	equ	0xFF7
  7695                           tblptrl	equ	0xFF6
  7696                           tablat	equ	0xFF5
  7697                           prodh	equ	0xFF4
  7698                           prodl	equ	0xFF3
  7699                           intcon	equ	0xFF2
  7700                           postinc0	equ	0xFEE
  7701                           fsr0h	equ	0xFEA
  7702                           fsr0l	equ	0xFE9
  7703                           wreg	equ	0xFE8
  7704                           indf1	equ	0xFE7
  7705                           postinc1	equ	0xFE6
  7706                           postdec1	equ	0xFE5
  7707                           fsr1h	equ	0xFE2
  7708                           fsr1l	equ	0xFE1
  7709                           indf2	equ	0xFDF
  7710                           postinc2	equ	0xFDE
  7711                           postdec2	equ	0xFDD
  7712                           fsr2h	equ	0xFDA
  7713                           fsr2l	equ	0xFD9
  7714                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    99
    Data        58
    BSS         476
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      61
    BANK0           160     55     151
    BANK1           256      0     256
    BANK2           256      0     172

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 128
		 -> PixelFrames(BANK1[128]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 128
		 -> PixelFrames(BANK1[128]), 

    memcpy@s1	PTR const void  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    SPI32_TransmitFrames@framePointer	PTR unsigned long  size(2) Largest target is 128
		 -> OffFrames(BANK1[128]), PixelFrames(BANK1[128]), 

    FramePointer	PTR unsigned long  size(2) Largest target is 128
		 -> NULL(NULL[0]), OffFrames(BANK1[128]), PixelFrames(BANK1[128]), 

    SetupPattern@configs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Pattern_RGBPatterns@PatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), PatternConfigs(BANK0[5]), 

    sp__memcpy	PTR void  size(2) Largest target is 128
		 -> PixelFrames(BANK1[128]), 

    DotStar_Show@pixelPointer	PTR unsigned long  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    sp__UpdatePattern	PTR unsigned long  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    sp__GetPatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [2] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), 

    S111$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    S80$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    S80$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_SPI32_EOTResponse
    _SPI32_EOTResponse->i2_PostSPI32ControlService
    i2_PostSPI32ControlService->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_RunPatternControlService
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostPatternControlService
    _ES_Timer_Tick_Resp->_PostSPI32ControlService
    _DotStar_Off->_SPI32_TransmitFrames
    _ShowPattern->_DotStar_Show
    _UpdatePattern->___lmul
    _DotStar_Show->_SPI32_TransmitFrames
    _SPI32_TransmitFrames->_PostSPI32ControlService
    _PostSPI32ControlService->_ES_PostToService
    _PostPatternControlService->_ES_PostToService
    _PausePattern->_ES_Timer_StopTimer
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitPatternControlService
    _ES_Initialize->_InitSPI32ControlService
    _InitSPI32ControlService->_ES_PostToService
    _InitPatternControlService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   27318
                                             54 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0   20459
                                             49 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
           _RunPatternControlService *
             _RunSPI32ControlService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    6048
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    6048
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
          _PostPatternControlService *
            _PostSPI32ControlService *
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunSPI32ControlService                               7     4      3     230
                                             40 BANK0      7     4      3
                       _GetNextFrame
                     _SPI32_SendByte
 ---------------------------------------------------------------------------------
 (3) _SPI32_SendByte                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _GetNextFrame                                         4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _RunPatternControlService                             9     6      3   11378
                                             40 BANK0      9     6      3
                       _PausePattern
          _PostPatternControlService
                        _ShowPattern
                        _StopPattern
 ---------------------------------------------------------------------------------
 (3) _StopPattern                                          0     0      0    3337
                        _DotStar_Off
                 _ES_Timer_StopTimer
                       _ResetPattern
 ---------------------------------------------------------------------------------
 (4) _ResetPattern                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _DotStar_Off                                          0     0      0    3293
               _SPI32_TransmitFrames
 ---------------------------------------------------------------------------------
 (3) _ShowPattern                                          0     0      0    5004
                       _DotStar_Show
                 _ES_Timer_InitTimer
                      _UpdatePattern
 ---------------------------------------------------------------------------------
 (4) _UpdatePattern                                        9     7      2    1057
                                             12 BANK0      9     7      2
                            ___lbmod
                            ___llmod
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     370
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     311
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_InitTimer                                   5     3      2     208
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _DotStar_Show                                         2     0      2    3739
                                             38 BANK0      2     0      2
               _SPI32_TransmitFrames
                      _UpdatePattern (ARG)
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _memcpy                                              10     4      6     348
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (5) _SPI32_TransmitFrames                                 6     3      3    3293
                                             32 BANK0      6     3      3
            _PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (4) _PostSPI32ControlService                              3     0      3    2922
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _PostPatternControlService                            3     0      3    2793
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _PausePattern                                         0     0      0      44
                 _ES_Timer_StopTimer
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_StopTimer                                   5     5      0      44
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2313
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1     284
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                              0 BANK0      1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    6463
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
          _InitPatternControlService *
            _InitSPI32ControlService *
 ---------------------------------------------------------------------------------
 (2) _InitSPI32ControlService                              4     4      0    2740
                                             29 BANK0      4     4      0
                   _ES_PostToService
                         _SPI32_Init
 ---------------------------------------------------------------------------------
 (3) _SPI32_Init                                           0     0      0       0
                            _HW_Init
 ---------------------------------------------------------------------------------
 (4) _HW_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternControlService                            4     4      0    3004
                                             29 BANK0      4     4      0
                       _DotStar_Init
                   _ES_PostToService
                       _SetupPattern
 ---------------------------------------------------------------------------------
 (3) _SetupPattern                                         3     0      3     196
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    2695
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2303
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1369
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     408
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _DotStar_Init                                         4     4      0      68
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                16    16      0     868
                                             35 COMRAM    16    16      0
                  _SPI32_EOTResponse
 ---------------------------------------------------------------------------------
 (11) _SPI32_EOTResponse                                   3     3      0     868
                                             32 COMRAM     3     3      0
          i2_PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (12) i2_PostSPI32ControlService                           3     0      3     845
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (13) i2_ES_PostToService                                  6     3      3     797
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (14) i2_ES_EnQueueFIFO                                   11     6      5     683
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (15) i2___wmul                                            6     2      4     153
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (15) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitPatternControlService *
       _DotStar_Init
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SetupPattern
     _InitSPI32ControlService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SPI32_Init
         _HW_Init
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunPatternControlService *
       _PausePattern
         _ES_Timer_StopTimer
       _PostPatternControlService
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
       _ShowPattern
         _DotStar_Show
           _SPI32_TransmitFrames
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             ___lbmod
             ___llmod
             ___lmul
           _memcpy (ARG)
         _ES_Timer_InitTimer
         _UpdatePattern
           ___lbmod
           ___llmod
           ___lmul
       _StopPattern
         _DotStar_Off
           _SPI32_TransmitFrames
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
         _ES_Timer_StopTimer
         _ResetPattern
     _RunSPI32ControlService *
       _GetNextFrame
       _SPI32_SendByte
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostPatternControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostSPI32ControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _SPI32_EOTResponse
     i2_PostSPI32ControlService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      AC       8       67.2%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0     100       6      100.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     37      97       4       94.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      3D       1       64.9%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     280       9        0.0%
DATA                 0      0     280      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Oct 31 17:31:09 2016

                   ??__HW_Timer_Init 00BD                  ES_CheckUserEvents@i 00BB  
                __HW_Timer_Init@Rate 00BB                  ___wmul@multiplicand 00C3  
                    ??_UpdatePattern 00C9  RunPatternControlService@ReturnEvent 00E6  
                                l324 0C8C                                  l453 0836  
                                l529 10F8                                  l901 0FC2  
              __end_of_ES_Initialize 0A24                                  _GIE 007F97  
                                _ISR 0008            __end_of_SPI32_EOTResponse 1788  
                       ___awmod@sign 00C0              __end_of_Check4Keystroke 17E4  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 00CF  
            ES_EnQueueFIFO@Event2Add 00C9                    ?_ES_PostToService 00D2  
                               ?_ISR 0001           i2ES_EnQueueFIFO@pThisQueue 0016  
  Pattern_RGBPatterns@PatternConfigs 008D                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 0088                                 l2030 0EEA  
                               l2022 0EC4                                 l2110 118C  
                               l2120 1484                                 l2042 0F30  
                               l2034 0F0E                                 l2026 0ED8  
                               l2018 0EB4                                 l2114 11B2  
                               l2028 0EE4                                 l2140 0F66  
                               l2204 0E8C                                 l2038 0F1C  
                               l2062 0B02                                 l2142 0F6C  
                               l2302 0646                                 l2128 14AC  
                               l2216 13A0                                 l2240 03F0  
                               l2208 0E92                                 l2312 06BE  
                               l2146 0FB0                                 l2138 0F56  
                               l2314 06FC                                 l2420 0604  
                               l2244 046E                                 l2500 0C38  
                               l2334 0BA2                                 l2078 1262  
                               l2094 1412                                 l2238 03E8  
                               l2254 04D4                                 l2416 05E8  
                               l2088 13F2                                 l2256 04FC  
                               l2512 0C5A                                 l2520 0C70  
                               l2338 0BC8                                 l2610 099C  
                               l2602 0954                                 l2426 062C  
                               l2506 0C4A                                 l2194 0E00  
                               l2444 1748                                 l2606 0998  
                               l2622 0A20                                 l2472 138E  
                               l2544 0750                                 l2448 1750  
                               l2632 08C8                                 l2538 156C  
                               l2618 0A1A                                 l2562 079C  
                               l2554 0782                                 l2490 0C18  
                               l2642 0932                                 l2626 0846  
                               l2810 1098                                 l2556 0786  
                               l2548 075C                                 l2484 0C06  
                               l2812 10AA                                 l2820 10E0  
                               l2574 07C8                                 l2494 0C28  
                               l2478 0BDE                                 l2638 091C  
                               l2654 15E8                                 l2814 10BC  
                               l2584 0806                                 l2568 07B2  
                               l2488 0C14                                 l2656 15F0  
                               l2816 10CE                                 l2588 080E  
                               l2598 094A                                 STR_1 0364  
                               STR_2 037F                                 STR_3 0397  
                               STR_4 03AE                                 u1310 0400  
                               u1320 0402                                 u1244 0E26  
                               u1245 0E1E                                 _LATC 000F8B  
                               u1448 1450                                 u1449 1468  
                               u1388 06A6                                 _PIE1 000F9D  
                               u1738 08F2                                 u1739 090A  
                               u1698 09F4                                 u1699 0A10  
                 ??_ES_PostToService 00D5                      __end_of_HW_Init 16D6  
                               _main 106C                          ?_ES_DeQueue 00C7  
          Pattern_RGBPatterns@Length 0096                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 indf1 000FE7  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 003E  
                      main@ErrorType 00F1                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0016    __end_of_InitPatternControlService 1392  
                    ?_SPI32_SendByte 0001                          ?_SPI32_Init 0001  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000010  
               __end_of_GetNextFrame 1668                                ??_ISR 0024  
                 ES_Run@HighestPrior 00F0                  __end_of_DotStar_Off 170E  
                              ?_main 0001                __end_of_ES_Timer_Init 17BA  
                    __end_of___awmod 0F3A                      __end_of___lbmod 14B8  
                              _T1CON 000FCD                      __end_of___llmod 0FD4  
                         _DistList00 0360                                _IRCF0 007E9C  
                              _IRCF1 007E9D                                _IRCF2 007E9E  
                              i2l149 0DB8          ??i2_PostSPI32ControlService 0021  
                              _PORTC 000F82                                _TRISC 000F94  
                              _SSPIE 007CEB                                _SSPIF 007CF3  
                      __CFG_PWRT$OFF 000000                 _SPI32_TransmitFrames 160E  
                ___lmul@multiplicand 00BF                                _Ready 0091  
    __end_of_InitSPI32ControlService 1570                           _FrameIndex 009A  
              SPI32_SendByte@newByte 00BB                                _putch 17E4  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                     __end_ofi2___wmul 16B4  
                              status 000FD8                   __size_ofi2___awmod 0070  
                    __initialization 0FD4               ES_GetMSBitSet@LoopCntr 00C4  
         __end_of_ES_CheckUserEvents 1474                         __end_of_main 10FA  
                  ES_Timer_Init@Rate 00BD                  __end_of_EventQueues 035E  
                             ??_main 00F1                    ?i2_ES_EnQueueFIFO 000D  
                      __activetblptr 000002           __size_of_SPI32_EOTResponse 0016  
                __size_of_ES_DeQueue 0128                      _Nybble2MSBitNum 0341  
              ?_SPI32_TransmitFrames 00DB     __end_of__HW_Process_Pending_Ints 175C  
                   ?_Check4Keystroke 0001                   ??i2_ES_EnQueueFIFO 0012  
               __end_of_DotStar_Init 0BD6                 __end_of_DotStar_Show 14FA  
                __size_of_SPI32_Init 0006                               _ADCON1 000FC1  
                          ??_HW_Init 00BB                               _CCP1IF 007CF2  
                   ___llmod@dividend 00BB                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                           _MyPriority 009C  
                             ?_putch 0001                     ??_ES_GetMSBitSet 00BD  
                             i2l2180 12B4                               i2l2172 1294  
                             i2l2164 127A                               i2l2174 129C  
                             i2l2176 12A0                               i2l2184 12BE  
                             i2l2168 1286                               i2l2290 0D4A  
                             i2l2188 12CC                               i2l2382 133C  
                             i2l2744 0DAE                               _INTCON 000FF2  
                             _ES_Run 0844                               _SSPADD 000FC8  
                             _SSPBUF 000FC9            i2_PostSPI32ControlService 1788  
                   ??_ES_EnQueueFIFO 00CC                       _Timer2PostFunc 0321  
                             _Length 009B        SPI32_TransmitFrames@numFrames 00DD  
                      ?_PausePattern 0001                               _Queue0 00A0  
                             _Queue1 00AC                       _SysTickCounter 0038  
                        _DotStar_Off 16F2                               ___lmul 117A  
           ??_RunSPI32ControlService 00E6                               ___wmul 1570  
    InitSPI32ControlService@Priority 00DB                            ??___awmod 00BF  
                          ??___lbmod 00BC                            ??___llmod 00C3  
                             _memcpy 13E0          __size_of_ES_Timer_InitTimer 0080  
                             clear_0 102C                               clear_1 103A  
                             clear_2 104C                               clear_3 1058  
                    ___awmod@divisor 00BD                        ??_ShowPattern 00E3  
          ES_Timer_InitTimer@NewTime 00BB                      ___awmod@counter 00BF  
                             _printf 15DA                          ISR@LastTime 0034  
                       __pdataCOMRAM 003D               ES_InitQueue@pThisQueue 00BE  
                  __end_ofi2___awmod 12D6                         __mediumconst 0000  
                        ISR@NextTime 0036                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                             putch@c 0001                       i2___awmod@sign 0006  
        __size_of_ES_Timer_Tick_Resp 0116                 ES_DeQueue@pThisQueue 00CF  
             UpdatePattern@patternID 00CE              ES_GetMSBitSet@Val2Check 00BB  
                    ___lbmod@divisor 00BB                           __accesstop 0060  
            __end_of__initialization 105E               __end_of_Timer2PostFunc 0341  
                    ___lbmod@counter 00BD      RunSPI32ControlService@ThisEvent 00E3  
                    __CFG_PBADEN$OFF 000000    __size_of_RunPatternControlService 00C4  
          ?_RunPatternControlService 00E3                __size_of_GetNextFrame 0028  
                      ___rparam_used 000001          ??_InitPatternControlService 00D8  
                     ??_PausePattern 00C0                          _EventQueues 0358  
        __size_ofi2_ES_PostToService 006A                       __pcstackCOMRAM 0001  
                       __pidataBANK0 17DA                         __pidataBANK2 15A6  
        __size_of_ES_Timer_StopTimer 004E                        ?_ES_InitQueue 00BB  
   __size_of_InitSPI32ControlService 003A              __end_of_Nybble2MSBitNum 0350  
  _PostSPI32ControlService$intlevel0 1714                        __end_of_putch 17E6  
                    _TMR_ActiveFlags 0093               ??_SPI32_TransmitFrames 00DE  
                          ?i2___wmul 0007              ES_GetMSBitSet@ReturnVal 00C2  
                      ?_ResetPattern 0001                  __end_of_ShowPattern 168E  
                      ??_StopPattern 00E1                       _TMR_TimerArray 0060  
                       _GetNextFrame 1640             ES_EnQueueFIFO@pThisQueue 00D0  
                            ??_putch 00BB             __HW_Process_Pending_Ints 1746  
                         __pbssBANK0 0060                           __pbssBANK1 0100  
                         __pbssBANK2 0200                     ??_SPI32_SendByte 00BB  
                            ?_ES_Run 0001                         ??_ES_DeQueue 00CB  
                       ??_SPI32_Init 00BB             ?_PostSPI32ControlService 00D8  
          __size_of_ES_PostToService 0076                       ??_ES_InitQueue 00BE  
                            ?___lmul 00BB                              ?___wmul 00C1  
    __size_of_RunSPI32ControlService 00FC                              _CCP1CON 000FBD  
                            ?_memcpy 00BB                       ___lmul@product 00C3  
                            ?_printf 00BB                __size_of_DotStar_Init 00D0  
                     ??_ResetPattern 00BB                __end_of_UpdatePattern 050A  
              __size_of_DotStar_Show 0042                           ??i2___wmul 000B  
          _InitPatternControlService 1340                   __end_of_ES_DeQueue 0632  
             i2ES_EnQueueFIFO@pBlock 000D                ES_Timer_StopTimer@Num 00BF  
                            _HW_Init 16B4                              _SSPCON1 000FC6  
                 __end_of_SPI32_Init 17DA                              _SSPSTAT 000FC7  
   SPI32_ControlService@CurrentState 0097                      __size_of_ES_Run 00F4  
                __end_of_StopPattern 16F2                          _PixelFrames 0180  
                      ?_SetupPattern 00BB               __size_of_ES_Initialize 00EC  
                            __Hparam 0000                              __Lparam 0000  
 i2PostSPI32ControlService@ThisEvent 001E     PostSPI32ControlService@ThisEvent 00D8  
   InitSPI32ControlService@ThisEvent 00D8            i2ES_EnQueueFIFO@Event2Add 000F  
            UpdatePattern@brightness 00CD                         _DotStar_Init 0B06  
                       _DotStar_Show 14B8                      __size_of___lmul 0076  
         ?_PostPatternControlService 00D8                              ___awmod 0E98  
                            ___lbmod 1474                      __size_of___wmul 0036  
                            ___llmod 0F3A   __size_ofi2_PostSPI32ControlService 0016  
                       __psmallconst 0300                ES_Timer_InitTimer@Num 00BF  
         i2ES_PostToService@TheEvent 0018                              __pcinit 0FD4  
                    __size_of_memcpy 004A                              __ramtop 0300  
                        _ShowPattern 1668                              __ptext0 106C  
                            __ptext1 15DA                              __ptext2 17E4  
                            __ptext3 0844                              __ptext4 1746  
                            __ptext5 0632                              __ptext6 0DF4  
                            __ptext7 0BD6                              __ptext8 0748  
                            __ptext9 17BA             i2ES_EnQueueFIFO@SaveCrit 0015  
                    __size_of_printf 0034                         __size_of_ISR 0DEC  
                       _FramePointer 008F              __size_of__HW_Timer_Init 001C  
                   ___awmod@dividend 00BB                   _ES_CheckUserEvents 142A  
                    ES_Run@ThisEvent 00B8                 __end_of_PausePattern 17D4  
             _RunSPI32ControlService 0748                       __pintcode_body 0D4E  
               end_of_initialization 105E                  ?_ES_CheckUserEvents 0001  
                            memcpy@d 00C1                              memcpy@n 00BF  
                            memcpy@s 00C3            __size_ofi2_ES_EnQueueFIFO 00B4  
                      __Lmediumconst 0000                              int_func 0D4E  
                i2___wmul@multiplier 0007      __end_of_PostSPI32ControlService 172A  
       ES_PostToService@WhichService 00D7                       ??_SetupPattern 00BE  
             __size_of_ES_Timer_Init 000E             DotStar_Show@pixelPointer 00E1  
                       ?_DotStar_Off 0001                              printf@c 00BF  
                            printf@f 00BB              _InitSPI32ControlService 1536  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE    __end_of_PostPatternControlService 1772  
               ??_ES_CheckUserEvents 00BB                        _ES_Initialize 0938  
   __end_of_RunPatternControlService 0C9A                     ___lbmod@dividend 00BC  
  RunPatternControlService@ThisEvent 00E3   PostPatternControlService@ThisEvent 00D8  
 InitPatternControlService@ThisEvent 00D8                 __end_of_ES_EventList 0360  
                        _StopPattern 16D6                 __end_of_ES_InitQueue 1536  
                          i2___awmod 1266                       ES_Initialize@i 00DE  
                        ___lbmod@rem 00BE             __size_of_Check4Keystroke 0004  
                     __end_of_ES_Run 0938                 __end_of_ResetPattern 17CC  
                          _GenColors 0278                   __end_of_DistList00 0364  
                   _ES_PostToService 11F0           __end_of_ES_Timer_InitTimer 117A  
               __end_of_ServDescList 0358                       __end_of___lmul 11F0  
                     __end_of___wmul 15A6                        __pidataCOMRAM 17E6  
                     __end_of_memcpy 142A                SetupPattern@numPixels 00BD  
                     ?_ES_Initialize 00DC                            _OffFrames 0100  
         ??__HW_Process_Pending_Ints 00DF                        _ES_Timer_Init 17AC  
                   i2___wmul@product 000B                       __end_of_printf 160E  
         __end_of_ES_Timer_Tick_Resp 0748                  start_initialization 0FD4  
                        __end_of_ISR 0DF4                    __size_ofi2___wmul 0026  
                       _CurrentFrame 0080                         _CurrentState 0099  
                         ?i2___awmod 0001   __size_of_InitPatternControlService 0052  
                           ??_ES_Run 00EC                     __CFG_OSC$IRCIO67 000000  
                    ___llmod@divisor 00BF                            _TickCount 009F  
                    ___llmod@counter 00C3                            _NumFrames 009D  
         __end_ofi2_ES_PostToService 1340            ??_InitSPI32ControlService 00D8  
         __end_of_ES_Timer_StopTimer 13E0                            _NumPixels 003C  
            __size_of_ES_GetMSBitSet 00A4                            _TestColor 0084  
                           ??___lmul 00C3                             ??___wmul 00C5  
                        __pdataBANK0 00F2                          __pdataBANK2 0278  
                           ??_memcpy 00C1              __size_of_ES_EnQueueFIFO 00E2  
                           ??_printf 00BD            SPI32_EOTResponse@EOTevent 0021  
              __size_of_PausePattern 0008                       ?_ES_Timer_Init 00BD  
                     __HW_Timer_Init 172A                 __end_of_SetupPattern 17AC  
                        __pbssCOMRAM 0034     __size_of_PostSPI32ControlService 001C  
      __size_of_SPI32_TransmitFrames 0032                        __pcstackBANK0 00BB  
                 ES_InitQueue@pBlock 00BB    RunPatternControlService@testEvent 00E9  
                           ?_HW_Init 0001             _RunPatternControlService 0BD6  
   SPI32_TransmitFrames@framePointer 00DB                     i2_ES_EnQueueFIFO 0C9A  
                      __PRIMASK_temp 003A                    ??_Check4Keystroke 00BB  
                       _PausePattern 17CC                            __pintcode 0008  
                           ?___awmod 00BB                             ?___lbmod 00BB  
                           ?___llmod 00BB          ??_PostPatternControlService 00DB  
               __size_of_DotStar_Off 001C                      ??_ES_Initialize 00DE  
           ES_PostToService@TheEvent 00D2               __end_of__HW_Timer_Init 1746  
                       ?_ShowPattern 0001                          __smallconst 0300  
              __size_of_ES_InitQueue 003C              ?_RunSPI32ControlService 00E3  
                        ??i2___awmod 0005                       __size_of_putch 0002  
              __size_of_ResetPattern 0008                 ES_Initialize@NewRate 00DC  
          ES_GetMSBitSet@Nybble2Test 00C3                   _PatternStepCounter 009E  
                     ___wmul@product 00C5               __size_of_UpdatePattern 014C  
              DotStar_Init@numPixels 00BD                         _ES_EventList 035E  
            __size_of_SPI32_SendByte 000A                         _ES_InitQueue 14FA  
                    ??_ES_Timer_Init 00BF       i2ES_PostToService@WhichService 001D  
                    ?__HW_Timer_Init 00BB                    ___wmul@multiplier 00C1  
     __end_of_RunSPI32ControlService 0844                             i2___wmul 168E  
                       _ResetPattern 17C4                   ES_DeQueue@SaveCrit 00CD  
               ES_EnQueueFIFO@pBlock 00C7             __end_of_ES_PostToService 1266  
                       ?_StopPattern 0001            _PostPatternControlService 175C  
                  ___lmul@multiplier 00BB                            copy_data0 0FE8  
                          copy_data1 1008                     __size_of_HW_Init 0022  
                     _BitNum2SetMask 0301                       _PatternConfigs 00F2  
                       _ServDescList 0350                   i2___awmod@dividend 0001  
                       _PixelPattern 0200                             __Hrparam 0000  
                     _ES_GetMSBitSet 0DF4                             __Lrparam 0000  
  RunSPI32ControlService@ReturnEvent 00E7                     __size_of___awmod 00A2  
                   __size_of___lbmod 0044                __size_of_SetupPattern 000E  
              i2___wmul@multiplicand 0009          __size_of_ES_CheckUserEvents 004A  
                   __size_of___llmod 009A                       _ES_EnQueueFIFO 0A24  
         ?i2_PostSPI32ControlService 001E              _PostSPI32ControlService 170E  
                      _UpdatePattern 03BE                   _ES_Timer_InitTimer 10FA  
             __end_of_BitNum2SetMask 0321                             __ptext10 1640  
                           __ptext11 16D6                             __ptext20 13E0  
                           __ptext12 17C4                             __ptext21 160E  
                           __ptext13 16F2                             __ptext30 0938  
                           __ptext22 175C                             __ptext14 1668  
                           __ptext31 1340                             __ptext23 170E  
                           __ptext15 03BE                             __ptext40 0B06  
                           __ptext32 1536                             __ptext24 17CC  
                           __ptext16 117A                             __ptext41 17AC  
                           __ptext33 17D4                             __ptext25 1392  
                           __ptext17 0F3A                             __ptext50 1266  
                           __ptext42 172A                             __ptext34 16B4  
                           __ptext26 050A                             __ptext18 10FA  
                           __ptext51 0000                             __ptext43 14FA  
                           __ptext35 179E                             __ptext27 1474  
                           __ptext19 14B8                             __ptext36 11F0  
                           __ptext28 142A                             __ptext45 1772  
                           __ptext37 0A24                             __ptext29 17E0  
                           __ptext46 1788                             __ptext38 1570  
                           __ptext47 12D6                             __ptext39 0E98  
                           __ptext48 0C9A                             __ptext49 168E  
                      ?_GetNextFrame 00BB    ES_Timer_Tick_Resp@NeedsProcessing 008B  
                     UpdatePattern@i 00CF                  ?_ES_Timer_InitTimer 00BB  
                      __size_of_main 008E                   _ES_Timer_Tick_Resp 0632  
             __end_of_ES_GetMSBitSet 0E98                         _SetupPattern 179E  
                ?_ES_Timer_Tick_Resp 0001               __end_of_ES_EnQueueFIFO 0B06  
                           int$flags 003E                  SetupPattern@configs 00BB  
               ??_ES_Timer_InitTimer 00BD       SPI32_ControlService@MyPriority 0098  
                      _MaxBrightness 003D                    ES_DeQueue@NumLeft 00CE  
                 i2_ES_PostToService 12D6                        DotStar_Init@i 00BE  
           __end_ofi2_ES_EnQueueFIFO 0D4E                   _ES_Timer_StopTimer 1392  
                     ?_UpdatePattern 00C7           ??_RunPatternControlService 00E6  
                  i2___awmod@divisor 0003                    i2___awmod@counter 0005  
               __size_of_ShowPattern 0026    __end_ofi2_PostSPI32ControlService 179E  
                           memcpy@d1 00BB                             memcpy@s1 00BD  
                ?i2_ES_PostToService 0018                       ??_GetNextFrame 00BF  
               ??_ES_Timer_Tick_Resp 00DB                  ?_ES_Timer_StopTimer 0001  
                    _Check4Keystroke 17E0                             intlevel2 0000  
                         _ES_DeQueue 050A    __size_of__HW_Process_Pending_Ints 0016  
          ?__HW_Process_Pending_Ints 0001                      ?_ES_GetMSBitSet 00BB  
       __end_of_SPI32_TransmitFrames 1640                 ??i2_ES_PostToService 001B  
                         _SPI32_Init 17D4                        ?_DotStar_Init 0001  
                      ?_DotStar_Show 00E1                 ??_ES_Timer_StopTimer 00BB  
                     _SPI32_SendByte 17BA  ES_Timer_Tick_Resp@NextTimer2Process 0095  
                           printf@ap 00BD                      ?_ES_EnQueueFIFO 00C7  
          ??_PostSPI32ControlService 00DB                     ES_DeQueue@pBlock 00C7  
  SPI32_TransmitFrames@transmitEvent 00DE    InitPatternControlService@Priority 00DB  
                  _SPI32_EOTResponse 1772               ES_DeQueue@pReturnEvent 00C9  
              ES_InitQueue@BlockSize 00BD                   ?_SPI32_EOTResponse 0001  
               __size_of_StopPattern 001C             ?_InitSPI32ControlService 0001  
                ??_SPI32_EOTResponse 0021           ?_InitPatternControlService 0001  
 __size_of_PostPatternControlService 0016               __end_of_SPI32_SendByte 17C4  
                     ??_DotStar_Init 00BB                        ??_DotStar_Off 00E1  
                     ??_DotStar_Show 00E3  
