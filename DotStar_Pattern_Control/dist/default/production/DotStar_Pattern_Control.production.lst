

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Jan 26 12:08:19 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    93                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    94  0000                     
    95                           	psect	idataCOMRAM
    96  003CD0                     __pidataCOMRAM:
    97                           	opt stack 0
    98                           
    99                           ;initializer for ProcessReceive@LastButton
   100  003CD0  FF                 	db	255
   101                           
   102                           ;initializer for _MaxBrightness
   103  003CD1  1F                 	db	31
   104                           
   105                           	psect	idataBANK0
   106  003CB4                     __pidataBANK0:
   107                           	opt stack 0
   108                           
   109                           ;initializer for CenterBreathe@rising
   110  003CB4  01                 	db	1
   111                           
   112                           ;initializer for FullPulseHold@rising
   113  003CB5  01                 	db	1
   114                           
   115                           ;initializer for SingleFocusBreathe@rising
   116  003CB6  01                 	db	1
   117                           
   118                           ;initializer for _FrameByte
   119  003CB7  03                 	db	3
   120                           
   121                           ;initializer for _PatternConfigs
   122  003CB8  FF                 	db	255
   123  003CB9  1F                 	db	31
   124  003CBA  25                 	db	37
   125  003CBB  01                 	db	1
   126                           
   127                           	psect	smallconst
   128  000300                     __psmallconst:
   129                           	opt stack 0
   130  000300  00                 	db	0
   131  000301                     __end_of_ES_EventList:
   132                           	opt stack 0
   133  000301                     _BitNum2SetMask:
   134                           	opt stack 0
   135  000301  0001               	dw	1
   136  000303  0002               	dw	2
   137  000305  0004               	dw	4
   138  000307  0008               	dw	8
   139  000309  0010               	dw	16
   140  00030B  0020               	dw	32
   141  00030D  0040               	dw	64
   142  00030F  0080               	dw	128
   143  000311  0100               	dw	256
   144  000313  0200               	dw	512
   145  000315  0400               	dw	1024
   146  000317  0800               	dw	2048
   147  000319  1000               	dw	4096
   148  00031B  2000               	dw	8192
   149  00031D  4000               	dw	16384
   150  00031F  8000               	dw	32768
   151  000321                     __end_of_BitNum2SetMask:
   152                           	opt stack 0
   153  000321                     _Timer2PostFunc:
   154                           	opt stack 0
   155  000321  90                 	db	low _PostPatternControlService
   156  000322  3B                 	db	high _PostPatternControlService
   157  000323  AC                 	db	low _PostSPI32ControlService
   158  000324  3B                 	db	high _PostSPI32ControlService
   159  000325  00                 	db	0
   160  000326  00                 	db	0
   161  000327  00                 	db	0
   162  000328  00                 	db	0
   163  000329  00                 	db	0
   164  00032A  00                 	db	0
   165  00032B  00                 	db	0
   166  00032C  00                 	db	0
   167  00032D  00                 	db	0
   168  00032E  00                 	db	0
   169  00032F  00                 	db	0
   170  000330  00                 	db	0
   171  000331  00                 	db	0
   172  000332  00                 	db	0
   173  000333  00                 	db	0
   174  000334  00                 	db	0
   175  000335  00                 	db	0
   176  000336  00                 	db	0
   177  000337  00                 	db	0
   178  000338  00                 	db	0
   179  000339  00                 	db	0
   180  00033A  00                 	db	0
   181  00033B  00                 	db	0
   182  00033C  00                 	db	0
   183  00033D  00                 	db	0
   184  00033E  00                 	db	0
   185  00033F  00                 	db	0
   186  000340  00                 	db	0
   187  000341                     __end_of_Timer2PostFunc:
   188                           	opt stack 0
   189  000341                     _Nybble2MSBitNum:
   190                           	opt stack 0
   191  000341  00                 	db	0
   192  000342  01                 	db	1
   193  000343  01                 	db	1
   194  000344  02                 	db	2
   195  000345  02                 	db	2
   196  000346  02                 	db	2
   197  000347  02                 	db	2
   198  000348  03                 	db	3
   199  000349  03                 	db	3
   200  00034A  03                 	db	3
   201  00034B  03                 	db	3
   202  00034C  03                 	db	3
   203  00034D  03                 	db	3
   204  00034E  03                 	db	3
   205  00034F  03                 	db	3
   206  000350                     __end_of_Nybble2MSBitNum:
   207                           	opt stack 0
   208  000350                     _ServDescList:
   209                           	opt stack 0
   210  000350  34                 	db	low _InitPatternControlService
   211  000351  37                 	db	high _InitPatternControlService
   212  000352  B0                 	db	low _RunPatternControlService
   213  000353  2E                 	db	high _RunPatternControlService
   214  000354  98                 	db	low _InitSPI32ControlService
   215  000355  39                 	db	high _InitSPI32ControlService
   216  000356  20                 	db	low _RunSPI32ControlService
   217  000357  29                 	db	high _RunSPI32ControlService
   218  000358                     __end_of_ServDescList:
   219                           	opt stack 0
   220  000358                     _EventQueues:
   221                           	opt stack 0
   222  000358  46                 	db	low _Queue0
   223  000359  00                 	db	high _Queue0
   224  00035A  04                 	db	4
   225  00035B  B8                 	db	low _Queue1
   226  00035C  01                 	db	high _Queue1
   227  00035D  04                 	db	4
   228  00035E                     __end_of_EventQueues:
   229                           	opt stack 0
   230  0000                     _RXF0EIDH	set	3842
   231  0000                     _RXF0EIDL	set	3843
   232  0000                     _RXF0SIDH	set	3840
   233  0000                     _RXF0SIDL	set	3841
   234  0000                     _RXM0EIDH	set	3866
   235  0000                     _RXM0EIDL	set	3867
   236  0000                     _RXM0SIDH	set	3864
   237  0000                     _RXM0SIDL	set	3865
   238  0000                     _TXB0CONbits	set	3904
   239  0000                     _ADCON1	set	4033
   240  0000                     _BRGCON1bits	set	3952
   241  0000                     _BRGCON2bits	set	3953
   242  0000                     _BRGCON3bits	set	3954
   243  0000                     _CANCON	set	3951
   244  0000                     _CANSTATbits	set	3950
   245  0000                     _CCP1CON	set	4029
   246  0000                     _CCPR1H	set	4031
   247  0000                     _CCPR1L	set	4030
   248  0000                     _CIOCON	set	3955
   249  0000                     _ECANCON	set	3959
   250  0000                     _INTCON	set	4082
   251  0000                     _LATA	set	3977
   252  0000                     _LATB	set	3978
   253  0000                     _LATC	set	3979
   254  0000                     _PIE1	set	3997
   255  0000                     _PORTA	set	3968
   256  0000                     _PORTB	set	3969
   257  0000                     _PORTC	set	3970
   258  0000                     _RXB0CONbits	set	3936
   259  0000                     _RXB0D0	set	3942
   260  0000                     _RXB0D1	set	3943
   261  0000                     _RXB0D2	set	3944
   262  0000                     _RXB0EIDH	set	3939
   263  0000                     _RXB0EIDL	set	3940
   264  0000                     _RXB0SIDH	set	3937
   265  0000                     _RXB0SIDL	set	3938
   266  0000                     _SSPADD	set	4040
   267  0000                     _SSPBUF	set	4041
   268  0000                     _SSPCON1	set	4038
   269  0000                     _SSPSTAT	set	4039
   270  0000                     _T1CON	set	4045
   271  0000                     _TRISA	set	3986
   272  0000                     _TRISBbits	set	3987
   273  0000                     _TRISC	set	3988
   274  0000                     _CCP1IF	set	31986
   275  0000                     _ERRIE	set	32029
   276  0000                     _ERRIF	set	32037
   277  0000                     _GIE	set	32663
   278  0000                     _IRXIE	set	32031
   279  0000                     _IRXIF	set	32039
   280  0000                     _PEIE	set	32662
   281  0000                     _RXB0IE	set	32024
   282  0000                     _RXB0IF	set	32032
   283  0000                     _SSPIE	set	31979
   284  0000                     _SSPIF	set	31987
   285  0000                     _TXB0IE	set	32026
   286  0000                     _TXB0IF	set	32034
   287  00035E                     STR_1:
   288  00035E  46                 	db	70	;'F'
   289  00035F  61                 	db	97	;'a'
   290  000360  69                 	db	105	;'i'
   291  000361  6C                 	db	108	;'l'
   292  000362  65                 	db	101	;'e'
   293  000363  64                 	db	100	;'d'
   294  000364  20                 	db	32
   295  000365  6F                 	db	111	;'o'
   296  000366  6E                 	db	110	;'n'
   297  000367  20                 	db	32
   298  000368  61                 	db	97	;'a'
   299  000369  74                 	db	116	;'t'
   300  00036A  74                 	db	116	;'t'
   301  00036B  65                 	db	101	;'e'
   302  00036C  6D                 	db	109	;'m'
   303  00036D  70                 	db	112	;'p'
   304  00036E  74                 	db	116	;'t'
   305  00036F  20                 	db	32
   306  000370  74                 	db	116	;'t'
   307  000371  6F                 	db	111	;'o'
   308  000372  20                 	db	32
   309  000373  50                 	db	80	;'P'
   310  000374  6F                 	db	111	;'o'
   311  000375  73                 	db	115	;'s'
   312  000376  74                 	db	116	;'t'
   313  000377  0A                 	db	10
   314  000378  00                 	db	0
   315  000379                     STR_2:
   316  000379  46                 	db	70	;'F'
   317  00037A  61                 	db	97	;'a'
   318  00037B  69                 	db	105	;'i'
   319  00037C  6C                 	db	108	;'l'
   320  00037D  65                 	db	101	;'e'
   321  00037E  64                 	db	100	;'d'
   322  00037F  20                 	db	32
   323  000380  6F                 	db	111	;'o'
   324  000381  6E                 	db	110	;'n'
   325  000382  20                 	db	32
   326  000383  4E                 	db	78	;'N'
   327  000384  55                 	db	85	;'U'
   328  000385  4C                 	db	76	;'L'
   329  000386  4C                 	db	76	;'L'
   330  000387  20                 	db	32
   331  000388  70                 	db	112	;'p'
   332  000389  6F                 	db	111	;'o'
   333  00038A  69                 	db	105	;'i'
   334  00038B  6E                 	db	110	;'n'
   335  00038C  74                 	db	116	;'t'
   336  00038D  65                 	db	101	;'e'
   337  00038E  72                 	db	114	;'r'
   338  00038F  0A                 	db	10
   339  000390  00                 	db	0
   340  000391                     STR_3:
   341  000391  46                 	db	70	;'F'
   342  000392  61                 	db	97	;'a'
   343  000393  69                 	db	105	;'i'
   344  000394  6C                 	db	108	;'l'
   345  000395  65                 	db	101	;'e'
   346  000396  64                 	db	100	;'d'
   347  000397  20                 	db	32
   348  000398  49                 	db	73	;'I'
   349  000399  6E                 	db	110	;'n'
   350  00039A  69                 	db	105	;'i'
   351  00039B  74                 	db	116	;'t'
   352  00039C  69                 	db	105	;'i'
   353  00039D  61                 	db	97	;'a'
   354  00039E  6C                 	db	108	;'l'
   355  00039F  69                 	db	105	;'i'
   356  0003A0  7A                 	db	122	;'z'
   357  0003A1  61                 	db	97	;'a'
   358  0003A2  74                 	db	116	;'t'
   359  0003A3  69                 	db	105	;'i'
   360  0003A4  6F                 	db	111	;'o'
   361  0003A5  6E                 	db	110	;'n'
   362  0003A6  0A                 	db	10
   363  0003A7  00                 	db	0
   364  0003A8                     STR_4:
   365  0003A8  4F                 	db	79	;'O'
   366  0003A9  74                 	db	116	;'t'
   367  0003AA  68                 	db	104	;'h'
   368  0003AB  65                 	db	101	;'e'
   369  0003AC  72                 	db	114	;'r'
   370  0003AD  20                 	db	32
   371  0003AE  46                 	db	70	;'F'
   372  0003AF  61                 	db	97	;'a'
   373  0003B0  69                 	db	105	;'i'
   374  0003B1  6C                 	db	108	;'l'
   375  0003B2  75                 	db	117	;'u'
   376  0003B3  72                 	db	114	;'r'
   377  0003B4  65                 	db	101	;'e'
   378  0003B5  0A                 	db	10
   379  0003B6  00                 	db	0
   380                           
   381                           ; #config settings
   382  0003B7  00                 	db	0	; dummy byte at the end
   383  0000                     
   384                           	psect	cinit
   385  003472                     __pcinit:
   386                           	opt stack 0
   387  003472                     start_initialization:
   388                           	opt stack 0
   389  003472                     __initialization:
   390                           	opt stack 0
   391                           
   392                           ; Initialize objects allocated to BANK0 (8 bytes)
   393                           ; load TBLPTR registers with __pidataBANK0
   394  003472  0EB4               	movlw	low __pidataBANK0
   395  003474  6EF6               	movwf	tblptrl,c
   396  003476  0E3C               	movlw	high __pidataBANK0
   397  003478  6EF7               	movwf	tblptrh,c
   398  00347A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   399  00347C  6EF8               	movwf	tblptru,c
   400  00347E  EE00  F0F3         	lfsr	0,__pdataBANK0
   401  003482  EE10 F008          	lfsr	1,8
   402  003486                     copy_data0:
   403  003486  0009               	tblrd		*+
   404  003488  CFF5 FFEE          	movff	tablat,postinc0
   405  00348C  50E5               	movf	postdec1,w,c
   406  00348E  50E1               	movf	fsr1l,w,c
   407  003490  E1FA               	bnz	copy_data0
   408                           
   409                           ; Initialize objects allocated to COMRAM (2 bytes)
   410                           ; load TBLPTR registers with __pidataCOMRAM
   411  003492  0ED0               	movlw	low __pidataCOMRAM
   412  003494  6EF6               	movwf	tblptrl,c
   413  003496  0E3C               	movlw	high __pidataCOMRAM
   414  003498  6EF7               	movwf	tblptrh,c
   415  00349A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   416  00349C  6EF8               	movwf	tblptru,c
   417  00349E  0009               	tblrd		*+	;fetch initializer
   418  0034A0  CFF5 F052          	movff	tablat,__pdataCOMRAM
   419  0034A4  0009               	tblrd		*+	;fetch initializer
   420  0034A6  CFF5 F053          	movff	tablat,__pdataCOMRAM+1
   421                           
   422                           ; Clear objects allocated to BIGRAM (316 bytes)
   423  0034AA  EE01  F0C4         	lfsr	0,__pbssBIGRAM
   424  0034AE  EE11 F03C          	lfsr	1,316
   425  0034B2                     clear_0:
   426  0034B2  6AEE               	clrf	postinc0,c
   427  0034B4  50E5               	movf	postdec1,w,c
   428  0034B6  50E1               	movf	fsr1l,w,c
   429  0034B8  E1FC               	bnz	clear_0
   430  0034BA  50E2               	movf	fsr1h,w,c
   431  0034BC  E1FA               	bnz	clear_0
   432                           
   433                           ; Clear objects allocated to BANK1 (196 bytes)
   434  0034BE  EE01  F000         	lfsr	0,__pbssBANK1
   435  0034C2  0EC4               	movlw	196
   436  0034C4                     clear_1:
   437  0034C4  6AEE               	clrf	postinc0,c
   438  0034C6  06E8               	decf	wreg,f,c
   439  0034C8  E1FD               	bnz	clear_1
   440                           
   441                           ; Clear objects allocated to BANK0 (37 bytes)
   442  0034CA  EE00  F0CE         	lfsr	0,__pbssBANK0
   443  0034CE  0E25               	movlw	37
   444  0034D0                     clear_2:
   445  0034D0  6AEE               	clrf	postinc0,c
   446  0034D2  06E8               	decf	wreg,f,c
   447  0034D4  E1FD               	bnz	clear_2
   448                           
   449                           ; Clear objects allocated to COMRAM (28 bytes)
   450  0034D6  EE00  F036         	lfsr	0,__pbssCOMRAM
   451  0034DA  0E1C               	movlw	28
   452  0034DC                     clear_3:
   453  0034DC  6AEE               	clrf	postinc0,c
   454  0034DE  06E8               	decf	wreg,f,c
   455  0034E0  E1FD               	bnz	clear_3
   456  0034E2                     end_of_initialization:
   457                           	opt stack 0
   458  0034E2                     __end_of__initialization:
   459                           	opt stack 0
   460  0034E2  9054               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   461  0034E4  9254               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   462  0034E6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   463  0034E8  6EF8               	movwf	tblptru,c
   464  0034EA  0100               	movlb	0
   465  0034EC  EF71  F019         	goto	_main	;jump to C main() function
   466                           tblptru	equ	0xFF8
   467                           tblptrh	equ	0xFF7
   468                           tblptrl	equ	0xFF6
   469                           tablat	equ	0xFF5
   470                           postinc0	equ	0xFEE
   471                           wreg	equ	0xFE8
   472                           postdec1	equ	0xFE5
   473                           fsr1h	equ	0xFE2
   474                           fsr1l	equ	0xFE1
   475                           
   476                           	psect	bssCOMRAM
   477  000036                     __pbssCOMRAM:
   478                           	opt stack 0
   479  000036                     _TransmitFrame:
   480                           	opt stack 0
   481  000036                     	ds	4
   482  00003A                     ISR@LastTime:
   483                           	opt stack 0
   484  00003A                     	ds	2
   485  00003C                     ISR@NextTime:
   486                           	opt stack 0
   487  00003C                     	ds	2
   488  00003E                     _SysTickCounter:
   489                           	opt stack 0
   490  00003E                     	ds	2
   491  000040                     __PRIMASK_temp:
   492                           	opt stack 0
   493  000040                     	ds	2
   494  000042                     	ds	1
   495  000043                     	ds	1
   496  000044                     ProcessReceive@CurrentPattern:
   497                           	opt stack 0
   498  000044                     	ds	1
   499  000045                     	ds	1
   500  000046                     _Queue0:
   501                           	opt stack 0
   502  000046                     	ds	12
   503                           tblptru	equ	0xFF8
   504                           tblptrh	equ	0xFF7
   505                           tblptrl	equ	0xFF6
   506                           tablat	equ	0xFF5
   507                           postinc0	equ	0xFEE
   508                           wreg	equ	0xFE8
   509                           postdec1	equ	0xFE5
   510                           fsr1h	equ	0xFE2
   511                           fsr1l	equ	0xFE1
   512                           
   513                           	psect	dataCOMRAM
   514  000052                     __pdataCOMRAM:
   515                           	opt stack 0
   516  000052                     ProcessReceive@LastButton:
   517                           	opt stack 0
   518  000052                     	ds	1
   519  000053                     _MaxBrightness:
   520                           	opt stack 0
   521  000053                     	ds	1
   522                           tblptru	equ	0xFF8
   523                           tblptrh	equ	0xFF7
   524                           tblptrl	equ	0xFF6
   525                           tablat	equ	0xFF5
   526                           postinc0	equ	0xFEE
   527                           wreg	equ	0xFE8
   528                           postdec1	equ	0xFE5
   529                           fsr1h	equ	0xFE2
   530                           fsr1l	equ	0xFE1
   531                           
   532                           	psect	bssBANK0
   533  0000CE                     __pbssBANK0:
   534                           	opt stack 0
   535  0000CE                     _CurrentFrame:
   536                           	opt stack 0
   537  0000CE                     	ds	4
   538  0000D2                     ES_Timer_Tick_Resp@NewEvent:
   539                           	opt stack 0
   540  0000D2                     	ds	3
   541  0000D5                     ES_Timer_Tick_Resp@NeedsProcessing:
   542                           	opt stack 0
   543  0000D5                     	ds	2
   544  0000D7                     _FramePointer:
   545                           	opt stack 0
   546  0000D7                     	ds	2
   547  0000D9                     _ListeningFocus:
   548                           	opt stack 0
   549  0000D9                     	ds	2
   550  0000DB                     _PatternID:
   551                           	opt stack 0
   552  0000DB                     	ds	2
   553  0000DD                     _Ready:
   554                           	opt stack 0
   555  0000DD                     	ds	2
   556  0000DF                     _TMR_ActiveFlags:
   557                           	opt stack 0
   558  0000DF                     	ds	2
   559  0000E1                     ES_Timer_Tick_Resp@NextTimer2Process:
   560                           	opt stack 0
   561  0000E1                     	ds	1
   562  0000E2                     SPI32_ControlService@CurrentState:
   563                           	opt stack 0
   564  0000E2                     	ds	1
   565  0000E3                     SPI32_ControlService@MyPriority:
   566                           	opt stack 0
   567  0000E3                     	ds	1
   568  0000E4                     _CurrentState:
   569                           	opt stack 0
   570  0000E4                     	ds	1
   571  0000E5                     _FrameIndex:
   572                           	opt stack 0
   573  0000E5                     	ds	1
   574  0000E6                     _MyPriority:
   575                           	opt stack 0
   576  0000E6                     	ds	1
   577  0000E7                     _NumFrames:
   578                           	opt stack 0
   579  0000E7                     	ds	1
   580  0000E8                     _TickCount:
   581                           	opt stack 0
   582  0000E8                     	ds	1
   583  0000E9                     _CycleCounter:
   584                           	opt stack 0
   585  0000E9                     	ds	4
   586  0000ED                     ES_Run@ThisEvent:
   587                           	opt stack 0
   588  0000ED                     	ds	3
   589  0000F0                     _Brightness:
   590                           	opt stack 0
   591  0000F0                     	ds	2
   592  0000F2                     _PatternStepCounter:
   593                           	opt stack 0
   594  0000F2                     	ds	1
   595                           tblptru	equ	0xFF8
   596                           tblptrh	equ	0xFF7
   597                           tblptrl	equ	0xFF6
   598                           tablat	equ	0xFF5
   599                           postinc0	equ	0xFEE
   600                           wreg	equ	0xFE8
   601                           postdec1	equ	0xFE5
   602                           fsr1h	equ	0xFE2
   603                           fsr1l	equ	0xFE1
   604                           
   605                           	psect	dataBANK0
   606  0000F3                     __pdataBANK0:
   607                           	opt stack 0
   608  0000F3                     CenterBreathe@rising:
   609                           	opt stack 0
   610  0000F3                     	ds	1
   611  0000F4                     FullPulseHold@rising:
   612                           	opt stack 0
   613  0000F4                     	ds	1
   614  0000F5                     SingleFocusBreathe@rising:
   615                           	opt stack 0
   616  0000F5                     	ds	1
   617  0000F6                     _FrameByte:
   618                           	opt stack 0
   619  0000F6                     	ds	1
   620  0000F7                     _PatternConfigs:
   621                           	opt stack 0
   622  0000F7                     	ds	4
   623                           tblptru	equ	0xFF8
   624                           tblptrh	equ	0xFF7
   625                           tblptrl	equ	0xFF6
   626                           tablat	equ	0xFF5
   627                           postinc0	equ	0xFEE
   628                           wreg	equ	0xFE8
   629                           postdec1	equ	0xFE5
   630                           fsr1h	equ	0xFE2
   631                           fsr1l	equ	0xFE1
   632                           
   633                           	psect	bssBANK1
   634  000100                     __pbssBANK1:
   635                           	opt stack 0
   636  000100                     _TMR_TimerArray:
   637                           	opt stack 0
   638  000100                     	ds	32
   639  000120                     _PixelPattern:
   640                           	opt stack 0
   641  000120                     	ds	152
   642  0001B8                     _Queue1:
   643                           	opt stack 0
   644  0001B8                     	ds	12
   645                           tblptru	equ	0xFF8
   646                           tblptrh	equ	0xFF7
   647                           tblptrl	equ	0xFF6
   648                           tablat	equ	0xFF5
   649                           postinc0	equ	0xFEE
   650                           wreg	equ	0xFE8
   651                           postdec1	equ	0xFE5
   652                           fsr1h	equ	0xFE2
   653                           fsr1l	equ	0xFE1
   654                           
   655                           	psect	bssBIGRAM
   656  0001C4                     __pbssBIGRAM:
   657                           	opt stack 0
   658  0001C4                     _PixelFrames:
   659                           	opt stack 0
   660  0001C4                     	ds	316
   661                           tblptru	equ	0xFF8
   662                           tblptrh	equ	0xFF7
   663                           tblptrl	equ	0xFF6
   664                           tablat	equ	0xFF5
   665                           postinc0	equ	0xFEE
   666                           wreg	equ	0xFE8
   667                           postdec1	equ	0xFE5
   668                           fsr1h	equ	0xFE2
   669                           fsr1l	equ	0xFE1
   670                           
   671                           	psect	cstackBANK0
   672  000060                     __pcstackBANK0:
   673                           	opt stack 0
   674  000060                     ??_ES_Timer_StopTimer:
   675  000060                     ?_PatternOff:
   676                           	opt stack 0
   677  000060                     ?_printf:
   678                           	opt stack 0
   679  000060                     ?___awdiv:
   680                           	opt stack 0
   681  000060                     ?___awmod:
   682                           	opt stack 0
   683  000060                     ?_GetNextFrame:
   684                           	opt stack 0
   685  000060                     ___lbmod@divisor:
   686                           	opt stack 0
   687  000060                     ES_GetMSBitSet@Val2Check:
   688                           	opt stack 0
   689  000060                     __HW_Timer_Init@Rate:
   690                           	opt stack 0
   691  000060                     ES_InitQueue@pBlock:
   692                           	opt stack 0
   693  000060                     ES_Timer_InitTimer@NewTime:
   694                           	opt stack 0
   695  000060                     DotStar_Init@brightnessPointer:
   696                           	opt stack 0
   697  000060                     FullPulseHold@ptrnPointer:
   698                           	opt stack 0
   699  000060                     SetupPattern@patternIDPointer:
   700                           	opt stack 0
   701  000060                     printf@f:
   702                           	opt stack 0
   703  000060                     ___awdiv@dividend:
   704                           	opt stack 0
   705  000060                     ___awmod@dividend:
   706                           	opt stack 0
   707  000060                     SPI32_SendFrame@newFrame:
   708                           	opt stack 0
   709                           
   710                           ; 4 bytes @ 0x0
   711  000060                     	ds	1
   712  000061                     ___lbmod@dividend:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x1
   716  000061                     	ds	1
   717  000062                     ??_ES_GetMSBitSet:
   718  000062                     ??_ES_Timer_InitTimer:
   719  000062                     ES_InitQueue@BlockSize:
   720                           	opt stack 0
   721  000062                     PatternOff@i:
   722                           	opt stack 0
   723  000062                     ___lbmod@counter:
   724                           	opt stack 0
   725  000062                     ES_Timer_Init@Rate:
   726                           	opt stack 0
   727  000062                     FullPulseHold@ptrnStepCounter:
   728                           	opt stack 0
   729  000062                     SetupPattern@listeningFocusPointer:
   730                           	opt stack 0
   731  000062                     printf@ap:
   732                           	opt stack 0
   733  000062                     ___awdiv@divisor:
   734                           	opt stack 0
   735  000062                     ___awmod@divisor:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x2
   739  000062                     	ds	1
   740  000063                     ___lbmod@rem:
   741                           	opt stack 0
   742  000063                     ES_InitQueue@pThisQueue:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x3
   746  000063                     	ds	1
   747  000064                     ??_SPI32_SendFrame:
   748  000064                     ES_Timer_StopTimer@Num:
   749                           	opt stack 0
   750  000064                     ES_Timer_InitTimer@Num:
   751                           	opt stack 0
   752  000064                     printf@c:
   753                           	opt stack 0
   754  000064                     ___awdiv@counter:
   755                           	opt stack 0
   756  000064                     ___awmod@counter:
   757                           	opt stack 0
   758  000064                     FullPulseHold@cycleCounter:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x4
   762  000064                     	ds	1
   763  000065                     ___awdiv@sign:
   764                           	opt stack 0
   765  000065                     ___awmod@sign:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x5
   769  000065                     	ds	1
   770  000066                     ?___wmul:
   771                           	opt stack 0
   772  000066                     FullPulseHold@base_hue:
   773                           	opt stack 0
   774  000066                     ___wmul@multiplier:
   775                           	opt stack 0
   776  000066                     ___awdiv@quotient:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x6
   780  000066                     	ds	1
   781  000067                     ES_GetMSBitSet@ReturnVal:
   782                           	opt stack 0
   783  000067                     FullPulseHold@base_sat:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0x7
   787  000067                     	ds	1
   788  000068                     ES_GetMSBitSet@Nybble2Test:
   789                           	opt stack 0
   790  000068                     FullPulseHold@15718:
   791                           	opt stack 0
   792  000068                     CenterBreathe@ptrnPointer:
   793                           	opt stack 0
   794  000068                     SingleFadedLoop@ptrnPointer:
   795                           	opt stack 0
   796  000068                     DoubleFadedLoop@ptrnPointer:
   797                           	opt stack 0
   798  000068                     BrokenPinwheel@ptrnPointer:
   799                           	opt stack 0
   800  000068                     MirroredQuadrants@ptrnPointer:
   801                           	opt stack 0
   802  000068                     SingleFocusBreathe@ptrnPointer:
   803                           	opt stack 0
   804  000068                     ___wmul@multiplicand:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0x8
   808  000068                     	ds	1
   809  000069                     ES_GetMSBitSet@LoopCntr:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x9
   813  000069                     	ds	1
   814  00006A                     ??_FullPulseHold:
   815  00006A                     CenterBreathe@ptrnStepCounter:
   816                           	opt stack 0
   817  00006A                     SingleFadedLoop@ptrnStepCounter:
   818                           	opt stack 0
   819  00006A                     DoubleFadedLoop@ptrnStepCounter:
   820                           	opt stack 0
   821  00006A                     BrokenPinwheel@ptrnStepCounter:
   822                           	opt stack 0
   823  00006A                     MirroredQuadrants@ptrnStepCounter:
   824                           	opt stack 0
   825  00006A                     SingleFocusBreathe@ptrnStepCounter:
   826                           	opt stack 0
   827  00006A                     ___wmul@product:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0xA
   831  00006A                     	ds	2
   832  00006C                     ?___lwdiv:
   833                           	opt stack 0
   834  00006C                     ES_EnQueueFIFO@pBlock:
   835                           	opt stack 0
   836  00006C                     ES_DeQueue@pBlock:
   837                           	opt stack 0
   838  00006C                     CenterBreathe@cycleCounter:
   839                           	opt stack 0
   840  00006C                     SingleFadedLoop@cycleCounter:
   841                           	opt stack 0
   842  00006C                     DoubleFadedLoop@cycleCounter:
   843                           	opt stack 0
   844  00006C                     BrokenPinwheel@cycleCounter:
   845                           	opt stack 0
   846  00006C                     MirroredQuadrants@cycleCounter:
   847                           	opt stack 0
   848  00006C                     SingleFocusBreathe@cycleCounter:
   849                           	opt stack 0
   850  00006C                     ___lwdiv@dividend:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0xC
   854  00006C                     	ds	2
   855  00006E                     CenterBreathe@base_hue:
   856                           	opt stack 0
   857  00006E                     SingleFadedLoop@base_hue:
   858                           	opt stack 0
   859  00006E                     DoubleFadedLoop@base_hue:
   860                           	opt stack 0
   861  00006E                     BrokenPinwheel@base_hue:
   862                           	opt stack 0
   863  00006E                     MirroredQuadrants@base_hue:
   864                           	opt stack 0
   865  00006E                     SingleFocusBreathe@base_hue:
   866                           	opt stack 0
   867  00006E                     ES_DeQueue@pReturnEvent:
   868                           	opt stack 0
   869  00006E                     ___lwdiv@divisor:
   870                           	opt stack 0
   871  00006E                     ES_EnQueueFIFO@Event2Add:
   872                           	opt stack 0
   873                           
   874                           ; 3 bytes @ 0xE
   875  00006E                     	ds	1
   876  00006F                     CenterBreathe@base_sat:
   877                           	opt stack 0
   878  00006F                     SingleFadedLoop@base_sat:
   879                           	opt stack 0
   880  00006F                     DoubleFadedLoop@base_sat:
   881                           	opt stack 0
   882  00006F                     BrokenPinwheel@base_sat:
   883                           	opt stack 0
   884  00006F                     MirroredQuadrants@base_sat:
   885                           	opt stack 0
   886  00006F                     SingleFocusBreathe@base_sat:
   887                           	opt stack 0
   888                           
   889                           ; 1 bytes @ 0xF
   890  00006F                     	ds	1
   891  000070                     ??_ES_DeQueue:
   892  000070                     CenterBreathe@15728:
   893                           	opt stack 0
   894  000070                     SingleFadedLoop@15741:
   895                           	opt stack 0
   896  000070                     DoubleFadedLoop@15751:
   897                           	opt stack 0
   898  000070                     BrokenPinwheel@15776:
   899                           	opt stack 0
   900  000070                     MirroredQuadrants@15794:
   901                           	opt stack 0
   902  000070                     SingleFocusBreathe@focus:
   903                           	opt stack 0
   904  000070                     ___lwdiv@quotient:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0x10
   908  000070                     	ds	1
   909  000071                     ??_ES_EnQueueFIFO:
   910                           
   911                           ; 1 bytes @ 0x11
   912  000071                     	ds	1
   913  000072                     ??_CenterBreathe:
   914  000072                     ??_SingleFadedLoop:
   915  000072                     ??_DoubleFadedLoop:
   916  000072                     ??_BrokenPinwheel:
   917  000072                     ??_MirroredQuadrants:
   918  000072                     ??_SingleFocusBreathe:
   919  000072                     ES_DeQueue@SaveCrit:
   920                           	opt stack 0
   921  000072                     ___lwdiv@counter:
   922                           	opt stack 0
   923  000072                     _FullPulseHold$1213:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x12
   927  000072                     	ds	1
   928  000073                     ES_DeQueue@NumLeft:
   929                           	opt stack 0
   930  000073                     HSV_to_RGB@HSV_Value:
   931                           	opt stack 0
   932  000073                     HueTest@ptrnPointer:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x13
   936  000073                     	ds	1
   937  000074                     ES_EnQueueFIFO@SaveCrit:
   938                           	opt stack 0
   939  000074                     FullPulseHold@val:
   940                           	opt stack 0
   941  000074                     ES_DeQueue@pThisQueue:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x14
   945  000074                     	ds	1
   946  000075                     ??_HSV_to_RGB:
   947  000075                     FullPulseHold@i:
   948                           	opt stack 0
   949  000075                     ES_EnQueueFIFO@pThisQueue:
   950                           	opt stack 0
   951  000075                     HueTest@ptrnStepCounter:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x15
   955  000075                     	ds	2
   956  000077                     HueTest@cycleCounter:
   957                           	opt stack 0
   958  000077                     ES_PostToService@TheEvent:
   959                           	opt stack 0
   960                           
   961                           ; 3 bytes @ 0x17
   962  000077                     	ds	2
   963  000079                     HueTest@base_hue:
   964                           	opt stack 0
   965  000079                     _DoubleFadedLoop$1257:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x19
   969  000079                     	ds	1
   970  00007A                     ??_ES_PostToService:
   971  00007A                     HueTest@base_sat:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0x1A
   975  00007A                     	ds	1
   976  00007B                     HueTest@15710:
   977                           	opt stack 0
   978  00007B                     _CenterBreathe$1227:
   979                           	opt stack 0
   980  00007B                     _DoubleFadedLoop$1258:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x1B
   984  00007B                     	ds	1
   985  00007C                     ES_PostToService@WhichService:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x1C
   989  00007C                     	ds	1
   990  00007D                     ??_HueTest:
   991  00007D                     _CenterBreathe$1228:
   992                           	opt stack 0
   993  00007D                     _SingleFadedLoop$1245:
   994                           	opt stack 0
   995  00007D                     _DoubleFadedLoop$1260:
   996                           	opt stack 0
   997  00007D                     _BrokenPinwheel$1285:
   998                           	opt stack 0
   999  00007D                     _MirroredQuadrants$1297:
  1000                           	opt stack 0
  1001  00007D                     _SingleFocusBreathe$1327:
  1002                           	opt stack 0
  1003  00007D                     InitPatternControlService@ThisEvent:
  1004                           	opt stack 0
  1005  00007D                     PostPatternControlService@ThisEvent:
  1006                           	opt stack 0
  1007  00007D                     InitSPI32ControlService@ThisEvent:
  1008                           	opt stack 0
  1009  00007D                     PostSPI32ControlService@ThisEvent:
  1010                           	opt stack 0
  1011                           
  1012                           ; 3 bytes @ 0x1D
  1013  00007D                     	ds	2
  1014  00007F                     _CenterBreathe$1229:
  1015                           	opt stack 0
  1016  00007F                     _SingleFadedLoop$1246:
  1017                           	opt stack 0
  1018  00007F                     _DoubleFadedLoop$1261:
  1019                           	opt stack 0
  1020  00007F                     _BrokenPinwheel$1286:
  1021                           	opt stack 0
  1022  00007F                     _MirroredQuadrants$1298:
  1023                           	opt stack 0
  1024  00007F                     _SingleFocusBreathe$1328:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x1F
  1028  00007F                     	ds	1
  1029  000080                     ??_ES_Timer_Tick_Resp:
  1030  000080                     InitPatternControlService@Priority:
  1031                           	opt stack 0
  1032  000080                     InitSPI32ControlService@Priority:
  1033                           	opt stack 0
  1034  000080                     HueTest@i:
  1035                           	opt stack 0
  1036  000080                     SPI32_TransmitFrames@framePointer:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0x20
  1040  000080                     	ds	1
  1041  000081                     SingleFadedLoop@val:
  1042                           	opt stack 0
  1043  000081                     DoubleFadedLoop@val:
  1044                           	opt stack 0
  1045  000081                     BrokenPinwheel@x:
  1046                           	opt stack 0
  1047  000081                     MirroredQuadrants@x:
  1048                           	opt stack 0
  1049  000081                     ES_Initialize@NewRate:
  1050                           	opt stack 0
  1051  000081                     _CenterBreathe$1230:
  1052                           	opt stack 0
  1053  000081                     _SingleFocusBreathe$1329:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x21
  1057  000081                     	ds	1
  1058  000082                     SPI32_TransmitFrames@numFrames:
  1059                           	opt stack 0
  1060  000082                     SingleFadedLoop@x:
  1061                           	opt stack 0
  1062  000082                     DoubleFadedLoop@x:
  1063                           	opt stack 0
  1064  000082                     BrokenPinwheel@fade:
  1065                           	opt stack 0
  1066  000082                     MirroredQuadrants@val:
  1067                           	opt stack 0
  1068                           
  1069                           ; 1 bytes @ 0x22
  1070  000082                     	ds	1
  1071  000083                     ES_Initialize@i:
  1072                           	opt stack 0
  1073  000083                     SingleFadedLoop@i:
  1074                           	opt stack 0
  1075  000083                     DoubleFadedLoop@i:
  1076                           	opt stack 0
  1077  000083                     BrokenPinwheel@val:
  1078                           	opt stack 0
  1079  000083                     MirroredQuadrants@i:
  1080                           	opt stack 0
  1081  000083                     _CenterBreathe$1231:
  1082                           	opt stack 0
  1083  000083                     _SingleFocusBreathe$1330:
  1084                           	opt stack 0
  1085  000083                     SPI32_TransmitFrames@transmitEvent:
  1086                           	opt stack 0
  1087                           
  1088                           ; 3 bytes @ 0x23
  1089  000083                     	ds	1
  1090  000084                     DoubleFadedLoop@i_1259:
  1091                           	opt stack 0
  1092  000084                     BrokenPinwheel@i:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x24
  1096  000084                     	ds	1
  1097  000085                     SingleFocusBreathe@fade_thresh:
  1098                           	opt stack 0
  1099  000085                     _CenterBreathe$1232:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x25
  1103  000085                     	ds	1
  1104  000086                     SingleFocusBreathe@val:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x26
  1108  000086                     	ds	1
  1109  000087                     SingleFocusBreathe@pulseWidth:
  1110                           	opt stack 0
  1111  000087                     _CenterBreathe$1233:
  1112                           	opt stack 0
  1113                           
  1114                           ; 2 bytes @ 0x27
  1115  000087                     	ds	1
  1116  000088                     SingleFocusBreathe@x:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0x28
  1120  000088                     	ds	1
  1121  000089                     SingleFocusBreathe@head:
  1122                           	opt stack 0
  1123  000089                     _CenterBreathe$1234:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x29
  1127  000089                     	ds	1
  1128  00008A                     SingleFocusBreathe@i:
  1129                           	opt stack 0
  1130                           
  1131                           ; 1 bytes @ 0x2A
  1132  00008A                     	ds	1
  1133  00008B                     CenterBreathe@fade_thresh:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0x2B
  1137  00008B                     	ds	1
  1138  00008C                     CenterBreathe@val:
  1139                           	opt stack 0
  1140                           
  1141                           ; 1 bytes @ 0x2C
  1142  00008C                     	ds	1
  1143  00008D                     CenterBreathe@pulseWidth:
  1144                           	opt stack 0
  1145  00008D                     HSV_to_RGB@h:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x2D
  1149  00008D                     	ds	1
  1150  00008E                     CenterBreathe@x:
  1151                           	opt stack 0
  1152                           
  1153                           ; 1 bytes @ 0x2E
  1154  00008E                     	ds	1
  1155  00008F                     CenterBreathe@i:
  1156                           	opt stack 0
  1157  00008F                     HSV_to_RGB@region:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x2F
  1161  00008F                     	ds	1
  1162  000090                     ?_UpdatePattern:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x30
  1166  000090                     	ds	1
  1167  000091                     HSV_to_RGB@fpart:
  1168                           	opt stack 0
  1169                           
  1170                           ; 2 bytes @ 0x31
  1171  000091                     	ds	1
  1172  000092                     _UpdatePattern$1986:
  1173                           	opt stack 0
  1174                           
  1175                           ; 1 bytes @ 0x32
  1176  000092                     	ds	1
  1177  000093                     _UpdatePattern$1987:
  1178                           	opt stack 0
  1179  000093                     HSV_to_RGB@r:
  1180                           	opt stack 0
  1181                           
  1182                           ; 2 bytes @ 0x33
  1183  000093                     	ds	1
  1184  000094                     UpdatePattern@i:
  1185                           	opt stack 0
  1186                           
  1187                           ; 1 bytes @ 0x34
  1188  000094                     	ds	1
  1189  000095                     UpdatePattern@i_1361:
  1190                           	opt stack 0
  1191  000095                     HSV_to_RGB@g:
  1192                           	opt stack 0
  1193                           
  1194                           ; 2 bytes @ 0x35
  1195  000095                     	ds	2
  1196  000097                     HSV_to_RGB@b:
  1197                           	opt stack 0
  1198                           
  1199                           ; 2 bytes @ 0x37
  1200  000097                     	ds	2
  1201  000099                     HSV_to_RGB@q:
  1202                           	opt stack 0
  1203                           
  1204                           ; 2 bytes @ 0x39
  1205  000099                     	ds	2
  1206  00009B                     HSV_to_RGB@t:
  1207                           	opt stack 0
  1208                           
  1209                           ; 2 bytes @ 0x3B
  1210  00009B                     	ds	2
  1211  00009D                     _HSV_to_RGB$1985:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0x3D
  1215  00009D                     	ds	2
  1216  00009F                     HSV_to_RGB@s:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x3F
  1220  00009F                     	ds	2
  1221  0000A1                     HSV_to_RGB@p:
  1222                           	opt stack 0
  1223                           
  1224                           ; 2 bytes @ 0x41
  1225  0000A1                     	ds	2
  1226  0000A3                     HSV_to_RGB@v:
  1227                           	opt stack 0
  1228                           
  1229                           ; 2 bytes @ 0x43
  1230  0000A3                     	ds	2
  1231  0000A5                     DotStar_Show@patternPointer:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x45
  1235  0000A5                     	ds	2
  1236  0000A7                     ??_DotStar_Show:
  1237                           
  1238                           ; 1 bytes @ 0x47
  1239  0000A7                     	ds	19
  1240  0000BA                     DotStar_Show@i:
  1241                           	opt stack 0
  1242                           
  1243                           ; 1 bytes @ 0x5A
  1244  0000BA                     	ds	1
  1245  0000BB                     ?_RunPatternControlService:
  1246                           	opt stack 0
  1247  0000BB                     ?_RunSPI32ControlService:
  1248                           	opt stack 0
  1249  0000BB                     RunPatternControlService@ThisEvent:
  1250                           	opt stack 0
  1251  0000BB                     RunSPI32ControlService@ThisEvent:
  1252                           	opt stack 0
  1253                           
  1254                           ; 3 bytes @ 0x5B
  1255  0000BB                     	ds	3
  1256  0000BE                     ??_RunSPI32ControlService:
  1257  0000BE                     RunPatternControlService@ReturnEvent:
  1258                           	opt stack 0
  1259                           
  1260                           ; 3 bytes @ 0x5E
  1261  0000BE                     	ds	3
  1262  0000C1                     RunPatternControlService@testEvent:
  1263                           	opt stack 0
  1264                           
  1265                           ; 3 bytes @ 0x61
  1266  0000C1                     	ds	4
  1267  0000C5                     RunSPI32ControlService@ReturnEvent:
  1268                           	opt stack 0
  1269                           
  1270                           ; 3 bytes @ 0x65
  1271  0000C5                     	ds	3
  1272  0000C8                     ??_ES_Run:
  1273                           
  1274                           ; 1 bytes @ 0x68
  1275  0000C8                     	ds	4
  1276  0000CC                     ES_Run@HighestPrior:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x6C
  1280  0000CC                     	ds	1
  1281  0000CD                     main@ErrorType:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0x6D
  1285  0000CD                     	ds	1
  1286                           tblptru	equ	0xFF8
  1287                           tblptrh	equ	0xFF7
  1288                           tblptrl	equ	0xFF6
  1289                           tablat	equ	0xFF5
  1290                           postinc0	equ	0xFEE
  1291                           wreg	equ	0xFE8
  1292                           postdec1	equ	0xFE5
  1293                           fsr1h	equ	0xFE2
  1294                           fsr1l	equ	0xFE1
  1295                           
  1296                           	psect	cstackCOMRAM
  1297  000001                     __pcstackCOMRAM:
  1298                           	opt stack 0
  1299  000001                     ?i2___awdiv:
  1300                           	opt stack 0
  1301  000001                     ?i2___awmod:
  1302                           	opt stack 0
  1303  000001                     SetPattern@PatternID:
  1304                           	opt stack 0
  1305  000001                     i2___awdiv@dividend:
  1306                           	opt stack 0
  1307  000001                     i2___awmod@dividend:
  1308                           	opt stack 0
  1309  000001                     i2SPI32_SendFrame@newFrame:
  1310                           	opt stack 0
  1311                           
  1312                           ; 4 bytes @ 0x0
  1313  000001                     	ds	2
  1314  000003                     i2___awdiv@divisor:
  1315                           	opt stack 0
  1316  000003                     i2___awmod@divisor:
  1317                           	opt stack 0
  1318                           
  1319                           ; 2 bytes @ 0x2
  1320  000003                     	ds	2
  1321  000005                     ??i2_SPI32_SendFrame:
  1322  000005                     i2___awdiv@counter:
  1323                           	opt stack 0
  1324  000005                     i2___awmod@counter:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0x4
  1328  000005                     	ds	1
  1329  000006                     i2___awdiv@sign:
  1330                           	opt stack 0
  1331  000006                     i2___awmod@sign:
  1332                           	opt stack 0
  1333                           
  1334                           ; 1 bytes @ 0x5
  1335  000006                     	ds	1
  1336  000007                     ?i2___wmul:
  1337                           	opt stack 0
  1338  000007                     i2___awdiv@quotient:
  1339                           	opt stack 0
  1340  000007                     i2___wmul@multiplier:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0x6
  1344  000007                     	ds	2
  1345  000009                     SetListenFocus@listFocus:
  1346                           	opt stack 0
  1347  000009                     SetBrightness@newBrightness:
  1348                           	opt stack 0
  1349  000009                     i2___wmul@multiplicand:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x8
  1353  000009                     	ds	2
  1354  00000B                     SetBrightness@brightness:
  1355                           	opt stack 0
  1356  00000B                     i2___wmul@product:
  1357                           	opt stack 0
  1358                           
  1359                           ; 2 bytes @ 0xA
  1360  00000B                     	ds	2
  1361  00000D                     i2ES_EnQueueFIFO@pBlock:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0xC
  1365  00000D                     	ds	2
  1366  00000F                     i2ES_EnQueueFIFO@Event2Add:
  1367                           	opt stack 0
  1368                           
  1369                           ; 3 bytes @ 0xE
  1370  00000F                     	ds	3
  1371  000012                     ??i2_ES_EnQueueFIFO:
  1372                           
  1373                           ; 1 bytes @ 0x11
  1374  000012                     	ds	3
  1375  000015                     i2ES_EnQueueFIFO@SaveCrit:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0x14
  1379  000015                     	ds	1
  1380  000016                     i2ES_EnQueueFIFO@pThisQueue:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x15
  1384  000016                     	ds	2
  1385  000018                     i2ES_PostToService@TheEvent:
  1386                           	opt stack 0
  1387                           
  1388                           ; 3 bytes @ 0x17
  1389  000018                     	ds	3
  1390  00001B                     ??i2_ES_PostToService:
  1391                           
  1392                           ; 1 bytes @ 0x1A
  1393  00001B                     	ds	2
  1394  00001D                     i2ES_PostToService@WhichService:
  1395                           	opt stack 0
  1396                           
  1397                           ; 1 bytes @ 0x1C
  1398  00001D                     	ds	1
  1399  00001E                     i2PostPatternControlService@ThisEvent:
  1400                           	opt stack 0
  1401  00001E                     i2PostSPI32ControlService@ThisEvent:
  1402                           	opt stack 0
  1403                           
  1404                           ; 3 bytes @ 0x1D
  1405  00001E                     	ds	3
  1406  000021                     _ProcessReceive$1191:
  1407                           	opt stack 0
  1408  000021                     SPI32_EOTResponse@EOTevent:
  1409                           	opt stack 0
  1410                           
  1411                           ; 3 bytes @ 0x20
  1412  000021                     	ds	2
  1413  000023                     ProcessReceive@Event2Post:
  1414                           	opt stack 0
  1415                           
  1416                           ; 3 bytes @ 0x22
  1417  000023                     	ds	3
  1418  000026                     ??_ISR:
  1419                           
  1420                           ; 1 bytes @ 0x25
  1421  000026                     	ds	16
  1422                           tblptru	equ	0xFF8
  1423                           tblptrh	equ	0xFF7
  1424                           tblptrl	equ	0xFF6
  1425                           tablat	equ	0xFF5
  1426                           postinc0	equ	0xFEE
  1427                           wreg	equ	0xFE8
  1428                           postdec1	equ	0xFE5
  1429                           fsr1h	equ	0xFE2
  1430                           fsr1l	equ	0xFE1
  1431                           
  1432 ;;
  1433 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1434 ;;
  1435 ;; *************** function _main *****************
  1436 ;; Defined at:
  1437 ;;		line 25 in file "main.c"
  1438 ;; Parameters:    Size  Location     Type
  1439 ;;		None
  1440 ;; Auto vars:     Size  Location     Type
  1441 ;;  ErrorType       1  109[BANK0 ] enum E15646
  1442 ;; Return value:  Size  Location     Type
  1443 ;;                  2  471[None  ] int 
  1444 ;; Registers used:
  1445 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1446 ;; Tracked objects:
  1447 ;;		On entry : 0/0
  1448 ;;		On exit  : 0/0
  1449 ;;		Unchanged: 0/0
  1450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1451 ;;      Params:         0       0       0       0
  1452 ;;      Locals:         0       1       0       0
  1453 ;;      Temps:          0       0       0       0
  1454 ;;      Totals:         0       1       0       0
  1455 ;;Total ram usage:        1 bytes
  1456 ;; Hardware stack levels required when called:   16
  1457 ;; This function calls:
  1458 ;;		_ES_Initialize
  1459 ;;		_ES_Run
  1460 ;;		_printf
  1461 ;; This function is called by:
  1462 ;;		Startup code after reset
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           	psect	text0
  1467  0032E2                     __ptext0:
  1468                           	opt stack 0
  1469  0032E2                     _main:
  1470                           	opt stack 15
  1471                           
  1472                           ;main.c: 27: ADCON1 = 0x0F;
  1473                           
  1474                           ;incstack = 0
  1475  0032E2  0E0F               	movlw	15
  1476  0032E4  6EC1               	movwf	4033,c	;volatile
  1477                           
  1478                           ;main.c: 34: ES_Return_t ErrorType;
  1479                           ;main.c: 50: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
  1480  0032E6  0E9C               	movlw	156
  1481  0032E8  0100               	movlb	0	; () banked
  1482  0032EA  6F82               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
  1483  0032EC  0E3F               	movlw	63
  1484  0032EE  6F81               	movwf	ES_Initialize@NewRate& (0+255),b
  1485  0032F0  EC0A  F016         	call	_ES_Initialize	;wreg free
  1486  0032F4  0100               	movlb	0	; () banked
  1487  0032F6  6FCD               	movwf	main@ErrorType& (0+255),b
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;main.c: 51: if ( ErrorType == Success ) {
  1491  0032F8  0100               	movlb	0	; () banked
  1492  0032FA  51CD               	movf	main@ErrorType& (0+255),w,b
  1493  0032FC  0100               	movlb	0	; () banked
  1494  0032FE  A4D8               	btfss	status,2,c
  1495  003300  D029               	goto	l4389
  1496                           
  1497                           ; BSR set to: 0
  1498                           ;main.c: 53: ErrorType = ES_Run();
  1499  003302  EC92  F015         	call	_ES_Run	;wreg free
  1500  003306  0100               	movlb	0	; () banked
  1501  003308  6FCD               	movwf	main@ErrorType& (0+255),b
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;main.c: 55: }
  1505                           ;main.c: 57: switch (ErrorType){
  1506  00330A  D024               	goto	l4389
  1507  00330C                     l4379:
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;main.c: 59: printf("Failed on attempt to Post\n");
  1511  00330C  0E5E               	movlw	low STR_1
  1512  00330E  0100               	movlb	0	; () banked
  1513  003310  6F60               	movwf	printf@f& (0+255),b
  1514  003312  0E03               	movlw	high STR_1
  1515  003314  0100               	movlb	0	; () banked
  1516  003316  6F61               	movwf	(printf@f+1)& (0+255),b
  1517  003318  EC21  F01D         	call	_printf	;wreg free
  1518                           
  1519                           ;main.c: 60: break;
  1520  00331C  D027               	goto	l479
  1521  00331E                     l4381:
  1522                           
  1523                           ;main.c: 62: printf("Failed on NULL pointer\n");
  1524  00331E  0E79               	movlw	low STR_2
  1525  003320  0100               	movlb	0	; () banked
  1526  003322  6F60               	movwf	printf@f& (0+255),b
  1527  003324  0E03               	movlw	high STR_2
  1528  003326  0100               	movlb	0	; () banked
  1529  003328  6F61               	movwf	(printf@f+1)& (0+255),b
  1530  00332A  EC21  F01D         	call	_printf	;wreg free
  1531                           
  1532                           ;main.c: 63: break;
  1533  00332E  D01E               	goto	l479
  1534  003330                     l4383:
  1535                           
  1536                           ;main.c: 65: printf("Failed Initialization\n");
  1537  003330  0E91               	movlw	low STR_3
  1538  003332  0100               	movlb	0	; () banked
  1539  003334  6F60               	movwf	printf@f& (0+255),b
  1540  003336  0E03               	movlw	high STR_3
  1541  003338  0100               	movlb	0	; () banked
  1542  00333A  6F61               	movwf	(printf@f+1)& (0+255),b
  1543  00333C  EC21  F01D         	call	_printf	;wreg free
  1544                           
  1545                           ;main.c: 66: break;
  1546  003340  D015               	goto	l479
  1547  003342                     l4385:
  1548                           
  1549                           ;main.c: 68: printf("Other Failure\n");
  1550  003342  0EA8               	movlw	low STR_4
  1551  003344  0100               	movlb	0	; () banked
  1552  003346  6F60               	movwf	printf@f& (0+255),b
  1553  003348  0E03               	movlw	high STR_4
  1554  00334A  0100               	movlb	0	; () banked
  1555  00334C  6F61               	movwf	(printf@f+1)& (0+255),b
  1556  00334E  EC21  F01D         	call	_printf	;wreg free
  1557                           
  1558                           ;main.c: 70: }
  1559                           
  1560                           ;main.c: 69: break;
  1561  003352  D00C               	goto	l479
  1562  003354                     l4389:
  1563  003354  0100               	movlb	0	; () banked
  1564  003356  51CD               	movf	main@ErrorType& (0+255),w,b
  1565                           
  1566                           ; Switch size 1, requested type "space"
  1567                           ; Number of cases is 3, Range of values is 1 to 5
  1568                           ; switch strategies available:
  1569                           ; Name         Instructions Cycles
  1570                           ; simple_byte           10     6 (average)
  1571                           ;	Chosen strategy is simple_byte
  1572  003358  0A01               	xorlw	1	; case 1
  1573  00335A  B4D8               	btfsc	status,2,c
  1574  00335C  D7D7               	goto	l4379
  1575  00335E  0A02               	xorlw	2	; case 3
  1576  003360  B4D8               	btfsc	status,2,c
  1577  003362  D7DD               	goto	l4381
  1578  003364  0A06               	xorlw	6	; case 5
  1579  003366  B4D8               	btfsc	status,2,c
  1580  003368  D7E3               	goto	l4383
  1581  00336A  D7EB               	goto	l4385
  1582  00336C                     l479:
  1583                           
  1584                           ;main.c: 72: ;
  1585  00336C  D7FF               	goto	l479
  1586  00336E                     __end_of_main:
  1587                           	opt stack 0
  1588                           tblptru	equ	0xFF8
  1589                           tblptrh	equ	0xFF7
  1590                           tblptrl	equ	0xFF6
  1591                           tablat	equ	0xFF5
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           postdec1	equ	0xFE5
  1595                           fsr1h	equ	0xFE2
  1596                           fsr1l	equ	0xFE1
  1597                           status	equ	0xFD8
  1598                           
  1599 ;; *************** function _printf *****************
  1600 ;; Defined at:
  1601 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1604 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  tmpval          4    0        struct .
  1607 ;;  cp              3    0        PTR const unsigned char 
  1608 ;;  ap              2    2[BANK0 ] PTR void [1]
  1609 ;;		 -> ?_printf(2), 
  1610 ;;  len             2    0        unsigned int 
  1611 ;;  val             2    0        unsigned int 
  1612 ;;  c               1    4[BANK0 ] char 
  1613 ;;  flag            1    0        unsigned char 
  1614 ;;  prec            1    0        char 
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  2    0[BANK0 ] int 
  1617 ;; Registers used:
  1618 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1624 ;;      Params:         0       2       0       0
  1625 ;;      Locals:         0       3       0       0
  1626 ;;      Temps:          0       0       0       0
  1627 ;;      Totals:         0       5       0       0
  1628 ;;Total ram usage:        5 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:    8
  1631 ;; This function calls:
  1632 ;;		_putch
  1633 ;; This function is called by:
  1634 ;;		_main
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           	psect	text1
  1639  003A42                     __ptext1:
  1640                           	opt stack 0
  1641  003A42                     _printf:
  1642                           	opt stack 22
  1643                           
  1644                           ;doprnt.c: 466: va_list ap;
  1645                           ;doprnt.c: 499: signed char c;
  1646                           ;doprnt.c: 506: signed char prec;
  1647                           ;doprnt.c: 508: unsigned char flag;
  1648                           ;doprnt.c: 523: union {
  1649                           ;doprnt.c: 524: unsigned long vd;
  1650                           ;doprnt.c: 525: double integ;
  1651                           ;doprnt.c: 526: } tmpval;
  1652                           ;doprnt.c: 528: unsigned int val;
  1653                           ;doprnt.c: 529: unsigned len;
  1654                           ;doprnt.c: 530: const char * cp;
  1655                           ;doprnt.c: 533: *ap = __va_start();
  1656                           
  1657                           ;incstack = 0
  1658  003A42  0E62               	movlw	low (?_printf+2)
  1659  003A44  0100               	movlb	0	; () banked
  1660  003A46  6F62               	movwf	printf@ap& (0+255),b
  1661  003A48  0E00               	movlw	high (?_printf+2)
  1662  003A4A  0100               	movlb	0	; () banked
  1663  003A4C  6F63               	movwf	(printf@ap+1)& (0+255),b
  1664                           
  1665                           ;doprnt.c: 536: while(c = *f++) {
  1666  003A4E  D004               	goto	l4233
  1667  003A50                     l4231:
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;doprnt.c: 540: {
  1671                           ;doprnt.c: 541: (putch(c) );
  1672  003A50  0100               	movlb	0	; () banked
  1673  003A52  5164               	movf	printf@c& (0+255),w,b
  1674  003A54  EC69  F01E         	call	_putch
  1675  003A58                     l4233:
  1676  003A58  C060  FFF6         	movff	printf@f,tblptrl
  1677  003A5C  C061  FFF7         	movff	printf@f+1,tblptrh
  1678  003A60  0100               	movlb	0	; () banked
  1679  003A62  4B60               	infsnz	printf@f& (0+255),f,b
  1680  003A64  2B61               	incf	(printf@f+1)& (0+255),f,b
  1681  003A66                     	if	0	;tblptru may be non-zero
  1682  003A66                     	endif
  1683  003A66                     	if	0	;tblptru may be non-zero
  1684  003A66                     	endif
  1685  003A66  0008               	tblrd		*
  1686  003A68  CFF5 F064          	movff	tablat,printf@c
  1687  003A6C  0100               	movlb	0	; () banked
  1688  003A6E  5164               	movf	printf@c& (0+255),w,b
  1689  003A70  B4D8               	btfsc	status,2,c
  1690  003A72  0012               	return	
  1691  003A74  D7ED               	goto	l4231
  1692  003A76                     __end_of_printf:
  1693                           	opt stack 0
  1694                           tblptru	equ	0xFF8
  1695                           tblptrh	equ	0xFF7
  1696                           tblptrl	equ	0xFF6
  1697                           tablat	equ	0xFF5
  1698                           postinc0	equ	0xFEE
  1699                           wreg	equ	0xFE8
  1700                           postdec1	equ	0xFE5
  1701                           fsr1h	equ	0xFE2
  1702                           fsr1l	equ	0xFE1
  1703                           status	equ	0xFD8
  1704                           
  1705 ;; *************** function _putch *****************
  1706 ;; Defined at:
  1707 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\putch.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;  c               1    wreg     unsigned char 
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;  c               1    0[COMRAM] unsigned char 
  1712 ;; Return value:  Size  Location     Type
  1713 ;;                  1    wreg      void 
  1714 ;; Registers used:
  1715 ;;		wreg
  1716 ;; Tracked objects:
  1717 ;;		On entry : 0/0
  1718 ;;		On exit  : 0/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1721 ;;      Params:         0       0       0       0
  1722 ;;      Locals:         0       0       0       0
  1723 ;;      Temps:          0       0       0       0
  1724 ;;      Totals:         0       0       0       0
  1725 ;;Total ram usage:        0 bytes
  1726 ;; Hardware stack levels used:    1
  1727 ;; Hardware stack levels required when called:    7
  1728 ;; This function calls:
  1729 ;;		Nothing
  1730 ;; This function is called by:
  1731 ;;		_printf
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           	psect	text2
  1736  003CD2                     __ptext2:
  1737                           	opt stack 0
  1738  003CD2                     _putch:
  1739                           	opt stack 22
  1740                           
  1741                           ; BSR set to: 0
  1742                           ;incstack = 0
  1743  003CD2  0012               	return		;funcret
  1744  003CD4                     __end_of_putch:
  1745                           	opt stack 0
  1746                           tblptru	equ	0xFF8
  1747                           tblptrh	equ	0xFF7
  1748                           tblptrl	equ	0xFF6
  1749                           tablat	equ	0xFF5
  1750                           postinc0	equ	0xFEE
  1751                           wreg	equ	0xFE8
  1752                           postdec1	equ	0xFE5
  1753                           fsr1h	equ	0xFE2
  1754                           fsr1l	equ	0xFE1
  1755                           status	equ	0xFD8
  1756                           
  1757 ;; *************** function _ES_Run *****************
  1758 ;; Defined at:
  1759 ;;		line 277 in file "ES_Framework.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;		None
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;  HighestPrior    1  108[BANK0 ] unsigned char 
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  1    wreg      enum E15494
  1766 ;; Registers used:
  1767 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1773 ;;      Params:         0       0       0       0
  1774 ;;      Locals:         0       1       0       0
  1775 ;;      Temps:          0       4       0       0
  1776 ;;      Totals:         0       5       0       0
  1777 ;;Total ram usage:        5 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:   15
  1780 ;; This function calls:
  1781 ;;		_ES_DeQueue
  1782 ;;		_ES_GetMSBitSet
  1783 ;;		_RunPatternControlService
  1784 ;;		_RunSPI32ControlService
  1785 ;;		__HW_Process_Pending_Ints
  1786 ;; This function is called by:
  1787 ;;		_main
  1788 ;; This function uses a non-reentrant model
  1789 ;;
  1790                           
  1791                           	psect	text3
  1792  002B24                     __ptext3:
  1793                           	opt stack 0
  1794  002B24                     _ES_Run:
  1795                           	opt stack 15
  1796                           
  1797                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1798                           
  1799                           ;incstack = 0
  1800                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1801                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1802                           ;ES_Framework.c: 282: while(1){
  1803  002B24  D06B               	goto	l4205
  1804  002B26                     l4193:
  1805                           
  1806                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1807  002B26  C0DD  F060         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1808  002B2A  C0DE  F061         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1809  002B2E  ECCE  F018         	call	_ES_GetMSBitSet	;wreg free
  1810  002B32  0100               	movlb	0	; () banked
  1811  002B34  6FCC               	movwf	ES_Run@HighestPrior& (0+255),b
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1815  002B36  0100               	movlb	0	; () banked
  1816  002B38  51CC               	movf	ES_Run@HighestPrior& (0+255),w,b
  1817  002B3A  0D03               	mullw	3
  1818  002B3C  0E58               	movlw	low _EventQueues
  1819  002B3E  24F3               	addwf	prodl,w,c
  1820  002B40  6EF6               	movwf	tblptrl,c
  1821  002B42  0E03               	movlw	high _EventQueues
  1822  002B44  20F4               	addwfc	prodh,w,c
  1823  002B46  6EF7               	movwf	tblptrh,c
  1824  002B48                     	if	0	;There are less than 3 active tblptr bytes
  1825  002B48                     	endif
  1826  002B48  0009               	tblrd		*+
  1827  002B4A  CFF5 F06C          	movff	tablat,ES_DeQueue@pBlock
  1828  002B4E  000A               	tblrd		*-
  1829  002B50  CFF5 F06D          	movff	tablat,ES_DeQueue@pBlock+1
  1830  002B54  0EED               	movlw	low ES_Run@ThisEvent
  1831  002B56  0100               	movlb	0	; () banked
  1832  002B58  6F6E               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1833  002B5A  0E00               	movlw	high ES_Run@ThisEvent
  1834  002B5C  0100               	movlb	0	; () banked
  1835  002B5E  6F6F               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1836  002B60  EC71  F013         	call	_ES_DeQueue	;wreg free
  1837  002B64  0900               	iorlw	0
  1838  002B66  A4D8               	btfss	status,2,c
  1839  002B68  D01F               	goto	l4199
  1840                           
  1841                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1842  002B6A  0100               	movlb	0	; () banked
  1843  002B6C  51CC               	movf	ES_Run@HighestPrior& (0+255),w,b
  1844  002B6E  0D02               	mullw	2
  1845  002B70  0E01               	movlw	low _BitNum2SetMask
  1846  002B72  24F3               	addwf	prodl,w,c
  1847  002B74  6EF6               	movwf	tblptrl,c
  1848  002B76  0E03               	movlw	high _BitNum2SetMask
  1849  002B78  20F4               	addwfc	prodh,w,c
  1850  002B7A  6EF7               	movwf	tblptrh,c
  1851  002B7C                     	if	0	;There are less than 3 active tblptr bytes
  1852  002B7C                     	endif
  1853  002B7C  0009               	tblrd		*+
  1854  002B7E  CFF5 F0C8          	movff	tablat,??_ES_Run
  1855  002B82  0009               	tblrd		*+
  1856  002B84  CFF5 F0C9          	movff	tablat,??_ES_Run+1
  1857  002B88  0100               	movlb	0	; () banked
  1858  002B8A  1DC8               	comf	??_ES_Run& (0+255),w,b
  1859  002B8C  0100               	movlb	0	; () banked
  1860  002B8E  6FCA               	movwf	(??_ES_Run+2)& (0+255),b
  1861  002B90  0100               	movlb	0	; () banked
  1862  002B92  1DC9               	comf	(??_ES_Run+1)& (0+255),w,b
  1863  002B94  0100               	movlb	0	; () banked
  1864  002B96  6FCB               	movwf	(??_ES_Run+3)& (0+255),b
  1865  002B98  0100               	movlb	0	; () banked
  1866  002B9A  51CA               	movf	(??_ES_Run+2)& (0+255),w,b
  1867  002B9C  0100               	movlb	0	; () banked
  1868  002B9E  17DD               	andwf	_Ready& (0+255),f,b
  1869  002BA0  0100               	movlb	0	; () banked
  1870  002BA2  51CB               	movf	(??_ES_Run+3)& (0+255),w,b
  1871  002BA4  0100               	movlb	0	; () banked
  1872  002BA6  17DE               	andwf	(_Ready+1)& (0+255),f,b
  1873  002BA8                     l4199:
  1874                           
  1875                           ;ES_Framework.c: 291: }
  1876                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1877  002BA8  C0ED  F0BB         	movff	ES_Run@ThisEvent,RunSPI32ControlService@ThisEvent
  1878  002BAC  C0EE  F0BC         	movff	ES_Run@ThisEvent+1,RunSPI32ControlService@ThisEvent+1
  1879  002BB0  C0EF  F0BD         	movff	ES_Run@ThisEvent+2,RunSPI32ControlService@ThisEvent+2
  1880  002BB4  0100               	movlb	0	; () banked
  1881  002BB6  51CC               	movf	ES_Run@HighestPrior& (0+255),w,b
  1882  002BB8  0D04               	mullw	4
  1883  002BBA  0E02               	movlw	2
  1884  002BBC  26F3               	addwf	prodl,f,c
  1885  002BBE  0E00               	movlw	0
  1886  002BC0  22F4               	addwfc	prodh,f,c
  1887  002BC2  0E50               	movlw	low _ServDescList
  1888  002BC4  24F3               	addwf	prodl,w,c
  1889  002BC6  6EF6               	movwf	tblptrl,c
  1890  002BC8  0E03               	movlw	high _ServDescList
  1891  002BCA  20F4               	addwfc	prodh,w,c
  1892  002BCC  6EF7               	movwf	tblptrh,c
  1893  002BCE                     	if	0	;There are less than 3 active tblptr bytes
  1894  002BCE                     	endif
  1895  002BCE  D801               	call	u3138
  1896  002BD0  D00C               	goto	u3139
  1897  002BD2                     u3138:
  1898  002BD2  0005               	push	
  1899  002BD4  6EFA               	movwf	pclath,c
  1900  002BD6  0009               	tblrd		*+
  1901  002BD8  50F5               	movf	tablat,w,c
  1902  002BDA  6EFD               	movwf	tosl,c
  1903  002BDC  0009               	tblrd		*+
  1904  002BDE  50F5               	movf	tablat,w,c
  1905  002BE0  6EFE               	movwf	tosh,c
  1906  002BE2  50F8               	movf	tblptru,w,c
  1907  002BE4  6EFF               	movwf	tosu,c
  1908  002BE6  50FA               	movf	pclath,w,c
  1909  002BE8  0012               	return		;indir
  1910  002BEA                     u3139:
  1911  002BEA  0EBB               	movlw	low ?_RunSPI32ControlService
  1912  002BEC  6ED9               	movwf	fsr2l,c
  1913  002BEE  0E00               	movlw	high ?_RunSPI32ControlService
  1914  002BF0  6EDA               	movwf	fsr2h,c
  1915  002BF2  50DF               	movf	indf2,w,c
  1916  002BF4  B4D8               	btfsc	status,2,c
  1917  002BF6  D002               	goto	l4205
  1918                           
  1919                           ;ES_Framework.c: 293: return FailedRun;
  1920  002BF8  0E02               	movlw	2
  1921  002BFA  0012               	return	
  1922  002BFC                     l4205:
  1923  002BFC  EC18  F01E         	call	__HW_Process_Pending_Ints	;wreg free
  1924  002C00  0900               	iorlw	0
  1925  002C02  B4D8               	btfsc	status,2,c
  1926  002C04  D7FB               	goto	l4205
  1927  002C06  0100               	movlb	0	; () banked
  1928  002C08  51DD               	movf	_Ready& (0+255),w,b
  1929  002C0A  0100               	movlb	0	; () banked
  1930  002C0C  11DE               	iorwf	(_Ready+1)& (0+255),w,b
  1931  002C0E  B4D8               	btfsc	status,2,c
  1932  002C10  D7F5               	goto	l4205
  1933  002C12  D789               	goto	l4193
  1934  002C14                     __end_of_ES_Run:
  1935                           	opt stack 0
  1936                           tosu	equ	0xFFF
  1937                           tosh	equ	0xFFE
  1938                           tosl	equ	0xFFD
  1939                           pclath	equ	0xFFA
  1940                           tblptru	equ	0xFF8
  1941                           tblptrh	equ	0xFF7
  1942                           tblptrl	equ	0xFF6
  1943                           tablat	equ	0xFF5
  1944                           prodh	equ	0xFF4
  1945                           prodl	equ	0xFF3
  1946                           postinc0	equ	0xFEE
  1947                           wreg	equ	0xFE8
  1948                           postdec1	equ	0xFE5
  1949                           fsr1h	equ	0xFE2
  1950                           fsr1l	equ	0xFE1
  1951                           indf2	equ	0xFDF
  1952                           fsr2h	equ	0xFDA
  1953                           fsr2l	equ	0xFD9
  1954                           status	equ	0xFD8
  1955                           
  1956 ;; *************** function __HW_Process_Pending_Ints *****************
  1957 ;; Defined at:
  1958 ;;		line 225 in file "ES_Port.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;		None
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;		None
  1963 ;; Return value:  Size  Location     Type
  1964 ;;                  1    wreg      unsigned char 
  1965 ;; Registers used:
  1966 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1967 ;; Tracked objects:
  1968 ;;		On entry : 0/0
  1969 ;;		On exit  : 0/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1972 ;;      Params:         0       0       0       0
  1973 ;;      Locals:         0       0       0       0
  1974 ;;      Temps:          0       0       0       0
  1975 ;;      Totals:         0       0       0       0
  1976 ;;Total ram usage:        0 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:   12
  1979 ;; This function calls:
  1980 ;;		_ES_Timer_Tick_Resp
  1981 ;; This function is called by:
  1982 ;;		_ES_Run
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           	psect	text4
  1987  003C30                     __ptext4:
  1988                           	opt stack 0
  1989  003C30                     __HW_Process_Pending_Ints:
  1990                           	opt stack 17
  1991                           
  1992                           ;ES_Port.c: 227: while (TickCount > 0)
  1993                           
  1994                           ;incstack = 0
  1995  003C30  D004               	goto	l3981
  1996  003C32                     l3977:
  1997                           
  1998                           ;ES_Port.c: 228: {
  1999                           ;ES_Port.c: 230: ES_Timer_Tick_Resp();
  2000  003C32  EC05  F014         	call	_ES_Timer_Tick_Resp	;wreg free
  2001                           
  2002                           ;ES_Port.c: 231: TickCount--;
  2003  003C36  0100               	movlb	0	; () banked
  2004  003C38  07E8               	decf	_TickCount& (0+255),f,b	;volatile
  2005  003C3A                     l3981:
  2006  003C3A  0100               	movlb	0	; () banked
  2007  003C3C  51E8               	movf	_TickCount& (0+255),w,b	;volatile
  2008  003C3E  A4D8               	btfss	status,2,c
  2009  003C40  D7F8               	goto	l3977
  2010                           
  2011                           ; BSR set to: 0
  2012                           ;ES_Port.c: 232: }
  2013                           ;ES_Port.c: 234: return 1;
  2014                           
  2015                           ; BSR set to: 0
  2016  003C42  0E01               	movlw	1
  2017  003C44  0012               	return	
  2018  003C46                     __end_of__HW_Process_Pending_Ints:
  2019                           	opt stack 0
  2020                           tosu	equ	0xFFF
  2021                           tosh	equ	0xFFE
  2022                           tosl	equ	0xFFD
  2023                           pclath	equ	0xFFA
  2024                           tblptru	equ	0xFF8
  2025                           tblptrh	equ	0xFF7
  2026                           tblptrl	equ	0xFF6
  2027                           tablat	equ	0xFF5
  2028                           prodh	equ	0xFF4
  2029                           prodl	equ	0xFF3
  2030                           postinc0	equ	0xFEE
  2031                           wreg	equ	0xFE8
  2032                           postdec1	equ	0xFE5
  2033                           fsr1h	equ	0xFE2
  2034                           fsr1l	equ	0xFE1
  2035                           indf2	equ	0xFDF
  2036                           fsr2h	equ	0xFDA
  2037                           fsr2l	equ	0xFD9
  2038                           status	equ	0xFD8
  2039                           
  2040 ;; *************** function _ES_Timer_Tick_Resp *****************
  2041 ;; Defined at:
  2042 ;;		line 284 in file "ES_Timers.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;		None
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;		None
  2047 ;; Return value:  Size  Location     Type
  2048 ;;                  1    wreg      void 
  2049 ;; Registers used:
  2050 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2051 ;; Tracked objects:
  2052 ;;		On entry : 0/0
  2053 ;;		On exit  : 0/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2056 ;;      Params:         0       0       0       0
  2057 ;;      Locals:         0       0       0       0
  2058 ;;      Temps:          0       4       0       0
  2059 ;;      Totals:         0       4       0       0
  2060 ;;Total ram usage:        4 bytes
  2061 ;; Hardware stack levels used:    1
  2062 ;; Hardware stack levels required when called:   11
  2063 ;; This function calls:
  2064 ;;		Absolute function
  2065 ;;		_ES_GetMSBitSet
  2066 ;;		_PostPatternControlService
  2067 ;;		_PostSPI32ControlService
  2068 ;; This function is called by:
  2069 ;;		__HW_Process_Pending_Ints
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           	psect	text5
  2074  00280A                     __ptext5:
  2075                           	opt stack 0
  2076  00280A                     _ES_Timer_Tick_Resp:
  2077                           	opt stack 17
  2078                           
  2079                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  2080                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  2081                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  2082                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;incstack = 0
  2086  00280A  0100               	movlb	0	; () banked
  2087  00280C  51DF               	movf	_TMR_ActiveFlags& (0+255),w,b
  2088  00280E  0100               	movlb	0	; () banked
  2089  002810  11E0               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  2090  002812  B4D8               	btfsc	status,2,c
  2091  002814  0012               	return	
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;ES_Timers.c: 291: {
  2095                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  2096  002816  C0DF  F0D5         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  2097  00281A  C0E0  F0D6         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  2098  00281E                     l3853:
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  2102  00281E  C0D5  F060         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  2103  002822  C0D6  F061         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  2104  002826  ECCE  F018         	call	_ES_GetMSBitSet	;wreg free
  2105  00282A  0100               	movlb	0	; () banked
  2106  00282C  6FE1               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  2110  00282E  0100               	movlb	0	; () banked
  2111  002830  51E1               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2112  002832  0D02               	mullw	2
  2113  002834  0E00               	movlw	low _TMR_TimerArray
  2114  002836  24F3               	addwf	prodl,w,c
  2115  002838  6ED9               	movwf	fsr2l,c
  2116  00283A  0E01               	movlw	high _TMR_TimerArray
  2117  00283C  20F4               	addwfc	prodh,w,c
  2118  00283E  6EDA               	movwf	fsr2h,c
  2119  002840  06DE               	decf	postinc2,f,c
  2120  002842  0E00               	movlw	0
  2121  002844  5ADD               	subwfb	postdec2,f,c
  2122  002846  50DE               	movf	postinc2,w,c
  2123  002848  10DE               	iorwf	postinc2,w,c
  2124  00284A  A4D8               	btfss	status,2,c
  2125  00284C  D043               	goto	l3865
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;ES_Timers.c: 299: {
  2129                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  2130  00284E  0E03               	movlw	3
  2131  002850  0100               	movlb	0	; () banked
  2132  002852  6FD2               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  2136  002854  C0E1  F0D3         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  2137  002858  0100               	movlb	0	; () banked
  2138  00285A  6BD4               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  2142  00285C  C0D2  F07D         	movff	ES_Timer_Tick_Resp@NewEvent,PostSPI32ControlService@ThisEvent
  2143  002860  C0D3  F07E         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostSPI32ControlService@ThisEvent+1
  2144  002864  C0D4  F07F         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostSPI32ControlService@ThisEvent+2
  2145  002868  0100               	movlb	0	; () banked
  2146  00286A  51E1               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2147  00286C  0D02               	mullw	2
  2148  00286E  0E21               	movlw	low _Timer2PostFunc
  2149  002870  24F3               	addwf	prodl,w,c
  2150  002872  6EF6               	movwf	tblptrl,c
  2151  002874  0E03               	movlw	high _Timer2PostFunc
  2152  002876  20F4               	addwfc	prodh,w,c
  2153  002878  6EF7               	movwf	tblptrh,c
  2154  00287A                     	if	0	;There are less than 3 active tblptr bytes
  2155  00287A                     	endif
  2156  00287A  D801               	call	u2778
  2157  00287C  D00C               	goto	l3863
  2158  00287E                     u2778:
  2159  00287E  0005               	push	
  2160  002880  6EFA               	movwf	pclath,c
  2161  002882  0009               	tblrd		*+
  2162  002884  50F5               	movf	tablat,w,c
  2163  002886  6EFD               	movwf	tosl,c
  2164  002888  0009               	tblrd		*+
  2165  00288A  50F5               	movf	tablat,w,c
  2166  00288C  6EFE               	movwf	tosh,c
  2167  00288E  50F8               	movf	tblptru,w,c
  2168  002890  6EFF               	movwf	tosu,c
  2169  002892  50FA               	movf	pclath,w,c
  2170  002894  0012               	return		;indir
  2171  002896                     l3863:
  2172                           
  2173                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  2174  002896  0100               	movlb	0	; () banked
  2175  002898  51E1               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2176  00289A  0D02               	mullw	2
  2177  00289C  0E01               	movlw	low _BitNum2SetMask
  2178  00289E  24F3               	addwf	prodl,w,c
  2179  0028A0  6EF6               	movwf	tblptrl,c
  2180  0028A2  0E03               	movlw	high _BitNum2SetMask
  2181  0028A4  20F4               	addwfc	prodh,w,c
  2182  0028A6  6EF7               	movwf	tblptrh,c
  2183  0028A8                     	if	0	;There are less than 3 active tblptr bytes
  2184  0028A8                     	endif
  2185  0028A8  0009               	tblrd		*+
  2186  0028AA  CFF5 F080          	movff	tablat,??_ES_Timer_Tick_Resp
  2187  0028AE  0009               	tblrd		*+
  2188  0028B0  CFF5 F081          	movff	tablat,??_ES_Timer_Tick_Resp+1
  2189  0028B4  0100               	movlb	0	; () banked
  2190  0028B6  1D80               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  2191  0028B8  0100               	movlb	0	; () banked
  2192  0028BA  6F82               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  2193  0028BC  0100               	movlb	0	; () banked
  2194  0028BE  1D81               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  2195  0028C0  0100               	movlb	0	; () banked
  2196  0028C2  6F83               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  2197  0028C4  0100               	movlb	0	; () banked
  2198  0028C6  5182               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  2199  0028C8  0100               	movlb	0	; () banked
  2200  0028CA  17DF               	andwf	_TMR_ActiveFlags& (0+255),f,b
  2201  0028CC  0100               	movlb	0	; () banked
  2202  0028CE  5183               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  2203  0028D0  0100               	movlb	0	; () banked
  2204  0028D2  17E0               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  2205  0028D4                     l3865:
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;ES_Timers.c: 306: }
  2209                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  2210  0028D4  0100               	movlb	0	; () banked
  2211  0028D6  51E1               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  2212  0028D8  0D02               	mullw	2
  2213  0028DA  0E01               	movlw	low _BitNum2SetMask
  2214  0028DC  24F3               	addwf	prodl,w,c
  2215  0028DE  6EF6               	movwf	tblptrl,c
  2216  0028E0  0E03               	movlw	high _BitNum2SetMask
  2217  0028E2  20F4               	addwfc	prodh,w,c
  2218  0028E4  6EF7               	movwf	tblptrh,c
  2219  0028E6                     	if	0	;There are less than 3 active tblptr bytes
  2220  0028E6                     	endif
  2221  0028E6  0009               	tblrd		*+
  2222  0028E8  CFF5 F080          	movff	tablat,??_ES_Timer_Tick_Resp
  2223  0028EC  0009               	tblrd		*+
  2224  0028EE  CFF5 F081          	movff	tablat,??_ES_Timer_Tick_Resp+1
  2225  0028F2  0100               	movlb	0	; () banked
  2226  0028F4  1D80               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  2227  0028F6  0100               	movlb	0	; () banked
  2228  0028F8  6F82               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  2229  0028FA  0100               	movlb	0	; () banked
  2230  0028FC  1D81               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  2231  0028FE  0100               	movlb	0	; () banked
  2232  002900  6F83               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  2233  002902  0100               	movlb	0	; () banked
  2234  002904  5182               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  2235  002906  0100               	movlb	0	; () banked
  2236  002908  17D5               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  2237  00290A  0100               	movlb	0	; () banked
  2238  00290C  5183               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  2239  00290E  0100               	movlb	0	; () banked
  2240  002910  17D6               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  2244  002912  0100               	movlb	0	; () banked
  2245  002914  51D5               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  2246  002916  0100               	movlb	0	; () banked
  2247  002918  11D6               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  2248  00291A  B4D8               	btfsc	status,2,c
  2249  00291C  0012               	return	
  2250  00291E  D77F               	goto	l3853
  2251  002920                     __end_of_ES_Timer_Tick_Resp:
  2252                           	opt stack 0
  2253                           tosu	equ	0xFFF
  2254                           tosh	equ	0xFFE
  2255                           tosl	equ	0xFFD
  2256                           pclath	equ	0xFFA
  2257                           tblptru	equ	0xFF8
  2258                           tblptrh	equ	0xFF7
  2259                           tblptrl	equ	0xFF6
  2260                           tablat	equ	0xFF5
  2261                           prodh	equ	0xFF4
  2262                           prodl	equ	0xFF3
  2263                           postinc0	equ	0xFEE
  2264                           wreg	equ	0xFE8
  2265                           postdec1	equ	0xFE5
  2266                           fsr1h	equ	0xFE2
  2267                           fsr1l	equ	0xFE1
  2268                           indf2	equ	0xFDF
  2269                           postinc2	equ	0xFDE
  2270                           postdec2	equ	0xFDD
  2271                           fsr2h	equ	0xFDA
  2272                           fsr2l	equ	0xFD9
  2273                           status	equ	0xFD8
  2274                           
  2275 ;; *************** function _ES_GetMSBitSet *****************
  2276 ;; Defined at:
  2277 ;;		line 79 in file "ES_LookupTables.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;  LoopCntr        1    9[BANK0 ] char 
  2282 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  2283 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  1    wreg      unsigned char 
  2286 ;; Registers used:
  2287 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2293 ;;      Params:         0       2       0       0
  2294 ;;      Locals:         0       3       0       0
  2295 ;;      Temps:          0       5       0       0
  2296 ;;      Totals:         0      10       0       0
  2297 ;;Total ram usage:       10 bytes
  2298 ;; Hardware stack levels used:    1
  2299 ;; Hardware stack levels required when called:    7
  2300 ;; This function calls:
  2301 ;;		Nothing
  2302 ;; This function is called by:
  2303 ;;		_ES_Run
  2304 ;;		_ES_Timer_Tick_Resp
  2305 ;; This function uses a non-reentrant model
  2306 ;;
  2307                           
  2308                           	psect	text6
  2309  00319C                     __ptext6:
  2310                           	opt stack 0
  2311  00319C                     _ES_GetMSBitSet:
  2312                           	opt stack 20
  2313                           
  2314                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  2315                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  2316                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;incstack = 0
  2320  00319C  0E80               	movlw	128
  2321  00319E  0100               	movlb	0	; () banked
  2322  0031A0  6F67               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2323                           
  2324                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  2325  0031A2  0E03               	movlw	3
  2326  0031A4  0100               	movlb	0	; () banked
  2327  0031A6  6F69               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  2328  0031A8                     l3605:
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  2332  0031A8  0100               	movlb	0	; () banked
  2333  0031AA  BF69               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  2334  0031AC  D046               	goto	l3619
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  2338                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  2339                           ;ES_LookupTables.c: 91: 0x0F);
  2340                           
  2341                           ; BSR set to: 0
  2342                           
  2343                           ; BSR set to: 0
  2344  0031AE  0100               	movlb	0	; () banked
  2345  0031B0  5169               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2346  0031B2  0D04               	mullw	4
  2347  0031B4  CFF3 F062          	movff	prodl,??_ES_GetMSBitSet
  2348  0031B8  C060  F063         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  2349  0031BC  C061  F064         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  2350  0031C0  0100               	movlb	0	; () banked
  2351  0031C2  2B62               	incf	??_ES_GetMSBitSet& (0+255),f,b
  2352  0031C4  D004               	goto	u2504
  2353  0031C6                     u2505:
  2354  0031C6  0100               	movlb	0	; () banked
  2355  0031C8  90D8               	bcf	status,0,c
  2356  0031CA  3364               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2357  0031CC  3363               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  2358  0031CE                     u2504:
  2359  0031CE  0100               	movlb	0	; () banked
  2360  0031D0  2F62               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  2361  0031D2  D7F9               	goto	u2505
  2362  0031D4  0100               	movlb	0	; () banked
  2363  0031D6  5163               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2364  0031D8  0B0F               	andlw	15
  2365  0031DA  0100               	movlb	0	; () banked
  2366  0031DC  6F68               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  2370  0031DE  0100               	movlb	0	; () banked
  2371  0031E0  5168               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2372  0031E2  0100               	movlb	0	; () banked
  2373  0031E4  B4D8               	btfsc	status,2,c
  2374  0031E6  D026               	goto	l3615
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  2378                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  2379  0031E8  0EFF               	movlw	255
  2380  0031EA  0100               	movlb	0	; () banked
  2381  0031EC  6F62               	movwf	??_ES_GetMSBitSet& (0+255),b
  2382  0031EE  0EFF               	movlw	255
  2383  0031F0  0100               	movlb	0	; () banked
  2384  0031F2  6F63               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  2385  0031F4  0100               	movlb	0	; () banked
  2386  0031F6  5168               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2387  0031F8  0100               	movlb	0	; () banked
  2388  0031FA  6F64               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  2389  0031FC  6B65               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  2390  0031FE  0100               	movlb	0	; () banked
  2391  003200  5162               	movf	??_ES_GetMSBitSet& (0+255),w,b
  2392  003202  0100               	movlb	0	; () banked
  2393  003204  2764               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2394  003206  0100               	movlb	0	; () banked
  2395  003208  5163               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2396  00320A  0100               	movlb	0	; () banked
  2397  00320C  2365               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  2398  00320E  0E41               	movlw	low _Nybble2MSBitNum
  2399  003210  0100               	movlb	0	; () banked
  2400  003212  2564               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  2401  003214  6EF6               	movwf	tblptrl,c
  2402  003216  0E03               	movlw	high _Nybble2MSBitNum
  2403  003218  2165               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  2404  00321A  6EF7               	movwf	tblptrh,c
  2405  00321C                     	if	0	;There are less than 3 active tblptr bytes
  2406  00321C                     	endif
  2407  00321C  0008               	tblrd		*
  2408  00321E  CFF5 F066          	movff	tablat,??_ES_GetMSBitSet+4
  2409  003222  0100               	movlb	0	; () banked
  2410  003224  5169               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2411  003226  0D04               	mullw	4
  2412  003228  50F3               	movf	prodl,w,c
  2413  00322A  0100               	movlb	0	; () banked
  2414  00322C  2566               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  2415  00322E  0100               	movlb	0	; () banked
  2416  003230  6F67               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2417                           
  2418                           ;ES_LookupTables.c: 96: break;
  2419  003232  D003               	goto	l3619
  2420  003234                     l3615:
  2421                           
  2422                           ; BSR set to: 0
  2423  003234  0100               	movlb	0	; () banked
  2424  003236  0769               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  2425  003238  D7B7               	goto	l3605
  2426  00323A                     l3619:
  2427                           
  2428                           ; BSR set to: 0
  2429                           ;ES_LookupTables.c: 97: }
  2430                           ;ES_LookupTables.c: 98: }
  2431                           ;ES_LookupTables.c: 99: return ReturnVal;
  2432  00323A  0100               	movlb	0	; () banked
  2433  00323C  5167               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  2434  00323E  0012               	return	
  2435  003240                     __end_of_ES_GetMSBitSet:
  2436                           	opt stack 0
  2437                           tosu	equ	0xFFF
  2438                           tosh	equ	0xFFE
  2439                           tosl	equ	0xFFD
  2440                           pclath	equ	0xFFA
  2441                           tblptru	equ	0xFF8
  2442                           tblptrh	equ	0xFF7
  2443                           tblptrl	equ	0xFF6
  2444                           tablat	equ	0xFF5
  2445                           prodh	equ	0xFF4
  2446                           prodl	equ	0xFF3
  2447                           postinc0	equ	0xFEE
  2448                           wreg	equ	0xFE8
  2449                           postdec1	equ	0xFE5
  2450                           fsr1h	equ	0xFE2
  2451                           fsr1l	equ	0xFE1
  2452                           indf2	equ	0xFDF
  2453                           postinc2	equ	0xFDE
  2454                           postdec2	equ	0xFDD
  2455                           fsr2h	equ	0xFDA
  2456                           fsr2l	equ	0xFD9
  2457                           status	equ	0xFD8
  2458                           
  2459 ;; *************** function _RunPatternControlService *****************
  2460 ;; Defined at:
  2461 ;;		line 163 in file "Pattern_ControlService.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;  ThisEvent       3   91[BANK0 ] struct ES_Event_t
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;  testEvent       3   97[BANK0 ] struct ES_Event_t
  2466 ;;  ReturnEvent     3   94[BANK0 ] struct ES_Event_t
  2467 ;; Return value:  Size  Location     Type
  2468 ;;                  3   91[BANK0 ] struct ES_Event_t
  2469 ;; Registers used:
  2470 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2476 ;;      Params:         0       3       0       0
  2477 ;;      Locals:         0       6       0       0
  2478 ;;      Temps:          0       0       0       0
  2479 ;;      Totals:         0       9       0       0
  2480 ;;Total ram usage:        9 bytes
  2481 ;; Hardware stack levels used:    1
  2482 ;; Hardware stack levels required when called:   14
  2483 ;; This function calls:
  2484 ;;		_PausePattern
  2485 ;;		_PostPatternControlService
  2486 ;;		_ShowPattern
  2487 ;;		_StopPattern
  2488 ;; This function is called by:
  2489 ;;		_ES_Run
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           	psect	text7
  2494  002EB0                     __ptext7:
  2495                           	opt stack 0
  2496  002EB0                     _RunPatternControlService:
  2497                           	opt stack 15
  2498                           
  2499                           ;Pattern_ControlService.c: 165: ES_Event ReturnEvent;
  2500                           ;Pattern_ControlService.c: 166: ReturnEvent.EventType = ES_NO_EVENT;
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;incstack = 0
  2504  002EB0  0E00               	movlw	0
  2505  002EB2  0100               	movlb	0	; () banked
  2506  002EB4  6FBE               	movwf	RunPatternControlService@ReturnEvent& (0+255),b
  2507                           
  2508                           ;Pattern_ControlService.c: 169: switch(CurrentState){
  2509  002EB6  D04B               	goto	l4057
  2510  002EB8                     l4013:
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;Pattern_ControlService.c: 172: if(ThisEvent.EventType == ES_INIT){
  2514  002EB8  0E02               	movlw	2
  2515  002EBA  0100               	movlb	0	; () banked
  2516  002EBC  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2517  002EBE  A4D8               	btfss	status,2,c
  2518  002EC0  D054               	goto	l322
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;Pattern_ControlService.c: 176: StopPattern();
  2522  002EC2  ECBA  F01D         	call	_StopPattern	;wreg free
  2523                           
  2524                           ;Pattern_ControlService.c: 178: CurrentState = Pattern_Off;
  2525  002EC6  0E01               	movlw	1
  2526  002EC8  0100               	movlb	0	; () banked
  2527  002ECA  6FE4               	movwf	_CurrentState& (0+255),b
  2528                           
  2529                           ; BSR set to: 0
  2530                           ;Pattern_ControlService.c: 181: ES_Event testEvent;
  2531                           ;Pattern_ControlService.c: 182: testEvent.EventType = PATTERN_START;
  2532  002ECC  0E05               	movlw	5
  2533  002ECE  0100               	movlb	0	; () banked
  2534  002ED0  6FC1               	movwf	RunPatternControlService@testEvent& (0+255),b
  2535                           
  2536                           ;Pattern_ControlService.c: 183: PostPatternControlService(testEvent);
  2537  002ED2  C0C1  F07D         	movff	RunPatternControlService@testEvent,PostPatternControlService@ThisEvent
  2538  002ED6  C0C2  F07E         	movff	RunPatternControlService@testEvent+1,PostPatternControlService@ThisEvent+1
  2539  002EDA  C0C3  F07F         	movff	RunPatternControlService@testEvent+2,PostPatternControlService@ThisEvent+2
  2540  002EDE  ECC8  F01D         	call	_PostPatternControlService	;wreg free
  2541                           
  2542                           ;Pattern_ControlService.c: 185: }
  2543                           ;Pattern_ControlService.c: 186: break;
  2544  002EE2  D043               	goto	l322
  2545  002EE4                     l4021:
  2546                           
  2547                           ;Pattern_ControlService.c: 190: if(ThisEvent.EventType == PATTERN_START){
  2548  002EE4  0E05               	movlw	5
  2549  002EE6  0100               	movlb	0	; () banked
  2550  002EE8  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2551  002EEA  A4D8               	btfss	status,2,c
  2552  002EEC  D03E               	goto	l322
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;Pattern_ControlService.c: 192: ShowPattern();
  2556  002EEE  EC8B  F01D         	call	_ShowPattern	;wreg free
  2557  002EF2                     l4025:
  2558                           
  2559                           ;Pattern_ControlService.c: 194: CurrentState = Pattern_Running;
  2560  002EF2  0E02               	movlw	2
  2561  002EF4  D029               	goto	L4
  2562  002EF6                     l4027:
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;Pattern_ControlService.c: 200: if(ThisEvent.EventType == ES_TIMEOUT){
  2566  002EF6  0E03               	movlw	3
  2567  002EF8  0100               	movlb	0	; () banked
  2568  002EFA  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2569  002EFC  A4D8               	btfss	status,2,c
  2570  002EFE  D003               	goto	l4031
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;Pattern_ControlService.c: 202: ShowPattern();
  2574  002F00  EC8B  F01D         	call	_ShowPattern	;wreg free
  2575                           
  2576                           ;Pattern_ControlService.c: 203: }
  2577  002F04  D032               	goto	l322
  2578  002F06                     l4031:
  2579                           
  2580                           ;Pattern_ControlService.c: 205: else if(ThisEvent.EventType == PATTERN_END){
  2581  002F06  0E06               	movlw	6
  2582  002F08  0100               	movlb	0	; () banked
  2583  002F0A  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2584  002F0C  A4D8               	btfss	status,2,c
  2585  002F0E  D003               	goto	l4037
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;Pattern_ControlService.c: 207: StopPattern();
  2589  002F10  ECBA  F01D         	call	_StopPattern	;wreg free
  2590  002F14  D018               	goto	L24
  2591  002F16                     l4037:
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;Pattern_ControlService.c: 212: else if(ThisEvent.EventType == PATTERN_PAUSE){
  2595  002F16  0E07               	movlw	7
  2596  002F18  0100               	movlb	0	; () banked
  2597  002F1A  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2598  002F1C  A4D8               	btfss	status,2,c
  2599  002F1E  D025               	goto	l322
  2600                           
  2601                           ; BSR set to: 0
  2602                           ;Pattern_ControlService.c: 214: PausePattern();
  2603  002F20  EC5E  F01E         	call	_PausePattern	;wreg free
  2604                           
  2605                           ;Pattern_ControlService.c: 216: CurrentState = Pattern_Paused;
  2606  002F24  0E03               	movlw	3
  2607  002F26  D010               	goto	L4
  2608  002F28                     l4043:
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;Pattern_ControlService.c: 222: if(ThisEvent.EventType == PATTERN_START){
  2612  002F28  0E05               	movlw	5
  2613  002F2A  0100               	movlb	0	; () banked
  2614  002F2C  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2615  002F2E  A4D8               	btfss	status,2,c
  2616  002F30  D003               	goto	l4049
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;Pattern_ControlService.c: 224: ShowPattern();
  2620  002F32  EC8B  F01D         	call	_ShowPattern	;wreg free
  2621  002F36  D7DD               	goto	l4025
  2622  002F38                     l4049:
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;Pattern_ControlService.c: 229: else if(ThisEvent.EventType == PATTERN_END){
  2626  002F38  0E06               	movlw	6
  2627  002F3A  0100               	movlb	0	; () banked
  2628  002F3C  19BB               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2629  002F3E  A4D8               	btfss	status,2,c
  2630  002F40  D014               	goto	l322
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;Pattern_ControlService.c: 231: StopPattern();
  2634  002F42  ECBA  F01D         	call	_StopPattern	;wreg free
  2635  002F46                     L24:
  2636                           
  2637                           ;Pattern_ControlService.c: 233: CurrentState = Pattern_Off;
  2638  002F46  0E01               	movlw	1
  2639  002F48                     L4:
  2640  002F48  0100               	movlb	0	; () banked
  2641  002F4A  6FE4               	movwf	_CurrentState& (0+255),b
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;Pattern_ControlService.c: 236: }
  2645                           
  2646                           ; BSR set to: 0
  2647                           ;Pattern_ControlService.c: 234: }
  2648                           ;Pattern_ControlService.c: 235: break;
  2649                           
  2650                           ; BSR set to: 0
  2651  002F4C  D00E               	goto	l322
  2652  002F4E                     l4057:
  2653                           
  2654                           ; BSR set to: 0
  2655  002F4E  0100               	movlb	0	; () banked
  2656  002F50  51E4               	movf	_CurrentState& (0+255),w,b
  2657                           
  2658                           ; Switch size 1, requested type "space"
  2659                           ; Number of cases is 4, Range of values is 0 to 3
  2660                           ; switch strategies available:
  2661                           ; Name         Instructions Cycles
  2662                           ; simple_byte           13     7 (average)
  2663                           ;	Chosen strategy is simple_byte
  2664  002F52  0A00               	xorlw	0	; case 0
  2665  002F54  B4D8               	btfsc	status,2,c
  2666  002F56  D7B0               	goto	l4013
  2667  002F58  0A01               	xorlw	1	; case 1
  2668  002F5A  B4D8               	btfsc	status,2,c
  2669  002F5C  D7C3               	goto	l4021
  2670  002F5E  0A03               	xorlw	3	; case 2
  2671  002F60  B4D8               	btfsc	status,2,c
  2672  002F62  D7C9               	goto	l4027
  2673  002F64  0A01               	xorlw	1	; case 3
  2674  002F66  B4D8               	btfsc	status,2,c
  2675  002F68  D7DF               	goto	l4043
  2676  002F6A                     l322:
  2677                           
  2678                           ;Pattern_ControlService.c: 237: return ReturnEvent;
  2679  002F6A  C0BE  F0BB         	movff	RunPatternControlService@ReturnEvent,?_RunPatternControlService
  2680  002F6E  C0BF  F0BC         	movff	RunPatternControlService@ReturnEvent+1,?_RunPatternControlService+1
  2681  002F72  C0C0  F0BD         	movff	RunPatternControlService@ReturnEvent+2,?_RunPatternControlService+2
  2682  002F76  0012               	return		;funcret
  2683  002F78                     __end_of_RunPatternControlService:
  2684                           	opt stack 0
  2685                           tosu	equ	0xFFF
  2686                           tosh	equ	0xFFE
  2687                           tosl	equ	0xFFD
  2688                           pclath	equ	0xFFA
  2689                           tblptru	equ	0xFF8
  2690                           tblptrh	equ	0xFF7
  2691                           tblptrl	equ	0xFF6
  2692                           tablat	equ	0xFF5
  2693                           prodh	equ	0xFF4
  2694                           prodl	equ	0xFF3
  2695                           postinc0	equ	0xFEE
  2696                           wreg	equ	0xFE8
  2697                           postdec1	equ	0xFE5
  2698                           fsr1h	equ	0xFE2
  2699                           fsr1l	equ	0xFE1
  2700                           indf2	equ	0xFDF
  2701                           postinc2	equ	0xFDE
  2702                           postdec2	equ	0xFDD
  2703                           fsr2h	equ	0xFDA
  2704                           fsr2l	equ	0xFD9
  2705                           status	equ	0xFD8
  2706                           
  2707 ;; *************** function _RunSPI32ControlService *****************
  2708 ;; Defined at:
  2709 ;;		line 141 in file "SPI32_ControlService.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;  ThisEvent       3   91[BANK0 ] struct ES_Event_t
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;  ReturnEvent     3  101[BANK0 ] struct ES_Event_t
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  3   91[BANK0 ] struct ES_Event_t
  2716 ;; Registers used:
  2717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2723 ;;      Params:         0       3       0       0
  2724 ;;      Locals:         0       3       0       0
  2725 ;;      Temps:          0       7       0       0
  2726 ;;      Totals:         0      13       0       0
  2727 ;;Total ram usage:       13 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; Hardware stack levels required when called:    8
  2730 ;; This function calls:
  2731 ;;		_GetNextFrame
  2732 ;;		_SPI32_SendFrame
  2733 ;; This function is called by:
  2734 ;;		_ES_Run
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           	psect	text8
  2739  002920                     __ptext8:
  2740                           	opt stack 0
  2741  002920                     _RunSPI32ControlService:
  2742                           	opt stack 21
  2743                           
  2744                           ;SPI32_ControlService.c: 143: ES_Event ReturnEvent;
  2745                           ;SPI32_ControlService.c: 144: ReturnEvent.EventType = ES_NO_EVENT;
  2746                           
  2747                           ;incstack = 0
  2748  002920  0E00               	movlw	0
  2749  002922  0100               	movlb	0	; () banked
  2750  002924  6FC5               	movwf	RunSPI32ControlService@ReturnEvent& (0+255),b
  2751                           
  2752                           ;SPI32_ControlService.c: 146: switch ( CurrentState ) {
  2753  002926  D06D               	goto	l4107
  2754  002928                     l4081:
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;SPI32_ControlService.c: 151: if(ThisEvent.EventType == ES_INIT){
  2758  002928  0E02               	movlw	2
  2759  00292A  0100               	movlb	0	; () banked
  2760  00292C  19BB               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2761  00292E  A4D8               	btfss	status,2,c
  2762  002930  D073               	goto	l406
  2763  002932  D063               	goto	l4103
  2764  002934                     l4085:
  2765                           
  2766                           ; BSR set to: 0
  2767                           ;SPI32_ControlService.c: 162: if(ThisEvent.EventType == SPI32_TRANSMIT){
  2768  002934  0E08               	movlw	8
  2769  002936  0100               	movlb	0	; () banked
  2770  002938  19BB               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2771  00293A  A4D8               	btfss	status,2,c
  2772  00293C  D06D               	goto	l406
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;SPI32_ControlService.c: 164: CurrentFrame = GetNextFrame();
  2776  00293E  ECE4  F01D         	call	_GetNextFrame	;wreg free
  2777  002942  C060  F0CE         	movff	?_GetNextFrame,_CurrentFrame
  2778  002946  C061  F0CF         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2779  00294A  C062  F0D0         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2780  00294E  C063  F0D1         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2781                           
  2782                           ;SPI32_ControlService.c: 166: SPI32_SendFrame(CurrentFrame);
  2783  002952  C0CE  F060         	movff	_CurrentFrame,SPI32_SendFrame@newFrame
  2784  002956  C0CF  F061         	movff	_CurrentFrame+1,SPI32_SendFrame@newFrame+1
  2785  00295A  C0D0  F062         	movff	_CurrentFrame+2,SPI32_SendFrame@newFrame+2
  2786  00295E  C0D1  F063         	movff	_CurrentFrame+3,SPI32_SendFrame@newFrame+3
  2787  002962  ECCD  F01B         	call	_SPI32_SendFrame	;wreg free
  2788                           
  2789                           ;SPI32_ControlService.c: 168: CurrentState = SPI32_Transmitting;
  2790  002966  0E02               	movlw	2
  2791  002968  D049               	goto	L6
  2792  00296A                     l4093:
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;SPI32_ControlService.c: 175: if(ThisEvent.EventType == ES_TIMEOUT){
  2796  00296A  0E03               	movlw	3
  2797  00296C  0100               	movlb	0	; () banked
  2798  00296E  19BB               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2799  002970  A4D8               	btfss	status,2,c
  2800  002972  D052               	goto	l406
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;SPI32_ControlService.c: 177: if(FrameIndex++ < NumFrames-1){
  2804  002974  0EFF               	movlw	255
  2805  002976  0100               	movlb	0	; () banked
  2806  002978  6FBE               	movwf	??_RunSPI32ControlService& (0+255),b
  2807  00297A  0EFF               	movlw	255
  2808  00297C  0100               	movlb	0	; () banked
  2809  00297E  6FBF               	movwf	(??_RunSPI32ControlService+1)& (0+255),b
  2810  002980  0100               	movlb	0	; () banked
  2811  002982  51E7               	movf	_NumFrames& (0+255),w,b
  2812  002984  0100               	movlb	0	; () banked
  2813  002986  6FC0               	movwf	(??_RunSPI32ControlService+2)& (0+255),b
  2814  002988  6BC1               	clrf	(??_RunSPI32ControlService+3)& (0+255),b
  2815  00298A  0100               	movlb	0	; () banked
  2816  00298C  51BE               	movf	??_RunSPI32ControlService& (0+255),w,b
  2817  00298E  0100               	movlb	0	; () banked
  2818  002990  27C0               	addwf	(??_RunSPI32ControlService+2)& (0+255),f,b
  2819  002992  0100               	movlb	0	; () banked
  2820  002994  51BF               	movf	(??_RunSPI32ControlService+1)& (0+255),w,b
  2821  002996  0100               	movlb	0	; () banked
  2822  002998  23C1               	addwfc	(??_RunSPI32ControlService+3)& (0+255),f,b
  2823  00299A  0100               	movlb	0	; () banked
  2824  00299C  2BE5               	incf	_FrameIndex& (0+255),f,b
  2825  00299E  05E5               	decf	_FrameIndex& (0+255),w,b
  2826  0029A0  0100               	movlb	0	; () banked
  2827  0029A2  6FC2               	movwf	(??_RunSPI32ControlService+4)& (0+255),b
  2828  0029A4  6BC3               	clrf	(??_RunSPI32ControlService+5)& (0+255),b
  2829  0029A6  0100               	movlb	0	; () banked
  2830  0029A8  51C0               	movf	(??_RunSPI32ControlService+2)& (0+255),w,b
  2831  0029AA  0100               	movlb	0	; () banked
  2832  0029AC  5DC2               	subwf	(??_RunSPI32ControlService+4)& (0+255),w,b
  2833  0029AE  0100               	movlb	0	; () banked
  2834  0029B0  51C3               	movf	(??_RunSPI32ControlService+5)& (0+255),w,b
  2835  0029B2  0A80               	xorlw	128
  2836  0029B4  0100               	movlb	0	; () banked
  2837  0029B6  6FC4               	movwf	(??_RunSPI32ControlService+6)& (0+255),b
  2838  0029B8  0100               	movlb	0	; () banked
  2839  0029BA  51C1               	movf	(??_RunSPI32ControlService+3)& (0+255),w,b
  2840  0029BC  0A80               	xorlw	128
  2841  0029BE  0100               	movlb	0	; () banked
  2842  0029C0  59C4               	subwfb	(??_RunSPI32ControlService+6)& (0+255),w,b
  2843  0029C2  B0D8               	btfsc	status,0,c
  2844  0029C4  D01A               	goto	l4103
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;SPI32_ControlService.c: 179: FramePointer++;
  2848  0029C6  0E04               	movlw	4
  2849  0029C8  0100               	movlb	0	; () banked
  2850  0029CA  27D7               	addwf	_FramePointer& (0+255),f,b
  2851  0029CC  0E00               	movlw	0
  2852  0029CE  23D8               	addwfc	(_FramePointer+1)& (0+255),f,b
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;SPI32_ControlService.c: 180: CurrentFrame = GetNextFrame();
  2856  0029D0  ECE4  F01D         	call	_GetNextFrame	;wreg free
  2857  0029D4  C060  F0CE         	movff	?_GetNextFrame,_CurrentFrame
  2858  0029D8  C061  F0CF         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2859  0029DC  C062  F0D0         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2860  0029E0  C063  F0D1         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2861                           
  2862                           ;SPI32_ControlService.c: 182: SPI32_SendFrame(CurrentFrame);
  2863  0029E4  C0CE  F060         	movff	_CurrentFrame,SPI32_SendFrame@newFrame
  2864  0029E8  C0CF  F061         	movff	_CurrentFrame+1,SPI32_SendFrame@newFrame+1
  2865  0029EC  C0D0  F062         	movff	_CurrentFrame+2,SPI32_SendFrame@newFrame+2
  2866  0029F0  C0D1  F063         	movff	_CurrentFrame+3,SPI32_SendFrame@newFrame+3
  2867  0029F4  ECCD  F01B         	call	_SPI32_SendFrame	;wreg free
  2868                           
  2869                           ;SPI32_ControlService.c: 183: }
  2870  0029F8  D00F               	goto	l406
  2871  0029FA                     l4103:
  2872                           
  2873                           ;SPI32_ControlService.c: 185: else{
  2874                           ;SPI32_ControlService.c: 187: CurrentState = SPI32_Waiting4Send;
  2875  0029FA  0E01               	movlw	1
  2876  0029FC                     L6:
  2877  0029FC  0100               	movlb	0	; () banked
  2878  0029FE  6FE2               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;SPI32_ControlService.c: 192: }
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;SPI32_ControlService.c: 188: }
  2885                           ;SPI32_ControlService.c: 189: }
  2886                           ;SPI32_ControlService.c: 191: break;
  2887                           
  2888                           ; BSR set to: 0
  2889  002A00  D00B               	goto	l406
  2890  002A02                     l4107:
  2891                           
  2892                           ; BSR set to: 0
  2893  002A02  0100               	movlb	0	; () banked
  2894  002A04  51E2               	movf	SPI32_ControlService@CurrentState& (0+255),w,b
  2895                           
  2896                           ; Switch size 1, requested type "space"
  2897                           ; Number of cases is 3, Range of values is 0 to 2
  2898                           ; switch strategies available:
  2899                           ; Name         Instructions Cycles
  2900                           ; simple_byte           10     6 (average)
  2901                           ;	Chosen strategy is simple_byte
  2902  002A06  0A00               	xorlw	0	; case 0
  2903  002A08  B4D8               	btfsc	status,2,c
  2904  002A0A  D78E               	goto	l4081
  2905  002A0C  0A01               	xorlw	1	; case 1
  2906  002A0E  B4D8               	btfsc	status,2,c
  2907  002A10  D791               	goto	l4085
  2908  002A12  0A03               	xorlw	3	; case 2
  2909  002A14  B4D8               	btfsc	status,2,c
  2910  002A16  D7A9               	goto	l4093
  2911  002A18                     l406:
  2912                           
  2913                           ;SPI32_ControlService.c: 193: return ReturnEvent;
  2914  002A18  C0C5  F0BB         	movff	RunSPI32ControlService@ReturnEvent,?_RunSPI32ControlService
  2915  002A1C  C0C6  F0BC         	movff	RunSPI32ControlService@ReturnEvent+1,?_RunSPI32ControlService+1
  2916  002A20  C0C7  F0BD         	movff	RunSPI32ControlService@ReturnEvent+2,?_RunSPI32ControlService+2
  2917  002A24  0012               	return		;funcret
  2918  002A26                     __end_of_RunSPI32ControlService:
  2919                           	opt stack 0
  2920                           tosu	equ	0xFFF
  2921                           tosh	equ	0xFFE
  2922                           tosl	equ	0xFFD
  2923                           pclath	equ	0xFFA
  2924                           tblptru	equ	0xFF8
  2925                           tblptrh	equ	0xFF7
  2926                           tblptrl	equ	0xFF6
  2927                           tablat	equ	0xFF5
  2928                           prodh	equ	0xFF4
  2929                           prodl	equ	0xFF3
  2930                           postinc0	equ	0xFEE
  2931                           wreg	equ	0xFE8
  2932                           postdec1	equ	0xFE5
  2933                           fsr1h	equ	0xFE2
  2934                           fsr1l	equ	0xFE1
  2935                           indf2	equ	0xFDF
  2936                           postinc2	equ	0xFDE
  2937                           postdec2	equ	0xFDD
  2938                           fsr2h	equ	0xFDA
  2939                           fsr2l	equ	0xFD9
  2940                           status	equ	0xFD8
  2941                           
  2942 ;; *************** function _SPI32_SendFrame *****************
  2943 ;; Defined at:
  2944 ;;		line 89 in file "SPI32_HW.c"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;  newFrame        4    0[BANK0 ] unsigned long 
  2947 ;; Auto vars:     Size  Location     Type
  2948 ;;		None
  2949 ;; Return value:  Size  Location     Type
  2950 ;;                  1    wreg      void 
  2951 ;; Registers used:
  2952 ;;		wreg, status,2, status,0, prodl, prodh
  2953 ;; Tracked objects:
  2954 ;;		On entry : 0/0
  2955 ;;		On exit  : 0/0
  2956 ;;		Unchanged: 0/0
  2957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2958 ;;      Params:         0       4       0       0
  2959 ;;      Locals:         0       0       0       0
  2960 ;;      Temps:          0       4       0       0
  2961 ;;      Totals:         0       8       0       0
  2962 ;;Total ram usage:        8 bytes
  2963 ;; Hardware stack levels used:    1
  2964 ;; Hardware stack levels required when called:    7
  2965 ;; This function calls:
  2966 ;;		Nothing
  2967 ;; This function is called by:
  2968 ;;		_RunSPI32ControlService
  2969 ;; This function uses a non-reentrant model
  2970 ;;
  2971                           
  2972                           	psect	text9
  2973  00379A                     __ptext9:
  2974                           	opt stack 0
  2975  00379A                     _SPI32_SendFrame:
  2976                           	opt stack 21
  2977                           
  2978                           ;SPI32_HW.c: 92: if(FrameByte == 4){
  2979                           
  2980                           ;incstack = 0
  2981  00379A  0E04               	movlw	4
  2982  00379C  0100               	movlb	0	; () banked
  2983  00379E  19F6               	xorwf	_FrameByte& (0+255),w,b
  2984  0037A0  A4D8               	btfss	status,2,c
  2985  0037A2  D008               	goto	l3913
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;SPI32_HW.c: 94: TransmitFrame = newFrame;
  2989  0037A4  C060  F036         	movff	SPI32_SendFrame@newFrame,_TransmitFrame
  2990  0037A8  C061  F037         	movff	SPI32_SendFrame@newFrame+1,_TransmitFrame+1
  2991  0037AC  C062  F038         	movff	SPI32_SendFrame@newFrame+2,_TransmitFrame+2
  2992  0037B0  C063  F039         	movff	SPI32_SendFrame@newFrame+3,_TransmitFrame+3
  2993  0037B4                     l3913:
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;SPI32_HW.c: 95: }
  2997                           ;SPI32_HW.c: 97: FrameByte--;
  2998  0037B4  0100               	movlb	0	; () banked
  2999  0037B6  07F6               	decf	_FrameByte& (0+255),f,b
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;SPI32_HW.c: 99: SSPBUF = (uint8_t)(newFrame>>(FrameByte*8));
  3003  0037B8  0100               	movlb	0	; () banked
  3004  0037BA  51F6               	movf	_FrameByte& (0+255),w,b
  3005  0037BC  0D08               	mullw	8
  3006  0037BE  50F3               	movf	prodl,w,c
  3007  0037C0  C060  F064         	movff	SPI32_SendFrame@newFrame,??_SPI32_SendFrame
  3008  0037C4  C061  F065         	movff	SPI32_SendFrame@newFrame+1,??_SPI32_SendFrame+1
  3009  0037C8  C062  F066         	movff	SPI32_SendFrame@newFrame+2,??_SPI32_SendFrame+2
  3010  0037CC  C063  F067         	movff	SPI32_SendFrame@newFrame+3,??_SPI32_SendFrame+3
  3011  0037D0  0100               	movlb	0	; () banked
  3012  0037D2  2AE8               	incf	wreg,f,c
  3013  0037D4  D005               	goto	u2800
  3014  0037D6                     u2805:
  3015  0037D6  90D8               	bcf	status,0,c
  3016  0037D8  3367               	rrcf	(??_SPI32_SendFrame+3)& (0+255),f,b
  3017  0037DA  3366               	rrcf	(??_SPI32_SendFrame+2)& (0+255),f,b
  3018  0037DC  3365               	rrcf	(??_SPI32_SendFrame+1)& (0+255),f,b
  3019  0037DE  3364               	rrcf	??_SPI32_SendFrame& (0+255),f,b
  3020  0037E0                     u2800:
  3021  0037E0  2EE8               	decfsz	wreg,f,c
  3022  0037E2  D7F9               	goto	u2805
  3023  0037E4  0100               	movlb	0	; () banked
  3024  0037E6  5164               	movf	??_SPI32_SendFrame& (0+255),w,b
  3025  0037E8  6EC9               	movwf	4041,c	;volatile
  3026                           
  3027                           ; BSR set to: 0
  3028  0037EA  0012               	return		;funcret
  3029  0037EC                     __end_of_SPI32_SendFrame:
  3030                           	opt stack 0
  3031                           tosu	equ	0xFFF
  3032                           tosh	equ	0xFFE
  3033                           tosl	equ	0xFFD
  3034                           pclath	equ	0xFFA
  3035                           tblptru	equ	0xFF8
  3036                           tblptrh	equ	0xFF7
  3037                           tblptrl	equ	0xFF6
  3038                           tablat	equ	0xFF5
  3039                           prodh	equ	0xFF4
  3040                           prodl	equ	0xFF3
  3041                           postinc0	equ	0xFEE
  3042                           wreg	equ	0xFE8
  3043                           postdec1	equ	0xFE5
  3044                           fsr1h	equ	0xFE2
  3045                           fsr1l	equ	0xFE1
  3046                           indf2	equ	0xFDF
  3047                           postinc2	equ	0xFDE
  3048                           postdec2	equ	0xFDD
  3049                           fsr2h	equ	0xFDA
  3050                           fsr2l	equ	0xFD9
  3051                           status	equ	0xFD8
  3052                           
  3053 ;; *************** function _GetNextFrame *****************
  3054 ;; Defined at:
  3055 ;;		line 237 in file "SPI32_ControlService.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;		None
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;		None
  3060 ;; Return value:  Size  Location     Type
  3061 ;;                  4    0[BANK0 ] unsigned long 
  3062 ;; Registers used:
  3063 ;;		fsr2l, fsr2h
  3064 ;; Tracked objects:
  3065 ;;		On entry : 0/0
  3066 ;;		On exit  : 0/0
  3067 ;;		Unchanged: 0/0
  3068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3069 ;;      Params:         0       4       0       0
  3070 ;;      Locals:         0       0       0       0
  3071 ;;      Temps:          0       0       0       0
  3072 ;;      Totals:         0       4       0       0
  3073 ;;Total ram usage:        4 bytes
  3074 ;; Hardware stack levels used:    1
  3075 ;; Hardware stack levels required when called:    7
  3076 ;; This function calls:
  3077 ;;		Nothing
  3078 ;; This function is called by:
  3079 ;;		_RunSPI32ControlService
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           	psect	text10
  3084  003BC8                     __ptext10:
  3085                           	opt stack 0
  3086  003BC8                     _GetNextFrame:
  3087                           	opt stack 21
  3088                           
  3089                           ;SPI32_ControlService.c: 238: return *(FramePointer);
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;incstack = 0
  3093  003BC8  C0D7  FFD9         	movff	_FramePointer,fsr2l
  3094  003BCC  C0D8  FFDA         	movff	_FramePointer+1,fsr2h
  3095  003BD0  CFDE F060          	movff	postinc2,?_GetNextFrame
  3096  003BD4  CFDE F061          	movff	postinc2,?_GetNextFrame+1
  3097  003BD8  CFDE F062          	movff	postinc2,?_GetNextFrame+2
  3098  003BDC  CFDE F063          	movff	postinc2,?_GetNextFrame+3
  3099  003BE0  0012               	return	
  3100  003BE2                     __end_of_GetNextFrame:
  3101                           	opt stack 0
  3102                           tosu	equ	0xFFF
  3103                           tosh	equ	0xFFE
  3104                           tosl	equ	0xFFD
  3105                           pclath	equ	0xFFA
  3106                           tblptru	equ	0xFF8
  3107                           tblptrh	equ	0xFF7
  3108                           tblptrl	equ	0xFF6
  3109                           tablat	equ	0xFF5
  3110                           prodh	equ	0xFF4
  3111                           prodl	equ	0xFF3
  3112                           postinc0	equ	0xFEE
  3113                           wreg	equ	0xFE8
  3114                           postdec1	equ	0xFE5
  3115                           fsr1h	equ	0xFE2
  3116                           fsr1l	equ	0xFE1
  3117                           indf2	equ	0xFDF
  3118                           postinc2	equ	0xFDE
  3119                           postdec2	equ	0xFDD
  3120                           fsr2h	equ	0xFDA
  3121                           fsr2l	equ	0xFD9
  3122                           status	equ	0xFD8
  3123                           
  3124 ;; *************** function _StopPattern *****************
  3125 ;; Defined at:
  3126 ;;		line 276 in file "Pattern_ControlService.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;		None
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;		None
  3131 ;; Return value:  Size  Location     Type
  3132 ;;                  1    wreg      void 
  3133 ;; Registers used:
  3134 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3140 ;;      Params:         0       0       0       0
  3141 ;;      Locals:         0       0       0       0
  3142 ;;      Temps:          0       0       0       0
  3143 ;;      Totals:         0       0       0       0
  3144 ;;Total ram usage:        0 bytes
  3145 ;; Hardware stack levels used:    1
  3146 ;; Hardware stack levels required when called:   13
  3147 ;; This function calls:
  3148 ;;		_DotStar_Show
  3149 ;;		_ES_Timer_StopTimer
  3150 ;;		_PatternOff
  3151 ;;		_ResetPattern
  3152 ;; This function is called by:
  3153 ;;		_RunPatternControlService
  3154 ;; This function uses a non-reentrant model
  3155 ;;
  3156                           
  3157                           	psect	text11
  3158  003B74                     __ptext11:
  3159                           	opt stack 0
  3160  003B74                     _StopPattern:
  3161                           	opt stack 15
  3162                           
  3163                           ;Pattern_ControlService.c: 278: ES_Timer_StopTimer(0);
  3164                           
  3165                           ;incstack = 0
  3166  003B74  0E00               	movlw	0
  3167  003B76  EC1F  F01C         	call	_ES_Timer_StopTimer
  3168                           
  3169                           ;Pattern_ControlService.c: 280: DotStar_Show(PatternOff());
  3170  003B7A  EC8F  F01C         	call	_PatternOff	;wreg free
  3171  003B7E  C060  F0A5         	movff	?_PatternOff,DotStar_Show@patternPointer
  3172  003B82  C061  F0A6         	movff	?_PatternOff+1,DotStar_Show@patternPointer+1
  3173  003B86  ECDA  F012         	call	_DotStar_Show	;wreg free
  3174                           
  3175                           ;Pattern_ControlService.c: 282: ResetPattern();
  3176  003B8A  ECF1  F01D         	call	_ResetPattern	;wreg free
  3177  003B8E  0012               	return		;funcret
  3178  003B90                     __end_of_StopPattern:
  3179                           	opt stack 0
  3180                           tosu	equ	0xFFF
  3181                           tosh	equ	0xFFE
  3182                           tosl	equ	0xFFD
  3183                           pclath	equ	0xFFA
  3184                           tblptru	equ	0xFF8
  3185                           tblptrh	equ	0xFF7
  3186                           tblptrl	equ	0xFF6
  3187                           tablat	equ	0xFF5
  3188                           prodh	equ	0xFF4
  3189                           prodl	equ	0xFF3
  3190                           postinc0	equ	0xFEE
  3191                           wreg	equ	0xFE8
  3192                           postdec1	equ	0xFE5
  3193                           fsr1h	equ	0xFE2
  3194                           fsr1l	equ	0xFE1
  3195                           indf2	equ	0xFDF
  3196                           postinc2	equ	0xFDE
  3197                           postdec2	equ	0xFDD
  3198                           fsr2h	equ	0xFDA
  3199                           fsr2l	equ	0xFD9
  3200                           status	equ	0xFD8
  3201                           
  3202 ;; *************** function _ResetPattern *****************
  3203 ;; Defined at:
  3204 ;;		line 113 in file "Pattern_PtrnGenerator.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;		None
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;		None
  3209 ;; Return value:  Size  Location     Type
  3210 ;;                  1    wreg      void 
  3211 ;; Registers used:
  3212 ;;		wreg, status,2
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3218 ;;      Params:         0       0       0       0
  3219 ;;      Locals:         0       0       0       0
  3220 ;;      Temps:          0       0       0       0
  3221 ;;      Totals:         0       0       0       0
  3222 ;;Total ram usage:        0 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; Hardware stack levels required when called:    7
  3225 ;; This function calls:
  3226 ;;		Nothing
  3227 ;; This function is called by:
  3228 ;;		_StopPattern
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           	psect	text12
  3233  003BE2                     __ptext12:
  3234                           	opt stack 0
  3235  003BE2                     _ResetPattern:
  3236                           	opt stack 20
  3237                           
  3238                           ;Pattern_PtrnGenerator.c: 115: PatternStepCounter = 0;
  3239                           
  3240                           ;incstack = 0
  3241  003BE2  0E00               	movlw	0
  3242  003BE4  0100               	movlb	0	; () banked
  3243  003BE6  6FF2               	movwf	_PatternStepCounter& (0+255),b
  3244                           
  3245                           ;Pattern_PtrnGenerator.c: 117: CycleCounter = 0;
  3246  003BE8  0E00               	movlw	0
  3247  003BEA  0100               	movlb	0	; () banked
  3248  003BEC  6FE9               	movwf	_CycleCounter& (0+255),b
  3249  003BEE  0E00               	movlw	0
  3250  003BF0  6FEA               	movwf	(_CycleCounter+1)& (0+255),b
  3251  003BF2  0E00               	movlw	0
  3252  003BF4  6FEB               	movwf	(_CycleCounter+2)& (0+255),b
  3253  003BF6  0E00               	movlw	0
  3254  003BF8  6FEC               	movwf	(_CycleCounter+3)& (0+255),b
  3255                           
  3256                           ; BSR set to: 0
  3257  003BFA  0012               	return		;funcret
  3258  003BFC                     __end_of_ResetPattern:
  3259                           	opt stack 0
  3260                           tosu	equ	0xFFF
  3261                           tosh	equ	0xFFE
  3262                           tosl	equ	0xFFD
  3263                           pclath	equ	0xFFA
  3264                           tblptru	equ	0xFF8
  3265                           tblptrh	equ	0xFF7
  3266                           tblptrl	equ	0xFF6
  3267                           tablat	equ	0xFF5
  3268                           prodh	equ	0xFF4
  3269                           prodl	equ	0xFF3
  3270                           postinc0	equ	0xFEE
  3271                           wreg	equ	0xFE8
  3272                           postdec1	equ	0xFE5
  3273                           fsr1h	equ	0xFE2
  3274                           fsr1l	equ	0xFE1
  3275                           indf2	equ	0xFDF
  3276                           postinc2	equ	0xFDE
  3277                           postdec2	equ	0xFDD
  3278                           fsr2h	equ	0xFDA
  3279                           fsr2l	equ	0xFD9
  3280                           status	equ	0xFD8
  3281                           
  3282 ;; *************** function _PatternOff *****************
  3283 ;; Defined at:
  3284 ;;		line 138 in file "Pattern_PtrnGenerator.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;		None
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;  i               1    2[BANK0 ] unsigned char 
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  2    0[BANK0 ] PTR unsigned int 
  3291 ;; Registers used:
  3292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3298 ;;      Params:         0       2       0       0
  3299 ;;      Locals:         0       1       0       0
  3300 ;;      Temps:          0       0       0       0
  3301 ;;      Totals:         0       3       0       0
  3302 ;;Total ram usage:        3 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    7
  3305 ;; This function calls:
  3306 ;;		Nothing
  3307 ;; This function is called by:
  3308 ;;		_StopPattern
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           	psect	text13
  3313  00391E                     __ptext13:
  3314                           	opt stack 0
  3315  00391E                     _PatternOff:
  3316                           	opt stack 20
  3317                           
  3318                           ;Pattern_PtrnGenerator.c: 139: for(uint8_t i=0;i<76;i++){
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;incstack = 0
  3322  00391E  0E00               	movlw	0
  3323  003920  0100               	movlb	0	; () banked
  3324  003922  6F62               	movwf	PatternOff@i& (0+255),b
  3325  003924                     l3723:
  3326                           
  3327                           ; BSR set to: 0
  3328  003924  0E4B               	movlw	75
  3329  003926  0100               	movlb	0	; () banked
  3330  003928  6562               	cpfsgt	PatternOff@i& (0+255),b
  3331  00392A  D001               	goto	l3727
  3332  00392C  D010               	goto	l3733
  3333  00392E                     l3727:
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;Pattern_PtrnGenerator.c: 140: PixelPattern[i] = 0x0;
  3337  00392E  0100               	movlb	0	; () banked
  3338  003930  5162               	movf	PatternOff@i& (0+255),w,b
  3339  003932  0D02               	mullw	2
  3340  003934  0E20               	movlw	low _PixelPattern
  3341  003936  24F3               	addwf	prodl,w,c
  3342  003938  6ED9               	movwf	fsr2l,c
  3343  00393A  0E01               	movlw	high _PixelPattern
  3344  00393C  20F4               	addwfc	prodh,w,c
  3345  00393E  6EDA               	movwf	fsr2h,c
  3346  003940  0E00               	movlw	0
  3347  003942  6EDE               	movwf	postinc2,c
  3348  003944  0E00               	movlw	0
  3349  003946  6EDD               	movwf	postdec2,c
  3350                           
  3351                           ; BSR set to: 0
  3352  003948  0100               	movlb	0	; () banked
  3353  00394A  2B62               	incf	PatternOff@i& (0+255),f,b
  3354  00394C  D7EB               	goto	l3723
  3355  00394E                     l3733:
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;Pattern_PtrnGenerator.c: 141: }
  3359                           ;Pattern_PtrnGenerator.c: 142: return PixelPattern;
  3360  00394E  0E20               	movlw	low _PixelPattern
  3361  003950  0100               	movlb	0	; () banked
  3362  003952  6F60               	movwf	?_PatternOff& (0+255),b
  3363  003954  0E01               	movlw	high _PixelPattern
  3364  003956  0100               	movlb	0	; () banked
  3365  003958  6F61               	movwf	(?_PatternOff+1)& (0+255),b
  3366  00395A  0012               	return	
  3367  00395C                     __end_of_PatternOff:
  3368                           	opt stack 0
  3369                           tosu	equ	0xFFF
  3370                           tosh	equ	0xFFE
  3371                           tosl	equ	0xFFD
  3372                           pclath	equ	0xFFA
  3373                           tblptru	equ	0xFF8
  3374                           tblptrh	equ	0xFF7
  3375                           tblptrl	equ	0xFF6
  3376                           tablat	equ	0xFF5
  3377                           prodh	equ	0xFF4
  3378                           prodl	equ	0xFF3
  3379                           postinc0	equ	0xFEE
  3380                           wreg	equ	0xFE8
  3381                           postdec1	equ	0xFE5
  3382                           fsr1h	equ	0xFE2
  3383                           fsr1l	equ	0xFE1
  3384                           indf2	equ	0xFDF
  3385                           postinc2	equ	0xFDE
  3386                           postdec2	equ	0xFDD
  3387                           fsr2h	equ	0xFDA
  3388                           fsr2l	equ	0xFD9
  3389                           status	equ	0xFD8
  3390                           
  3391 ;; *************** function _ShowPattern *****************
  3392 ;; Defined at:
  3393 ;;		line 268 in file "Pattern_ControlService.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;		None
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;		None
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  1    wreg      void 
  3400 ;; Registers used:
  3401 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3407 ;;      Params:         0       0       0       0
  3408 ;;      Locals:         0       0       0       0
  3409 ;;      Temps:          0       0       0       0
  3410 ;;      Totals:         0       0       0       0
  3411 ;;Total ram usage:        0 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; Hardware stack levels required when called:   13
  3414 ;; This function calls:
  3415 ;;		_DotStar_Show
  3416 ;;		_ES_Timer_InitTimer
  3417 ;;		_UpdatePattern
  3418 ;; This function is called by:
  3419 ;;		_RunPatternControlService
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           	psect	text14
  3424  003B16                     __ptext14:
  3425                           	opt stack 0
  3426  003B16                     _ShowPattern:
  3427                           	opt stack 15
  3428                           
  3429                           ;Pattern_ControlService.c: 270: ES_Timer_InitTimer(0,PatternConfigs[3]);
  3430                           
  3431                           ; BSR set to: 0
  3432                           ;incstack = 0
  3433  003B16  C0FA  F060         	movff	_PatternConfigs+3,ES_Timer_InitTimer@NewTime
  3434  003B1A  0100               	movlb	0	; () banked
  3435  003B1C  6B61               	clrf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  3436  003B1E  0E00               	movlw	0
  3437  003B20  ECF9  F019         	call	_ES_Timer_InitTimer
  3438                           
  3439                           ;Pattern_ControlService.c: 272: DotStar_Show(UpdatePattern());
  3440  003B24  EC23  F00F         	call	_UpdatePattern	;wreg free
  3441  003B28  C090  F0A5         	movff	?_UpdatePattern,DotStar_Show@patternPointer
  3442  003B2C  C091  F0A6         	movff	?_UpdatePattern+1,DotStar_Show@patternPointer+1
  3443  003B30  ECDA  F012         	call	_DotStar_Show	;wreg free
  3444  003B34  0012               	return		;funcret
  3445  003B36                     __end_of_ShowPattern:
  3446                           	opt stack 0
  3447                           tosu	equ	0xFFF
  3448                           tosh	equ	0xFFE
  3449                           tosl	equ	0xFFD
  3450                           pclath	equ	0xFFA
  3451                           tblptru	equ	0xFF8
  3452                           tblptrh	equ	0xFF7
  3453                           tblptrl	equ	0xFF6
  3454                           tablat	equ	0xFF5
  3455                           prodh	equ	0xFF4
  3456                           prodl	equ	0xFF3
  3457                           postinc0	equ	0xFEE
  3458                           wreg	equ	0xFE8
  3459                           postdec1	equ	0xFE5
  3460                           fsr1h	equ	0xFE2
  3461                           fsr1l	equ	0xFE1
  3462                           indf2	equ	0xFDF
  3463                           postinc2	equ	0xFDE
  3464                           postdec2	equ	0xFDD
  3465                           fsr2h	equ	0xFDA
  3466                           fsr2l	equ	0xFD9
  3467                           status	equ	0xFD8
  3468                           
  3469 ;; *************** function _UpdatePattern *****************
  3470 ;; Defined at:
  3471 ;;		line 163 in file "Pattern_PtrnGenerator.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;		None
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;  i               1   53[BANK0 ] unsigned char 
  3476 ;;  i               1   52[BANK0 ] unsigned char 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  2   48[BANK0 ] PTR unsigned int 
  3479 ;; Registers used:
  3480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3486 ;;      Params:         0       2       0       0
  3487 ;;      Locals:         0       4       0       0
  3488 ;;      Temps:          0       0       0       0
  3489 ;;      Totals:         0       6       0       0
  3490 ;;Total ram usage:        6 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:    9
  3493 ;; This function calls:
  3494 ;;		_BrokenPinwheel
  3495 ;;		_CenterBreathe
  3496 ;;		_DoubleFadedLoop
  3497 ;;		_FullPulseHold
  3498 ;;		_HueTest
  3499 ;;		_MirroredQuadrants
  3500 ;;		_SingleFadedLoop
  3501 ;;		_SingleFocusBreathe
  3502 ;;		___awdiv
  3503 ;; This function is called by:
  3504 ;;		_ShowPattern
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508                           	psect	text15
  3509  001E46                     __ptext15:
  3510                           	opt stack 0
  3511  001E46                     _UpdatePattern:
  3512                           	opt stack 18
  3513                           
  3514                           ;Pattern_PtrnGenerator.c: 165: switch(*PatternID){
  3515                           
  3516                           ;incstack = 0
  3517  001E46  D177               	goto	l3699
  3518  001E48                     l3651:
  3519                           
  3520                           ;Pattern_PtrnGenerator.c: 169: for(uint8_t i=0;i<76;i++){
  3521  001E48  0E00               	movlw	0
  3522  001E4A  0100               	movlb	0	; () banked
  3523  001E4C  6F94               	movwf	UpdatePattern@i& (0+255),b
  3524  001E4E                     l3653:
  3525                           
  3526                           ; BSR set to: 0
  3527  001E4E  0E4B               	movlw	75
  3528  001E50  0100               	movlb	0	; () banked
  3529  001E52  6594               	cpfsgt	UpdatePattern@i& (0+255),b
  3530  001E54  D001               	goto	l3657
  3531  001E56  D193               	goto	l3701
  3532  001E58                     l3657:
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;Pattern_PtrnGenerator.c: 170: PixelPattern[i] = 0x0;
  3536  001E58  0100               	movlb	0	; () banked
  3537  001E5A  5194               	movf	UpdatePattern@i& (0+255),w,b
  3538  001E5C  0D02               	mullw	2
  3539  001E5E  0E20               	movlw	low _PixelPattern
  3540  001E60  24F3               	addwf	prodl,w,c
  3541  001E62  6ED9               	movwf	fsr2l,c
  3542  001E64  0E01               	movlw	high _PixelPattern
  3543  001E66  20F4               	addwfc	prodh,w,c
  3544  001E68  6EDA               	movwf	fsr2h,c
  3545  001E6A  0E00               	movlw	0
  3546  001E6C  6EDE               	movwf	postinc2,c
  3547  001E6E  0E00               	movlw	0
  3548  001E70  6EDD               	movwf	postdec2,c
  3549                           
  3550                           ; BSR set to: 0
  3551  001E72  0100               	movlb	0	; () banked
  3552  001E74  2B94               	incf	UpdatePattern@i& (0+255),f,b
  3553  001E76  D7EB               	goto	l3653
  3554  001E78                     l3663:
  3555                           
  3556                           ;Pattern_PtrnGenerator.c: 176: FullPulseHold(PixelPattern, &PatternStepCounter, &CycleCo
      +                          unter, 135, 4, 0);
  3557  001E78  0E20               	movlw	low _PixelPattern
  3558  001E7A  0100               	movlb	0	; () banked
  3559  001E7C  6F60               	movwf	FullPulseHold@ptrnPointer& (0+255),b
  3560  001E7E  0E01               	movlw	high _PixelPattern
  3561  001E80  0100               	movlb	0	; () banked
  3562  001E82  6F61               	movwf	(FullPulseHold@ptrnPointer+1)& (0+255),b
  3563  001E84  0EF2               	movlw	low _PatternStepCounter
  3564  001E86  0100               	movlb	0	; () banked
  3565  001E88  6F62               	movwf	FullPulseHold@ptrnStepCounter& (0+255),b
  3566  001E8A  0E00               	movlw	high _PatternStepCounter
  3567  001E8C  0100               	movlb	0	; () banked
  3568  001E8E  6F63               	movwf	(FullPulseHold@ptrnStepCounter+1)& (0+255),b
  3569  001E90  0EE9               	movlw	low _CycleCounter
  3570  001E92  0100               	movlb	0	; () banked
  3571  001E94  6F64               	movwf	FullPulseHold@cycleCounter& (0+255),b
  3572  001E96  0E00               	movlw	high _CycleCounter
  3573  001E98  0100               	movlb	0	; () banked
  3574  001E9A  6F65               	movwf	(FullPulseHold@cycleCounter+1)& (0+255),b
  3575  001E9C  0E87               	movlw	135
  3576  001E9E  0100               	movlb	0	; () banked
  3577  001EA0  6F66               	movwf	FullPulseHold@base_hue& (0+255),b
  3578  001EA2  0E04               	movlw	4
  3579  001EA4  0100               	movlb	0	; () banked
  3580  001EA6  6F67               	movwf	FullPulseHold@base_sat& (0+255),b
  3581  001EA8  0E00               	movlw	0
  3582  001EAA  0100               	movlb	0	; () banked
  3583  001EAC  6F68               	movwf	FullPulseHold@15718& (0+255),b
  3584  001EAE  0E00               	movlw	0
  3585  001EB0  0100               	movlb	0	; () banked
  3586  001EB2  6F69               	movwf	(FullPulseHold@15718+1)& (0+255),b
  3587  001EB4  EC13  F012         	call	_FullPulseHold	;wreg free
  3588                           
  3589                           ;Pattern_PtrnGenerator.c: 177: break;
  3590  001EB8  D162               	goto	l3701
  3591  001EBA                     l3665:
  3592                           
  3593                           ;Pattern_PtrnGenerator.c: 181: CenterBreathe(PixelPattern, &PatternStepCounter, &CycleCo
      +                          unter, 135, 4, 0);
  3594  001EBA  0E20               	movlw	low _PixelPattern
  3595  001EBC  0100               	movlb	0	; () banked
  3596  001EBE  6F68               	movwf	CenterBreathe@ptrnPointer& (0+255),b
  3597  001EC0  0E01               	movlw	high _PixelPattern
  3598  001EC2  0100               	movlb	0	; () banked
  3599  001EC4  6F69               	movwf	(CenterBreathe@ptrnPointer+1)& (0+255),b
  3600  001EC6  0EF2               	movlw	low _PatternStepCounter
  3601  001EC8  0100               	movlb	0	; () banked
  3602  001ECA  6F6A               	movwf	CenterBreathe@ptrnStepCounter& (0+255),b
  3603  001ECC  0E00               	movlw	high _PatternStepCounter
  3604  001ECE  0100               	movlb	0	; () banked
  3605  001ED0  6F6B               	movwf	(CenterBreathe@ptrnStepCounter+1)& (0+255),b
  3606  001ED2  0EE9               	movlw	low _CycleCounter
  3607  001ED4  0100               	movlb	0	; () banked
  3608  001ED6  6F6C               	movwf	CenterBreathe@cycleCounter& (0+255),b
  3609  001ED8  0E00               	movlw	high _CycleCounter
  3610  001EDA  0100               	movlb	0	; () banked
  3611  001EDC  6F6D               	movwf	(CenterBreathe@cycleCounter+1)& (0+255),b
  3612  001EDE  0E87               	movlw	135
  3613  001EE0  0100               	movlb	0	; () banked
  3614  001EE2  6F6E               	movwf	CenterBreathe@base_hue& (0+255),b
  3615  001EE4  0E04               	movlw	4
  3616  001EE6  0100               	movlb	0	; () banked
  3617  001EE8  6F6F               	movwf	CenterBreathe@base_sat& (0+255),b
  3618  001EEA  0E00               	movlw	0
  3619  001EEC  0100               	movlb	0	; () banked
  3620  001EEE  6F70               	movwf	CenterBreathe@15728& (0+255),b
  3621  001EF0  0E00               	movlw	0
  3622  001EF2  0100               	movlb	0	; () banked
  3623  001EF4  6F71               	movwf	(CenterBreathe@15728+1)& (0+255),b
  3624  001EF6  ECD6  F00B         	call	_CenterBreathe	;wreg free
  3625                           
  3626                           ;Pattern_PtrnGenerator.c: 182: break;
  3627  001EFA  D141               	goto	l3701
  3628  001EFC                     l3667:
  3629                           
  3630                           ;Pattern_PtrnGenerator.c: 186: SingleFadedLoop(PixelPattern, &PatternStepCounter, &Cycle
      +                          Counter, 32, 0x0F, 0);
  3631  001EFC  0E20               	movlw	low _PixelPattern
  3632  001EFE  0100               	movlb	0	; () banked
  3633  001F00  6F68               	movwf	SingleFadedLoop@ptrnPointer& (0+255),b
  3634  001F02  0E01               	movlw	high _PixelPattern
  3635  001F04  0100               	movlb	0	; () banked
  3636  001F06  6F69               	movwf	(SingleFadedLoop@ptrnPointer+1)& (0+255),b
  3637  001F08  0EF2               	movlw	low _PatternStepCounter
  3638  001F0A  0100               	movlb	0	; () banked
  3639  001F0C  6F6A               	movwf	SingleFadedLoop@ptrnStepCounter& (0+255),b
  3640  001F0E  0E00               	movlw	high _PatternStepCounter
  3641  001F10  0100               	movlb	0	; () banked
  3642  001F12  6F6B               	movwf	(SingleFadedLoop@ptrnStepCounter+1)& (0+255),b
  3643  001F14  0EE9               	movlw	low _CycleCounter
  3644  001F16  0100               	movlb	0	; () banked
  3645  001F18  6F6C               	movwf	SingleFadedLoop@cycleCounter& (0+255),b
  3646  001F1A  0E00               	movlw	high _CycleCounter
  3647  001F1C  0100               	movlb	0	; () banked
  3648  001F1E  6F6D               	movwf	(SingleFadedLoop@cycleCounter+1)& (0+255),b
  3649  001F20  0E20               	movlw	32
  3650  001F22  0100               	movlb	0	; () banked
  3651  001F24  6F6E               	movwf	SingleFadedLoop@base_hue& (0+255),b
  3652  001F26  0E0F               	movlw	15
  3653  001F28  0100               	movlb	0	; () banked
  3654  001F2A  6F6F               	movwf	SingleFadedLoop@base_sat& (0+255),b
  3655  001F2C  0E00               	movlw	0
  3656  001F2E  0100               	movlb	0	; () banked
  3657  001F30  6F70               	movwf	SingleFadedLoop@15741& (0+255),b
  3658  001F32  0E00               	movlw	0
  3659  001F34  0100               	movlb	0	; () banked
  3660  001F36  6F71               	movwf	(SingleFadedLoop@15741+1)& (0+255),b
  3661  001F38  ECC6  F010         	call	_SingleFadedLoop	;wreg free
  3662                           
  3663                           ;Pattern_PtrnGenerator.c: 187: break;
  3664  001F3C  D120               	goto	l3701
  3665  001F3E                     l3669:
  3666                           
  3667                           ;Pattern_PtrnGenerator.c: 191: SingleFocusBreathe(PixelPattern, &PatternStepCounter, &Cy
      +                          cleCounter, 170, 0x0F, ListeningFocus);
  3668  001F3E  0E20               	movlw	low _PixelPattern
  3669  001F40  0100               	movlb	0	; () banked
  3670  001F42  6F68               	movwf	SingleFocusBreathe@ptrnPointer& (0+255),b
  3671  001F44  0E01               	movlw	high _PixelPattern
  3672  001F46  0100               	movlb	0	; () banked
  3673  001F48  6F69               	movwf	(SingleFocusBreathe@ptrnPointer+1)& (0+255),b
  3674  001F4A  0EF2               	movlw	low _PatternStepCounter
  3675  001F4C  0100               	movlb	0	; () banked
  3676  001F4E  6F6A               	movwf	SingleFocusBreathe@ptrnStepCounter& (0+255),b
  3677  001F50  0E00               	movlw	high _PatternStepCounter
  3678  001F52  0100               	movlb	0	; () banked
  3679  001F54  6F6B               	movwf	(SingleFocusBreathe@ptrnStepCounter+1)& (0+255),b
  3680  001F56  0EE9               	movlw	low _CycleCounter
  3681  001F58  0100               	movlb	0	; () banked
  3682  001F5A  6F6C               	movwf	SingleFocusBreathe@cycleCounter& (0+255),b
  3683  001F5C  0E00               	movlw	high _CycleCounter
  3684  001F5E  0100               	movlb	0	; () banked
  3685  001F60  6F6D               	movwf	(SingleFocusBreathe@cycleCounter+1)& (0+255),b
  3686  001F62  0EAA               	movlw	170
  3687  001F64  0100               	movlb	0	; () banked
  3688  001F66  6F6E               	movwf	SingleFocusBreathe@base_hue& (0+255),b
  3689  001F68  0E0F               	movlw	15
  3690  001F6A  0100               	movlb	0	; () banked
  3691  001F6C  6F6F               	movwf	SingleFocusBreathe@base_sat& (0+255),b
  3692  001F6E  C0D9  F070         	movff	_ListeningFocus,SingleFocusBreathe@focus
  3693  001F72  C0DA  F071         	movff	_ListeningFocus+1,SingleFocusBreathe@focus+1
  3694  001F76  EC7D  F00D         	call	_SingleFocusBreathe	;wreg free
  3695                           
  3696                           ;Pattern_PtrnGenerator.c: 192: break;
  3697  001F7A  D101               	goto	l3701
  3698  001F7C                     l3671:
  3699                           
  3700                           ;Pattern_PtrnGenerator.c: 196: SingleFocusBreathe(PixelPattern, &PatternStepCounter, &Cy
      +                          cleCounter, 85, 0x0F, ListeningFocus);
  3701  001F7C  0E20               	movlw	low _PixelPattern
  3702  001F7E  0100               	movlb	0	; () banked
  3703  001F80  6F68               	movwf	SingleFocusBreathe@ptrnPointer& (0+255),b
  3704  001F82  0E01               	movlw	high _PixelPattern
  3705  001F84  0100               	movlb	0	; () banked
  3706  001F86  6F69               	movwf	(SingleFocusBreathe@ptrnPointer+1)& (0+255),b
  3707  001F88  0EF2               	movlw	low _PatternStepCounter
  3708  001F8A  0100               	movlb	0	; () banked
  3709  001F8C  6F6A               	movwf	SingleFocusBreathe@ptrnStepCounter& (0+255),b
  3710  001F8E  0E00               	movlw	high _PatternStepCounter
  3711  001F90  0100               	movlb	0	; () banked
  3712  001F92  6F6B               	movwf	(SingleFocusBreathe@ptrnStepCounter+1)& (0+255),b
  3713  001F94  0EE9               	movlw	low _CycleCounter
  3714  001F96  0100               	movlb	0	; () banked
  3715  001F98  6F6C               	movwf	SingleFocusBreathe@cycleCounter& (0+255),b
  3716  001F9A  0E00               	movlw	high _CycleCounter
  3717  001F9C  0100               	movlb	0	; () banked
  3718  001F9E  6F6D               	movwf	(SingleFocusBreathe@cycleCounter+1)& (0+255),b
  3719  001FA0  0E55               	movlw	85
  3720  001FA2  0100               	movlb	0	; () banked
  3721  001FA4  6F6E               	movwf	SingleFocusBreathe@base_hue& (0+255),b
  3722  001FA6  0E0F               	movlw	15
  3723  001FA8  0100               	movlb	0	; () banked
  3724  001FAA  6F6F               	movwf	SingleFocusBreathe@base_sat& (0+255),b
  3725  001FAC  C0D9  F070         	movff	_ListeningFocus,SingleFocusBreathe@focus
  3726  001FB0  C0DA  F071         	movff	_ListeningFocus+1,SingleFocusBreathe@focus+1
  3727  001FB4  EC7D  F00D         	call	_SingleFocusBreathe	;wreg free
  3728                           
  3729                           ;Pattern_PtrnGenerator.c: 197: break;
  3730  001FB8  D0E2               	goto	l3701
  3731  001FBA                     l3673:
  3732                           
  3733                           ;Pattern_PtrnGenerator.c: 202: MirroredQuadrants(PixelPattern, &PatternStepCounter, &Cyc
      +                          leCounter, 135, 0x04, 0);
  3734  001FBA  0E20               	movlw	low _PixelPattern
  3735  001FBC  0100               	movlb	0	; () banked
  3736  001FBE  6F68               	movwf	MirroredQuadrants@ptrnPointer& (0+255),b
  3737  001FC0  0E01               	movlw	high _PixelPattern
  3738  001FC2  0100               	movlb	0	; () banked
  3739  001FC4  6F69               	movwf	(MirroredQuadrants@ptrnPointer+1)& (0+255),b
  3740  001FC6  0EF2               	movlw	low _PatternStepCounter
  3741  001FC8  0100               	movlb	0	; () banked
  3742  001FCA  6F6A               	movwf	MirroredQuadrants@ptrnStepCounter& (0+255),b
  3743  001FCC  0E00               	movlw	high _PatternStepCounter
  3744  001FCE  0100               	movlb	0	; () banked
  3745  001FD0  6F6B               	movwf	(MirroredQuadrants@ptrnStepCounter+1)& (0+255),b
  3746  001FD2  0EE9               	movlw	low _CycleCounter
  3747  001FD4  0100               	movlb	0	; () banked
  3748  001FD6  6F6C               	movwf	MirroredQuadrants@cycleCounter& (0+255),b
  3749  001FD8  0E00               	movlw	high _CycleCounter
  3750  001FDA  0100               	movlb	0	; () banked
  3751  001FDC  6F6D               	movwf	(MirroredQuadrants@cycleCounter+1)& (0+255),b
  3752  001FDE  0E87               	movlw	135
  3753  001FE0  0100               	movlb	0	; () banked
  3754  001FE2  6F6E               	movwf	MirroredQuadrants@base_hue& (0+255),b
  3755  001FE4  0E04               	movlw	4
  3756  001FE6  0100               	movlb	0	; () banked
  3757  001FE8  6F6F               	movwf	MirroredQuadrants@base_sat& (0+255),b
  3758  001FEA  0E00               	movlw	0
  3759  001FEC  0100               	movlb	0	; () banked
  3760  001FEE  6F70               	movwf	MirroredQuadrants@15794& (0+255),b
  3761  001FF0  0E00               	movlw	0
  3762  001FF2  0100               	movlb	0	; () banked
  3763  001FF4  6F71               	movwf	(MirroredQuadrants@15794+1)& (0+255),b
  3764  001FF6  ECC0  F009         	call	_MirroredQuadrants	;wreg free
  3765                           
  3766                           ;Pattern_PtrnGenerator.c: 203: break;
  3767  001FFA  D0C1               	goto	l3701
  3768  001FFC                     l3675:
  3769                           
  3770                           ;Pattern_PtrnGenerator.c: 206: DoubleFadedLoop(PixelPattern, &PatternStepCounter, &Cycle
      +                          Counter, (255*PatternStepCounter/76), 0x0F, 0);
  3771  001FFC  0100               	movlb	0	; () banked
  3772  001FFE  51F2               	movf	_PatternStepCounter& (0+255),w,b
  3773  002000  0DFF               	mullw	255
  3774  002002  CFF3 F060          	movff	prodl,___awdiv@dividend
  3775  002006  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  3776  00200A  0E00               	movlw	0
  3777  00200C  0100               	movlb	0	; () banked
  3778  00200E  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  3779  002010  0E4C               	movlw	76
  3780  002012  6F62               	movwf	___awdiv@divisor& (0+255),b
  3781  002014  ECBC  F017         	call	___awdiv	;wreg free
  3782  002018  0100               	movlb	0	; () banked
  3783  00201A  5160               	movf	?___awdiv& (0+255),w,b
  3784  00201C  0100               	movlb	0	; () banked
  3785  00201E  6F92               	movwf	_UpdatePattern$1986& (0+255),b
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;Pattern_PtrnGenerator.c: 206: DoubleFadedLoop(PixelPattern, &PatternStepCounter, &Cycle
      +                          Counter, (255*PatternStepCounter/76), 0x0F, 0);
  3789  002020  0E20               	movlw	low _PixelPattern
  3790  002022  0100               	movlb	0	; () banked
  3791  002024  6F68               	movwf	DoubleFadedLoop@ptrnPointer& (0+255),b
  3792  002026  0E01               	movlw	high _PixelPattern
  3793  002028  0100               	movlb	0	; () banked
  3794  00202A  6F69               	movwf	(DoubleFadedLoop@ptrnPointer+1)& (0+255),b
  3795  00202C  0EF2               	movlw	low _PatternStepCounter
  3796  00202E  0100               	movlb	0	; () banked
  3797  002030  6F6A               	movwf	DoubleFadedLoop@ptrnStepCounter& (0+255),b
  3798  002032  0E00               	movlw	high _PatternStepCounter
  3799  002034  0100               	movlb	0	; () banked
  3800  002036  6F6B               	movwf	(DoubleFadedLoop@ptrnStepCounter+1)& (0+255),b
  3801  002038  0EE9               	movlw	low _CycleCounter
  3802  00203A  0100               	movlb	0	; () banked
  3803  00203C  6F6C               	movwf	DoubleFadedLoop@cycleCounter& (0+255),b
  3804  00203E  0E00               	movlw	high _CycleCounter
  3805  002040  0100               	movlb	0	; () banked
  3806  002042  6F6D               	movwf	(DoubleFadedLoop@cycleCounter+1)& (0+255),b
  3807  002044  C092  F06E         	movff	_UpdatePattern$1986,DoubleFadedLoop@base_hue
  3808  002048  0E0F               	movlw	15
  3809  00204A  0100               	movlb	0	; () banked
  3810  00204C  6F6F               	movwf	DoubleFadedLoop@base_sat& (0+255),b
  3811  00204E  0E00               	movlw	0
  3812  002050  0100               	movlb	0	; () banked
  3813  002052  6F70               	movwf	DoubleFadedLoop@15751& (0+255),b
  3814  002054  0E00               	movlw	0
  3815  002056  0100               	movlb	0	; () banked
  3816  002058  6F71               	movwf	(DoubleFadedLoop@15751+1)& (0+255),b
  3817  00205A  ECDF  F004         	call	_DoubleFadedLoop	;wreg free
  3818                           
  3819                           ;Pattern_PtrnGenerator.c: 207: break;
  3820  00205E  D08F               	goto	l3701
  3821  002060                     l3679:
  3822                           
  3823                           ;Pattern_PtrnGenerator.c: 210: BrokenPinwheel(PixelPattern, &PatternStepCounter, &CycleC
      +                          ounter, (255*PatternStepCounter/(76/3)), 0x0F, 0);
  3824  002060  0100               	movlb	0	; () banked
  3825  002062  51F2               	movf	_PatternStepCounter& (0+255),w,b
  3826  002064  0DFF               	mullw	255
  3827  002066  CFF3 F060          	movff	prodl,___awdiv@dividend
  3828  00206A  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  3829  00206E  0E00               	movlw	0
  3830  002070  0100               	movlb	0	; () banked
  3831  002072  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  3832  002074  0E19               	movlw	25
  3833  002076  6F62               	movwf	___awdiv@divisor& (0+255),b
  3834  002078  ECBC  F017         	call	___awdiv	;wreg free
  3835  00207C  0100               	movlb	0	; () banked
  3836  00207E  5160               	movf	?___awdiv& (0+255),w,b
  3837  002080  0100               	movlb	0	; () banked
  3838  002082  6F93               	movwf	_UpdatePattern$1987& (0+255),b
  3839                           
  3840                           ; BSR set to: 0
  3841                           ;Pattern_PtrnGenerator.c: 210: BrokenPinwheel(PixelPattern, &PatternStepCounter, &CycleC
      +                          ounter, (255*PatternStepCounter/(76/3)), 0x0F, 0);
  3842  002084  0E20               	movlw	low _PixelPattern
  3843  002086  0100               	movlb	0	; () banked
  3844  002088  6F68               	movwf	BrokenPinwheel@ptrnPointer& (0+255),b
  3845  00208A  0E01               	movlw	high _PixelPattern
  3846  00208C  0100               	movlb	0	; () banked
  3847  00208E  6F69               	movwf	(BrokenPinwheel@ptrnPointer+1)& (0+255),b
  3848  002090  0EF2               	movlw	low _PatternStepCounter
  3849  002092  0100               	movlb	0	; () banked
  3850  002094  6F6A               	movwf	BrokenPinwheel@ptrnStepCounter& (0+255),b
  3851  002096  0E00               	movlw	high _PatternStepCounter
  3852  002098  0100               	movlb	0	; () banked
  3853  00209A  6F6B               	movwf	(BrokenPinwheel@ptrnStepCounter+1)& (0+255),b
  3854  00209C  0EE9               	movlw	low _CycleCounter
  3855  00209E  0100               	movlb	0	; () banked
  3856  0020A0  6F6C               	movwf	BrokenPinwheel@cycleCounter& (0+255),b
  3857  0020A2  0E00               	movlw	high _CycleCounter
  3858  0020A4  0100               	movlb	0	; () banked
  3859  0020A6  6F6D               	movwf	(BrokenPinwheel@cycleCounter+1)& (0+255),b
  3860  0020A8  C093  F06E         	movff	_UpdatePattern$1987,BrokenPinwheel@base_hue
  3861  0020AC  0E0F               	movlw	15
  3862  0020AE  0100               	movlb	0	; () banked
  3863  0020B0  6F6F               	movwf	BrokenPinwheel@base_sat& (0+255),b
  3864  0020B2  0E00               	movlw	0
  3865  0020B4  0100               	movlb	0	; () banked
  3866  0020B6  6F70               	movwf	BrokenPinwheel@15776& (0+255),b
  3867  0020B8  0E00               	movlw	0
  3868  0020BA  0100               	movlb	0	; () banked
  3869  0020BC  6F71               	movwf	(BrokenPinwheel@15776+1)& (0+255),b
  3870  0020BE  ECDC  F001         	call	_BrokenPinwheel	;wreg free
  3871                           
  3872                           ;Pattern_PtrnGenerator.c: 211: break;
  3873  0020C2  D05D               	goto	l3701
  3874  0020C4                     l3683:
  3875                           
  3876                           ;Pattern_PtrnGenerator.c: 223: HueTest(PixelPattern, &PatternStepCounter, &CycleCounter,
      +                           0, 0x0F, 0);
  3877  0020C4  0E20               	movlw	low _PixelPattern
  3878  0020C6  0100               	movlb	0	; () banked
  3879  0020C8  6F73               	movwf	HueTest@ptrnPointer& (0+255),b
  3880  0020CA  0E01               	movlw	high _PixelPattern
  3881  0020CC  0100               	movlb	0	; () banked
  3882  0020CE  6F74               	movwf	(HueTest@ptrnPointer+1)& (0+255),b
  3883  0020D0  0EF2               	movlw	low _PatternStepCounter
  3884  0020D2  0100               	movlb	0	; () banked
  3885  0020D4  6F75               	movwf	HueTest@ptrnStepCounter& (0+255),b
  3886  0020D6  0E00               	movlw	high _PatternStepCounter
  3887  0020D8  0100               	movlb	0	; () banked
  3888  0020DA  6F76               	movwf	(HueTest@ptrnStepCounter+1)& (0+255),b
  3889  0020DC  0EE9               	movlw	low _CycleCounter
  3890  0020DE  0100               	movlb	0	; () banked
  3891  0020E0  6F77               	movwf	HueTest@cycleCounter& (0+255),b
  3892  0020E2  0E00               	movlw	high _CycleCounter
  3893  0020E4  0100               	movlb	0	; () banked
  3894  0020E6  6F78               	movwf	(HueTest@cycleCounter+1)& (0+255),b
  3895  0020E8  0E00               	movlw	0
  3896  0020EA  0100               	movlb	0	; () banked
  3897  0020EC  6F79               	movwf	HueTest@base_hue& (0+255),b
  3898  0020EE  0E0F               	movlw	15
  3899  0020F0  0100               	movlb	0	; () banked
  3900  0020F2  6F7A               	movwf	HueTest@base_sat& (0+255),b
  3901  0020F4  0E00               	movlw	0
  3902  0020F6  0100               	movlb	0	; () banked
  3903  0020F8  6F7B               	movwf	HueTest@15710& (0+255),b
  3904  0020FA  0E00               	movlw	0
  3905  0020FC  0100               	movlb	0	; () banked
  3906  0020FE  6F7C               	movwf	(HueTest@15710+1)& (0+255),b
  3907  002100  EC13  F015         	call	_HueTest	;wreg free
  3908                           
  3909                           ;Pattern_PtrnGenerator.c: 224: break;
  3910  002104  D03C               	goto	l3701
  3911  002106                     l3685:
  3912                           
  3913                           ;Pattern_PtrnGenerator.c: 228: for(uint8_t i=0;i<76;i++){
  3914  002106  0E00               	movlw	0
  3915  002108  0100               	movlb	0	; () banked
  3916  00210A  6F95               	movwf	UpdatePattern@i_1361& (0+255),b
  3917  00210C                     l3687:
  3918                           
  3919                           ; BSR set to: 0
  3920  00210C  0E4B               	movlw	75
  3921  00210E  0100               	movlb	0	; () banked
  3922  002110  6595               	cpfsgt	UpdatePattern@i_1361& (0+255),b
  3923  002112  D001               	goto	l3691
  3924  002114  D034               	goto	l3701
  3925  002116                     l3691:
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;Pattern_PtrnGenerator.c: 229: PixelPattern[i] = 0x0;
  3929  002116  0100               	movlb	0	; () banked
  3930  002118  5195               	movf	UpdatePattern@i_1361& (0+255),w,b
  3931  00211A  0D02               	mullw	2
  3932  00211C  0E20               	movlw	low _PixelPattern
  3933  00211E  24F3               	addwf	prodl,w,c
  3934  002120  6ED9               	movwf	fsr2l,c
  3935  002122  0E01               	movlw	high _PixelPattern
  3936  002124  20F4               	addwfc	prodh,w,c
  3937  002126  6EDA               	movwf	fsr2h,c
  3938  002128  0E00               	movlw	0
  3939  00212A  6EDE               	movwf	postinc2,c
  3940  00212C  0E00               	movlw	0
  3941  00212E  6EDD               	movwf	postdec2,c
  3942                           
  3943                           ; BSR set to: 0
  3944  002130  0100               	movlb	0	; () banked
  3945  002132  2B95               	incf	UpdatePattern@i_1361& (0+255),f,b
  3946  002134  D7EB               	goto	l3687
  3947  002136                     l3699:
  3948  002136  C0DB  FFD9         	movff	_PatternID,fsr2l
  3949  00213A  C0DC  FFDA         	movff	_PatternID+1,fsr2h
  3950  00213E  50DF               	movf	indf2,w,c
  3951                           
  3952                           ; Switch size 1, requested type "space"
  3953                           ; Number of cases is 10, Range of values is 0 to 255
  3954                           ; switch strategies available:
  3955                           ; Name         Instructions Cycles
  3956                           ; simple_byte           31    16 (average)
  3957                           ;	Chosen strategy is simple_byte
  3958  002140  0A00               	xorlw	0	; case 0
  3959  002142  B4D8               	btfsc	status,2,c
  3960  002144  D681               	goto	l3651
  3961  002146  0A01               	xorlw	1	; case 1
  3962  002148  B4D8               	btfsc	status,2,c
  3963  00214A  D696               	goto	l3663
  3964  00214C  0A03               	xorlw	3	; case 2
  3965  00214E  B4D8               	btfsc	status,2,c
  3966  002150  D6B4               	goto	l3665
  3967  002152  0A01               	xorlw	1	; case 3
  3968  002154  B4D8               	btfsc	status,2,c
  3969  002156  D712               	goto	l3671
  3970  002158  0A07               	xorlw	7	; case 4
  3971  00215A  B4D8               	btfsc	status,2,c
  3972  00215C  D6CF               	goto	l3667
  3973  00215E  0A01               	xorlw	1	; case 5
  3974  002160  B4D8               	btfsc	status,2,c
  3975  002162  D6ED               	goto	l3669
  3976  002164  0A03               	xorlw	3	; case 6
  3977  002166  B4D8               	btfsc	status,2,c
  3978  002168  D728               	goto	l3673
  3979  00216A  0A01               	xorlw	1	; case 7
  3980  00216C  B4D8               	btfsc	status,2,c
  3981  00216E  D746               	goto	l3675
  3982  002170  0A0F               	xorlw	15	; case 8
  3983  002172  B4D8               	btfsc	status,2,c
  3984  002174  D775               	goto	l3679
  3985  002176  0AF7               	xorlw	247	; case 255
  3986  002178  B4D8               	btfsc	status,2,c
  3987  00217A  D7A4               	goto	l3683
  3988  00217C  D7C4               	goto	l3685
  3989  00217E                     l3701:
  3990                           
  3991                           ;Pattern_PtrnGenerator.c: 234: return PixelPattern;
  3992  00217E  0E20               	movlw	low _PixelPattern
  3993  002180  0100               	movlb	0	; () banked
  3994  002182  6F90               	movwf	?_UpdatePattern& (0+255),b
  3995  002184  0E01               	movlw	high _PixelPattern
  3996  002186  0100               	movlb	0	; () banked
  3997  002188  6F91               	movwf	(?_UpdatePattern+1)& (0+255),b
  3998  00218A  0012               	return	
  3999  00218C                     __end_of_UpdatePattern:
  4000                           	opt stack 0
  4001                           tosu	equ	0xFFF
  4002                           tosh	equ	0xFFE
  4003                           tosl	equ	0xFFD
  4004                           pclath	equ	0xFFA
  4005                           tblptru	equ	0xFF8
  4006                           tblptrh	equ	0xFF7
  4007                           tblptrl	equ	0xFF6
  4008                           tablat	equ	0xFF5
  4009                           prodh	equ	0xFF4
  4010                           prodl	equ	0xFF3
  4011                           postinc0	equ	0xFEE
  4012                           wreg	equ	0xFE8
  4013                           postdec1	equ	0xFE5
  4014                           fsr1h	equ	0xFE2
  4015                           fsr1l	equ	0xFE1
  4016                           indf2	equ	0xFDF
  4017                           postinc2	equ	0xFDE
  4018                           postdec2	equ	0xFDD
  4019                           fsr2h	equ	0xFDA
  4020                           fsr2l	equ	0xFD9
  4021                           status	equ	0xFD8
  4022                           
  4023 ;; *************** function _SingleFocusBreathe *****************
  4024 ;; Defined at:
  4025 ;;		line 253 in file "Pattern_PtrnFunctions.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  4028 ;;		 -> PixelPattern(152), 
  4029 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  4030 ;;		 -> PatternStepCounter(1), 
  4031 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  4032 ;;		 -> CycleCounter(4), 
  4033 ;;  base_hue        1   14[BANK0 ] unsigned char 
  4034 ;;  base_sat        1   15[BANK0 ] unsigned char 
  4035 ;;  focus           2   16[BANK0 ] PTR void 
  4036 ;;		 -> NULL(0), PatternConfigs(4), 
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;  i               1   42[BANK0 ] unsigned char 
  4039 ;;  head            1   41[BANK0 ] unsigned char 
  4040 ;;  x               1   40[BANK0 ] unsigned char 
  4041 ;;  pulseWidth      1   39[BANK0 ] unsigned char 
  4042 ;;  val             1   38[BANK0 ] unsigned char 
  4043 ;;  fade_thresh     1   37[BANK0 ] unsigned char 
  4044 ;; Return value:  Size  Location     Type
  4045 ;;                  1    wreg      void 
  4046 ;; Registers used:
  4047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4048 ;; Tracked objects:
  4049 ;;		On entry : 0/0
  4050 ;;		On exit  : 0/0
  4051 ;;		Unchanged: 0/0
  4052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4053 ;;      Params:         0      10       0       0
  4054 ;;      Locals:         0      14       0       0
  4055 ;;      Temps:          0      11       0       0
  4056 ;;      Totals:         0      35       0       0
  4057 ;;Total ram usage:       35 bytes
  4058 ;; Hardware stack levels used:    1
  4059 ;; Hardware stack levels required when called:    8
  4060 ;; This function calls:
  4061 ;;		___awdiv
  4062 ;;		___awmod
  4063 ;; This function is called by:
  4064 ;;		_UpdatePattern
  4065 ;; This function uses a non-reentrant model
  4066 ;;
  4067                           
  4068                           	psect	text16
  4069  001AFA                     __ptext16:
  4070                           	opt stack 0
  4071  001AFA                     _SingleFocusBreathe:
  4072                           	opt stack 18
  4073                           
  4074                           ;Pattern_PtrnFunctions.c: 254: static bool rising = 1;
  4075                           ;Pattern_PtrnFunctions.c: 255: uint8_t fade_thresh = 8;
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;incstack = 0
  4079  001AFA  0E08               	movlw	8
  4080  001AFC  0100               	movlb	0	; () banked
  4081  001AFE  6F85               	movwf	SingleFocusBreathe@fade_thresh& (0+255),b
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;Pattern_PtrnFunctions.c: 256: uint8_t val, x, pulseWidth;
  4085                           ;Pattern_PtrnFunctions.c: 257: uint8_t head = *(uint8_t*)focus;
  4086  001B00  C070  FFD9         	movff	SingleFocusBreathe@focus,fsr2l
  4087  001B04  C071  FFDA         	movff	SingleFocusBreathe@focus+1,fsr2h
  4088  001B08  50DF               	movf	indf2,w,c
  4089  001B0A  0100               	movlb	0	; () banked
  4090  001B0C  6F89               	movwf	SingleFocusBreathe@head& (0+255),b
  4091                           
  4092                           ; BSR set to: 0
  4093                           ;Pattern_PtrnFunctions.c: 259: pulseWidth = 8;
  4094  001B0E  0E08               	movlw	8
  4095  001B10  0100               	movlb	0	; () banked
  4096  001B12  6F87               	movwf	SingleFocusBreathe@pulseWidth& (0+255),b
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;Pattern_PtrnFunctions.c: 260: for(uint8_t i=0;i<76;i++){
  4100  001B14  0E00               	movlw	0
  4101  001B16  0100               	movlb	0	; () banked
  4102  001B18  6F8A               	movwf	SingleFocusBreathe@i& (0+255),b
  4103  001B1A                     l3537:
  4104                           
  4105                           ; BSR set to: 0
  4106  001B1A  0E4B               	movlw	75
  4107  001B1C  0100               	movlb	0	; () banked
  4108  001B1E  658A               	cpfsgt	SingleFocusBreathe@i& (0+255),b
  4109  001B20  D001               	goto	l3541
  4110  001B22  D152               	goto	l3569
  4111  001B24                     l3541:
  4112                           
  4113                           ; BSR set to: 0
  4114                           ;Pattern_PtrnFunctions.c: 262: x = ((((76+i-head)%76) < ((76+head-i)%76)) ? ((76+i-head)
      +                          %76) : ((76+head-i)%76));
  4115  001B24  0100               	movlb	0	; () banked
  4116  001B26  5189               	movf	SingleFocusBreathe@head& (0+255),w,b
  4117  001B28  0100               	movlb	0	; () banked
  4118  001B2A  6F72               	movwf	??_SingleFocusBreathe& (0+255),b
  4119  001B2C  6B73               	clrf	(??_SingleFocusBreathe+1)& (0+255),b
  4120  001B2E  0100               	movlb	0	; () banked
  4121  001B30  1F72               	comf	??_SingleFocusBreathe& (0+255),f,b
  4122  001B32  1F73               	comf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4123  001B34  4B72               	infsnz	??_SingleFocusBreathe& (0+255),f,b
  4124  001B36  2B73               	incf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4125  001B38  0100               	movlb	0	; () banked
  4126  001B3A  518A               	movf	SingleFocusBreathe@i& (0+255),w,b
  4127  001B3C  0100               	movlb	0	; () banked
  4128  001B3E  6F74               	movwf	(??_SingleFocusBreathe+2)& (0+255),b
  4129  001B40  6B75               	clrf	(??_SingleFocusBreathe+3)& (0+255),b
  4130  001B42  0100               	movlb	0	; () banked
  4131  001B44  5172               	movf	??_SingleFocusBreathe& (0+255),w,b
  4132  001B46  0100               	movlb	0	; () banked
  4133  001B48  2774               	addwf	(??_SingleFocusBreathe+2)& (0+255),f,b
  4134  001B4A  0100               	movlb	0	; () banked
  4135  001B4C  5173               	movf	(??_SingleFocusBreathe+1)& (0+255),w,b
  4136  001B4E  0100               	movlb	0	; () banked
  4137  001B50  2375               	addwfc	(??_SingleFocusBreathe+3)& (0+255),f,b
  4138  001B52  0E4C               	movlw	76
  4139  001B54  0100               	movlb	0	; () banked
  4140  001B56  2574               	addwf	(??_SingleFocusBreathe+2)& (0+255),w,b
  4141  001B58  0100               	movlb	0	; () banked
  4142  001B5A  6F60               	movwf	___awmod@dividend& (0+255),b
  4143  001B5C  0E00               	movlw	0
  4144  001B5E  0100               	movlb	0	; () banked
  4145  001B60  2175               	addwfc	(??_SingleFocusBreathe+3)& (0+255),w,b
  4146  001B62  0100               	movlb	0	; () banked
  4147  001B64  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4148  001B66  0E00               	movlw	0
  4149  001B68  0100               	movlb	0	; () banked
  4150  001B6A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4151  001B6C  0E4C               	movlw	76
  4152  001B6E  6F62               	movwf	___awmod@divisor& (0+255),b
  4153  001B70  EC20  F019         	call	___awmod	;wreg free
  4154  001B74  C060  F076         	movff	?___awmod,??_SingleFocusBreathe+4
  4155  001B78  C061  F077         	movff	?___awmod+1,??_SingleFocusBreathe+5
  4156  001B7C  0100               	movlb	0	; () banked
  4157  001B7E  518A               	movf	SingleFocusBreathe@i& (0+255),w,b
  4158  001B80  0100               	movlb	0	; () banked
  4159  001B82  6F78               	movwf	(??_SingleFocusBreathe+6)& (0+255),b
  4160  001B84  6B79               	clrf	(??_SingleFocusBreathe+7)& (0+255),b
  4161  001B86  0100               	movlb	0	; () banked
  4162  001B88  1F78               	comf	(??_SingleFocusBreathe+6)& (0+255),f,b
  4163  001B8A  1F79               	comf	(??_SingleFocusBreathe+7)& (0+255),f,b
  4164  001B8C  4B78               	infsnz	(??_SingleFocusBreathe+6)& (0+255),f,b
  4165  001B8E  2B79               	incf	(??_SingleFocusBreathe+7)& (0+255),f,b
  4166  001B90  0100               	movlb	0	; () banked
  4167  001B92  5189               	movf	SingleFocusBreathe@head& (0+255),w,b
  4168  001B94  0100               	movlb	0	; () banked
  4169  001B96  6F7A               	movwf	(??_SingleFocusBreathe+8)& (0+255),b
  4170  001B98  6B7B               	clrf	(??_SingleFocusBreathe+9)& (0+255),b
  4171  001B9A  0100               	movlb	0	; () banked
  4172  001B9C  5178               	movf	(??_SingleFocusBreathe+6)& (0+255),w,b
  4173  001B9E  0100               	movlb	0	; () banked
  4174  001BA0  277A               	addwf	(??_SingleFocusBreathe+8)& (0+255),f,b
  4175  001BA2  0100               	movlb	0	; () banked
  4176  001BA4  5179               	movf	(??_SingleFocusBreathe+7)& (0+255),w,b
  4177  001BA6  0100               	movlb	0	; () banked
  4178  001BA8  237B               	addwfc	(??_SingleFocusBreathe+9)& (0+255),f,b
  4179  001BAA  0E4C               	movlw	76
  4180  001BAC  0100               	movlb	0	; () banked
  4181  001BAE  257A               	addwf	(??_SingleFocusBreathe+8)& (0+255),w,b
  4182  001BB0  0100               	movlb	0	; () banked
  4183  001BB2  6F60               	movwf	___awmod@dividend& (0+255),b
  4184  001BB4  0E00               	movlw	0
  4185  001BB6  0100               	movlb	0	; () banked
  4186  001BB8  217B               	addwfc	(??_SingleFocusBreathe+9)& (0+255),w,b
  4187  001BBA  0100               	movlb	0	; () banked
  4188  001BBC  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4189  001BBE  0E00               	movlw	0
  4190  001BC0  0100               	movlb	0	; () banked
  4191  001BC2  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4192  001BC4  0E4C               	movlw	76
  4193  001BC6  6F62               	movwf	___awmod@divisor& (0+255),b
  4194  001BC8  EC20  F019         	call	___awmod	;wreg free
  4195  001BCC  0100               	movlb	0	; () banked
  4196  001BCE  5160               	movf	?___awmod& (0+255),w,b
  4197  001BD0  0100               	movlb	0	; () banked
  4198  001BD2  5D76               	subwf	(??_SingleFocusBreathe+4)& (0+255),w,b
  4199  001BD4  0100               	movlb	0	; () banked
  4200  001BD6  5177               	movf	(??_SingleFocusBreathe+5)& (0+255),w,b
  4201  001BD8  0A80               	xorlw	128
  4202  001BDA  0100               	movlb	0	; () banked
  4203  001BDC  6F7C               	movwf	(??_SingleFocusBreathe+10)& (0+255),b
  4204  001BDE  0100               	movlb	0	; () banked
  4205  001BE0  5161               	movf	(?___awmod+1)& (0+255),w,b
  4206  001BE2  0A80               	xorlw	128
  4207  001BE4  0100               	movlb	0	; () banked
  4208  001BE6  597C               	subwfb	(??_SingleFocusBreathe+10)& (0+255),w,b
  4209  001BE8  A0D8               	btfss	status,0,c
  4210  001BEA  D029               	goto	l3545
  4211                           
  4212                           ; BSR set to: 0
  4213  001BEC  0100               	movlb	0	; () banked
  4214  001BEE  518A               	movf	SingleFocusBreathe@i& (0+255),w,b
  4215  001BF0  0100               	movlb	0	; () banked
  4216  001BF2  6F72               	movwf	??_SingleFocusBreathe& (0+255),b
  4217  001BF4  6B73               	clrf	(??_SingleFocusBreathe+1)& (0+255),b
  4218  001BF6  0100               	movlb	0	; () banked
  4219  001BF8  1F72               	comf	??_SingleFocusBreathe& (0+255),f,b
  4220  001BFA  1F73               	comf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4221  001BFC  4B72               	infsnz	??_SingleFocusBreathe& (0+255),f,b
  4222  001BFE  2B73               	incf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4223  001C00  0100               	movlb	0	; () banked
  4224  001C02  5189               	movf	SingleFocusBreathe@head& (0+255),w,b
  4225  001C04  0100               	movlb	0	; () banked
  4226  001C06  6F74               	movwf	(??_SingleFocusBreathe+2)& (0+255),b
  4227  001C08  6B75               	clrf	(??_SingleFocusBreathe+3)& (0+255),b
  4228  001C0A  0100               	movlb	0	; () banked
  4229  001C0C  5172               	movf	??_SingleFocusBreathe& (0+255),w,b
  4230  001C0E  0100               	movlb	0	; () banked
  4231  001C10  2774               	addwf	(??_SingleFocusBreathe+2)& (0+255),f,b
  4232  001C12  0100               	movlb	0	; () banked
  4233  001C14  5173               	movf	(??_SingleFocusBreathe+1)& (0+255),w,b
  4234  001C16  0100               	movlb	0	; () banked
  4235  001C18  2375               	addwfc	(??_SingleFocusBreathe+3)& (0+255),f,b
  4236  001C1A  0E4C               	movlw	76
  4237  001C1C  0100               	movlb	0	; () banked
  4238  001C1E  2574               	addwf	(??_SingleFocusBreathe+2)& (0+255),w,b
  4239  001C20  0100               	movlb	0	; () banked
  4240  001C22  6F60               	movwf	___awmod@dividend& (0+255),b
  4241  001C24  0E00               	movlw	0
  4242  001C26  0100               	movlb	0	; () banked
  4243  001C28  2175               	addwfc	(??_SingleFocusBreathe+3)& (0+255),w,b
  4244  001C2A  0100               	movlb	0	; () banked
  4245  001C2C  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4246  001C2E  0E00               	movlw	0
  4247  001C30  0100               	movlb	0	; () banked
  4248  001C32  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4249  001C34  0E4C               	movlw	76
  4250  001C36  6F62               	movwf	___awmod@divisor& (0+255),b
  4251  001C38  EC20  F019         	call	___awmod	;wreg free
  4252  001C3C  D028               	goto	L7
  4253  001C3E                     l3545:
  4254  001C3E  0100               	movlb	0	; () banked
  4255  001C40  5189               	movf	SingleFocusBreathe@head& (0+255),w,b
  4256  001C42  0100               	movlb	0	; () banked
  4257  001C44  6F72               	movwf	??_SingleFocusBreathe& (0+255),b
  4258  001C46  6B73               	clrf	(??_SingleFocusBreathe+1)& (0+255),b
  4259  001C48  0100               	movlb	0	; () banked
  4260  001C4A  1F72               	comf	??_SingleFocusBreathe& (0+255),f,b
  4261  001C4C  1F73               	comf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4262  001C4E  4B72               	infsnz	??_SingleFocusBreathe& (0+255),f,b
  4263  001C50  2B73               	incf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4264  001C52  0100               	movlb	0	; () banked
  4265  001C54  518A               	movf	SingleFocusBreathe@i& (0+255),w,b
  4266  001C56  0100               	movlb	0	; () banked
  4267  001C58  6F74               	movwf	(??_SingleFocusBreathe+2)& (0+255),b
  4268  001C5A  6B75               	clrf	(??_SingleFocusBreathe+3)& (0+255),b
  4269  001C5C  0100               	movlb	0	; () banked
  4270  001C5E  5172               	movf	??_SingleFocusBreathe& (0+255),w,b
  4271  001C60  0100               	movlb	0	; () banked
  4272  001C62  2774               	addwf	(??_SingleFocusBreathe+2)& (0+255),f,b
  4273  001C64  0100               	movlb	0	; () banked
  4274  001C66  5173               	movf	(??_SingleFocusBreathe+1)& (0+255),w,b
  4275  001C68  0100               	movlb	0	; () banked
  4276  001C6A  2375               	addwfc	(??_SingleFocusBreathe+3)& (0+255),f,b
  4277  001C6C  0E4C               	movlw	76
  4278  001C6E  0100               	movlb	0	; () banked
  4279  001C70  2574               	addwf	(??_SingleFocusBreathe+2)& (0+255),w,b
  4280  001C72  0100               	movlb	0	; () banked
  4281  001C74  6F60               	movwf	___awmod@dividend& (0+255),b
  4282  001C76  0E00               	movlw	0
  4283  001C78  0100               	movlb	0	; () banked
  4284  001C7A  2175               	addwfc	(??_SingleFocusBreathe+3)& (0+255),w,b
  4285  001C7C  0100               	movlb	0	; () banked
  4286  001C7E  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4287  001C80  0E00               	movlw	0
  4288  001C82  0100               	movlb	0	; () banked
  4289  001C84  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4290  001C86  0E4C               	movlw	76
  4291  001C88  6F62               	movwf	___awmod@divisor& (0+255),b
  4292  001C8A  EC20  F019         	call	___awmod	;wreg free
  4293  001C8E                     L7:
  4294  001C8E  C060  F07D         	movff	?___awmod,_SingleFocusBreathe$1327
  4295  001C92  C061  F07E         	movff	?___awmod+1,_SingleFocusBreathe$1327+1
  4296  001C96  C07D  F088         	movff	_SingleFocusBreathe$1327,SingleFocusBreathe@x
  4297                           
  4298                           ;Pattern_PtrnFunctions.c: 263: val = (x < fade_thresh ? (*ptrnStepCounter>>4) : (x < pul
      +                          seWidth ? (*ptrnStepCounter-*ptrnStepCounter*x/pulseWidth)>>4 : 0x00));
  4299  001C9A  0100               	movlb	0	; () banked
  4300  001C9C  5185               	movf	SingleFocusBreathe@fade_thresh& (0+255),w,b
  4301  001C9E  0100               	movlb	0	; () banked
  4302  001CA0  5D88               	subwf	SingleFocusBreathe@x& (0+255),w,b
  4303  001CA2  A0D8               	btfss	status,0,c
  4304  001CA4  D04B               	goto	l3559
  4305                           
  4306                           ; BSR set to: 0
  4307  001CA6  0100               	movlb	0	; () banked
  4308  001CA8  5187               	movf	SingleFocusBreathe@pulseWidth& (0+255),w,b
  4309  001CAA  0100               	movlb	0	; () banked
  4310  001CAC  5D88               	subwf	SingleFocusBreathe@x& (0+255),w,b
  4311  001CAE  A0D8               	btfss	status,0,c
  4312  001CB0  D006               	goto	l3555
  4313                           
  4314                           ; BSR set to: 0
  4315  001CB2  0E00               	movlw	0
  4316  001CB4  0100               	movlb	0	; () banked
  4317  001CB6  6F82               	movwf	(_SingleFocusBreathe$1329+1)& (0+255),b
  4318  001CB8  0E00               	movlw	0
  4319  001CBA  6F81               	movwf	_SingleFocusBreathe$1329& (0+255),b
  4320  001CBC  D03A               	goto	l3557
  4321  001CBE                     l3555:
  4322                           
  4323                           ; BSR set to: 0
  4324  001CBE  C06A  FFD9         	movff	SingleFocusBreathe@ptrnStepCounter,fsr2l
  4325  001CC2  C06B  FFDA         	movff	SingleFocusBreathe@ptrnStepCounter+1,fsr2h
  4326  001CC6  50DF               	movf	indf2,w,c
  4327  001CC8  0100               	movlb	0	; () banked
  4328  001CCA  6F72               	movwf	??_SingleFocusBreathe& (0+255),b
  4329  001CCC  0100               	movlb	0	; () banked
  4330  001CCE  5172               	movf	??_SingleFocusBreathe& (0+255),w,b
  4331  001CD0  0100               	movlb	0	; () banked
  4332  001CD2  0388               	mulwf	SingleFocusBreathe@x& (0+255),b
  4333  001CD4  CFF3 F060          	movff	prodl,___awdiv@dividend
  4334  001CD8  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  4335  001CDC  C087  F062         	movff	SingleFocusBreathe@pulseWidth,___awdiv@divisor
  4336  001CE0  0100               	movlb	0	; () banked
  4337  001CE2  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  4338  001CE4  ECBC  F017         	call	___awdiv	;wreg free
  4339  001CE8  0100               	movlb	0	; () banked
  4340  001CEA  1F60               	comf	?___awdiv& (0+255),f,b
  4341  001CEC  0100               	movlb	0	; () banked
  4342  001CEE  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  4343  001CF0  0100               	movlb	0	; () banked
  4344  001CF2  4B60               	infsnz	?___awdiv& (0+255),f,b
  4345  001CF4  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  4346  001CF6  C06A  FFD9         	movff	SingleFocusBreathe@ptrnStepCounter,fsr2l
  4347  001CFA  C06B  FFDA         	movff	SingleFocusBreathe@ptrnStepCounter+1,fsr2h
  4348  001CFE  50DF               	movf	indf2,w,c
  4349  001D00  0100               	movlb	0	; () banked
  4350  001D02  6F73               	movwf	(??_SingleFocusBreathe+1)& (0+255),b
  4351  001D04  6B74               	clrf	(??_SingleFocusBreathe+2)& (0+255),b
  4352  001D06  0100               	movlb	0	; () banked
  4353  001D08  5160               	movf	?___awdiv& (0+255),w,b
  4354  001D0A  0100               	movlb	0	; () banked
  4355  001D0C  2773               	addwf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4356  001D0E  0100               	movlb	0	; () banked
  4357  001D10  5161               	movf	(?___awdiv+1)& (0+255),w,b
  4358  001D12  0100               	movlb	0	; () banked
  4359  001D14  2374               	addwfc	(??_SingleFocusBreathe+2)& (0+255),f,b
  4360  001D16  0E04               	movlw	4
  4361  001D18  0100               	movlb	0	; () banked
  4362  001D1A  6F75               	movwf	(??_SingleFocusBreathe+3)& (0+255),b
  4363  001D1C                     u2435:
  4364  001D1C  0100               	movlb	0	; () banked
  4365  001D1E  3574               	rlcf	(??_SingleFocusBreathe+2)& (0+255),w,b
  4366  001D20  3374               	rrcf	(??_SingleFocusBreathe+2)& (0+255),f,b
  4367  001D22  3373               	rrcf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4368  001D24  0100               	movlb	0	; () banked
  4369  001D26  2F75               	decfsz	(??_SingleFocusBreathe+3)& (0+255),f,b
  4370  001D28  D7F9               	goto	u2435
  4371  001D2A  C073  F081         	movff	??_SingleFocusBreathe+1,_SingleFocusBreathe$1329
  4372  001D2E  C074  F082         	movff	??_SingleFocusBreathe+2,_SingleFocusBreathe$1329+1
  4373  001D32                     l3557:
  4374                           
  4375                           ; BSR set to: 0
  4376  001D32  C081  F07F         	movff	_SingleFocusBreathe$1329,_SingleFocusBreathe$1328
  4377  001D36  C082  F080         	movff	_SingleFocusBreathe$1329+1,_SingleFocusBreathe$1328+1
  4378  001D3A  D010               	goto	l3561
  4379  001D3C                     l3559:
  4380                           
  4381                           ; BSR set to: 0
  4382  001D3C  C06A  FFD9         	movff	SingleFocusBreathe@ptrnStepCounter,fsr2l
  4383  001D40  C06B  FFDA         	movff	SingleFocusBreathe@ptrnStepCounter+1,fsr2h
  4384  001D44  50DF               	movf	indf2,w,c
  4385  001D46  0100               	movlb	0	; () banked
  4386  001D48  6F72               	movwf	??_SingleFocusBreathe& (0+255),b
  4387  001D4A  0100               	movlb	0	; () banked
  4388  001D4C  3B72               	swapf	??_SingleFocusBreathe& (0+255),f,b
  4389  001D4E  0E0F               	movlw	15
  4390  001D50  1772               	andwf	??_SingleFocusBreathe& (0+255),f,b
  4391  001D52  0100               	movlb	0	; () banked
  4392  001D54  5172               	movf	??_SingleFocusBreathe& (0+255),w,b
  4393  001D56  0100               	movlb	0	; () banked
  4394  001D58  6F7F               	movwf	_SingleFocusBreathe$1328& (0+255),b
  4395  001D5A  6B80               	clrf	(_SingleFocusBreathe$1328+1)& (0+255),b
  4396  001D5C                     l3561:
  4397                           
  4398                           ; BSR set to: 0
  4399  001D5C  C07F  F086         	movff	_SingleFocusBreathe$1328,SingleFocusBreathe@val
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;Pattern_PtrnFunctions.c: 264: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  4403  001D60  0100               	movlb	0	; () banked
  4404  001D62  516F               	movf	SingleFocusBreathe@base_sat& (0+255),w,b
  4405  001D64  0100               	movlb	0	; () banked
  4406  001D66  6F72               	movwf	??_SingleFocusBreathe& (0+255),b
  4407  001D68  6B73               	clrf	(??_SingleFocusBreathe+1)& (0+255),b
  4408  001D6A  0100               	movlb	0	; () banked
  4409  001D6C  3B72               	swapf	??_SingleFocusBreathe& (0+255),f,b
  4410  001D6E  3B73               	swapf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4411  001D70  0EF0               	movlw	240
  4412  001D72  1773               	andwf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4413  001D74  5172               	movf	??_SingleFocusBreathe& (0+255),w,b
  4414  001D76  0B0F               	andlw	15
  4415  001D78  1373               	iorwf	(??_SingleFocusBreathe+1)& (0+255),f,b
  4416  001D7A  0EF0               	movlw	240
  4417  001D7C  1772               	andwf	??_SingleFocusBreathe& (0+255),f,b
  4418  001D7E  0100               	movlb	0	; () banked
  4419  001D80  516E               	movf	SingleFocusBreathe@base_hue& (0+255),w,b
  4420  001D82  0100               	movlb	0	; () banked
  4421  001D84  6F75               	movwf	(??_SingleFocusBreathe+3)& (0+255),b
  4422  001D86  6B74               	clrf	(??_SingleFocusBreathe+2)& (0+255),b
  4423  001D88  0100               	movlb	0	; () banked
  4424  001D8A  5172               	movf	??_SingleFocusBreathe& (0+255),w,b
  4425  001D8C  0100               	movlb	0	; () banked
  4426  001D8E  1374               	iorwf	(??_SingleFocusBreathe+2)& (0+255),f,b
  4427  001D90  0100               	movlb	0	; () banked
  4428  001D92  5173               	movf	(??_SingleFocusBreathe+1)& (0+255),w,b
  4429  001D94  0100               	movlb	0	; () banked
  4430  001D96  1375               	iorwf	(??_SingleFocusBreathe+3)& (0+255),f,b
  4431  001D98  0100               	movlb	0	; () banked
  4432  001D9A  5186               	movf	SingleFocusBreathe@val& (0+255),w,b
  4433  001D9C  0100               	movlb	0	; () banked
  4434  001D9E  1374               	iorwf	(??_SingleFocusBreathe+2)& (0+255),f,b
  4435  001DA0  0E00               	movlw	0
  4436  001DA2  1375               	iorwf	(??_SingleFocusBreathe+3)& (0+255),f,b
  4437  001DA4  0100               	movlb	0	; () banked
  4438  001DA6  518A               	movf	SingleFocusBreathe@i& (0+255),w,b
  4439  001DA8  0D02               	mullw	2
  4440  001DAA  50F3               	movf	prodl,w,c
  4441  001DAC  0100               	movlb	0	; () banked
  4442  001DAE  2568               	addwf	SingleFocusBreathe@ptrnPointer& (0+255),w,b
  4443  001DB0  6ED9               	movwf	fsr2l,c
  4444  001DB2  50F4               	movf	prodh,w,c
  4445  001DB4  0100               	movlb	0	; () banked
  4446  001DB6  2169               	addwfc	(SingleFocusBreathe@ptrnPointer+1)& (0+255),w,b
  4447  001DB8  6EDA               	movwf	fsr2h,c
  4448  001DBA  C074  FFDE         	movff	??_SingleFocusBreathe+2,postinc2
  4449  001DBE  C075  FFDD         	movff	??_SingleFocusBreathe+3,postdec2
  4450                           
  4451                           ; BSR set to: 0
  4452  001DC2  0100               	movlb	0	; () banked
  4453  001DC4  2B8A               	incf	SingleFocusBreathe@i& (0+255),f,b
  4454  001DC6  D6A9               	goto	l3537
  4455  001DC8                     l3569:
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;Pattern_PtrnFunctions.c: 265: }
  4459                           ;Pattern_PtrnFunctions.c: 266: if(*ptrnStepCounter >= 216){
  4460  001DC8  C06A  FFD9         	movff	SingleFocusBreathe@ptrnStepCounter,fsr2l
  4461  001DCC  C06B  FFDA         	movff	SingleFocusBreathe@ptrnStepCounter+1,fsr2h
  4462  001DD0  0ED7               	movlw	215
  4463  001DD2  64DF               	cpfsgt	indf2,c
  4464  001DD4  D002               	goto	l3573
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;Pattern_PtrnFunctions.c: 267: rising = 0;
  4468  001DD6  0E00               	movlw	0
  4469  001DD8  D008               	goto	L8
  4470  001DDA                     l3573:
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;Pattern_PtrnFunctions.c: 269: else if(*ptrnStepCounter <= 80){
  4474  001DDA  C06A  FFD9         	movff	SingleFocusBreathe@ptrnStepCounter,fsr2l
  4475  001DDE  C06B  FFDA         	movff	SingleFocusBreathe@ptrnStepCounter+1,fsr2h
  4476  001DE2  0E51               	movlw	81
  4477  001DE4  60DF               	cpfslt	indf2,c
  4478  001DE6  D003               	goto	l807
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;Pattern_PtrnFunctions.c: 270: rising = 1;
  4482  001DE8  0E01               	movlw	1
  4483  001DEA                     L8:
  4484  001DEA  0100               	movlb	0	; () banked
  4485  001DEC  6FF5               	movwf	SingleFocusBreathe@rising& (0+255),b
  4486  001DEE                     l807:
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;Pattern_PtrnFunctions.c: 271: }
  4490                           ;Pattern_PtrnFunctions.c: 272: *ptrnStepCounter = (rising ? *ptrnStepCounter+40 : *ptrnS
      +                          tepCounter-40);
  4491  001DEE  0100               	movlb	0	; () banked
  4492  001DF0  51F5               	movf	SingleFocusBreathe@rising& (0+255),w,b
  4493  001DF2  0100               	movlb	0	; () banked
  4494  001DF4  A4D8               	btfss	status,2,c
  4495  001DF6  D010               	goto	l3579
  4496                           
  4497                           ; BSR set to: 0
  4498  001DF8  C06A  FFD9         	movff	SingleFocusBreathe@ptrnStepCounter,fsr2l
  4499  001DFC  C06B  FFDA         	movff	SingleFocusBreathe@ptrnStepCounter+1,fsr2h
  4500  001E00  50DF               	movf	indf2,w,c
  4501  001E02  0100               	movlb	0	; () banked
  4502  001E04  6F72               	movwf	??_SingleFocusBreathe& (0+255),b
  4503  001E06  0ED8               	movlw	216
  4504  001E08  0100               	movlb	0	; () banked
  4505  001E0A  2572               	addwf	??_SingleFocusBreathe& (0+255),w,b
  4506  001E0C  0100               	movlb	0	; () banked
  4507  001E0E  6F83               	movwf	_SingleFocusBreathe$1330& (0+255),b
  4508  001E10  0100               	movlb	0	; () banked
  4509  001E12  6B84               	clrf	(_SingleFocusBreathe$1330+1)& (0+255),b
  4510  001E14  0EFF               	movlw	255
  4511  001E16  D00F               	goto	L9
  4512  001E18                     l3579:
  4513                           
  4514                           ; BSR set to: 0
  4515  001E18  C06A  FFD9         	movff	SingleFocusBreathe@ptrnStepCounter,fsr2l
  4516  001E1C  C06B  FFDA         	movff	SingleFocusBreathe@ptrnStepCounter+1,fsr2h
  4517  001E20  50DF               	movf	indf2,w,c
  4518  001E22  0100               	movlb	0	; () banked
  4519  001E24  6F72               	movwf	??_SingleFocusBreathe& (0+255),b
  4520  001E26  0E28               	movlw	40
  4521  001E28  0100               	movlb	0	; () banked
  4522  001E2A  2572               	addwf	??_SingleFocusBreathe& (0+255),w,b
  4523  001E2C  0100               	movlb	0	; () banked
  4524  001E2E  6F83               	movwf	_SingleFocusBreathe$1330& (0+255),b
  4525  001E30  0100               	movlb	0	; () banked
  4526  001E32  6B84               	clrf	(_SingleFocusBreathe$1330+1)& (0+255),b
  4527  001E34  0E00               	movlw	0
  4528  001E36                     L9:
  4529  001E36  2384               	addwfc	(_SingleFocusBreathe$1330+1)& (0+255),f,b
  4530                           
  4531                           ; BSR set to: 0
  4532                           
  4533                           ; BSR set to: 0
  4534  001E38  C06A  FFD9         	movff	SingleFocusBreathe@ptrnStepCounter,fsr2l
  4535  001E3C  C06B  FFDA         	movff	SingleFocusBreathe@ptrnStepCounter+1,fsr2h
  4536  001E40  C083  FFDF         	movff	_SingleFocusBreathe$1330,indf2
  4537                           
  4538                           ; BSR set to: 0
  4539  001E44  0012               	return		;funcret
  4540  001E46                     __end_of_SingleFocusBreathe:
  4541                           	opt stack 0
  4542                           tosu	equ	0xFFF
  4543                           tosh	equ	0xFFE
  4544                           tosl	equ	0xFFD
  4545                           pclath	equ	0xFFA
  4546                           tblptru	equ	0xFF8
  4547                           tblptrh	equ	0xFF7
  4548                           tblptrl	equ	0xFF6
  4549                           tablat	equ	0xFF5
  4550                           prodh	equ	0xFF4
  4551                           prodl	equ	0xFF3
  4552                           postinc0	equ	0xFEE
  4553                           wreg	equ	0xFE8
  4554                           postdec1	equ	0xFE5
  4555                           fsr1h	equ	0xFE2
  4556                           fsr1l	equ	0xFE1
  4557                           indf2	equ	0xFDF
  4558                           postinc2	equ	0xFDE
  4559                           postdec2	equ	0xFDD
  4560                           fsr2h	equ	0xFDA
  4561                           fsr2l	equ	0xFD9
  4562                           status	equ	0xFD8
  4563                           
  4564 ;; *************** function _SingleFadedLoop *****************
  4565 ;; Defined at:
  4566 ;;		line 156 in file "Pattern_PtrnFunctions.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  4569 ;;		 -> PixelPattern(152), 
  4570 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  4571 ;;		 -> PatternStepCounter(1), 
  4572 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  4573 ;;		 -> CycleCounter(4), 
  4574 ;;  base_hue        1   14[BANK0 ] unsigned char 
  4575 ;;  base_sat        1   15[BANK0 ] unsigned char 
  4576 ;;  15741           2   16[BANK0 ] PTR void 
  4577 ;;		 -> NULL(0), 
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;  i               1   35[BANK0 ] unsigned char 
  4580 ;;  x               1   34[BANK0 ] unsigned char 
  4581 ;;  val             1   33[BANK0 ] unsigned char 
  4582 ;; Return value:  Size  Location     Type
  4583 ;;                  1    wreg      void 
  4584 ;; Registers used:
  4585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4586 ;; Tracked objects:
  4587 ;;		On entry : 0/0
  4588 ;;		On exit  : 0/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4591 ;;      Params:         0      10       0       0
  4592 ;;      Locals:         0       7       0       0
  4593 ;;      Temps:          0      11       0       0
  4594 ;;      Totals:         0      28       0       0
  4595 ;;Total ram usage:       28 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; Hardware stack levels required when called:    8
  4598 ;; This function calls:
  4599 ;;		___awdiv
  4600 ;;		___awmod
  4601 ;; This function is called by:
  4602 ;;		_UpdatePattern
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           	psect	text17
  4607  00218C                     __ptext17:
  4608                           	opt stack 0
  4609  00218C                     _SingleFadedLoop:
  4610                           	opt stack 18
  4611                           
  4612                           ;Pattern_PtrnFunctions.c: 157: uint8_t val, x;
  4613                           ;Pattern_PtrnFunctions.c: 159: for(uint8_t i=0;i<76;i++){
  4614                           
  4615                           ; BSR set to: 0
  4616                           ;incstack = 0
  4617  00218C  0E00               	movlw	0
  4618  00218E  0100               	movlb	0	; () banked
  4619  002190  6F83               	movwf	SingleFadedLoop@i& (0+255),b
  4620  002192                     l3359:
  4621                           
  4622                           ; BSR set to: 0
  4623  002192  0E4B               	movlw	75
  4624  002194  0100               	movlb	0	; () banked
  4625  002196  6583               	cpfsgt	SingleFadedLoop@i& (0+255),b
  4626  002198  D001               	goto	l3363
  4627  00219A  D126               	goto	l3385
  4628  00219C                     l3363:
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;Pattern_PtrnFunctions.c: 161: x = ((((76+i-*ptrnStepCounter)%76) < ((76+*ptrnStepCounte
      +                          r-i)%76)) ? ((76+i-*ptrnStepCounter)%76) : ((76+*ptrnStepCounter-i)%76));
  4632  00219C  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4633  0021A0  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4634  0021A4  50DF               	movf	indf2,w,c
  4635  0021A6  0100               	movlb	0	; () banked
  4636  0021A8  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4637  0021AA  6B73               	clrf	(??_SingleFadedLoop+1)& (0+255),b
  4638  0021AC  0100               	movlb	0	; () banked
  4639  0021AE  1F72               	comf	??_SingleFadedLoop& (0+255),f,b
  4640  0021B0  1F73               	comf	(??_SingleFadedLoop+1)& (0+255),f,b
  4641  0021B2  4B72               	infsnz	??_SingleFadedLoop& (0+255),f,b
  4642  0021B4  2B73               	incf	(??_SingleFadedLoop+1)& (0+255),f,b
  4643  0021B6  0100               	movlb	0	; () banked
  4644  0021B8  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4645  0021BA  0100               	movlb	0	; () banked
  4646  0021BC  6F74               	movwf	(??_SingleFadedLoop+2)& (0+255),b
  4647  0021BE  6B75               	clrf	(??_SingleFadedLoop+3)& (0+255),b
  4648  0021C0  0100               	movlb	0	; () banked
  4649  0021C2  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4650  0021C4  0100               	movlb	0	; () banked
  4651  0021C6  2774               	addwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4652  0021C8  0100               	movlb	0	; () banked
  4653  0021CA  5173               	movf	(??_SingleFadedLoop+1)& (0+255),w,b
  4654  0021CC  0100               	movlb	0	; () banked
  4655  0021CE  2375               	addwfc	(??_SingleFadedLoop+3)& (0+255),f,b
  4656  0021D0  0E4C               	movlw	76
  4657  0021D2  0100               	movlb	0	; () banked
  4658  0021D4  2574               	addwf	(??_SingleFadedLoop+2)& (0+255),w,b
  4659  0021D6  0100               	movlb	0	; () banked
  4660  0021D8  6F60               	movwf	___awmod@dividend& (0+255),b
  4661  0021DA  0E00               	movlw	0
  4662  0021DC  0100               	movlb	0	; () banked
  4663  0021DE  2175               	addwfc	(??_SingleFadedLoop+3)& (0+255),w,b
  4664  0021E0  0100               	movlb	0	; () banked
  4665  0021E2  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4666  0021E4  0E00               	movlw	0
  4667  0021E6  0100               	movlb	0	; () banked
  4668  0021E8  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4669  0021EA  0E4C               	movlw	76
  4670  0021EC  6F62               	movwf	___awmod@divisor& (0+255),b
  4671  0021EE  EC20  F019         	call	___awmod	;wreg free
  4672  0021F2  C060  F076         	movff	?___awmod,??_SingleFadedLoop+4
  4673  0021F6  C061  F077         	movff	?___awmod+1,??_SingleFadedLoop+5
  4674  0021FA  0100               	movlb	0	; () banked
  4675  0021FC  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4676  0021FE  0100               	movlb	0	; () banked
  4677  002200  6F78               	movwf	(??_SingleFadedLoop+6)& (0+255),b
  4678  002202  6B79               	clrf	(??_SingleFadedLoop+7)& (0+255),b
  4679  002204  0100               	movlb	0	; () banked
  4680  002206  1F78               	comf	(??_SingleFadedLoop+6)& (0+255),f,b
  4681  002208  1F79               	comf	(??_SingleFadedLoop+7)& (0+255),f,b
  4682  00220A  4B78               	infsnz	(??_SingleFadedLoop+6)& (0+255),f,b
  4683  00220C  2B79               	incf	(??_SingleFadedLoop+7)& (0+255),f,b
  4684  00220E  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4685  002212  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4686  002216  50DF               	movf	indf2,w,c
  4687  002218  0100               	movlb	0	; () banked
  4688  00221A  6F7A               	movwf	(??_SingleFadedLoop+8)& (0+255),b
  4689  00221C  6B7B               	clrf	(??_SingleFadedLoop+9)& (0+255),b
  4690  00221E  0100               	movlb	0	; () banked
  4691  002220  5178               	movf	(??_SingleFadedLoop+6)& (0+255),w,b
  4692  002222  0100               	movlb	0	; () banked
  4693  002224  277A               	addwf	(??_SingleFadedLoop+8)& (0+255),f,b
  4694  002226  0100               	movlb	0	; () banked
  4695  002228  5179               	movf	(??_SingleFadedLoop+7)& (0+255),w,b
  4696  00222A  0100               	movlb	0	; () banked
  4697  00222C  237B               	addwfc	(??_SingleFadedLoop+9)& (0+255),f,b
  4698  00222E  0E4C               	movlw	76
  4699  002230  0100               	movlb	0	; () banked
  4700  002232  257A               	addwf	(??_SingleFadedLoop+8)& (0+255),w,b
  4701  002234  0100               	movlb	0	; () banked
  4702  002236  6F60               	movwf	___awmod@dividend& (0+255),b
  4703  002238  0E00               	movlw	0
  4704  00223A  0100               	movlb	0	; () banked
  4705  00223C  217B               	addwfc	(??_SingleFadedLoop+9)& (0+255),w,b
  4706  00223E  0100               	movlb	0	; () banked
  4707  002240  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4708  002242  0E00               	movlw	0
  4709  002244  0100               	movlb	0	; () banked
  4710  002246  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4711  002248  0E4C               	movlw	76
  4712  00224A  6F62               	movwf	___awmod@divisor& (0+255),b
  4713  00224C  EC20  F019         	call	___awmod	;wreg free
  4714  002250  0100               	movlb	0	; () banked
  4715  002252  5160               	movf	?___awmod& (0+255),w,b
  4716  002254  0100               	movlb	0	; () banked
  4717  002256  5D76               	subwf	(??_SingleFadedLoop+4)& (0+255),w,b
  4718  002258  0100               	movlb	0	; () banked
  4719  00225A  5177               	movf	(??_SingleFadedLoop+5)& (0+255),w,b
  4720  00225C  0A80               	xorlw	128
  4721  00225E  0100               	movlb	0	; () banked
  4722  002260  6F7C               	movwf	(??_SingleFadedLoop+10)& (0+255),b
  4723  002262  0100               	movlb	0	; () banked
  4724  002264  5161               	movf	(?___awmod+1)& (0+255),w,b
  4725  002266  0A80               	xorlw	128
  4726  002268  0100               	movlb	0	; () banked
  4727  00226A  597C               	subwfb	(??_SingleFadedLoop+10)& (0+255),w,b
  4728  00226C  A0D8               	btfss	status,0,c
  4729  00226E  D02C               	goto	l3367
  4730                           
  4731                           ; BSR set to: 0
  4732  002270  0100               	movlb	0	; () banked
  4733  002272  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4734  002274  0100               	movlb	0	; () banked
  4735  002276  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4736  002278  6B73               	clrf	(??_SingleFadedLoop+1)& (0+255),b
  4737  00227A  0100               	movlb	0	; () banked
  4738  00227C  1F72               	comf	??_SingleFadedLoop& (0+255),f,b
  4739  00227E  1F73               	comf	(??_SingleFadedLoop+1)& (0+255),f,b
  4740  002280  4B72               	infsnz	??_SingleFadedLoop& (0+255),f,b
  4741  002282  2B73               	incf	(??_SingleFadedLoop+1)& (0+255),f,b
  4742  002284  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4743  002288  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4744  00228C  50DF               	movf	indf2,w,c
  4745  00228E  0100               	movlb	0	; () banked
  4746  002290  6F74               	movwf	(??_SingleFadedLoop+2)& (0+255),b
  4747  002292  6B75               	clrf	(??_SingleFadedLoop+3)& (0+255),b
  4748  002294  0100               	movlb	0	; () banked
  4749  002296  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4750  002298  0100               	movlb	0	; () banked
  4751  00229A  2774               	addwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4752  00229C  0100               	movlb	0	; () banked
  4753  00229E  5173               	movf	(??_SingleFadedLoop+1)& (0+255),w,b
  4754  0022A0  0100               	movlb	0	; () banked
  4755  0022A2  2375               	addwfc	(??_SingleFadedLoop+3)& (0+255),f,b
  4756  0022A4  0E4C               	movlw	76
  4757  0022A6  0100               	movlb	0	; () banked
  4758  0022A8  2574               	addwf	(??_SingleFadedLoop+2)& (0+255),w,b
  4759  0022AA  0100               	movlb	0	; () banked
  4760  0022AC  6F60               	movwf	___awmod@dividend& (0+255),b
  4761  0022AE  0E00               	movlw	0
  4762  0022B0  0100               	movlb	0	; () banked
  4763  0022B2  2175               	addwfc	(??_SingleFadedLoop+3)& (0+255),w,b
  4764  0022B4  0100               	movlb	0	; () banked
  4765  0022B6  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4766  0022B8  0E00               	movlw	0
  4767  0022BA  0100               	movlb	0	; () banked
  4768  0022BC  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4769  0022BE  0E4C               	movlw	76
  4770  0022C0  6F62               	movwf	___awmod@divisor& (0+255),b
  4771  0022C2  EC20  F019         	call	___awmod	;wreg free
  4772  0022C6  D02B               	goto	L10
  4773  0022C8                     l3367:
  4774  0022C8  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4775  0022CC  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4776  0022D0  50DF               	movf	indf2,w,c
  4777  0022D2  0100               	movlb	0	; () banked
  4778  0022D4  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4779  0022D6  6B73               	clrf	(??_SingleFadedLoop+1)& (0+255),b
  4780  0022D8  0100               	movlb	0	; () banked
  4781  0022DA  1F72               	comf	??_SingleFadedLoop& (0+255),f,b
  4782  0022DC  1F73               	comf	(??_SingleFadedLoop+1)& (0+255),f,b
  4783  0022DE  4B72               	infsnz	??_SingleFadedLoop& (0+255),f,b
  4784  0022E0  2B73               	incf	(??_SingleFadedLoop+1)& (0+255),f,b
  4785  0022E2  0100               	movlb	0	; () banked
  4786  0022E4  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4787  0022E6  0100               	movlb	0	; () banked
  4788  0022E8  6F74               	movwf	(??_SingleFadedLoop+2)& (0+255),b
  4789  0022EA  6B75               	clrf	(??_SingleFadedLoop+3)& (0+255),b
  4790  0022EC  0100               	movlb	0	; () banked
  4791  0022EE  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4792  0022F0  0100               	movlb	0	; () banked
  4793  0022F2  2774               	addwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4794  0022F4  0100               	movlb	0	; () banked
  4795  0022F6  5173               	movf	(??_SingleFadedLoop+1)& (0+255),w,b
  4796  0022F8  0100               	movlb	0	; () banked
  4797  0022FA  2375               	addwfc	(??_SingleFadedLoop+3)& (0+255),f,b
  4798  0022FC  0E4C               	movlw	76
  4799  0022FE  0100               	movlb	0	; () banked
  4800  002300  2574               	addwf	(??_SingleFadedLoop+2)& (0+255),w,b
  4801  002302  0100               	movlb	0	; () banked
  4802  002304  6F60               	movwf	___awmod@dividend& (0+255),b
  4803  002306  0E00               	movlw	0
  4804  002308  0100               	movlb	0	; () banked
  4805  00230A  2175               	addwfc	(??_SingleFadedLoop+3)& (0+255),w,b
  4806  00230C  0100               	movlb	0	; () banked
  4807  00230E  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4808  002310  0E00               	movlw	0
  4809  002312  0100               	movlb	0	; () banked
  4810  002314  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4811  002316  0E4C               	movlw	76
  4812  002318  6F62               	movwf	___awmod@divisor& (0+255),b
  4813  00231A  EC20  F019         	call	___awmod	;wreg free
  4814  00231E                     L10:
  4815  00231E  C060  F07D         	movff	?___awmod,_SingleFadedLoop$1245
  4816  002322  C061  F07E         	movff	?___awmod+1,_SingleFadedLoop$1245+1
  4817  002326  C07D  F082         	movff	_SingleFadedLoop$1245,SingleFadedLoop@x
  4818                           
  4819                           ;Pattern_PtrnFunctions.c: 162: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  4820  00232A  0E04               	movlw	4
  4821  00232C  0100               	movlb	0	; () banked
  4822  00232E  6582               	cpfsgt	SingleFadedLoop@x& (0+255),b
  4823  002330  D006               	goto	l3375
  4824                           
  4825                           ; BSR set to: 0
  4826  002332  0E00               	movlw	0
  4827  002334  0100               	movlb	0	; () banked
  4828  002336  6F80               	movwf	(_SingleFadedLoop$1246+1)& (0+255),b
  4829  002338  0E00               	movlw	0
  4830  00233A  6F7F               	movwf	_SingleFadedLoop$1246& (0+255),b
  4831  00233C  D01F               	goto	l3377
  4832  00233E                     l3375:
  4833                           
  4834                           ; BSR set to: 0
  4835  00233E  0100               	movlb	0	; () banked
  4836  002340  5182               	movf	SingleFadedLoop@x& (0+255),w,b
  4837  002342  0D0F               	mullw	15
  4838  002344  CFF3 F060          	movff	prodl,___awdiv@dividend
  4839  002348  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  4840  00234C  0E00               	movlw	0
  4841  00234E  0100               	movlb	0	; () banked
  4842  002350  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4843  002352  0E05               	movlw	5
  4844  002354  6F62               	movwf	___awdiv@divisor& (0+255),b
  4845  002356  ECBC  F017         	call	___awdiv	;wreg free
  4846  00235A  0100               	movlb	0	; () banked
  4847  00235C  1F60               	comf	?___awdiv& (0+255),f,b
  4848  00235E  0100               	movlb	0	; () banked
  4849  002360  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  4850  002362  0100               	movlb	0	; () banked
  4851  002364  4B60               	infsnz	?___awdiv& (0+255),f,b
  4852  002366  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  4853  002368  0E0F               	movlw	15
  4854  00236A  0100               	movlb	0	; () banked
  4855  00236C  2560               	addwf	?___awdiv& (0+255),w,b
  4856  00236E  0100               	movlb	0	; () banked
  4857  002370  6F7F               	movwf	_SingleFadedLoop$1246& (0+255),b
  4858  002372  0E00               	movlw	0
  4859  002374  0100               	movlb	0	; () banked
  4860  002376  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  4861  002378  0100               	movlb	0	; () banked
  4862  00237A  6F80               	movwf	(_SingleFadedLoop$1246+1)& (0+255),b
  4863  00237C                     l3377:
  4864                           
  4865                           ; BSR set to: 0
  4866  00237C  C07F  F081         	movff	_SingleFadedLoop$1246,SingleFadedLoop@val
  4867                           
  4868                           ; BSR set to: 0
  4869                           ;Pattern_PtrnFunctions.c: 164: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  4870  002380  0100               	movlb	0	; () banked
  4871  002382  516F               	movf	SingleFadedLoop@base_sat& (0+255),w,b
  4872  002384  0100               	movlb	0	; () banked
  4873  002386  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4874  002388  6B73               	clrf	(??_SingleFadedLoop+1)& (0+255),b
  4875  00238A  0100               	movlb	0	; () banked
  4876  00238C  3B72               	swapf	??_SingleFadedLoop& (0+255),f,b
  4877  00238E  3B73               	swapf	(??_SingleFadedLoop+1)& (0+255),f,b
  4878  002390  0EF0               	movlw	240
  4879  002392  1773               	andwf	(??_SingleFadedLoop+1)& (0+255),f,b
  4880  002394  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4881  002396  0B0F               	andlw	15
  4882  002398  1373               	iorwf	(??_SingleFadedLoop+1)& (0+255),f,b
  4883  00239A  0EF0               	movlw	240
  4884  00239C  1772               	andwf	??_SingleFadedLoop& (0+255),f,b
  4885  00239E  0100               	movlb	0	; () banked
  4886  0023A0  516E               	movf	SingleFadedLoop@base_hue& (0+255),w,b
  4887  0023A2  0100               	movlb	0	; () banked
  4888  0023A4  6F75               	movwf	(??_SingleFadedLoop+3)& (0+255),b
  4889  0023A6  6B74               	clrf	(??_SingleFadedLoop+2)& (0+255),b
  4890  0023A8  0100               	movlb	0	; () banked
  4891  0023AA  5172               	movf	??_SingleFadedLoop& (0+255),w,b
  4892  0023AC  0100               	movlb	0	; () banked
  4893  0023AE  1374               	iorwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4894  0023B0  0100               	movlb	0	; () banked
  4895  0023B2  5173               	movf	(??_SingleFadedLoop+1)& (0+255),w,b
  4896  0023B4  0100               	movlb	0	; () banked
  4897  0023B6  1375               	iorwf	(??_SingleFadedLoop+3)& (0+255),f,b
  4898  0023B8  0100               	movlb	0	; () banked
  4899  0023BA  5181               	movf	SingleFadedLoop@val& (0+255),w,b
  4900  0023BC  0100               	movlb	0	; () banked
  4901  0023BE  1374               	iorwf	(??_SingleFadedLoop+2)& (0+255),f,b
  4902  0023C0  0E00               	movlw	0
  4903  0023C2  1375               	iorwf	(??_SingleFadedLoop+3)& (0+255),f,b
  4904  0023C4  0100               	movlb	0	; () banked
  4905  0023C6  5183               	movf	SingleFadedLoop@i& (0+255),w,b
  4906  0023C8  0D02               	mullw	2
  4907  0023CA  50F3               	movf	prodl,w,c
  4908  0023CC  0100               	movlb	0	; () banked
  4909  0023CE  2568               	addwf	SingleFadedLoop@ptrnPointer& (0+255),w,b
  4910  0023D0  6ED9               	movwf	fsr2l,c
  4911  0023D2  50F4               	movf	prodh,w,c
  4912  0023D4  0100               	movlb	0	; () banked
  4913  0023D6  2169               	addwfc	(SingleFadedLoop@ptrnPointer+1)& (0+255),w,b
  4914  0023D8  6EDA               	movwf	fsr2h,c
  4915  0023DA  C074  FFDE         	movff	??_SingleFadedLoop+2,postinc2
  4916  0023DE  C075  FFDD         	movff	??_SingleFadedLoop+3,postdec2
  4917                           
  4918                           ; BSR set to: 0
  4919  0023E2  0100               	movlb	0	; () banked
  4920  0023E4  2B83               	incf	SingleFadedLoop@i& (0+255),f,b
  4921  0023E6  D6D5               	goto	l3359
  4922  0023E8                     l3385:
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;Pattern_PtrnFunctions.c: 165: }
  4926                           ;Pattern_PtrnFunctions.c: 167: *ptrnStepCounter = (*ptrnStepCounter+1)%76;
  4927  0023E8  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4928  0023EC  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4929  0023F0  50DF               	movf	indf2,w,c
  4930  0023F2  0100               	movlb	0	; () banked
  4931  0023F4  6F72               	movwf	??_SingleFadedLoop& (0+255),b
  4932  0023F6  0E01               	movlw	1
  4933  0023F8  0100               	movlb	0	; () banked
  4934  0023FA  2572               	addwf	??_SingleFadedLoop& (0+255),w,b
  4935  0023FC  0100               	movlb	0	; () banked
  4936  0023FE  6F60               	movwf	___awmod@dividend& (0+255),b
  4937  002400  0100               	movlb	0	; () banked
  4938  002402  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4939  002404  0E00               	movlw	0
  4940  002406  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  4941  002408  0E00               	movlw	0
  4942  00240A  0100               	movlb	0	; () banked
  4943  00240C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4944  00240E  0E4C               	movlw	76
  4945  002410  6F62               	movwf	___awmod@divisor& (0+255),b
  4946  002412  EC20  F019         	call	___awmod	;wreg free
  4947  002416  0100               	movlb	0	; () banked
  4948  002418  5160               	movf	?___awmod& (0+255),w,b
  4949  00241A  C06A  FFD9         	movff	SingleFadedLoop@ptrnStepCounter,fsr2l
  4950  00241E  C06B  FFDA         	movff	SingleFadedLoop@ptrnStepCounter+1,fsr2h
  4951  002422  6EDF               	movwf	indf2,c
  4952                           
  4953                           ; BSR set to: 0
  4954  002424  0012               	return		;funcret
  4955  002426                     __end_of_SingleFadedLoop:
  4956                           	opt stack 0
  4957                           tosu	equ	0xFFF
  4958                           tosh	equ	0xFFE
  4959                           tosl	equ	0xFFD
  4960                           pclath	equ	0xFFA
  4961                           tblptru	equ	0xFF8
  4962                           tblptrh	equ	0xFF7
  4963                           tblptrl	equ	0xFF6
  4964                           tablat	equ	0xFF5
  4965                           prodh	equ	0xFF4
  4966                           prodl	equ	0xFF3
  4967                           postinc0	equ	0xFEE
  4968                           wreg	equ	0xFE8
  4969                           postdec1	equ	0xFE5
  4970                           fsr1h	equ	0xFE2
  4971                           fsr1l	equ	0xFE1
  4972                           indf2	equ	0xFDF
  4973                           postinc2	equ	0xFDE
  4974                           postdec2	equ	0xFDD
  4975                           fsr2h	equ	0xFDA
  4976                           fsr2l	equ	0xFD9
  4977                           status	equ	0xFD8
  4978                           
  4979 ;; *************** function _MirroredQuadrants *****************
  4980 ;; Defined at:
  4981 ;;		line 223 in file "Pattern_PtrnFunctions.c"
  4982 ;; Parameters:    Size  Location     Type
  4983 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  4984 ;;		 -> PixelPattern(152), 
  4985 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  4986 ;;		 -> PatternStepCounter(1), 
  4987 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  4988 ;;		 -> CycleCounter(4), 
  4989 ;;  base_hue        1   14[BANK0 ] unsigned char 
  4990 ;;  base_sat        1   15[BANK0 ] unsigned char 
  4991 ;;  15794           2   16[BANK0 ] PTR void 
  4992 ;;		 -> NULL(0), 
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;  i               1   35[BANK0 ] unsigned char 
  4995 ;;  val             1   34[BANK0 ] unsigned char 
  4996 ;;  x               1   33[BANK0 ] unsigned char 
  4997 ;; Return value:  Size  Location     Type
  4998 ;;                  1    wreg      void 
  4999 ;; Registers used:
  5000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5001 ;; Tracked objects:
  5002 ;;		On entry : 0/0
  5003 ;;		On exit  : 0/0
  5004 ;;		Unchanged: 0/0
  5005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5006 ;;      Params:         0      10       0       0
  5007 ;;      Locals:         0       7       0       0
  5008 ;;      Temps:          0      11       0       0
  5009 ;;      Totals:         0      28       0       0
  5010 ;;Total ram usage:       28 bytes
  5011 ;; Hardware stack levels used:    1
  5012 ;; Hardware stack levels required when called:    8
  5013 ;; This function calls:
  5014 ;;		___awdiv
  5015 ;;		___awmod
  5016 ;; This function is called by:
  5017 ;;		_UpdatePattern
  5018 ;; This function uses a non-reentrant model
  5019 ;;
  5020                           
  5021                           	psect	text18
  5022  001380                     __ptext18:
  5023                           	opt stack 0
  5024  001380                     _MirroredQuadrants:
  5025                           	opt stack 18
  5026                           
  5027                           ;Pattern_PtrnFunctions.c: 224: uint8_t val, x;
  5028                           ;Pattern_PtrnFunctions.c: 226: for(uint8_t i=0;i<76/4;i++){
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;incstack = 0
  5032  001380  0E00               	movlw	0
  5033  001382  0100               	movlb	0	; () banked
  5034  001384  6F83               	movwf	MirroredQuadrants@i& (0+255),b
  5035  001386                     l3495:
  5036                           
  5037                           ; BSR set to: 0
  5038  001386  0E12               	movlw	18
  5039  001388  0100               	movlb	0	; () banked
  5040  00138A  6583               	cpfsgt	MirroredQuadrants@i& (0+255),b
  5041  00138C  D001               	goto	l3499
  5042  00138E  D1EF               	goto	l3527
  5043  001390                     l3499:
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;Pattern_PtrnFunctions.c: 227: x = ((((76+i-*ptrnStepCounter)%76) < ((76+*ptrnStepCounte
      +                          r-i)%76)) ? ((76+i-*ptrnStepCounter)%76) : ((76+*ptrnStepCounter-i)%76));
  5047  001390  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  5048  001394  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  5049  001398  50DF               	movf	indf2,w,c
  5050  00139A  0100               	movlb	0	; () banked
  5051  00139C  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5052  00139E  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5053  0013A0  0100               	movlb	0	; () banked
  5054  0013A2  1F72               	comf	??_MirroredQuadrants& (0+255),f,b
  5055  0013A4  1F73               	comf	(??_MirroredQuadrants+1)& (0+255),f,b
  5056  0013A6  4B72               	infsnz	??_MirroredQuadrants& (0+255),f,b
  5057  0013A8  2B73               	incf	(??_MirroredQuadrants+1)& (0+255),f,b
  5058  0013AA  0100               	movlb	0	; () banked
  5059  0013AC  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5060  0013AE  0100               	movlb	0	; () banked
  5061  0013B0  6F74               	movwf	(??_MirroredQuadrants+2)& (0+255),b
  5062  0013B2  6B75               	clrf	(??_MirroredQuadrants+3)& (0+255),b
  5063  0013B4  0100               	movlb	0	; () banked
  5064  0013B6  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5065  0013B8  0100               	movlb	0	; () banked
  5066  0013BA  2774               	addwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5067  0013BC  0100               	movlb	0	; () banked
  5068  0013BE  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5069  0013C0  0100               	movlb	0	; () banked
  5070  0013C2  2375               	addwfc	(??_MirroredQuadrants+3)& (0+255),f,b
  5071  0013C4  0E4C               	movlw	76
  5072  0013C6  0100               	movlb	0	; () banked
  5073  0013C8  2574               	addwf	(??_MirroredQuadrants+2)& (0+255),w,b
  5074  0013CA  0100               	movlb	0	; () banked
  5075  0013CC  6F60               	movwf	___awmod@dividend& (0+255),b
  5076  0013CE  0E00               	movlw	0
  5077  0013D0  0100               	movlb	0	; () banked
  5078  0013D2  2175               	addwfc	(??_MirroredQuadrants+3)& (0+255),w,b
  5079  0013D4  0100               	movlb	0	; () banked
  5080  0013D6  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5081  0013D8  0E00               	movlw	0
  5082  0013DA  0100               	movlb	0	; () banked
  5083  0013DC  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5084  0013DE  0E4C               	movlw	76
  5085  0013E0  6F62               	movwf	___awmod@divisor& (0+255),b
  5086  0013E2  EC20  F019         	call	___awmod	;wreg free
  5087  0013E6  C060  F076         	movff	?___awmod,??_MirroredQuadrants+4
  5088  0013EA  C061  F077         	movff	?___awmod+1,??_MirroredQuadrants+5
  5089  0013EE  0100               	movlb	0	; () banked
  5090  0013F0  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5091  0013F2  0100               	movlb	0	; () banked
  5092  0013F4  6F78               	movwf	(??_MirroredQuadrants+6)& (0+255),b
  5093  0013F6  6B79               	clrf	(??_MirroredQuadrants+7)& (0+255),b
  5094  0013F8  0100               	movlb	0	; () banked
  5095  0013FA  1F78               	comf	(??_MirroredQuadrants+6)& (0+255),f,b
  5096  0013FC  1F79               	comf	(??_MirroredQuadrants+7)& (0+255),f,b
  5097  0013FE  4B78               	infsnz	(??_MirroredQuadrants+6)& (0+255),f,b
  5098  001400  2B79               	incf	(??_MirroredQuadrants+7)& (0+255),f,b
  5099  001402  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  5100  001406  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  5101  00140A  50DF               	movf	indf2,w,c
  5102  00140C  0100               	movlb	0	; () banked
  5103  00140E  6F7A               	movwf	(??_MirroredQuadrants+8)& (0+255),b
  5104  001410  6B7B               	clrf	(??_MirroredQuadrants+9)& (0+255),b
  5105  001412  0100               	movlb	0	; () banked
  5106  001414  5178               	movf	(??_MirroredQuadrants+6)& (0+255),w,b
  5107  001416  0100               	movlb	0	; () banked
  5108  001418  277A               	addwf	(??_MirroredQuadrants+8)& (0+255),f,b
  5109  00141A  0100               	movlb	0	; () banked
  5110  00141C  5179               	movf	(??_MirroredQuadrants+7)& (0+255),w,b
  5111  00141E  0100               	movlb	0	; () banked
  5112  001420  237B               	addwfc	(??_MirroredQuadrants+9)& (0+255),f,b
  5113  001422  0E4C               	movlw	76
  5114  001424  0100               	movlb	0	; () banked
  5115  001426  257A               	addwf	(??_MirroredQuadrants+8)& (0+255),w,b
  5116  001428  0100               	movlb	0	; () banked
  5117  00142A  6F60               	movwf	___awmod@dividend& (0+255),b
  5118  00142C  0E00               	movlw	0
  5119  00142E  0100               	movlb	0	; () banked
  5120  001430  217B               	addwfc	(??_MirroredQuadrants+9)& (0+255),w,b
  5121  001432  0100               	movlb	0	; () banked
  5122  001434  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5123  001436  0E00               	movlw	0
  5124  001438  0100               	movlb	0	; () banked
  5125  00143A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5126  00143C  0E4C               	movlw	76
  5127  00143E  6F62               	movwf	___awmod@divisor& (0+255),b
  5128  001440  EC20  F019         	call	___awmod	;wreg free
  5129  001444  0100               	movlb	0	; () banked
  5130  001446  5160               	movf	?___awmod& (0+255),w,b
  5131  001448  0100               	movlb	0	; () banked
  5132  00144A  5D76               	subwf	(??_MirroredQuadrants+4)& (0+255),w,b
  5133  00144C  0100               	movlb	0	; () banked
  5134  00144E  5177               	movf	(??_MirroredQuadrants+5)& (0+255),w,b
  5135  001450  0A80               	xorlw	128
  5136  001452  0100               	movlb	0	; () banked
  5137  001454  6F7C               	movwf	(??_MirroredQuadrants+10)& (0+255),b
  5138  001456  0100               	movlb	0	; () banked
  5139  001458  5161               	movf	(?___awmod+1)& (0+255),w,b
  5140  00145A  0A80               	xorlw	128
  5141  00145C  0100               	movlb	0	; () banked
  5142  00145E  597C               	subwfb	(??_MirroredQuadrants+10)& (0+255),w,b
  5143  001460  A0D8               	btfss	status,0,c
  5144  001462  D02C               	goto	l3503
  5145                           
  5146                           ; BSR set to: 0
  5147  001464  0100               	movlb	0	; () banked
  5148  001466  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5149  001468  0100               	movlb	0	; () banked
  5150  00146A  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5151  00146C  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5152  00146E  0100               	movlb	0	; () banked
  5153  001470  1F72               	comf	??_MirroredQuadrants& (0+255),f,b
  5154  001472  1F73               	comf	(??_MirroredQuadrants+1)& (0+255),f,b
  5155  001474  4B72               	infsnz	??_MirroredQuadrants& (0+255),f,b
  5156  001476  2B73               	incf	(??_MirroredQuadrants+1)& (0+255),f,b
  5157  001478  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  5158  00147C  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  5159  001480  50DF               	movf	indf2,w,c
  5160  001482  0100               	movlb	0	; () banked
  5161  001484  6F74               	movwf	(??_MirroredQuadrants+2)& (0+255),b
  5162  001486  6B75               	clrf	(??_MirroredQuadrants+3)& (0+255),b
  5163  001488  0100               	movlb	0	; () banked
  5164  00148A  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5165  00148C  0100               	movlb	0	; () banked
  5166  00148E  2774               	addwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5167  001490  0100               	movlb	0	; () banked
  5168  001492  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5169  001494  0100               	movlb	0	; () banked
  5170  001496  2375               	addwfc	(??_MirroredQuadrants+3)& (0+255),f,b
  5171  001498  0E4C               	movlw	76
  5172  00149A  0100               	movlb	0	; () banked
  5173  00149C  2574               	addwf	(??_MirroredQuadrants+2)& (0+255),w,b
  5174  00149E  0100               	movlb	0	; () banked
  5175  0014A0  6F60               	movwf	___awmod@dividend& (0+255),b
  5176  0014A2  0E00               	movlw	0
  5177  0014A4  0100               	movlb	0	; () banked
  5178  0014A6  2175               	addwfc	(??_MirroredQuadrants+3)& (0+255),w,b
  5179  0014A8  0100               	movlb	0	; () banked
  5180  0014AA  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5181  0014AC  0E00               	movlw	0
  5182  0014AE  0100               	movlb	0	; () banked
  5183  0014B0  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5184  0014B2  0E4C               	movlw	76
  5185  0014B4  6F62               	movwf	___awmod@divisor& (0+255),b
  5186  0014B6  EC20  F019         	call	___awmod	;wreg free
  5187  0014BA  D02B               	goto	L11
  5188  0014BC                     l3503:
  5189  0014BC  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  5190  0014C0  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  5191  0014C4  50DF               	movf	indf2,w,c
  5192  0014C6  0100               	movlb	0	; () banked
  5193  0014C8  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5194  0014CA  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5195  0014CC  0100               	movlb	0	; () banked
  5196  0014CE  1F72               	comf	??_MirroredQuadrants& (0+255),f,b
  5197  0014D0  1F73               	comf	(??_MirroredQuadrants+1)& (0+255),f,b
  5198  0014D2  4B72               	infsnz	??_MirroredQuadrants& (0+255),f,b
  5199  0014D4  2B73               	incf	(??_MirroredQuadrants+1)& (0+255),f,b
  5200  0014D6  0100               	movlb	0	; () banked
  5201  0014D8  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5202  0014DA  0100               	movlb	0	; () banked
  5203  0014DC  6F74               	movwf	(??_MirroredQuadrants+2)& (0+255),b
  5204  0014DE  6B75               	clrf	(??_MirroredQuadrants+3)& (0+255),b
  5205  0014E0  0100               	movlb	0	; () banked
  5206  0014E2  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5207  0014E4  0100               	movlb	0	; () banked
  5208  0014E6  2774               	addwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5209  0014E8  0100               	movlb	0	; () banked
  5210  0014EA  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5211  0014EC  0100               	movlb	0	; () banked
  5212  0014EE  2375               	addwfc	(??_MirroredQuadrants+3)& (0+255),f,b
  5213  0014F0  0E4C               	movlw	76
  5214  0014F2  0100               	movlb	0	; () banked
  5215  0014F4  2574               	addwf	(??_MirroredQuadrants+2)& (0+255),w,b
  5216  0014F6  0100               	movlb	0	; () banked
  5217  0014F8  6F60               	movwf	___awmod@dividend& (0+255),b
  5218  0014FA  0E00               	movlw	0
  5219  0014FC  0100               	movlb	0	; () banked
  5220  0014FE  2175               	addwfc	(??_MirroredQuadrants+3)& (0+255),w,b
  5221  001500  0100               	movlb	0	; () banked
  5222  001502  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  5223  001504  0E00               	movlw	0
  5224  001506  0100               	movlb	0	; () banked
  5225  001508  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5226  00150A  0E4C               	movlw	76
  5227  00150C  6F62               	movwf	___awmod@divisor& (0+255),b
  5228  00150E  EC20  F019         	call	___awmod	;wreg free
  5229  001512                     L11:
  5230  001512  C060  F07D         	movff	?___awmod,_MirroredQuadrants$1297
  5231  001516  C061  F07E         	movff	?___awmod+1,_MirroredQuadrants$1297+1
  5232  00151A  C07D  F081         	movff	_MirroredQuadrants$1297,MirroredQuadrants@x
  5233                           
  5234                           ;Pattern_PtrnFunctions.c: 228: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  5235  00151E  0E04               	movlw	4
  5236  001520  0100               	movlb	0	; () banked
  5237  001522  6581               	cpfsgt	MirroredQuadrants@x& (0+255),b
  5238  001524  D006               	goto	l3511
  5239                           
  5240                           ; BSR set to: 0
  5241  001526  0E00               	movlw	0
  5242  001528  0100               	movlb	0	; () banked
  5243  00152A  6F80               	movwf	(_MirroredQuadrants$1298+1)& (0+255),b
  5244  00152C  0E00               	movlw	0
  5245  00152E  6F7F               	movwf	_MirroredQuadrants$1298& (0+255),b
  5246  001530  D01F               	goto	l3513
  5247  001532                     l3511:
  5248                           
  5249                           ; BSR set to: 0
  5250  001532  0100               	movlb	0	; () banked
  5251  001534  5181               	movf	MirroredQuadrants@x& (0+255),w,b
  5252  001536  0D0F               	mullw	15
  5253  001538  CFF3 F060          	movff	prodl,___awdiv@dividend
  5254  00153C  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  5255  001540  0E00               	movlw	0
  5256  001542  0100               	movlb	0	; () banked
  5257  001544  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5258  001546  0E05               	movlw	5
  5259  001548  6F62               	movwf	___awdiv@divisor& (0+255),b
  5260  00154A  ECBC  F017         	call	___awdiv	;wreg free
  5261  00154E  0100               	movlb	0	; () banked
  5262  001550  1F60               	comf	?___awdiv& (0+255),f,b
  5263  001552  0100               	movlb	0	; () banked
  5264  001554  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  5265  001556  0100               	movlb	0	; () banked
  5266  001558  4B60               	infsnz	?___awdiv& (0+255),f,b
  5267  00155A  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  5268  00155C  0E0F               	movlw	15
  5269  00155E  0100               	movlb	0	; () banked
  5270  001560  2560               	addwf	?___awdiv& (0+255),w,b
  5271  001562  0100               	movlb	0	; () banked
  5272  001564  6F7F               	movwf	_MirroredQuadrants$1298& (0+255),b
  5273  001566  0E00               	movlw	0
  5274  001568  0100               	movlb	0	; () banked
  5275  00156A  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  5276  00156C  0100               	movlb	0	; () banked
  5277  00156E  6F80               	movwf	(_MirroredQuadrants$1298+1)& (0+255),b
  5278  001570                     l3513:
  5279                           
  5280                           ; BSR set to: 0
  5281  001570  C07F  F082         	movff	_MirroredQuadrants$1298,MirroredQuadrants@val
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;Pattern_PtrnFunctions.c: 229: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  5285  001574  0100               	movlb	0	; () banked
  5286  001576  516F               	movf	MirroredQuadrants@base_sat& (0+255),w,b
  5287  001578  0100               	movlb	0	; () banked
  5288  00157A  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5289  00157C  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5290  00157E  0100               	movlb	0	; () banked
  5291  001580  3B72               	swapf	??_MirroredQuadrants& (0+255),f,b
  5292  001582  3B73               	swapf	(??_MirroredQuadrants+1)& (0+255),f,b
  5293  001584  0EF0               	movlw	240
  5294  001586  1773               	andwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5295  001588  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5296  00158A  0B0F               	andlw	15
  5297  00158C  1373               	iorwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5298  00158E  0EF0               	movlw	240
  5299  001590  1772               	andwf	??_MirroredQuadrants& (0+255),f,b
  5300  001592  0100               	movlb	0	; () banked
  5301  001594  516E               	movf	MirroredQuadrants@base_hue& (0+255),w,b
  5302  001596  0100               	movlb	0	; () banked
  5303  001598  6F75               	movwf	(??_MirroredQuadrants+3)& (0+255),b
  5304  00159A  6B74               	clrf	(??_MirroredQuadrants+2)& (0+255),b
  5305  00159C  0100               	movlb	0	; () banked
  5306  00159E  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5307  0015A0  0100               	movlb	0	; () banked
  5308  0015A2  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5309  0015A4  0100               	movlb	0	; () banked
  5310  0015A6  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5311  0015A8  0100               	movlb	0	; () banked
  5312  0015AA  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5313  0015AC  0100               	movlb	0	; () banked
  5314  0015AE  5182               	movf	MirroredQuadrants@val& (0+255),w,b
  5315  0015B0  0100               	movlb	0	; () banked
  5316  0015B2  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5317  0015B4  0E00               	movlw	0
  5318  0015B6  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5319  0015B8  0100               	movlb	0	; () banked
  5320  0015BA  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5321  0015BC  0D02               	mullw	2
  5322  0015BE  50F3               	movf	prodl,w,c
  5323  0015C0  0100               	movlb	0	; () banked
  5324  0015C2  2568               	addwf	MirroredQuadrants@ptrnPointer& (0+255),w,b
  5325  0015C4  6ED9               	movwf	fsr2l,c
  5326  0015C6  50F4               	movf	prodh,w,c
  5327  0015C8  0100               	movlb	0	; () banked
  5328  0015CA  2169               	addwfc	(MirroredQuadrants@ptrnPointer+1)& (0+255),w,b
  5329  0015CC  6EDA               	movwf	fsr2h,c
  5330  0015CE  C074  FFDE         	movff	??_MirroredQuadrants+2,postinc2
  5331  0015D2  C075  FFDD         	movff	??_MirroredQuadrants+3,postdec2
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;Pattern_PtrnFunctions.c: 230: ptrnPointer[76/2-1-i] = ((uint16_t)base_hue<<8) | (base_s
      +                          at<<4) | val;
  5335  0015D6  0100               	movlb	0	; () banked
  5336  0015D8  516F               	movf	MirroredQuadrants@base_sat& (0+255),w,b
  5337  0015DA  0100               	movlb	0	; () banked
  5338  0015DC  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5339  0015DE  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5340  0015E0  0100               	movlb	0	; () banked
  5341  0015E2  3B72               	swapf	??_MirroredQuadrants& (0+255),f,b
  5342  0015E4  3B73               	swapf	(??_MirroredQuadrants+1)& (0+255),f,b
  5343  0015E6  0EF0               	movlw	240
  5344  0015E8  1773               	andwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5345  0015EA  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5346  0015EC  0B0F               	andlw	15
  5347  0015EE  1373               	iorwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5348  0015F0  0EF0               	movlw	240
  5349  0015F2  1772               	andwf	??_MirroredQuadrants& (0+255),f,b
  5350  0015F4  0100               	movlb	0	; () banked
  5351  0015F6  516E               	movf	MirroredQuadrants@base_hue& (0+255),w,b
  5352  0015F8  0100               	movlb	0	; () banked
  5353  0015FA  6F75               	movwf	(??_MirroredQuadrants+3)& (0+255),b
  5354  0015FC  6B74               	clrf	(??_MirroredQuadrants+2)& (0+255),b
  5355  0015FE  0100               	movlb	0	; () banked
  5356  001600  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5357  001602  0100               	movlb	0	; () banked
  5358  001604  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5359  001606  0100               	movlb	0	; () banked
  5360  001608  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5361  00160A  0100               	movlb	0	; () banked
  5362  00160C  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5363  00160E  0100               	movlb	0	; () banked
  5364  001610  5182               	movf	MirroredQuadrants@val& (0+255),w,b
  5365  001612  0100               	movlb	0	; () banked
  5366  001614  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5367  001616  0E00               	movlw	0
  5368  001618  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5369  00161A  0100               	movlb	0	; () banked
  5370  00161C  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5371  00161E  0100               	movlb	0	; () banked
  5372  001620  6F76               	movwf	(??_MirroredQuadrants+4)& (0+255),b
  5373  001622  6B77               	clrf	(??_MirroredQuadrants+5)& (0+255),b
  5374  001624  0100               	movlb	0	; () banked
  5375  001626  1F76               	comf	(??_MirroredQuadrants+4)& (0+255),f,b
  5376  001628  1F77               	comf	(??_MirroredQuadrants+5)& (0+255),f,b
  5377  00162A  4B76               	infsnz	(??_MirroredQuadrants+4)& (0+255),f,b
  5378  00162C  2B77               	incf	(??_MirroredQuadrants+5)& (0+255),f,b
  5379  00162E  90D8               	bcf	status,0,c
  5380  001630  0100               	movlb	0	; () banked
  5381  001632  3776               	rlcf	(??_MirroredQuadrants+4)& (0+255),f,b
  5382  001634  3777               	rlcf	(??_MirroredQuadrants+5)& (0+255),f,b
  5383  001636  0E4A               	movlw	74
  5384  001638  0100               	movlb	0	; () banked
  5385  00163A  2776               	addwf	(??_MirroredQuadrants+4)& (0+255),f,b
  5386  00163C  0E00               	movlw	0
  5387  00163E  2377               	addwfc	(??_MirroredQuadrants+5)& (0+255),f,b
  5388  001640  0100               	movlb	0	; () banked
  5389  001642  5176               	movf	(??_MirroredQuadrants+4)& (0+255),w,b
  5390  001644  0100               	movlb	0	; () banked
  5391  001646  2568               	addwf	MirroredQuadrants@ptrnPointer& (0+255),w,b
  5392  001648  6ED9               	movwf	fsr2l,c
  5393  00164A  0100               	movlb	0	; () banked
  5394  00164C  5177               	movf	(??_MirroredQuadrants+5)& (0+255),w,b
  5395  00164E  0100               	movlb	0	; () banked
  5396  001650  2169               	addwfc	(MirroredQuadrants@ptrnPointer+1)& (0+255),w,b
  5397  001652  6EDA               	movwf	fsr2h,c
  5398  001654  C074  FFDE         	movff	??_MirroredQuadrants+2,postinc2
  5399  001658  C075  FFDD         	movff	??_MirroredQuadrants+3,postdec2
  5400                           
  5401                           ; BSR set to: 0
  5402                           ;Pattern_PtrnFunctions.c: 231: ptrnPointer[i+76/2] = ((uint16_t)base_hue<<8) | (base_sat
      +                          <<4) | val;
  5403  00165C  0100               	movlb	0	; () banked
  5404  00165E  516F               	movf	MirroredQuadrants@base_sat& (0+255),w,b
  5405  001660  0100               	movlb	0	; () banked
  5406  001662  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5407  001664  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5408  001666  0100               	movlb	0	; () banked
  5409  001668  3B72               	swapf	??_MirroredQuadrants& (0+255),f,b
  5410  00166A  3B73               	swapf	(??_MirroredQuadrants+1)& (0+255),f,b
  5411  00166C  0EF0               	movlw	240
  5412  00166E  1773               	andwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5413  001670  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5414  001672  0B0F               	andlw	15
  5415  001674  1373               	iorwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5416  001676  0EF0               	movlw	240
  5417  001678  1772               	andwf	??_MirroredQuadrants& (0+255),f,b
  5418  00167A  0100               	movlb	0	; () banked
  5419  00167C  516E               	movf	MirroredQuadrants@base_hue& (0+255),w,b
  5420  00167E  0100               	movlb	0	; () banked
  5421  001680  6F75               	movwf	(??_MirroredQuadrants+3)& (0+255),b
  5422  001682  6B74               	clrf	(??_MirroredQuadrants+2)& (0+255),b
  5423  001684  0100               	movlb	0	; () banked
  5424  001686  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5425  001688  0100               	movlb	0	; () banked
  5426  00168A  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5427  00168C  0100               	movlb	0	; () banked
  5428  00168E  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5429  001690  0100               	movlb	0	; () banked
  5430  001692  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5431  001694  0100               	movlb	0	; () banked
  5432  001696  5182               	movf	MirroredQuadrants@val& (0+255),w,b
  5433  001698  0100               	movlb	0	; () banked
  5434  00169A  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5435  00169C  0E00               	movlw	0
  5436  00169E  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5437  0016A0  0100               	movlb	0	; () banked
  5438  0016A2  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5439  0016A4  0100               	movlb	0	; () banked
  5440  0016A6  6F76               	movwf	(??_MirroredQuadrants+4)& (0+255),b
  5441  0016A8  6B77               	clrf	(??_MirroredQuadrants+5)& (0+255),b
  5442  0016AA  90D8               	bcf	status,0,c
  5443  0016AC  0100               	movlb	0	; () banked
  5444  0016AE  3776               	rlcf	(??_MirroredQuadrants+4)& (0+255),f,b
  5445  0016B0  3777               	rlcf	(??_MirroredQuadrants+5)& (0+255),f,b
  5446  0016B2  0E4C               	movlw	76
  5447  0016B4  0100               	movlb	0	; () banked
  5448  0016B6  2776               	addwf	(??_MirroredQuadrants+4)& (0+255),f,b
  5449  0016B8  0E00               	movlw	0
  5450  0016BA  2377               	addwfc	(??_MirroredQuadrants+5)& (0+255),f,b
  5451  0016BC  0100               	movlb	0	; () banked
  5452  0016BE  5176               	movf	(??_MirroredQuadrants+4)& (0+255),w,b
  5453  0016C0  0100               	movlb	0	; () banked
  5454  0016C2  2568               	addwf	MirroredQuadrants@ptrnPointer& (0+255),w,b
  5455  0016C4  6ED9               	movwf	fsr2l,c
  5456  0016C6  0100               	movlb	0	; () banked
  5457  0016C8  5177               	movf	(??_MirroredQuadrants+5)& (0+255),w,b
  5458  0016CA  0100               	movlb	0	; () banked
  5459  0016CC  2169               	addwfc	(MirroredQuadrants@ptrnPointer+1)& (0+255),w,b
  5460  0016CE  6EDA               	movwf	fsr2h,c
  5461  0016D0  C074  FFDE         	movff	??_MirroredQuadrants+2,postinc2
  5462  0016D4  C075  FFDD         	movff	??_MirroredQuadrants+3,postdec2
  5463                           
  5464                           ; BSR set to: 0
  5465                           ;Pattern_PtrnFunctions.c: 232: ptrnPointer[76-1-i] = ((uint16_t)base_hue<<8) | (base_sat
      +                          <<4) | val;
  5466  0016D8  0100               	movlb	0	; () banked
  5467  0016DA  516F               	movf	MirroredQuadrants@base_sat& (0+255),w,b
  5468  0016DC  0100               	movlb	0	; () banked
  5469  0016DE  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5470  0016E0  6B73               	clrf	(??_MirroredQuadrants+1)& (0+255),b
  5471  0016E2  0100               	movlb	0	; () banked
  5472  0016E4  3B72               	swapf	??_MirroredQuadrants& (0+255),f,b
  5473  0016E6  3B73               	swapf	(??_MirroredQuadrants+1)& (0+255),f,b
  5474  0016E8  0EF0               	movlw	240
  5475  0016EA  1773               	andwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5476  0016EC  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5477  0016EE  0B0F               	andlw	15
  5478  0016F0  1373               	iorwf	(??_MirroredQuadrants+1)& (0+255),f,b
  5479  0016F2  0EF0               	movlw	240
  5480  0016F4  1772               	andwf	??_MirroredQuadrants& (0+255),f,b
  5481  0016F6  0100               	movlb	0	; () banked
  5482  0016F8  516E               	movf	MirroredQuadrants@base_hue& (0+255),w,b
  5483  0016FA  0100               	movlb	0	; () banked
  5484  0016FC  6F75               	movwf	(??_MirroredQuadrants+3)& (0+255),b
  5485  0016FE  6B74               	clrf	(??_MirroredQuadrants+2)& (0+255),b
  5486  001700  0100               	movlb	0	; () banked
  5487  001702  5172               	movf	??_MirroredQuadrants& (0+255),w,b
  5488  001704  0100               	movlb	0	; () banked
  5489  001706  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5490  001708  0100               	movlb	0	; () banked
  5491  00170A  5173               	movf	(??_MirroredQuadrants+1)& (0+255),w,b
  5492  00170C  0100               	movlb	0	; () banked
  5493  00170E  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5494  001710  0100               	movlb	0	; () banked
  5495  001712  5182               	movf	MirroredQuadrants@val& (0+255),w,b
  5496  001714  0100               	movlb	0	; () banked
  5497  001716  1374               	iorwf	(??_MirroredQuadrants+2)& (0+255),f,b
  5498  001718  0E00               	movlw	0
  5499  00171A  1375               	iorwf	(??_MirroredQuadrants+3)& (0+255),f,b
  5500  00171C  0100               	movlb	0	; () banked
  5501  00171E  5183               	movf	MirroredQuadrants@i& (0+255),w,b
  5502  001720  0100               	movlb	0	; () banked
  5503  001722  6F76               	movwf	(??_MirroredQuadrants+4)& (0+255),b
  5504  001724  6B77               	clrf	(??_MirroredQuadrants+5)& (0+255),b
  5505  001726  0E01               	movlw	1
  5506  001728  0100               	movlb	0	; () banked
  5507  00172A  2776               	addwf	(??_MirroredQuadrants+4)& (0+255),f,b
  5508  00172C  0E00               	movlw	0
  5509  00172E  2377               	addwfc	(??_MirroredQuadrants+5)& (0+255),f,b
  5510  001730  0100               	movlb	0	; () banked
  5511  001732  1F76               	comf	(??_MirroredQuadrants+4)& (0+255),f,b
  5512  001734  1F77               	comf	(??_MirroredQuadrants+5)& (0+255),f,b
  5513  001736  4B76               	infsnz	(??_MirroredQuadrants+4)& (0+255),f,b
  5514  001738  2B77               	incf	(??_MirroredQuadrants+5)& (0+255),f,b
  5515  00173A  90D8               	bcf	status,0,c
  5516  00173C  0100               	movlb	0	; () banked
  5517  00173E  3776               	rlcf	(??_MirroredQuadrants+4)& (0+255),f,b
  5518  001740  3777               	rlcf	(??_MirroredQuadrants+5)& (0+255),f,b
  5519  001742  0E98               	movlw	152
  5520  001744  0100               	movlb	0	; () banked
  5521  001746  2776               	addwf	(??_MirroredQuadrants+4)& (0+255),f,b
  5522  001748  0E00               	movlw	0
  5523  00174A  2377               	addwfc	(??_MirroredQuadrants+5)& (0+255),f,b
  5524  00174C  0100               	movlb	0	; () banked
  5525  00174E  5176               	movf	(??_MirroredQuadrants+4)& (0+255),w,b
  5526  001750  0100               	movlb	0	; () banked
  5527  001752  2568               	addwf	MirroredQuadrants@ptrnPointer& (0+255),w,b
  5528  001754  6ED9               	movwf	fsr2l,c
  5529  001756  0100               	movlb	0	; () banked
  5530  001758  5177               	movf	(??_MirroredQuadrants+5)& (0+255),w,b
  5531  00175A  0100               	movlb	0	; () banked
  5532  00175C  2169               	addwfc	(MirroredQuadrants@ptrnPointer+1)& (0+255),w,b
  5533  00175E  6EDA               	movwf	fsr2h,c
  5534  001760  C074  FFDE         	movff	??_MirroredQuadrants+2,postinc2
  5535  001764  C075  FFDD         	movff	??_MirroredQuadrants+3,postdec2
  5536                           
  5537                           ; BSR set to: 0
  5538  001768  0100               	movlb	0	; () banked
  5539  00176A  2B83               	incf	MirroredQuadrants@i& (0+255),f,b
  5540  00176C  D60C               	goto	l3495
  5541  00176E                     l3527:
  5542                           
  5543                           ; BSR set to: 0
  5544                           ;Pattern_PtrnFunctions.c: 233: }
  5545                           ;Pattern_PtrnFunctions.c: 234: *ptrnStepCounter = (*ptrnStepCounter+1)%(76/2);
  5546  00176E  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  5547  001772  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  5548  001776  50DF               	movf	indf2,w,c
  5549  001778  0100               	movlb	0	; () banked
  5550  00177A  6F72               	movwf	??_MirroredQuadrants& (0+255),b
  5551  00177C  0E01               	movlw	1
  5552  00177E  0100               	movlb	0	; () banked
  5553  001780  2572               	addwf	??_MirroredQuadrants& (0+255),w,b
  5554  001782  0100               	movlb	0	; () banked
  5555  001784  6F60               	movwf	___awmod@dividend& (0+255),b
  5556  001786  0100               	movlb	0	; () banked
  5557  001788  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5558  00178A  0E00               	movlw	0
  5559  00178C  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  5560  00178E  0E00               	movlw	0
  5561  001790  0100               	movlb	0	; () banked
  5562  001792  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5563  001794  0E26               	movlw	38
  5564  001796  6F62               	movwf	___awmod@divisor& (0+255),b
  5565  001798  EC20  F019         	call	___awmod	;wreg free
  5566  00179C  0100               	movlb	0	; () banked
  5567  00179E  5160               	movf	?___awmod& (0+255),w,b
  5568  0017A0  C06A  FFD9         	movff	MirroredQuadrants@ptrnStepCounter,fsr2l
  5569  0017A4  C06B  FFDA         	movff	MirroredQuadrants@ptrnStepCounter+1,fsr2h
  5570  0017A8  6EDF               	movwf	indf2,c
  5571                           
  5572                           ; BSR set to: 0
  5573  0017AA  0012               	return		;funcret
  5574  0017AC                     __end_of_MirroredQuadrants:
  5575                           	opt stack 0
  5576                           tosu	equ	0xFFF
  5577                           tosh	equ	0xFFE
  5578                           tosl	equ	0xFFD
  5579                           pclath	equ	0xFFA
  5580                           tblptru	equ	0xFF8
  5581                           tblptrh	equ	0xFF7
  5582                           tblptrl	equ	0xFF6
  5583                           tablat	equ	0xFF5
  5584                           prodh	equ	0xFF4
  5585                           prodl	equ	0xFF3
  5586                           postinc0	equ	0xFEE
  5587                           wreg	equ	0xFE8
  5588                           postdec1	equ	0xFE5
  5589                           fsr1h	equ	0xFE2
  5590                           fsr1l	equ	0xFE1
  5591                           indf2	equ	0xFDF
  5592                           postinc2	equ	0xFDE
  5593                           postdec2	equ	0xFDD
  5594                           fsr2h	equ	0xFDA
  5595                           fsr2l	equ	0xFD9
  5596                           status	equ	0xFD8
  5597                           
  5598 ;; *************** function _HueTest *****************
  5599 ;; Defined at:
  5600 ;;		line 53 in file "Pattern_PtrnFunctions.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;  ptrnPointer     2   19[BANK0 ] PTR unsigned int 
  5603 ;;		 -> PixelPattern(152), 
  5604 ;;  ptrnStepCoun    2   21[BANK0 ] PTR unsigned char 
  5605 ;;		 -> PatternStepCounter(1), 
  5606 ;;  cycleCounter    2   23[BANK0 ] PTR unsigned long 
  5607 ;;		 -> CycleCounter(4), 
  5608 ;;  base_hue        1   25[BANK0 ] unsigned char 
  5609 ;;  base_sat        1   26[BANK0 ] unsigned char 
  5610 ;;  15710           2   27[BANK0 ] PTR void 
  5611 ;;		 -> NULL(0), 
  5612 ;; Auto vars:     Size  Location     Type
  5613 ;;  i               1   32[BANK0 ] unsigned char 
  5614 ;; Return value:  Size  Location     Type
  5615 ;;                  1    wreg      void 
  5616 ;; Registers used:
  5617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5618 ;; Tracked objects:
  5619 ;;		On entry : 0/0
  5620 ;;		On exit  : 0/0
  5621 ;;		Unchanged: 0/0
  5622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5623 ;;      Params:         0      10       0       0
  5624 ;;      Locals:         0       1       0       0
  5625 ;;      Temps:          0       3       0       0
  5626 ;;      Totals:         0      14       0       0
  5627 ;;Total ram usage:       14 bytes
  5628 ;; Hardware stack levels used:    1
  5629 ;; Hardware stack levels required when called:    8
  5630 ;; This function calls:
  5631 ;;		___awmod
  5632 ;;		___lwdiv
  5633 ;;		___wmul
  5634 ;; This function is called by:
  5635 ;;		_UpdatePattern
  5636 ;; This function uses a non-reentrant model
  5637 ;;
  5638                           
  5639                           	psect	text19
  5640  002A26                     __ptext19:
  5641                           	opt stack 0
  5642  002A26                     _HueTest:
  5643                           	opt stack 18
  5644                           
  5645                           ;Pattern_PtrnFunctions.c: 57: for(uint8_t i=0;i<76;i++){
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;incstack = 0
  5649  002A26  0E00               	movlw	0
  5650  002A28  0100               	movlb	0	; () banked
  5651  002A2A  6F80               	movwf	HueTest@i& (0+255),b
  5652  002A2C                     l3247:
  5653                           
  5654                           ; BSR set to: 0
  5655  002A2C  0E4B               	movlw	75
  5656  002A2E  0100               	movlb	0	; () banked
  5657  002A30  6580               	cpfsgt	HueTest@i& (0+255),b
  5658  002A32  D001               	goto	l3251
  5659  002A34  D058               	goto	l3257
  5660  002A36                     l3251:
  5661                           
  5662                           ; BSR set to: 0
  5663                           ;Pattern_PtrnFunctions.c: 59: ptrnPointer[i] = (((uint16_t)(i+*ptrnStepCounter)*255/76)<
      +                          <8) | (base_sat<<4) | 0x0F;
  5664  002A36  0100               	movlb	0	; () banked
  5665  002A38  517A               	movf	HueTest@base_sat& (0+255),w,b
  5666  002A3A  0100               	movlb	0	; () banked
  5667  002A3C  6F7D               	movwf	??_HueTest& (0+255),b
  5668  002A3E  6B7E               	clrf	(??_HueTest+1)& (0+255),b
  5669  002A40  0100               	movlb	0	; () banked
  5670  002A42  3B7D               	swapf	??_HueTest& (0+255),f,b
  5671  002A44  3B7E               	swapf	(??_HueTest+1)& (0+255),f,b
  5672  002A46  0EF0               	movlw	240
  5673  002A48  177E               	andwf	(??_HueTest+1)& (0+255),f,b
  5674  002A4A  517D               	movf	??_HueTest& (0+255),w,b
  5675  002A4C  0B0F               	andlw	15
  5676  002A4E  137E               	iorwf	(??_HueTest+1)& (0+255),f,b
  5677  002A50  0EF0               	movlw	240
  5678  002A52  177D               	andwf	??_HueTest& (0+255),f,b
  5679  002A54  C075  FFD9         	movff	HueTest@ptrnStepCounter,fsr2l
  5680  002A58  C076  FFDA         	movff	HueTest@ptrnStepCounter+1,fsr2h
  5681  002A5C  50DF               	movf	indf2,w,c
  5682  002A5E  0100               	movlb	0	; () banked
  5683  002A60  6F7F               	movwf	(??_HueTest+2)& (0+255),b
  5684  002A62  0100               	movlb	0	; () banked
  5685  002A64  5180               	movf	HueTest@i& (0+255),w,b
  5686  002A66  0100               	movlb	0	; () banked
  5687  002A68  257F               	addwf	(??_HueTest+2)& (0+255),w,b
  5688  002A6A  0100               	movlb	0	; () banked
  5689  002A6C  6F66               	movwf	___wmul@multiplier& (0+255),b
  5690  002A6E  0100               	movlb	0	; () banked
  5691  002A70  6B67               	clrf	(___wmul@multiplier+1)& (0+255),b
  5692  002A72  0100               	movlb	0	; () banked
  5693  002A74  3767               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  5694  002A76  0E00               	movlw	0
  5695  002A78  0100               	movlb	0	; () banked
  5696  002A7A  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5697  002A7C  6968               	setf	___wmul@multiplicand& (0+255),b
  5698  002A7E  EC06  F01D         	call	___wmul	;wreg free
  5699  002A82  C066  F06C         	movff	?___wmul,___lwdiv@dividend
  5700  002A86  C067  F06D         	movff	?___wmul+1,___lwdiv@dividend+1
  5701  002A8A  0E00               	movlw	0
  5702  002A8C  0100               	movlb	0	; () banked
  5703  002A8E  6F6F               	movwf	(___lwdiv@divisor+1)& (0+255),b
  5704  002A90  0E4C               	movlw	76
  5705  002A92  6F6E               	movwf	___lwdiv@divisor& (0+255),b
  5706  002A94  ECB6  F01A         	call	___lwdiv	;wreg free
  5707  002A98  0100               	movlb	0	; () banked
  5708  002A9A  C06C  F06D         	movff	?___lwdiv,?___lwdiv+1
  5709  002A9E  0100               	movlb	0	; () banked
  5710  002AA0  6B6C               	clrf	?___lwdiv& (0+255),b
  5711  002AA2  0100               	movlb	0	; () banked
  5712  002AA4  517D               	movf	??_HueTest& (0+255),w,b
  5713  002AA6  0100               	movlb	0	; () banked
  5714  002AA8  136C               	iorwf	?___lwdiv& (0+255),f,b
  5715  002AAA  0100               	movlb	0	; () banked
  5716  002AAC  517E               	movf	(??_HueTest+1)& (0+255),w,b
  5717  002AAE  0100               	movlb	0	; () banked
  5718  002AB0  136D               	iorwf	(?___lwdiv+1)& (0+255),f,b
  5719  002AB2  0E0F               	movlw	15
  5720  002AB4  0100               	movlb	0	; () banked
  5721  002AB6  136C               	iorwf	?___lwdiv& (0+255),f,b
  5722  002AB8  0E00               	movlw	0
  5723  002ABA  0100               	movlb	0	; () banked
  5724  002ABC  136D               	iorwf	(?___lwdiv+1)& (0+255),f,b
  5725  002ABE  0100               	movlb	0	; () banked
  5726  002AC0  5180               	movf	HueTest@i& (0+255),w,b
  5727  002AC2  0D02               	mullw	2
  5728  002AC4  50F3               	movf	prodl,w,c
  5729  002AC6  0100               	movlb	0	; () banked
  5730  002AC8  2573               	addwf	HueTest@ptrnPointer& (0+255),w,b
  5731  002ACA  6ED9               	movwf	fsr2l,c
  5732  002ACC  50F4               	movf	prodh,w,c
  5733  002ACE  0100               	movlb	0	; () banked
  5734  002AD0  2174               	addwfc	(HueTest@ptrnPointer+1)& (0+255),w,b
  5735  002AD2  6EDA               	movwf	fsr2h,c
  5736  002AD4  0100               	movlb	0	; () banked
  5737  002AD6  C06C  FFDE         	movff	?___lwdiv,postinc2
  5738  002ADA  0100               	movlb	0	; () banked
  5739  002ADC  C06D  FFDD         	movff	?___lwdiv+1,postdec2
  5740                           
  5741                           ; BSR set to: 0
  5742  002AE0  0100               	movlb	0	; () banked
  5743  002AE2  2B80               	incf	HueTest@i& (0+255),f,b
  5744  002AE4  D7A3               	goto	l3247
  5745  002AE6                     l3257:
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;Pattern_PtrnFunctions.c: 60: }
  5749                           ;Pattern_PtrnFunctions.c: 62: *ptrnStepCounter = (*ptrnStepCounter+1)%76;
  5750  002AE6  C075  FFD9         	movff	HueTest@ptrnStepCounter,fsr2l
  5751  002AEA  C076  FFDA         	movff	HueTest@ptrnStepCounter+1,fsr2h
  5752  002AEE  50DF               	movf	indf2,w,c
  5753  002AF0  0100               	movlb	0	; () banked
  5754  002AF2  6F7D               	movwf	??_HueTest& (0+255),b
  5755  002AF4  0E01               	movlw	1
  5756  002AF6  0100               	movlb	0	; () banked
  5757  002AF8  257D               	addwf	??_HueTest& (0+255),w,b
  5758  002AFA  0100               	movlb	0	; () banked
  5759  002AFC  6F60               	movwf	___awmod@dividend& (0+255),b
  5760  002AFE  0100               	movlb	0	; () banked
  5761  002B00  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5762  002B02  0E00               	movlw	0
  5763  002B04  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  5764  002B06  0E00               	movlw	0
  5765  002B08  0100               	movlb	0	; () banked
  5766  002B0A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5767  002B0C  0E4C               	movlw	76
  5768  002B0E  6F62               	movwf	___awmod@divisor& (0+255),b
  5769  002B10  EC20  F019         	call	___awmod	;wreg free
  5770  002B14  0100               	movlb	0	; () banked
  5771  002B16  5160               	movf	?___awmod& (0+255),w,b
  5772  002B18  C075  FFD9         	movff	HueTest@ptrnStepCounter,fsr2l
  5773  002B1C  C076  FFDA         	movff	HueTest@ptrnStepCounter+1,fsr2h
  5774  002B20  6EDF               	movwf	indf2,c
  5775                           
  5776                           ; BSR set to: 0
  5777  002B22  0012               	return		;funcret
  5778  002B24                     __end_of_HueTest:
  5779                           	opt stack 0
  5780                           tosu	equ	0xFFF
  5781                           tosh	equ	0xFFE
  5782                           tosl	equ	0xFFD
  5783                           pclath	equ	0xFFA
  5784                           tblptru	equ	0xFF8
  5785                           tblptrh	equ	0xFF7
  5786                           tblptrl	equ	0xFF6
  5787                           tablat	equ	0xFF5
  5788                           prodh	equ	0xFF4
  5789                           prodl	equ	0xFF3
  5790                           postinc0	equ	0xFEE
  5791                           wreg	equ	0xFE8
  5792                           postdec1	equ	0xFE5
  5793                           fsr1h	equ	0xFE2
  5794                           fsr1l	equ	0xFE1
  5795                           indf2	equ	0xFDF
  5796                           postinc2	equ	0xFDE
  5797                           postdec2	equ	0xFDD
  5798                           fsr2h	equ	0xFDA
  5799                           fsr2l	equ	0xFD9
  5800                           status	equ	0xFD8
  5801                           
  5802 ;; *************** function _FullPulseHold *****************
  5803 ;; Defined at:
  5804 ;;		line 108 in file "Pattern_PtrnFunctions.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;  ptrnPointer     2    0[BANK0 ] PTR unsigned int 
  5807 ;;		 -> PixelPattern(152), 
  5808 ;;  ptrnStepCoun    2    2[BANK0 ] PTR unsigned char 
  5809 ;;		 -> PatternStepCounter(1), 
  5810 ;;  cycleCounter    2    4[BANK0 ] PTR unsigned long 
  5811 ;;		 -> CycleCounter(4), 
  5812 ;;  base_hue        1    6[BANK0 ] unsigned char 
  5813 ;;  base_sat        1    7[BANK0 ] unsigned char 
  5814 ;;  15718           2    8[BANK0 ] PTR void 
  5815 ;;		 -> NULL(0), 
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;  i               1   21[BANK0 ] unsigned char 
  5818 ;;  val             1   20[BANK0 ] unsigned char 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  1    wreg      void 
  5821 ;; Registers used:
  5822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5828 ;;      Params:         0      10       0       0
  5829 ;;      Locals:         0       4       0       0
  5830 ;;      Temps:          0       8       0       0
  5831 ;;      Totals:         0      22       0       0
  5832 ;;Total ram usage:       22 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    7
  5835 ;; This function calls:
  5836 ;;		Nothing
  5837 ;; This function is called by:
  5838 ;;		_UpdatePattern
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           	psect	text20
  5843  002426                     __ptext20:
  5844                           	opt stack 0
  5845  002426                     _FullPulseHold:
  5846                           	opt stack 19
  5847                           
  5848                           ;Pattern_PtrnFunctions.c: 109: static bool rising = 1;
  5849                           ;Pattern_PtrnFunctions.c: 110: uint8_t val;
  5850                           ;Pattern_PtrnFunctions.c: 113: val = (*ptrnStepCounter>>4);
  5851                           
  5852                           ; BSR set to: 0
  5853                           ;incstack = 0
  5854  002426  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  5855  00242A  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  5856  00242E  50DF               	movf	indf2,w,c
  5857  002430  0100               	movlb	0	; () banked
  5858  002432  6F6A               	movwf	??_FullPulseHold& (0+255),b
  5859  002434  0100               	movlb	0	; () banked
  5860  002436  396A               	swapf	??_FullPulseHold& (0+255),w,b
  5861  002438  0B0F               	andlw	15
  5862  00243A  0100               	movlb	0	; () banked
  5863  00243C  6F74               	movwf	FullPulseHold@val& (0+255),b
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;Pattern_PtrnFunctions.c: 114: for(uint8_t i=0;i<76;i++){
  5867  00243E  0E00               	movlw	0
  5868  002440  0100               	movlb	0	; () banked
  5869  002442  6F75               	movwf	FullPulseHold@i& (0+255),b
  5870  002444                     l3263:
  5871                           
  5872                           ; BSR set to: 0
  5873  002444  0E4B               	movlw	75
  5874  002446  0100               	movlb	0	; () banked
  5875  002448  6575               	cpfsgt	FullPulseHold@i& (0+255),b
  5876  00244A  D001               	goto	l3267
  5877  00244C  D034               	goto	l3273
  5878  00244E                     l3267:
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;Pattern_PtrnFunctions.c: 116: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  5882  00244E  0100               	movlb	0	; () banked
  5883  002450  5167               	movf	FullPulseHold@base_sat& (0+255),w,b
  5884  002452  0100               	movlb	0	; () banked
  5885  002454  6F6A               	movwf	??_FullPulseHold& (0+255),b
  5886  002456  6B6B               	clrf	(??_FullPulseHold+1)& (0+255),b
  5887  002458  0100               	movlb	0	; () banked
  5888  00245A  3B6A               	swapf	??_FullPulseHold& (0+255),f,b
  5889  00245C  3B6B               	swapf	(??_FullPulseHold+1)& (0+255),f,b
  5890  00245E  0EF0               	movlw	240
  5891  002460  176B               	andwf	(??_FullPulseHold+1)& (0+255),f,b
  5892  002462  516A               	movf	??_FullPulseHold& (0+255),w,b
  5893  002464  0B0F               	andlw	15
  5894  002466  136B               	iorwf	(??_FullPulseHold+1)& (0+255),f,b
  5895  002468  0EF0               	movlw	240
  5896  00246A  176A               	andwf	??_FullPulseHold& (0+255),f,b
  5897  00246C  0100               	movlb	0	; () banked
  5898  00246E  5166               	movf	FullPulseHold@base_hue& (0+255),w,b
  5899  002470  0100               	movlb	0	; () banked
  5900  002472  6F6D               	movwf	(??_FullPulseHold+3)& (0+255),b
  5901  002474  6B6C               	clrf	(??_FullPulseHold+2)& (0+255),b
  5902  002476  0100               	movlb	0	; () banked
  5903  002478  516A               	movf	??_FullPulseHold& (0+255),w,b
  5904  00247A  0100               	movlb	0	; () banked
  5905  00247C  136C               	iorwf	(??_FullPulseHold+2)& (0+255),f,b
  5906  00247E  0100               	movlb	0	; () banked
  5907  002480  516B               	movf	(??_FullPulseHold+1)& (0+255),w,b
  5908  002482  0100               	movlb	0	; () banked
  5909  002484  136D               	iorwf	(??_FullPulseHold+3)& (0+255),f,b
  5910  002486  0100               	movlb	0	; () banked
  5911  002488  5174               	movf	FullPulseHold@val& (0+255),w,b
  5912  00248A  0100               	movlb	0	; () banked
  5913  00248C  136C               	iorwf	(??_FullPulseHold+2)& (0+255),f,b
  5914  00248E  0E00               	movlw	0
  5915  002490  136D               	iorwf	(??_FullPulseHold+3)& (0+255),f,b
  5916  002492  0100               	movlb	0	; () banked
  5917  002494  5175               	movf	FullPulseHold@i& (0+255),w,b
  5918  002496  0D02               	mullw	2
  5919  002498  50F3               	movf	prodl,w,c
  5920  00249A  0100               	movlb	0	; () banked
  5921  00249C  2560               	addwf	FullPulseHold@ptrnPointer& (0+255),w,b
  5922  00249E  6ED9               	movwf	fsr2l,c
  5923  0024A0  50F4               	movf	prodh,w,c
  5924  0024A2  0100               	movlb	0	; () banked
  5925  0024A4  2161               	addwfc	(FullPulseHold@ptrnPointer+1)& (0+255),w,b
  5926  0024A6  6EDA               	movwf	fsr2h,c
  5927  0024A8  C06C  FFDE         	movff	??_FullPulseHold+2,postinc2
  5928  0024AC  C06D  FFDD         	movff	??_FullPulseHold+3,postdec2
  5929                           
  5930                           ; BSR set to: 0
  5931  0024B0  0100               	movlb	0	; () banked
  5932  0024B2  2B75               	incf	FullPulseHold@i& (0+255),f,b
  5933  0024B4  D7C7               	goto	l3263
  5934  0024B6                     l3273:
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;Pattern_PtrnFunctions.c: 117: }
  5938                           ;Pattern_PtrnFunctions.c: 119: if(*ptrnStepCounter == 255){
  5939  0024B6  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  5940  0024BA  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  5941  0024BE  28DE               	incf	postinc2,w,c
  5942  0024C0  A4D8               	btfss	status,2,c
  5943  0024C2  D02F               	goto	l3279
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;Pattern_PtrnFunctions.c: 120: rising = 0;
  5947  0024C4  0E00               	movlw	0
  5948  0024C6  D035               	goto	L12
  5949  0024C8                     l3277:
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;Pattern_PtrnFunctions.c: 121: *cycleCounter = *cycleCounter+1;
  5953  0024C8  0E01               	movlw	1
  5954  0024CA  C064  FFD9         	movff	FullPulseHold@cycleCounter,fsr2l
  5955  0024CE  C065  FFDA         	movff	FullPulseHold@cycleCounter+1,fsr2h
  5956  0024D2  CFDE F06A          	movff	postinc2,??_FullPulseHold
  5957  0024D6  CFDE F06B          	movff	postinc2,??_FullPulseHold+1
  5958  0024DA  CFDE F06C          	movff	postinc2,??_FullPulseHold+2
  5959  0024DE  CFDE F06D          	movff	postinc2,??_FullPulseHold+3
  5960  0024E2  0100               	movlb	0	; () banked
  5961  0024E4  256A               	addwf	??_FullPulseHold& (0+255),w,b
  5962  0024E6  0100               	movlb	0	; () banked
  5963  0024E8  6F6E               	movwf	(??_FullPulseHold+4)& (0+255),b
  5964  0024EA  0E00               	movlw	0
  5965  0024EC  0100               	movlb	0	; () banked
  5966  0024EE  216B               	addwfc	(??_FullPulseHold+1)& (0+255),w,b
  5967  0024F0  0100               	movlb	0	; () banked
  5968  0024F2  6F6F               	movwf	(??_FullPulseHold+5)& (0+255),b
  5969  0024F4  0E00               	movlw	0
  5970  0024F6  0100               	movlb	0	; () banked
  5971  0024F8  216C               	addwfc	(??_FullPulseHold+2)& (0+255),w,b
  5972  0024FA  0100               	movlb	0	; () banked
  5973  0024FC  6F70               	movwf	(??_FullPulseHold+6)& (0+255),b
  5974  0024FE  0E00               	movlw	0
  5975  002500  0100               	movlb	0	; () banked
  5976  002502  216D               	addwfc	(??_FullPulseHold+3)& (0+255),w,b
  5977  002504  0100               	movlb	0	; () banked
  5978  002506  6F71               	movwf	(??_FullPulseHold+7)& (0+255),b
  5979  002508  C064  FFD9         	movff	FullPulseHold@cycleCounter,fsr2l
  5980  00250C  C065  FFDA         	movff	FullPulseHold@cycleCounter+1,fsr2h
  5981  002510  C06E  FFDE         	movff	??_FullPulseHold+4,postinc2
  5982  002514  C06F  FFDE         	movff	??_FullPulseHold+5,postinc2
  5983  002518  C070  FFDE         	movff	??_FullPulseHold+6,postinc2
  5984  00251C  C071  FFDE         	movff	??_FullPulseHold+7,postinc2
  5985                           
  5986                           ;Pattern_PtrnFunctions.c: 122: }
  5987  002520  D00B               	goto	l3285
  5988  002522                     l3279:
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;Pattern_PtrnFunctions.c: 123: else if(*ptrnStepCounter == 0){
  5992  002522  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  5993  002526  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  5994  00252A  50DF               	movf	indf2,w,c
  5995  00252C  A4D8               	btfss	status,2,c
  5996  00252E  D004               	goto	l3285
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;Pattern_PtrnFunctions.c: 124: rising = 1;
  6000  002530  0E01               	movlw	1
  6001  002532                     L12:
  6002  002532  0100               	movlb	0	; () banked
  6003  002534  6FF4               	movwf	FullPulseHold@rising& (0+255),b
  6004  002536  D7C8               	goto	l3277
  6005  002538                     l3285:
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;Pattern_PtrnFunctions.c: 126: }
  6009                           ;Pattern_PtrnFunctions.c: 128: if(*cycleCounter < 4){
  6010  002538  C064  FFD9         	movff	FullPulseHold@cycleCounter,fsr2l
  6011  00253C  C065  FFDA         	movff	FullPulseHold@cycleCounter+1,fsr2h
  6012  002540  0E03               	movlw	3
  6013  002542  50DB               	movf	plusw2,w,c
  6014  002544  E136               	bnz	l657
  6015  002546  0E02               	movlw	2
  6016  002548  50DB               	movf	plusw2,w,c
  6017  00254A  E133               	bnz	l657
  6018  00254C  0E01               	movlw	1
  6019  00254E  50DB               	movf	plusw2,w,c
  6020  002550  E130               	bnz	l657
  6021  002552  0E04               	movlw	4
  6022  002554  5CDE               	subwf	postinc2,w,c
  6023  002556  B0D8               	btfsc	status,0,c
  6024  002558  0012               	return	
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;Pattern_PtrnFunctions.c: 129: *ptrnStepCounter = (rising ? *ptrnStepCounter+15 : *ptrnS
      +                          tepCounter-15);
  6028  00255A  0100               	movlb	0	; () banked
  6029  00255C  51F4               	movf	FullPulseHold@rising& (0+255),w,b
  6030  00255E  0100               	movlb	0	; () banked
  6031  002560  A4D8               	btfss	status,2,c
  6032  002562  D010               	goto	l3291
  6033                           
  6034                           ; BSR set to: 0
  6035  002564  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  6036  002568  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  6037  00256C  50DF               	movf	indf2,w,c
  6038  00256E  0100               	movlb	0	; () banked
  6039  002570  6F6A               	movwf	??_FullPulseHold& (0+255),b
  6040  002572  0EF1               	movlw	241
  6041  002574  0100               	movlb	0	; () banked
  6042  002576  256A               	addwf	??_FullPulseHold& (0+255),w,b
  6043  002578  0100               	movlb	0	; () banked
  6044  00257A  6F72               	movwf	_FullPulseHold$1213& (0+255),b
  6045  00257C  0100               	movlb	0	; () banked
  6046  00257E  6B73               	clrf	(_FullPulseHold$1213+1)& (0+255),b
  6047  002580  0EFF               	movlw	255
  6048  002582  D00F               	goto	L13
  6049  002584                     l3291:
  6050                           
  6051                           ; BSR set to: 0
  6052  002584  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  6053  002588  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  6054  00258C  50DF               	movf	indf2,w,c
  6055  00258E  0100               	movlb	0	; () banked
  6056  002590  6F6A               	movwf	??_FullPulseHold& (0+255),b
  6057  002592  0E0F               	movlw	15
  6058  002594  0100               	movlb	0	; () banked
  6059  002596  256A               	addwf	??_FullPulseHold& (0+255),w,b
  6060  002598  0100               	movlb	0	; () banked
  6061  00259A  6F72               	movwf	_FullPulseHold$1213& (0+255),b
  6062  00259C  0100               	movlb	0	; () banked
  6063  00259E  6B73               	clrf	(_FullPulseHold$1213+1)& (0+255),b
  6064  0025A0  0E00               	movlw	0
  6065  0025A2                     L13:
  6066  0025A2  2373               	addwfc	(_FullPulseHold$1213+1)& (0+255),f,b
  6067                           
  6068                           ; BSR set to: 0
  6069                           
  6070                           ; BSR set to: 0
  6071  0025A4  C062  FFD9         	movff	FullPulseHold@ptrnStepCounter,fsr2l
  6072  0025A8  C063  FFDA         	movff	FullPulseHold@ptrnStepCounter+1,fsr2h
  6073  0025AC  C072  FFDF         	movff	_FullPulseHold$1213,indf2
  6074  0025B0  0012               	return	
  6075  0025B2                     l657:
  6076                           
  6077                           ; BSR set to: 0
  6078  0025B2  0012               	return		;funcret
  6079  0025B4                     __end_of_FullPulseHold:
  6080                           	opt stack 0
  6081                           tosu	equ	0xFFF
  6082                           tosh	equ	0xFFE
  6083                           tosl	equ	0xFFD
  6084                           pclath	equ	0xFFA
  6085                           tblptru	equ	0xFF8
  6086                           tblptrh	equ	0xFF7
  6087                           tblptrl	equ	0xFF6
  6088                           tablat	equ	0xFF5
  6089                           prodh	equ	0xFF4
  6090                           prodl	equ	0xFF3
  6091                           postinc0	equ	0xFEE
  6092                           wreg	equ	0xFE8
  6093                           postdec1	equ	0xFE5
  6094                           fsr1h	equ	0xFE2
  6095                           fsr1l	equ	0xFE1
  6096                           indf2	equ	0xFDF
  6097                           postinc2	equ	0xFDE
  6098                           postdec2	equ	0xFDD
  6099                           plusw2	equ	0xFDB
  6100                           fsr2h	equ	0xFDA
  6101                           fsr2l	equ	0xFD9
  6102                           status	equ	0xFD8
  6103                           
  6104 ;; *************** function _DoubleFadedLoop *****************
  6105 ;; Defined at:
  6106 ;;		line 171 in file "Pattern_PtrnFunctions.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  6109 ;;		 -> PixelPattern(152), 
  6110 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  6111 ;;		 -> PatternStepCounter(1), 
  6112 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  6113 ;;		 -> CycleCounter(4), 
  6114 ;;  base_hue        1   14[BANK0 ] unsigned char 
  6115 ;;  base_sat        1   15[BANK0 ] unsigned char 
  6116 ;;  15751           2   16[BANK0 ] PTR void 
  6117 ;;		 -> NULL(0), 
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;  i               1   36[BANK0 ] unsigned char 
  6120 ;;  i               1   35[BANK0 ] unsigned char 
  6121 ;;  x               1   34[BANK0 ] unsigned char 
  6122 ;;  val             1   33[BANK0 ] unsigned char 
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  1    wreg      void 
  6125 ;; Registers used:
  6126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6132 ;;      Params:         0      10       0       0
  6133 ;;      Locals:         0      12       0       0
  6134 ;;      Temps:          0       7       0       0
  6135 ;;      Totals:         0      29       0       0
  6136 ;;Total ram usage:       29 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:    8
  6139 ;; This function calls:
  6140 ;;		___awdiv
  6141 ;;		___awmod
  6142 ;; This function is called by:
  6143 ;;		_UpdatePattern
  6144 ;; This function uses a non-reentrant model
  6145 ;;
  6146                           
  6147                           	psect	text21
  6148  0009BE                     __ptext21:
  6149                           	opt stack 0
  6150  0009BE                     _DoubleFadedLoop:
  6151                           	opt stack 18
  6152                           
  6153                           ;Pattern_PtrnFunctions.c: 172: uint8_t val, x;
  6154                           ;Pattern_PtrnFunctions.c: 174: for(uint8_t i=0;i<76/4;i++){
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;incstack = 0
  6158  0009BE  0E00               	movlw	0
  6159  0009C0  0100               	movlb	0	; () banked
  6160  0009C2  6F83               	movwf	DoubleFadedLoop@i& (0+255),b
  6161  0009C4                     l3389:
  6162                           
  6163                           ; BSR set to: 0
  6164  0009C4  0E12               	movlw	18
  6165  0009C6  0100               	movlb	0	; () banked
  6166  0009C8  6583               	cpfsgt	DoubleFadedLoop@i& (0+255),b
  6167  0009CA  D001               	goto	l3393
  6168  0009CC  D143               	goto	l3417
  6169  0009CE                     l3393:
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;Pattern_PtrnFunctions.c: 175: x = ((((76+i)%76) < ((76-i)%76)) ? ((76+i)%76) : ((76-i)%
      +                          76));
  6173  0009CE  0E4C               	movlw	76
  6174  0009D0  0100               	movlb	0	; () banked
  6175  0009D2  2583               	addwf	DoubleFadedLoop@i& (0+255),w,b
  6176  0009D4  0100               	movlb	0	; () banked
  6177  0009D6  6F60               	movwf	___awmod@dividend& (0+255),b
  6178  0009D8  0100               	movlb	0	; () banked
  6179  0009DA  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6180  0009DC  0E00               	movlw	0
  6181  0009DE  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  6182  0009E0  0E00               	movlw	0
  6183  0009E2  0100               	movlb	0	; () banked
  6184  0009E4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6185  0009E6  0E4C               	movlw	76
  6186  0009E8  6F62               	movwf	___awmod@divisor& (0+255),b
  6187  0009EA  EC20  F019         	call	___awmod	;wreg free
  6188  0009EE  C060  F072         	movff	?___awmod,??_DoubleFadedLoop
  6189  0009F2  C061  F073         	movff	?___awmod+1,??_DoubleFadedLoop+1
  6190  0009F6  0100               	movlb	0	; () banked
  6191  0009F8  5183               	movf	DoubleFadedLoop@i& (0+255),w,b
  6192  0009FA  0100               	movlb	0	; () banked
  6193  0009FC  6F74               	movwf	(??_DoubleFadedLoop+2)& (0+255),b
  6194  0009FE  6B75               	clrf	(??_DoubleFadedLoop+3)& (0+255),b
  6195  000A00  0100               	movlb	0	; () banked
  6196  000A02  1F74               	comf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6197  000A04  1F75               	comf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6198  000A06  4B74               	infsnz	(??_DoubleFadedLoop+2)& (0+255),f,b
  6199  000A08  2B75               	incf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6200  000A0A  0E4C               	movlw	76
  6201  000A0C  0100               	movlb	0	; () banked
  6202  000A0E  2574               	addwf	(??_DoubleFadedLoop+2)& (0+255),w,b
  6203  000A10  0100               	movlb	0	; () banked
  6204  000A12  6F60               	movwf	___awmod@dividend& (0+255),b
  6205  000A14  0E00               	movlw	0
  6206  000A16  0100               	movlb	0	; () banked
  6207  000A18  2175               	addwfc	(??_DoubleFadedLoop+3)& (0+255),w,b
  6208  000A1A  0100               	movlb	0	; () banked
  6209  000A1C  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6210  000A1E  0E00               	movlw	0
  6211  000A20  0100               	movlb	0	; () banked
  6212  000A22  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6213  000A24  0E4C               	movlw	76
  6214  000A26  6F62               	movwf	___awmod@divisor& (0+255),b
  6215  000A28  EC20  F019         	call	___awmod	;wreg free
  6216  000A2C  0100               	movlb	0	; () banked
  6217  000A2E  5160               	movf	?___awmod& (0+255),w,b
  6218  000A30  0100               	movlb	0	; () banked
  6219  000A32  5D72               	subwf	??_DoubleFadedLoop& (0+255),w,b
  6220  000A34  0100               	movlb	0	; () banked
  6221  000A36  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6222  000A38  0A80               	xorlw	128
  6223  000A3A  0100               	movlb	0	; () banked
  6224  000A3C  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6225  000A3E  0100               	movlb	0	; () banked
  6226  000A40  5161               	movf	(?___awmod+1)& (0+255),w,b
  6227  000A42  0A80               	xorlw	128
  6228  000A44  0100               	movlb	0	; () banked
  6229  000A46  5976               	subwfb	(??_DoubleFadedLoop+4)& (0+255),w,b
  6230  000A48  A0D8               	btfss	status,0,c
  6231  000A4A  D01C               	goto	l3397
  6232                           
  6233                           ; BSR set to: 0
  6234  000A4C  0100               	movlb	0	; () banked
  6235  000A4E  5183               	movf	DoubleFadedLoop@i& (0+255),w,b
  6236  000A50  0100               	movlb	0	; () banked
  6237  000A52  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6238  000A54  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6239  000A56  0100               	movlb	0	; () banked
  6240  000A58  1F72               	comf	??_DoubleFadedLoop& (0+255),f,b
  6241  000A5A  1F73               	comf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6242  000A5C  4B72               	infsnz	??_DoubleFadedLoop& (0+255),f,b
  6243  000A5E  2B73               	incf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6244  000A60  0E4C               	movlw	76
  6245  000A62  0100               	movlb	0	; () banked
  6246  000A64  2572               	addwf	??_DoubleFadedLoop& (0+255),w,b
  6247  000A66  0100               	movlb	0	; () banked
  6248  000A68  6F60               	movwf	___awmod@dividend& (0+255),b
  6249  000A6A  0E00               	movlw	0
  6250  000A6C  0100               	movlb	0	; () banked
  6251  000A6E  2173               	addwfc	(??_DoubleFadedLoop+1)& (0+255),w,b
  6252  000A70  0100               	movlb	0	; () banked
  6253  000A72  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6254  000A74  0E00               	movlw	0
  6255  000A76  0100               	movlb	0	; () banked
  6256  000A78  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6257  000A7A  0E4C               	movlw	76
  6258  000A7C  6F62               	movwf	___awmod@divisor& (0+255),b
  6259  000A7E  EC20  F019         	call	___awmod	;wreg free
  6260  000A82  D010               	goto	L14
  6261  000A84                     l3397:
  6262  000A84  0E4C               	movlw	76
  6263  000A86  0100               	movlb	0	; () banked
  6264  000A88  2583               	addwf	DoubleFadedLoop@i& (0+255),w,b
  6265  000A8A  0100               	movlb	0	; () banked
  6266  000A8C  6F60               	movwf	___awmod@dividend& (0+255),b
  6267  000A8E  0100               	movlb	0	; () banked
  6268  000A90  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6269  000A92  0E00               	movlw	0
  6270  000A94  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  6271  000A96  0E00               	movlw	0
  6272  000A98  0100               	movlb	0	; () banked
  6273  000A9A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6274  000A9C  0E4C               	movlw	76
  6275  000A9E  6F62               	movwf	___awmod@divisor& (0+255),b
  6276  000AA0  EC20  F019         	call	___awmod	;wreg free
  6277  000AA4                     L14:
  6278  000AA4  C060  F079         	movff	?___awmod,_DoubleFadedLoop$1257
  6279  000AA8  C061  F07A         	movff	?___awmod+1,_DoubleFadedLoop$1257+1
  6280  000AAC  C079  F082         	movff	_DoubleFadedLoop$1257,DoubleFadedLoop@x
  6281                           
  6282                           ;Pattern_PtrnFunctions.c: 176: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  6283  000AB0  0E04               	movlw	4
  6284  000AB2  0100               	movlb	0	; () banked
  6285  000AB4  6582               	cpfsgt	DoubleFadedLoop@x& (0+255),b
  6286  000AB6  D006               	goto	l3405
  6287                           
  6288                           ; BSR set to: 0
  6289  000AB8  0E00               	movlw	0
  6290  000ABA  0100               	movlb	0	; () banked
  6291  000ABC  6F7C               	movwf	(_DoubleFadedLoop$1258+1)& (0+255),b
  6292  000ABE  0E00               	movlw	0
  6293  000AC0  6F7B               	movwf	_DoubleFadedLoop$1258& (0+255),b
  6294  000AC2  D01F               	goto	l3407
  6295  000AC4                     l3405:
  6296                           
  6297                           ; BSR set to: 0
  6298  000AC4  0100               	movlb	0	; () banked
  6299  000AC6  5182               	movf	DoubleFadedLoop@x& (0+255),w,b
  6300  000AC8  0D0F               	mullw	15
  6301  000ACA  CFF3 F060          	movff	prodl,___awdiv@dividend
  6302  000ACE  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  6303  000AD2  0E00               	movlw	0
  6304  000AD4  0100               	movlb	0	; () banked
  6305  000AD6  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6306  000AD8  0E05               	movlw	5
  6307  000ADA  6F62               	movwf	___awdiv@divisor& (0+255),b
  6308  000ADC  ECBC  F017         	call	___awdiv	;wreg free
  6309  000AE0  0100               	movlb	0	; () banked
  6310  000AE2  1F60               	comf	?___awdiv& (0+255),f,b
  6311  000AE4  0100               	movlb	0	; () banked
  6312  000AE6  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  6313  000AE8  0100               	movlb	0	; () banked
  6314  000AEA  4B60               	infsnz	?___awdiv& (0+255),f,b
  6315  000AEC  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  6316  000AEE  0E0F               	movlw	15
  6317  000AF0  0100               	movlb	0	; () banked
  6318  000AF2  2560               	addwf	?___awdiv& (0+255),w,b
  6319  000AF4  0100               	movlb	0	; () banked
  6320  000AF6  6F7B               	movwf	_DoubleFadedLoop$1258& (0+255),b
  6321  000AF8  0E00               	movlw	0
  6322  000AFA  0100               	movlb	0	; () banked
  6323  000AFC  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  6324  000AFE  0100               	movlb	0	; () banked
  6325  000B00  6F7C               	movwf	(_DoubleFadedLoop$1258+1)& (0+255),b
  6326  000B02                     l3407:
  6327                           
  6328                           ; BSR set to: 0
  6329  000B02  C07B  F081         	movff	_DoubleFadedLoop$1258,DoubleFadedLoop@val
  6330                           
  6331                           ; BSR set to: 0
  6332                           ;Pattern_PtrnFunctions.c: 177: ptrnPointer[(i+*ptrnStepCounter)%76] = ((uint16_t)base_hu
      +                          e<<8) | (base_sat<<4) | val;
  6333  000B06  0100               	movlb	0	; () banked
  6334  000B08  516F               	movf	DoubleFadedLoop@base_sat& (0+255),w,b
  6335  000B0A  0100               	movlb	0	; () banked
  6336  000B0C  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6337  000B0E  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6338  000B10  0100               	movlb	0	; () banked
  6339  000B12  3B72               	swapf	??_DoubleFadedLoop& (0+255),f,b
  6340  000B14  3B73               	swapf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6341  000B16  0EF0               	movlw	240
  6342  000B18  1773               	andwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6343  000B1A  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6344  000B1C  0B0F               	andlw	15
  6345  000B1E  1373               	iorwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6346  000B20  0EF0               	movlw	240
  6347  000B22  1772               	andwf	??_DoubleFadedLoop& (0+255),f,b
  6348  000B24  0100               	movlb	0	; () banked
  6349  000B26  516E               	movf	DoubleFadedLoop@base_hue& (0+255),w,b
  6350  000B28  0100               	movlb	0	; () banked
  6351  000B2A  6F75               	movwf	(??_DoubleFadedLoop+3)& (0+255),b
  6352  000B2C  6B74               	clrf	(??_DoubleFadedLoop+2)& (0+255),b
  6353  000B2E  0100               	movlb	0	; () banked
  6354  000B30  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6355  000B32  0100               	movlb	0	; () banked
  6356  000B34  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6357  000B36  0100               	movlb	0	; () banked
  6358  000B38  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6359  000B3A  0100               	movlb	0	; () banked
  6360  000B3C  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6361  000B3E  0100               	movlb	0	; () banked
  6362  000B40  5181               	movf	DoubleFadedLoop@val& (0+255),w,b
  6363  000B42  0100               	movlb	0	; () banked
  6364  000B44  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6365  000B46  0E00               	movlw	0
  6366  000B48  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6367  000B4A  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6368  000B4E  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6369  000B52  50DF               	movf	indf2,w,c
  6370  000B54  0100               	movlb	0	; () banked
  6371  000B56  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6372  000B58  0100               	movlb	0	; () banked
  6373  000B5A  5183               	movf	DoubleFadedLoop@i& (0+255),w,b
  6374  000B5C  0100               	movlb	0	; () banked
  6375  000B5E  2576               	addwf	(??_DoubleFadedLoop+4)& (0+255),w,b
  6376  000B60  0100               	movlb	0	; () banked
  6377  000B62  6F60               	movwf	___awmod@dividend& (0+255),b
  6378  000B64  0100               	movlb	0	; () banked
  6379  000B66  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6380  000B68  0100               	movlb	0	; () banked
  6381  000B6A  3761               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  6382  000B6C  0E00               	movlw	0
  6383  000B6E  0100               	movlb	0	; () banked
  6384  000B70  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6385  000B72  0E4C               	movlw	76
  6386  000B74  6F62               	movwf	___awmod@divisor& (0+255),b
  6387  000B76  EC20  F019         	call	___awmod	;wreg free
  6388  000B7A  90D8               	bcf	status,0,c
  6389  000B7C  0100               	movlb	0	; () banked
  6390  000B7E  3760               	rlcf	?___awmod& (0+255),f,b
  6391  000B80  0100               	movlb	0	; () banked
  6392  000B82  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  6393  000B84  0100               	movlb	0	; () banked
  6394  000B86  5160               	movf	?___awmod& (0+255),w,b
  6395  000B88  0100               	movlb	0	; () banked
  6396  000B8A  2568               	addwf	DoubleFadedLoop@ptrnPointer& (0+255),w,b
  6397  000B8C  6ED9               	movwf	fsr2l,c
  6398  000B8E  0100               	movlb	0	; () banked
  6399  000B90  5161               	movf	(?___awmod+1)& (0+255),w,b
  6400  000B92  0100               	movlb	0	; () banked
  6401  000B94  2169               	addwfc	(DoubleFadedLoop@ptrnPointer+1)& (0+255),w,b
  6402  000B96  6EDA               	movwf	fsr2h,c
  6403  000B98  C074  FFDE         	movff	??_DoubleFadedLoop+2,postinc2
  6404  000B9C  C075  FFDD         	movff	??_DoubleFadedLoop+3,postdec2
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;Pattern_PtrnFunctions.c: 178: ptrnPointer[(i+76/2+*ptrnStepCounter)%76] = ((uint16_t)ba
      +                          se_hue<<8) | (base_sat<<4) | val;
  6408  000BA0  0100               	movlb	0	; () banked
  6409  000BA2  516F               	movf	DoubleFadedLoop@base_sat& (0+255),w,b
  6410  000BA4  0100               	movlb	0	; () banked
  6411  000BA6  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6412  000BA8  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6413  000BAA  0100               	movlb	0	; () banked
  6414  000BAC  3B72               	swapf	??_DoubleFadedLoop& (0+255),f,b
  6415  000BAE  3B73               	swapf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6416  000BB0  0EF0               	movlw	240
  6417  000BB2  1773               	andwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6418  000BB4  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6419  000BB6  0B0F               	andlw	15
  6420  000BB8  1373               	iorwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6421  000BBA  0EF0               	movlw	240
  6422  000BBC  1772               	andwf	??_DoubleFadedLoop& (0+255),f,b
  6423  000BBE  0100               	movlb	0	; () banked
  6424  000BC0  516E               	movf	DoubleFadedLoop@base_hue& (0+255),w,b
  6425  000BC2  0100               	movlb	0	; () banked
  6426  000BC4  6F75               	movwf	(??_DoubleFadedLoop+3)& (0+255),b
  6427  000BC6  6B74               	clrf	(??_DoubleFadedLoop+2)& (0+255),b
  6428  000BC8  0100               	movlb	0	; () banked
  6429  000BCA  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6430  000BCC  0100               	movlb	0	; () banked
  6431  000BCE  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6432  000BD0  0100               	movlb	0	; () banked
  6433  000BD2  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6434  000BD4  0100               	movlb	0	; () banked
  6435  000BD6  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6436  000BD8  0100               	movlb	0	; () banked
  6437  000BDA  5181               	movf	DoubleFadedLoop@val& (0+255),w,b
  6438  000BDC  0100               	movlb	0	; () banked
  6439  000BDE  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6440  000BE0  0E00               	movlw	0
  6441  000BE2  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6442  000BE4  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6443  000BE8  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6444  000BEC  50DF               	movf	indf2,w,c
  6445  000BEE  0100               	movlb	0	; () banked
  6446  000BF0  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6447  000BF2  0100               	movlb	0	; () banked
  6448  000BF4  5176               	movf	(??_DoubleFadedLoop+4)& (0+255),w,b
  6449  000BF6  C083  F077         	movff	DoubleFadedLoop@i,??_DoubleFadedLoop+5
  6450  000BFA  0100               	movlb	0	; () banked
  6451  000BFC  6B78               	clrf	(??_DoubleFadedLoop+6)& (0+255),b
  6452  000BFE  0100               	movlb	0	; () banked
  6453  000C00  2777               	addwf	(??_DoubleFadedLoop+5)& (0+255),f,b
  6454  000C02  0E00               	movlw	0
  6455  000C04  2378               	addwfc	(??_DoubleFadedLoop+6)& (0+255),f,b
  6456  000C06  0E26               	movlw	38
  6457  000C08  0100               	movlb	0	; () banked
  6458  000C0A  2577               	addwf	(??_DoubleFadedLoop+5)& (0+255),w,b
  6459  000C0C  0100               	movlb	0	; () banked
  6460  000C0E  6F60               	movwf	___awmod@dividend& (0+255),b
  6461  000C10  0E00               	movlw	0
  6462  000C12  0100               	movlb	0	; () banked
  6463  000C14  2178               	addwfc	(??_DoubleFadedLoop+6)& (0+255),w,b
  6464  000C16  0100               	movlb	0	; () banked
  6465  000C18  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6466  000C1A  0E00               	movlw	0
  6467  000C1C  0100               	movlb	0	; () banked
  6468  000C1E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6469  000C20  0E4C               	movlw	76
  6470  000C22  6F62               	movwf	___awmod@divisor& (0+255),b
  6471  000C24  EC20  F019         	call	___awmod	;wreg free
  6472  000C28  90D8               	bcf	status,0,c
  6473  000C2A  0100               	movlb	0	; () banked
  6474  000C2C  3760               	rlcf	?___awmod& (0+255),f,b
  6475  000C2E  0100               	movlb	0	; () banked
  6476  000C30  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  6477  000C32  0100               	movlb	0	; () banked
  6478  000C34  5160               	movf	?___awmod& (0+255),w,b
  6479  000C36  0100               	movlb	0	; () banked
  6480  000C38  2568               	addwf	DoubleFadedLoop@ptrnPointer& (0+255),w,b
  6481  000C3A  6ED9               	movwf	fsr2l,c
  6482  000C3C  0100               	movlb	0	; () banked
  6483  000C3E  5161               	movf	(?___awmod+1)& (0+255),w,b
  6484  000C40  0100               	movlb	0	; () banked
  6485  000C42  2169               	addwfc	(DoubleFadedLoop@ptrnPointer+1)& (0+255),w,b
  6486  000C44  6EDA               	movwf	fsr2h,c
  6487  000C46  C074  FFDE         	movff	??_DoubleFadedLoop+2,postinc2
  6488  000C4A  C075  FFDD         	movff	??_DoubleFadedLoop+3,postdec2
  6489                           
  6490                           ; BSR set to: 0
  6491  000C4E  0100               	movlb	0	; () banked
  6492  000C50  2B83               	incf	DoubleFadedLoop@i& (0+255),f,b
  6493  000C52  D6B8               	goto	l3389
  6494  000C54                     l3417:
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;Pattern_PtrnFunctions.c: 179: }
  6498                           ;Pattern_PtrnFunctions.c: 180: for(uint8_t i=76*3/4;i<76;i++){
  6499  000C54  0E39               	movlw	57
  6500  000C56  0100               	movlb	0	; () banked
  6501  000C58  6F84               	movwf	DoubleFadedLoop@i_1259& (0+255),b
  6502  000C5A                     l3419:
  6503                           
  6504                           ; BSR set to: 0
  6505  000C5A  0E4B               	movlw	75
  6506  000C5C  0100               	movlb	0	; () banked
  6507  000C5E  6584               	cpfsgt	DoubleFadedLoop@i_1259& (0+255),b
  6508  000C60  D001               	goto	l3423
  6509  000C62  D143               	goto	l3447
  6510  000C64                     l3423:
  6511                           
  6512                           ; BSR set to: 0
  6513                           ;Pattern_PtrnFunctions.c: 181: x = ((((76+i)%76) < ((76-i)%76)) ? ((76+i)%76) : ((76-i)%
      +                          76));
  6514  000C64  0E4C               	movlw	76
  6515  000C66  0100               	movlb	0	; () banked
  6516  000C68  2584               	addwf	DoubleFadedLoop@i_1259& (0+255),w,b
  6517  000C6A  0100               	movlb	0	; () banked
  6518  000C6C  6F60               	movwf	___awmod@dividend& (0+255),b
  6519  000C6E  0100               	movlb	0	; () banked
  6520  000C70  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6521  000C72  0E00               	movlw	0
  6522  000C74  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  6523  000C76  0E00               	movlw	0
  6524  000C78  0100               	movlb	0	; () banked
  6525  000C7A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6526  000C7C  0E4C               	movlw	76
  6527  000C7E  6F62               	movwf	___awmod@divisor& (0+255),b
  6528  000C80  EC20  F019         	call	___awmod	;wreg free
  6529  000C84  C060  F072         	movff	?___awmod,??_DoubleFadedLoop
  6530  000C88  C061  F073         	movff	?___awmod+1,??_DoubleFadedLoop+1
  6531  000C8C  0100               	movlb	0	; () banked
  6532  000C8E  5184               	movf	DoubleFadedLoop@i_1259& (0+255),w,b
  6533  000C90  0100               	movlb	0	; () banked
  6534  000C92  6F74               	movwf	(??_DoubleFadedLoop+2)& (0+255),b
  6535  000C94  6B75               	clrf	(??_DoubleFadedLoop+3)& (0+255),b
  6536  000C96  0100               	movlb	0	; () banked
  6537  000C98  1F74               	comf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6538  000C9A  1F75               	comf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6539  000C9C  4B74               	infsnz	(??_DoubleFadedLoop+2)& (0+255),f,b
  6540  000C9E  2B75               	incf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6541  000CA0  0E4C               	movlw	76
  6542  000CA2  0100               	movlb	0	; () banked
  6543  000CA4  2574               	addwf	(??_DoubleFadedLoop+2)& (0+255),w,b
  6544  000CA6  0100               	movlb	0	; () banked
  6545  000CA8  6F60               	movwf	___awmod@dividend& (0+255),b
  6546  000CAA  0E00               	movlw	0
  6547  000CAC  0100               	movlb	0	; () banked
  6548  000CAE  2175               	addwfc	(??_DoubleFadedLoop+3)& (0+255),w,b
  6549  000CB0  0100               	movlb	0	; () banked
  6550  000CB2  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6551  000CB4  0E00               	movlw	0
  6552  000CB6  0100               	movlb	0	; () banked
  6553  000CB8  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6554  000CBA  0E4C               	movlw	76
  6555  000CBC  6F62               	movwf	___awmod@divisor& (0+255),b
  6556  000CBE  EC20  F019         	call	___awmod	;wreg free
  6557  000CC2  0100               	movlb	0	; () banked
  6558  000CC4  5160               	movf	?___awmod& (0+255),w,b
  6559  000CC6  0100               	movlb	0	; () banked
  6560  000CC8  5D72               	subwf	??_DoubleFadedLoop& (0+255),w,b
  6561  000CCA  0100               	movlb	0	; () banked
  6562  000CCC  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6563  000CCE  0A80               	xorlw	128
  6564  000CD0  0100               	movlb	0	; () banked
  6565  000CD2  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6566  000CD4  0100               	movlb	0	; () banked
  6567  000CD6  5161               	movf	(?___awmod+1)& (0+255),w,b
  6568  000CD8  0A80               	xorlw	128
  6569  000CDA  0100               	movlb	0	; () banked
  6570  000CDC  5976               	subwfb	(??_DoubleFadedLoop+4)& (0+255),w,b
  6571  000CDE  A0D8               	btfss	status,0,c
  6572  000CE0  D01C               	goto	l3427
  6573                           
  6574                           ; BSR set to: 0
  6575  000CE2  0100               	movlb	0	; () banked
  6576  000CE4  5184               	movf	DoubleFadedLoop@i_1259& (0+255),w,b
  6577  000CE6  0100               	movlb	0	; () banked
  6578  000CE8  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6579  000CEA  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6580  000CEC  0100               	movlb	0	; () banked
  6581  000CEE  1F72               	comf	??_DoubleFadedLoop& (0+255),f,b
  6582  000CF0  1F73               	comf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6583  000CF2  4B72               	infsnz	??_DoubleFadedLoop& (0+255),f,b
  6584  000CF4  2B73               	incf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6585  000CF6  0E4C               	movlw	76
  6586  000CF8  0100               	movlb	0	; () banked
  6587  000CFA  2572               	addwf	??_DoubleFadedLoop& (0+255),w,b
  6588  000CFC  0100               	movlb	0	; () banked
  6589  000CFE  6F60               	movwf	___awmod@dividend& (0+255),b
  6590  000D00  0E00               	movlw	0
  6591  000D02  0100               	movlb	0	; () banked
  6592  000D04  2173               	addwfc	(??_DoubleFadedLoop+1)& (0+255),w,b
  6593  000D06  0100               	movlb	0	; () banked
  6594  000D08  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6595  000D0A  0E00               	movlw	0
  6596  000D0C  0100               	movlb	0	; () banked
  6597  000D0E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6598  000D10  0E4C               	movlw	76
  6599  000D12  6F62               	movwf	___awmod@divisor& (0+255),b
  6600  000D14  EC20  F019         	call	___awmod	;wreg free
  6601  000D18  D010               	goto	L15
  6602  000D1A                     l3427:
  6603  000D1A  0E4C               	movlw	76
  6604  000D1C  0100               	movlb	0	; () banked
  6605  000D1E  2584               	addwf	DoubleFadedLoop@i_1259& (0+255),w,b
  6606  000D20  0100               	movlb	0	; () banked
  6607  000D22  6F60               	movwf	___awmod@dividend& (0+255),b
  6608  000D24  0100               	movlb	0	; () banked
  6609  000D26  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6610  000D28  0E00               	movlw	0
  6611  000D2A  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  6612  000D2C  0E00               	movlw	0
  6613  000D2E  0100               	movlb	0	; () banked
  6614  000D30  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6615  000D32  0E4C               	movlw	76
  6616  000D34  6F62               	movwf	___awmod@divisor& (0+255),b
  6617  000D36  EC20  F019         	call	___awmod	;wreg free
  6618  000D3A                     L15:
  6619  000D3A  C060  F07D         	movff	?___awmod,_DoubleFadedLoop$1260
  6620  000D3E  C061  F07E         	movff	?___awmod+1,_DoubleFadedLoop$1260+1
  6621  000D42  C07D  F082         	movff	_DoubleFadedLoop$1260,DoubleFadedLoop@x
  6622                           
  6623                           ;Pattern_PtrnFunctions.c: 182: val = (x < 5 ? 0x0F-x*0x0F/5 : 0x00);
  6624  000D46  0E04               	movlw	4
  6625  000D48  0100               	movlb	0	; () banked
  6626  000D4A  6582               	cpfsgt	DoubleFadedLoop@x& (0+255),b
  6627  000D4C  D006               	goto	l3435
  6628                           
  6629                           ; BSR set to: 0
  6630  000D4E  0E00               	movlw	0
  6631  000D50  0100               	movlb	0	; () banked
  6632  000D52  6F80               	movwf	(_DoubleFadedLoop$1261+1)& (0+255),b
  6633  000D54  0E00               	movlw	0
  6634  000D56  6F7F               	movwf	_DoubleFadedLoop$1261& (0+255),b
  6635  000D58  D01F               	goto	l3437
  6636  000D5A                     l3435:
  6637                           
  6638                           ; BSR set to: 0
  6639  000D5A  0100               	movlb	0	; () banked
  6640  000D5C  5182               	movf	DoubleFadedLoop@x& (0+255),w,b
  6641  000D5E  0D0F               	mullw	15
  6642  000D60  CFF3 F060          	movff	prodl,___awdiv@dividend
  6643  000D64  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  6644  000D68  0E00               	movlw	0
  6645  000D6A  0100               	movlb	0	; () banked
  6646  000D6C  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6647  000D6E  0E05               	movlw	5
  6648  000D70  6F62               	movwf	___awdiv@divisor& (0+255),b
  6649  000D72  ECBC  F017         	call	___awdiv	;wreg free
  6650  000D76  0100               	movlb	0	; () banked
  6651  000D78  1F60               	comf	?___awdiv& (0+255),f,b
  6652  000D7A  0100               	movlb	0	; () banked
  6653  000D7C  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  6654  000D7E  0100               	movlb	0	; () banked
  6655  000D80  4B60               	infsnz	?___awdiv& (0+255),f,b
  6656  000D82  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  6657  000D84  0E0F               	movlw	15
  6658  000D86  0100               	movlb	0	; () banked
  6659  000D88  2560               	addwf	?___awdiv& (0+255),w,b
  6660  000D8A  0100               	movlb	0	; () banked
  6661  000D8C  6F7F               	movwf	_DoubleFadedLoop$1261& (0+255),b
  6662  000D8E  0E00               	movlw	0
  6663  000D90  0100               	movlb	0	; () banked
  6664  000D92  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  6665  000D94  0100               	movlb	0	; () banked
  6666  000D96  6F80               	movwf	(_DoubleFadedLoop$1261+1)& (0+255),b
  6667  000D98                     l3437:
  6668                           
  6669                           ; BSR set to: 0
  6670  000D98  C07F  F081         	movff	_DoubleFadedLoop$1261,DoubleFadedLoop@val
  6671                           
  6672                           ; BSR set to: 0
  6673                           ;Pattern_PtrnFunctions.c: 183: ptrnPointer[(i+*ptrnStepCounter)%76] = ((uint16_t)base_hu
      +                          e<<8) | (base_sat<<4) | val;
  6674  000D9C  0100               	movlb	0	; () banked
  6675  000D9E  516F               	movf	DoubleFadedLoop@base_sat& (0+255),w,b
  6676  000DA0  0100               	movlb	0	; () banked
  6677  000DA2  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6678  000DA4  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6679  000DA6  0100               	movlb	0	; () banked
  6680  000DA8  3B72               	swapf	??_DoubleFadedLoop& (0+255),f,b
  6681  000DAA  3B73               	swapf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6682  000DAC  0EF0               	movlw	240
  6683  000DAE  1773               	andwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6684  000DB0  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6685  000DB2  0B0F               	andlw	15
  6686  000DB4  1373               	iorwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6687  000DB6  0EF0               	movlw	240
  6688  000DB8  1772               	andwf	??_DoubleFadedLoop& (0+255),f,b
  6689  000DBA  0100               	movlb	0	; () banked
  6690  000DBC  516E               	movf	DoubleFadedLoop@base_hue& (0+255),w,b
  6691  000DBE  0100               	movlb	0	; () banked
  6692  000DC0  6F75               	movwf	(??_DoubleFadedLoop+3)& (0+255),b
  6693  000DC2  6B74               	clrf	(??_DoubleFadedLoop+2)& (0+255),b
  6694  000DC4  0100               	movlb	0	; () banked
  6695  000DC6  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6696  000DC8  0100               	movlb	0	; () banked
  6697  000DCA  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6698  000DCC  0100               	movlb	0	; () banked
  6699  000DCE  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6700  000DD0  0100               	movlb	0	; () banked
  6701  000DD2  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6702  000DD4  0100               	movlb	0	; () banked
  6703  000DD6  5181               	movf	DoubleFadedLoop@val& (0+255),w,b
  6704  000DD8  0100               	movlb	0	; () banked
  6705  000DDA  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6706  000DDC  0E00               	movlw	0
  6707  000DDE  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6708  000DE0  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6709  000DE4  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6710  000DE8  50DF               	movf	indf2,w,c
  6711  000DEA  0100               	movlb	0	; () banked
  6712  000DEC  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6713  000DEE  0100               	movlb	0	; () banked
  6714  000DF0  5184               	movf	DoubleFadedLoop@i_1259& (0+255),w,b
  6715  000DF2  0100               	movlb	0	; () banked
  6716  000DF4  2576               	addwf	(??_DoubleFadedLoop+4)& (0+255),w,b
  6717  000DF6  0100               	movlb	0	; () banked
  6718  000DF8  6F60               	movwf	___awmod@dividend& (0+255),b
  6719  000DFA  0100               	movlb	0	; () banked
  6720  000DFC  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6721  000DFE  0100               	movlb	0	; () banked
  6722  000E00  3761               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  6723  000E02  0E00               	movlw	0
  6724  000E04  0100               	movlb	0	; () banked
  6725  000E06  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6726  000E08  0E4C               	movlw	76
  6727  000E0A  6F62               	movwf	___awmod@divisor& (0+255),b
  6728  000E0C  EC20  F019         	call	___awmod	;wreg free
  6729  000E10  90D8               	bcf	status,0,c
  6730  000E12  0100               	movlb	0	; () banked
  6731  000E14  3760               	rlcf	?___awmod& (0+255),f,b
  6732  000E16  0100               	movlb	0	; () banked
  6733  000E18  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  6734  000E1A  0100               	movlb	0	; () banked
  6735  000E1C  5160               	movf	?___awmod& (0+255),w,b
  6736  000E1E  0100               	movlb	0	; () banked
  6737  000E20  2568               	addwf	DoubleFadedLoop@ptrnPointer& (0+255),w,b
  6738  000E22  6ED9               	movwf	fsr2l,c
  6739  000E24  0100               	movlb	0	; () banked
  6740  000E26  5161               	movf	(?___awmod+1)& (0+255),w,b
  6741  000E28  0100               	movlb	0	; () banked
  6742  000E2A  2169               	addwfc	(DoubleFadedLoop@ptrnPointer+1)& (0+255),w,b
  6743  000E2C  6EDA               	movwf	fsr2h,c
  6744  000E2E  C074  FFDE         	movff	??_DoubleFadedLoop+2,postinc2
  6745  000E32  C075  FFDD         	movff	??_DoubleFadedLoop+3,postdec2
  6746                           
  6747                           ; BSR set to: 0
  6748                           ;Pattern_PtrnFunctions.c: 184: ptrnPointer[(i-76/2+*ptrnStepCounter)%76] = ((uint16_t)ba
      +                          se_hue<<8) | (base_sat<<4) | val;
  6749  000E36  0100               	movlb	0	; () banked
  6750  000E38  516F               	movf	DoubleFadedLoop@base_sat& (0+255),w,b
  6751  000E3A  0100               	movlb	0	; () banked
  6752  000E3C  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6753  000E3E  6B73               	clrf	(??_DoubleFadedLoop+1)& (0+255),b
  6754  000E40  0100               	movlb	0	; () banked
  6755  000E42  3B72               	swapf	??_DoubleFadedLoop& (0+255),f,b
  6756  000E44  3B73               	swapf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6757  000E46  0EF0               	movlw	240
  6758  000E48  1773               	andwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6759  000E4A  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6760  000E4C  0B0F               	andlw	15
  6761  000E4E  1373               	iorwf	(??_DoubleFadedLoop+1)& (0+255),f,b
  6762  000E50  0EF0               	movlw	240
  6763  000E52  1772               	andwf	??_DoubleFadedLoop& (0+255),f,b
  6764  000E54  0100               	movlb	0	; () banked
  6765  000E56  516E               	movf	DoubleFadedLoop@base_hue& (0+255),w,b
  6766  000E58  0100               	movlb	0	; () banked
  6767  000E5A  6F75               	movwf	(??_DoubleFadedLoop+3)& (0+255),b
  6768  000E5C  6B74               	clrf	(??_DoubleFadedLoop+2)& (0+255),b
  6769  000E5E  0100               	movlb	0	; () banked
  6770  000E60  5172               	movf	??_DoubleFadedLoop& (0+255),w,b
  6771  000E62  0100               	movlb	0	; () banked
  6772  000E64  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6773  000E66  0100               	movlb	0	; () banked
  6774  000E68  5173               	movf	(??_DoubleFadedLoop+1)& (0+255),w,b
  6775  000E6A  0100               	movlb	0	; () banked
  6776  000E6C  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6777  000E6E  0100               	movlb	0	; () banked
  6778  000E70  5181               	movf	DoubleFadedLoop@val& (0+255),w,b
  6779  000E72  0100               	movlb	0	; () banked
  6780  000E74  1374               	iorwf	(??_DoubleFadedLoop+2)& (0+255),f,b
  6781  000E76  0E00               	movlw	0
  6782  000E78  1375               	iorwf	(??_DoubleFadedLoop+3)& (0+255),f,b
  6783  000E7A  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6784  000E7E  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6785  000E82  50DF               	movf	indf2,w,c
  6786  000E84  0100               	movlb	0	; () banked
  6787  000E86  6F76               	movwf	(??_DoubleFadedLoop+4)& (0+255),b
  6788  000E88  0100               	movlb	0	; () banked
  6789  000E8A  5176               	movf	(??_DoubleFadedLoop+4)& (0+255),w,b
  6790  000E8C  C084  F077         	movff	DoubleFadedLoop@i_1259,??_DoubleFadedLoop+5
  6791  000E90  0100               	movlb	0	; () banked
  6792  000E92  6B78               	clrf	(??_DoubleFadedLoop+6)& (0+255),b
  6793  000E94  0100               	movlb	0	; () banked
  6794  000E96  2777               	addwf	(??_DoubleFadedLoop+5)& (0+255),f,b
  6795  000E98  0E00               	movlw	0
  6796  000E9A  2378               	addwfc	(??_DoubleFadedLoop+6)& (0+255),f,b
  6797  000E9C  0EDA               	movlw	218
  6798  000E9E  0100               	movlb	0	; () banked
  6799  000EA0  2577               	addwf	(??_DoubleFadedLoop+5)& (0+255),w,b
  6800  000EA2  0100               	movlb	0	; () banked
  6801  000EA4  6F60               	movwf	___awmod@dividend& (0+255),b
  6802  000EA6  0EFF               	movlw	255
  6803  000EA8  0100               	movlb	0	; () banked
  6804  000EAA  2178               	addwfc	(??_DoubleFadedLoop+6)& (0+255),w,b
  6805  000EAC  0100               	movlb	0	; () banked
  6806  000EAE  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  6807  000EB0  0E00               	movlw	0
  6808  000EB2  0100               	movlb	0	; () banked
  6809  000EB4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6810  000EB6  0E4C               	movlw	76
  6811  000EB8  6F62               	movwf	___awmod@divisor& (0+255),b
  6812  000EBA  EC20  F019         	call	___awmod	;wreg free
  6813  000EBE  90D8               	bcf	status,0,c
  6814  000EC0  0100               	movlb	0	; () banked
  6815  000EC2  3760               	rlcf	?___awmod& (0+255),f,b
  6816  000EC4  0100               	movlb	0	; () banked
  6817  000EC6  3761               	rlcf	(?___awmod+1)& (0+255),f,b
  6818  000EC8  0100               	movlb	0	; () banked
  6819  000ECA  5160               	movf	?___awmod& (0+255),w,b
  6820  000ECC  0100               	movlb	0	; () banked
  6821  000ECE  2568               	addwf	DoubleFadedLoop@ptrnPointer& (0+255),w,b
  6822  000ED0  6ED9               	movwf	fsr2l,c
  6823  000ED2  0100               	movlb	0	; () banked
  6824  000ED4  5161               	movf	(?___awmod+1)& (0+255),w,b
  6825  000ED6  0100               	movlb	0	; () banked
  6826  000ED8  2169               	addwfc	(DoubleFadedLoop@ptrnPointer+1)& (0+255),w,b
  6827  000EDA  6EDA               	movwf	fsr2h,c
  6828  000EDC  C074  FFDE         	movff	??_DoubleFadedLoop+2,postinc2
  6829  000EE0  C075  FFDD         	movff	??_DoubleFadedLoop+3,postdec2
  6830                           
  6831                           ; BSR set to: 0
  6832  000EE4  0100               	movlb	0	; () banked
  6833  000EE6  2B84               	incf	DoubleFadedLoop@i_1259& (0+255),f,b
  6834  000EE8  D6B8               	goto	l3419
  6835  000EEA                     l3447:
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;Pattern_PtrnFunctions.c: 185: }
  6839                           ;Pattern_PtrnFunctions.c: 186: *ptrnStepCounter = (*ptrnStepCounter+1)%76;
  6840  000EEA  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6841  000EEE  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6842  000EF2  50DF               	movf	indf2,w,c
  6843  000EF4  0100               	movlb	0	; () banked
  6844  000EF6  6F72               	movwf	??_DoubleFadedLoop& (0+255),b
  6845  000EF8  0E01               	movlw	1
  6846  000EFA  0100               	movlb	0	; () banked
  6847  000EFC  2572               	addwf	??_DoubleFadedLoop& (0+255),w,b
  6848  000EFE  0100               	movlb	0	; () banked
  6849  000F00  6F60               	movwf	___awmod@dividend& (0+255),b
  6850  000F02  0100               	movlb	0	; () banked
  6851  000F04  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6852  000F06  0E00               	movlw	0
  6853  000F08  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  6854  000F0A  0E00               	movlw	0
  6855  000F0C  0100               	movlb	0	; () banked
  6856  000F0E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6857  000F10  0E4C               	movlw	76
  6858  000F12  6F62               	movwf	___awmod@divisor& (0+255),b
  6859  000F14  EC20  F019         	call	___awmod	;wreg free
  6860  000F18  0100               	movlb	0	; () banked
  6861  000F1A  5160               	movf	?___awmod& (0+255),w,b
  6862  000F1C  C06A  FFD9         	movff	DoubleFadedLoop@ptrnStepCounter,fsr2l
  6863  000F20  C06B  FFDA         	movff	DoubleFadedLoop@ptrnStepCounter+1,fsr2h
  6864  000F24  6EDF               	movwf	indf2,c
  6865                           
  6866                           ; BSR set to: 0
  6867  000F26  0012               	return		;funcret
  6868  000F28                     __end_of_DoubleFadedLoop:
  6869                           	opt stack 0
  6870                           tosu	equ	0xFFF
  6871                           tosh	equ	0xFFE
  6872                           tosl	equ	0xFFD
  6873                           pclath	equ	0xFFA
  6874                           tblptru	equ	0xFF8
  6875                           tblptrh	equ	0xFF7
  6876                           tblptrl	equ	0xFF6
  6877                           tablat	equ	0xFF5
  6878                           prodh	equ	0xFF4
  6879                           prodl	equ	0xFF3
  6880                           postinc0	equ	0xFEE
  6881                           wreg	equ	0xFE8
  6882                           postdec1	equ	0xFE5
  6883                           fsr1h	equ	0xFE2
  6884                           fsr1l	equ	0xFE1
  6885                           indf2	equ	0xFDF
  6886                           postinc2	equ	0xFDE
  6887                           postdec2	equ	0xFDD
  6888                           plusw2	equ	0xFDB
  6889                           fsr2h	equ	0xFDA
  6890                           fsr2l	equ	0xFD9
  6891                           status	equ	0xFD8
  6892                           
  6893 ;; *************** function _CenterBreathe *****************
  6894 ;; Defined at:
  6895 ;;		line 134 in file "Pattern_PtrnFunctions.c"
  6896 ;; Parameters:    Size  Location     Type
  6897 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  6898 ;;		 -> PixelPattern(152), 
  6899 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  6900 ;;		 -> PatternStepCounter(1), 
  6901 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  6902 ;;		 -> CycleCounter(4), 
  6903 ;;  base_hue        1   14[BANK0 ] unsigned char 
  6904 ;;  base_sat        1   15[BANK0 ] unsigned char 
  6905 ;;  15728           2   16[BANK0 ] PTR void 
  6906 ;;		 -> NULL(0), 
  6907 ;; Auto vars:     Size  Location     Type
  6908 ;;  i               1   47[BANK0 ] unsigned char 
  6909 ;;  x               1   46[BANK0 ] unsigned char 
  6910 ;;  pulseWidth      1   45[BANK0 ] unsigned char 
  6911 ;;  val             1   44[BANK0 ] unsigned char 
  6912 ;;  fade_thresh     1   43[BANK0 ] unsigned char 
  6913 ;; Return value:  Size  Location     Type
  6914 ;;                  1    wreg      void 
  6915 ;; Registers used:
  6916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6917 ;; Tracked objects:
  6918 ;;		On entry : 0/0
  6919 ;;		On exit  : 0/0
  6920 ;;		Unchanged: 0/0
  6921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6922 ;;      Params:         0      10       0       0
  6923 ;;      Locals:         0      21       0       0
  6924 ;;      Temps:          0       9       0       0
  6925 ;;      Totals:         0      40       0       0
  6926 ;;Total ram usage:       40 bytes
  6927 ;; Hardware stack levels used:    1
  6928 ;; Hardware stack levels required when called:    8
  6929 ;; This function calls:
  6930 ;;		___awdiv
  6931 ;;		___awmod
  6932 ;; This function is called by:
  6933 ;;		_UpdatePattern
  6934 ;; This function uses a non-reentrant model
  6935 ;;
  6936                           
  6937                           	psect	text22
  6938  0017AC                     __ptext22:
  6939                           	opt stack 0
  6940  0017AC                     _CenterBreathe:
  6941                           	opt stack 18
  6942                           
  6943                           ;Pattern_PtrnFunctions.c: 135: static bool rising = 1;
  6944                           ;Pattern_PtrnFunctions.c: 136: uint8_t fade_thresh = 10;
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;incstack = 0
  6948  0017AC  0E0A               	movlw	10
  6949  0017AE  0100               	movlb	0	; () banked
  6950  0017B0  6F8B               	movwf	CenterBreathe@fade_thresh& (0+255),b
  6951                           
  6952                           ;Pattern_PtrnFunctions.c: 137: uint8_t val, x, pulseWidth;
  6953                           ;Pattern_PtrnFunctions.c: 139: pulseWidth = 15;
  6954  0017B2  0E0F               	movlw	15
  6955  0017B4  0100               	movlb	0	; () banked
  6956  0017B6  6F8D               	movwf	CenterBreathe@pulseWidth& (0+255),b
  6957                           
  6958                           ;Pattern_PtrnFunctions.c: 140: for(uint8_t i=0;i<76;i++){
  6959  0017B8  0E00               	movlw	0
  6960  0017BA  0100               	movlb	0	; () banked
  6961  0017BC  6F8F               	movwf	CenterBreathe@i& (0+255),b
  6962  0017BE                     l3297:
  6963                           
  6964                           ; BSR set to: 0
  6965  0017BE  0E4B               	movlw	75
  6966  0017C0  0100               	movlb	0	; () banked
  6967  0017C2  658F               	cpfsgt	CenterBreathe@i& (0+255),b
  6968  0017C4  D001               	goto	l3303
  6969  0017C6  D15A               	goto	l3343
  6970  0017C8                     l3303:
  6971                           
  6972                           ; BSR set to: 0
  6973  0017C8  0E00               	movlw	0
  6974  0017CA  0100               	movlb	0	; () banked
  6975  0017CC  6F7E               	movwf	(_CenterBreathe$1228+1)& (0+255),b
  6976  0017CE  0E25               	movlw	37
  6977  0017D0  6F7D               	movwf	_CenterBreathe$1228& (0+255),b
  6978                           
  6979                           ; BSR set to: 0
  6980                           
  6981                           ; BSR set to: 0
  6982                           
  6983                           ; BSR set to: 0
  6984  0017D2  0E00               	movlw	0
  6985  0017D4  0100               	movlb	0	; () banked
  6986  0017D6  6F80               	movwf	(_CenterBreathe$1229+1)& (0+255),b
  6987  0017D8  0E25               	movlw	37
  6988  0017DA  6F7F               	movwf	_CenterBreathe$1229& (0+255),b
  6989                           
  6990                           ; BSR set to: 0
  6991                           
  6992                           ; BSR set to: 0
  6993  0017DC  C07F  F072         	movff	_CenterBreathe$1229,??_CenterBreathe
  6994  0017E0  C080  F073         	movff	_CenterBreathe$1229+1,??_CenterBreathe+1
  6995  0017E4  0100               	movlb	0	; () banked
  6996  0017E6  1F72               	comf	??_CenterBreathe& (0+255),f,b
  6997  0017E8  1F73               	comf	(??_CenterBreathe+1)& (0+255),f,b
  6998  0017EA  4B72               	infsnz	??_CenterBreathe& (0+255),f,b
  6999  0017EC  2B73               	incf	(??_CenterBreathe+1)& (0+255),f,b
  7000  0017EE  0100               	movlb	0	; () banked
  7001  0017F0  518F               	movf	CenterBreathe@i& (0+255),w,b
  7002  0017F2  0100               	movlb	0	; () banked
  7003  0017F4  6F74               	movwf	(??_CenterBreathe+2)& (0+255),b
  7004  0017F6  6B75               	clrf	(??_CenterBreathe+3)& (0+255),b
  7005  0017F8  0100               	movlb	0	; () banked
  7006  0017FA  5172               	movf	??_CenterBreathe& (0+255),w,b
  7007  0017FC  0100               	movlb	0	; () banked
  7008  0017FE  2774               	addwf	(??_CenterBreathe+2)& (0+255),f,b
  7009  001800  0100               	movlb	0	; () banked
  7010  001802  5173               	movf	(??_CenterBreathe+1)& (0+255),w,b
  7011  001804  0100               	movlb	0	; () banked
  7012  001806  2375               	addwfc	(??_CenterBreathe+3)& (0+255),f,b
  7013  001808  0E4C               	movlw	76
  7014  00180A  0100               	movlb	0	; () banked
  7015  00180C  2574               	addwf	(??_CenterBreathe+2)& (0+255),w,b
  7016  00180E  0100               	movlb	0	; () banked
  7017  001810  6F60               	movwf	___awmod@dividend& (0+255),b
  7018  001812  0E00               	movlw	0
  7019  001814  0100               	movlb	0	; () banked
  7020  001816  2175               	addwfc	(??_CenterBreathe+3)& (0+255),w,b
  7021  001818  0100               	movlb	0	; () banked
  7022  00181A  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7023  00181C  0E00               	movlw	0
  7024  00181E  0100               	movlb	0	; () banked
  7025  001820  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7026  001822  0E4C               	movlw	76
  7027  001824  6F62               	movwf	___awmod@divisor& (0+255),b
  7028  001826  EC20  F019         	call	___awmod	;wreg free
  7029  00182A  C060  F076         	movff	?___awmod,??_CenterBreathe+4
  7030  00182E  C061  F077         	movff	?___awmod+1,??_CenterBreathe+5
  7031  001832  0100               	movlb	0	; () banked
  7032  001834  518F               	movf	CenterBreathe@i& (0+255),w,b
  7033  001836  0100               	movlb	0	; () banked
  7034  001838  6F78               	movwf	(??_CenterBreathe+6)& (0+255),b
  7035  00183A  6B79               	clrf	(??_CenterBreathe+7)& (0+255),b
  7036  00183C  0100               	movlb	0	; () banked
  7037  00183E  1F78               	comf	(??_CenterBreathe+6)& (0+255),f,b
  7038  001840  1F79               	comf	(??_CenterBreathe+7)& (0+255),f,b
  7039  001842  4B78               	infsnz	(??_CenterBreathe+6)& (0+255),f,b
  7040  001844  2B79               	incf	(??_CenterBreathe+7)& (0+255),f,b
  7041  001846  0100               	movlb	0	; () banked
  7042  001848  517D               	movf	_CenterBreathe$1228& (0+255),w,b
  7043  00184A  0100               	movlb	0	; () banked
  7044  00184C  2778               	addwf	(??_CenterBreathe+6)& (0+255),f,b
  7045  00184E  0100               	movlb	0	; () banked
  7046  001850  517E               	movf	(_CenterBreathe$1228+1)& (0+255),w,b
  7047  001852  0100               	movlb	0	; () banked
  7048  001854  2379               	addwfc	(??_CenterBreathe+7)& (0+255),f,b
  7049  001856  0E4C               	movlw	76
  7050  001858  0100               	movlb	0	; () banked
  7051  00185A  2578               	addwf	(??_CenterBreathe+6)& (0+255),w,b
  7052  00185C  0100               	movlb	0	; () banked
  7053  00185E  6F60               	movwf	___awmod@dividend& (0+255),b
  7054  001860  0E00               	movlw	0
  7055  001862  0100               	movlb	0	; () banked
  7056  001864  2179               	addwfc	(??_CenterBreathe+7)& (0+255),w,b
  7057  001866  0100               	movlb	0	; () banked
  7058  001868  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7059  00186A  0E00               	movlw	0
  7060  00186C  0100               	movlb	0	; () banked
  7061  00186E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7062  001870  0E4C               	movlw	76
  7063  001872  6F62               	movwf	___awmod@divisor& (0+255),b
  7064  001874  EC20  F019         	call	___awmod	;wreg free
  7065  001878  0100               	movlb	0	; () banked
  7066  00187A  5160               	movf	?___awmod& (0+255),w,b
  7067  00187C  0100               	movlb	0	; () banked
  7068  00187E  5D76               	subwf	(??_CenterBreathe+4)& (0+255),w,b
  7069  001880  0100               	movlb	0	; () banked
  7070  001882  5177               	movf	(??_CenterBreathe+5)& (0+255),w,b
  7071  001884  0A80               	xorlw	128
  7072  001886  0100               	movlb	0	; () banked
  7073  001888  6F7A               	movwf	(??_CenterBreathe+8)& (0+255),b
  7074  00188A  0100               	movlb	0	; () banked
  7075  00188C  5161               	movf	(?___awmod+1)& (0+255),w,b
  7076  00188E  0A80               	xorlw	128
  7077  001890  0100               	movlb	0	; () banked
  7078  001892  597A               	subwfb	(??_CenterBreathe+8)& (0+255),w,b
  7079  001894  A0D8               	btfss	status,0,c
  7080  001896  D029               	goto	l3317
  7081                           
  7082                           ; BSR set to: 0
  7083                           
  7084                           ; BSR set to: 0
  7085                           
  7086                           ; BSR set to: 0
  7087  001898  0E00               	movlw	0
  7088  00189A  0100               	movlb	0	; () banked
  7089  00189C  6F82               	movwf	(_CenterBreathe$1230+1)& (0+255),b
  7090  00189E  0E25               	movlw	37
  7091  0018A0  6F81               	movwf	_CenterBreathe$1230& (0+255),b
  7092                           
  7093                           ; BSR set to: 0
  7094                           
  7095                           ; BSR set to: 0
  7096  0018A2  0100               	movlb	0	; () banked
  7097  0018A4  518F               	movf	CenterBreathe@i& (0+255),w,b
  7098  0018A6  0100               	movlb	0	; () banked
  7099  0018A8  6F72               	movwf	??_CenterBreathe& (0+255),b
  7100  0018AA  6B73               	clrf	(??_CenterBreathe+1)& (0+255),b
  7101  0018AC  0100               	movlb	0	; () banked
  7102  0018AE  1F72               	comf	??_CenterBreathe& (0+255),f,b
  7103  0018B0  1F73               	comf	(??_CenterBreathe+1)& (0+255),f,b
  7104  0018B2  4B72               	infsnz	??_CenterBreathe& (0+255),f,b
  7105  0018B4  2B73               	incf	(??_CenterBreathe+1)& (0+255),f,b
  7106  0018B6  0100               	movlb	0	; () banked
  7107  0018B8  5181               	movf	_CenterBreathe$1230& (0+255),w,b
  7108  0018BA  0100               	movlb	0	; () banked
  7109  0018BC  2772               	addwf	??_CenterBreathe& (0+255),f,b
  7110  0018BE  0100               	movlb	0	; () banked
  7111  0018C0  5182               	movf	(_CenterBreathe$1230+1)& (0+255),w,b
  7112  0018C2  0100               	movlb	0	; () banked
  7113  0018C4  2373               	addwfc	(??_CenterBreathe+1)& (0+255),f,b
  7114  0018C6  0E4C               	movlw	76
  7115  0018C8  0100               	movlb	0	; () banked
  7116  0018CA  2572               	addwf	??_CenterBreathe& (0+255),w,b
  7117  0018CC  0100               	movlb	0	; () banked
  7118  0018CE  6F60               	movwf	___awmod@dividend& (0+255),b
  7119  0018D0  0E00               	movlw	0
  7120  0018D2  0100               	movlb	0	; () banked
  7121  0018D4  2173               	addwfc	(??_CenterBreathe+1)& (0+255),w,b
  7122  0018D6  0100               	movlb	0	; () banked
  7123  0018D8  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7124  0018DA  0E00               	movlw	0
  7125  0018DC  0100               	movlb	0	; () banked
  7126  0018DE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7127  0018E0  0E4C               	movlw	76
  7128  0018E2  6F62               	movwf	___awmod@divisor& (0+255),b
  7129  0018E4  EC20  F019         	call	___awmod	;wreg free
  7130  0018E8  D02C               	goto	L16
  7131  0018EA                     l3317:
  7132                           
  7133                           ; BSR set to: 0
  7134  0018EA  0E00               	movlw	0
  7135  0018EC  0100               	movlb	0	; () banked
  7136  0018EE  6F84               	movwf	(_CenterBreathe$1231+1)& (0+255),b
  7137  0018F0  0E25               	movlw	37
  7138  0018F2  6F83               	movwf	_CenterBreathe$1231& (0+255),b
  7139                           
  7140                           ; BSR set to: 0
  7141                           
  7142                           ; BSR set to: 0
  7143  0018F4  C083  F072         	movff	_CenterBreathe$1231,??_CenterBreathe
  7144  0018F8  C084  F073         	movff	_CenterBreathe$1231+1,??_CenterBreathe+1
  7145  0018FC  0100               	movlb	0	; () banked
  7146  0018FE  1F72               	comf	??_CenterBreathe& (0+255),f,b
  7147  001900  1F73               	comf	(??_CenterBreathe+1)& (0+255),f,b
  7148  001902  4B72               	infsnz	??_CenterBreathe& (0+255),f,b
  7149  001904  2B73               	incf	(??_CenterBreathe+1)& (0+255),f,b
  7150  001906  0100               	movlb	0	; () banked
  7151  001908  518F               	movf	CenterBreathe@i& (0+255),w,b
  7152  00190A  0100               	movlb	0	; () banked
  7153  00190C  6F74               	movwf	(??_CenterBreathe+2)& (0+255),b
  7154  00190E  6B75               	clrf	(??_CenterBreathe+3)& (0+255),b
  7155  001910  0100               	movlb	0	; () banked
  7156  001912  5172               	movf	??_CenterBreathe& (0+255),w,b
  7157  001914  0100               	movlb	0	; () banked
  7158  001916  2774               	addwf	(??_CenterBreathe+2)& (0+255),f,b
  7159  001918  0100               	movlb	0	; () banked
  7160  00191A  5173               	movf	(??_CenterBreathe+1)& (0+255),w,b
  7161  00191C  0100               	movlb	0	; () banked
  7162  00191E  2375               	addwfc	(??_CenterBreathe+3)& (0+255),f,b
  7163  001920  0E4C               	movlw	76
  7164  001922  0100               	movlb	0	; () banked
  7165  001924  2574               	addwf	(??_CenterBreathe+2)& (0+255),w,b
  7166  001926  0100               	movlb	0	; () banked
  7167  001928  6F60               	movwf	___awmod@dividend& (0+255),b
  7168  00192A  0E00               	movlw	0
  7169  00192C  0100               	movlb	0	; () banked
  7170  00192E  2175               	addwfc	(??_CenterBreathe+3)& (0+255),w,b
  7171  001930  0100               	movlb	0	; () banked
  7172  001932  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7173  001934  0E00               	movlw	0
  7174  001936  0100               	movlb	0	; () banked
  7175  001938  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7176  00193A  0E4C               	movlw	76
  7177  00193C  6F62               	movwf	___awmod@divisor& (0+255),b
  7178  00193E  EC20  F019         	call	___awmod	;wreg free
  7179  001942                     L16:
  7180  001942  C060  F07B         	movff	?___awmod,_CenterBreathe$1227
  7181  001946  C061  F07C         	movff	?___awmod+1,_CenterBreathe$1227+1
  7182  00194A  C07B  F08E         	movff	_CenterBreathe$1227,CenterBreathe@x
  7183                           
  7184                           ;Pattern_PtrnFunctions.c: 142: val = (x < fade_thresh ? (*ptrnStepCounter>>4) : (x < pul
      +                          seWidth ? (*ptrnStepCounter-*ptrnStepCounter*x/pulseWidth)>>4 : 0x00));
  7185  00194E  0100               	movlb	0	; () banked
  7186  001950  518B               	movf	CenterBreathe@fade_thresh& (0+255),w,b
  7187  001952  0100               	movlb	0	; () banked
  7188  001954  5D8E               	subwf	CenterBreathe@x& (0+255),w,b
  7189  001956  A0D8               	btfss	status,0,c
  7190  001958  D04B               	goto	l3333
  7191                           
  7192                           ; BSR set to: 0
  7193  00195A  0100               	movlb	0	; () banked
  7194  00195C  518D               	movf	CenterBreathe@pulseWidth& (0+255),w,b
  7195  00195E  0100               	movlb	0	; () banked
  7196  001960  5D8E               	subwf	CenterBreathe@x& (0+255),w,b
  7197  001962  A0D8               	btfss	status,0,c
  7198  001964  D006               	goto	l3329
  7199                           
  7200                           ; BSR set to: 0
  7201  001966  0E00               	movlw	0
  7202  001968  0100               	movlb	0	; () banked
  7203  00196A  6F88               	movwf	(_CenterBreathe$1233+1)& (0+255),b
  7204  00196C  0E00               	movlw	0
  7205  00196E  6F87               	movwf	_CenterBreathe$1233& (0+255),b
  7206  001970  D03A               	goto	l3331
  7207  001972                     l3329:
  7208                           
  7209                           ; BSR set to: 0
  7210  001972  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7211  001976  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7212  00197A  50DF               	movf	indf2,w,c
  7213  00197C  0100               	movlb	0	; () banked
  7214  00197E  6F72               	movwf	??_CenterBreathe& (0+255),b
  7215  001980  0100               	movlb	0	; () banked
  7216  001982  5172               	movf	??_CenterBreathe& (0+255),w,b
  7217  001984  0100               	movlb	0	; () banked
  7218  001986  038E               	mulwf	CenterBreathe@x& (0+255),b
  7219  001988  CFF3 F060          	movff	prodl,___awdiv@dividend
  7220  00198C  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  7221  001990  C08D  F062         	movff	CenterBreathe@pulseWidth,___awdiv@divisor
  7222  001994  0100               	movlb	0	; () banked
  7223  001996  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  7224  001998  ECBC  F017         	call	___awdiv	;wreg free
  7225  00199C  0100               	movlb	0	; () banked
  7226  00199E  1F60               	comf	?___awdiv& (0+255),f,b
  7227  0019A0  0100               	movlb	0	; () banked
  7228  0019A2  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  7229  0019A4  0100               	movlb	0	; () banked
  7230  0019A6  4B60               	infsnz	?___awdiv& (0+255),f,b
  7231  0019A8  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  7232  0019AA  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7233  0019AE  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7234  0019B2  50DF               	movf	indf2,w,c
  7235  0019B4  0100               	movlb	0	; () banked
  7236  0019B6  6F73               	movwf	(??_CenterBreathe+1)& (0+255),b
  7237  0019B8  6B74               	clrf	(??_CenterBreathe+2)& (0+255),b
  7238  0019BA  0100               	movlb	0	; () banked
  7239  0019BC  5160               	movf	?___awdiv& (0+255),w,b
  7240  0019BE  0100               	movlb	0	; () banked
  7241  0019C0  2773               	addwf	(??_CenterBreathe+1)& (0+255),f,b
  7242  0019C2  0100               	movlb	0	; () banked
  7243  0019C4  5161               	movf	(?___awdiv+1)& (0+255),w,b
  7244  0019C6  0100               	movlb	0	; () banked
  7245  0019C8  2374               	addwfc	(??_CenterBreathe+2)& (0+255),f,b
  7246  0019CA  0E04               	movlw	4
  7247  0019CC  0100               	movlb	0	; () banked
  7248  0019CE  6F75               	movwf	(??_CenterBreathe+3)& (0+255),b
  7249  0019D0                     u2145:
  7250  0019D0  0100               	movlb	0	; () banked
  7251  0019D2  3574               	rlcf	(??_CenterBreathe+2)& (0+255),w,b
  7252  0019D4  3374               	rrcf	(??_CenterBreathe+2)& (0+255),f,b
  7253  0019D6  3373               	rrcf	(??_CenterBreathe+1)& (0+255),f,b
  7254  0019D8  0100               	movlb	0	; () banked
  7255  0019DA  2F75               	decfsz	(??_CenterBreathe+3)& (0+255),f,b
  7256  0019DC  D7F9               	goto	u2145
  7257  0019DE  C073  F087         	movff	??_CenterBreathe+1,_CenterBreathe$1233
  7258  0019E2  C074  F088         	movff	??_CenterBreathe+2,_CenterBreathe$1233+1
  7259  0019E6                     l3331:
  7260                           
  7261                           ; BSR set to: 0
  7262  0019E6  C087  F085         	movff	_CenterBreathe$1233,_CenterBreathe$1232
  7263  0019EA  C088  F086         	movff	_CenterBreathe$1233+1,_CenterBreathe$1232+1
  7264  0019EE  D010               	goto	l3335
  7265  0019F0                     l3333:
  7266                           
  7267                           ; BSR set to: 0
  7268  0019F0  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7269  0019F4  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7270  0019F8  50DF               	movf	indf2,w,c
  7271  0019FA  0100               	movlb	0	; () banked
  7272  0019FC  6F72               	movwf	??_CenterBreathe& (0+255),b
  7273  0019FE  0100               	movlb	0	; () banked
  7274  001A00  3B72               	swapf	??_CenterBreathe& (0+255),f,b
  7275  001A02  0E0F               	movlw	15
  7276  001A04  1772               	andwf	??_CenterBreathe& (0+255),f,b
  7277  001A06  0100               	movlb	0	; () banked
  7278  001A08  5172               	movf	??_CenterBreathe& (0+255),w,b
  7279  001A0A  0100               	movlb	0	; () banked
  7280  001A0C  6F85               	movwf	_CenterBreathe$1232& (0+255),b
  7281  001A0E  6B86               	clrf	(_CenterBreathe$1232+1)& (0+255),b
  7282  001A10                     l3335:
  7283                           
  7284                           ; BSR set to: 0
  7285  001A10  C085  F08C         	movff	_CenterBreathe$1232,CenterBreathe@val
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;Pattern_PtrnFunctions.c: 143: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  7289  001A14  0100               	movlb	0	; () banked
  7290  001A16  516F               	movf	CenterBreathe@base_sat& (0+255),w,b
  7291  001A18  0100               	movlb	0	; () banked
  7292  001A1A  6F72               	movwf	??_CenterBreathe& (0+255),b
  7293  001A1C  6B73               	clrf	(??_CenterBreathe+1)& (0+255),b
  7294  001A1E  0100               	movlb	0	; () banked
  7295  001A20  3B72               	swapf	??_CenterBreathe& (0+255),f,b
  7296  001A22  3B73               	swapf	(??_CenterBreathe+1)& (0+255),f,b
  7297  001A24  0EF0               	movlw	240
  7298  001A26  1773               	andwf	(??_CenterBreathe+1)& (0+255),f,b
  7299  001A28  5172               	movf	??_CenterBreathe& (0+255),w,b
  7300  001A2A  0B0F               	andlw	15
  7301  001A2C  1373               	iorwf	(??_CenterBreathe+1)& (0+255),f,b
  7302  001A2E  0EF0               	movlw	240
  7303  001A30  1772               	andwf	??_CenterBreathe& (0+255),f,b
  7304  001A32  0100               	movlb	0	; () banked
  7305  001A34  516E               	movf	CenterBreathe@base_hue& (0+255),w,b
  7306  001A36  0100               	movlb	0	; () banked
  7307  001A38  6F75               	movwf	(??_CenterBreathe+3)& (0+255),b
  7308  001A3A  6B74               	clrf	(??_CenterBreathe+2)& (0+255),b
  7309  001A3C  0100               	movlb	0	; () banked
  7310  001A3E  5172               	movf	??_CenterBreathe& (0+255),w,b
  7311  001A40  0100               	movlb	0	; () banked
  7312  001A42  1374               	iorwf	(??_CenterBreathe+2)& (0+255),f,b
  7313  001A44  0100               	movlb	0	; () banked
  7314  001A46  5173               	movf	(??_CenterBreathe+1)& (0+255),w,b
  7315  001A48  0100               	movlb	0	; () banked
  7316  001A4A  1375               	iorwf	(??_CenterBreathe+3)& (0+255),f,b
  7317  001A4C  0100               	movlb	0	; () banked
  7318  001A4E  518C               	movf	CenterBreathe@val& (0+255),w,b
  7319  001A50  0100               	movlb	0	; () banked
  7320  001A52  1374               	iorwf	(??_CenterBreathe+2)& (0+255),f,b
  7321  001A54  0E00               	movlw	0
  7322  001A56  1375               	iorwf	(??_CenterBreathe+3)& (0+255),f,b
  7323  001A58  0100               	movlb	0	; () banked
  7324  001A5A  518F               	movf	CenterBreathe@i& (0+255),w,b
  7325  001A5C  0D02               	mullw	2
  7326  001A5E  50F3               	movf	prodl,w,c
  7327  001A60  0100               	movlb	0	; () banked
  7328  001A62  2568               	addwf	CenterBreathe@ptrnPointer& (0+255),w,b
  7329  001A64  6ED9               	movwf	fsr2l,c
  7330  001A66  50F4               	movf	prodh,w,c
  7331  001A68  0100               	movlb	0	; () banked
  7332  001A6A  2169               	addwfc	(CenterBreathe@ptrnPointer+1)& (0+255),w,b
  7333  001A6C  6EDA               	movwf	fsr2h,c
  7334  001A6E  C074  FFDE         	movff	??_CenterBreathe+2,postinc2
  7335  001A72  C075  FFDD         	movff	??_CenterBreathe+3,postdec2
  7336                           
  7337                           ; BSR set to: 0
  7338  001A76  0100               	movlb	0	; () banked
  7339  001A78  2B8F               	incf	CenterBreathe@i& (0+255),f,b
  7340  001A7A  D6A1               	goto	l3297
  7341  001A7C                     l3343:
  7342                           
  7343                           ; BSR set to: 0
  7344                           ;Pattern_PtrnFunctions.c: 144: }
  7345                           ;Pattern_PtrnFunctions.c: 145: if(*ptrnStepCounter >= 241){
  7346  001A7C  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7347  001A80  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7348  001A84  0EF0               	movlw	240
  7349  001A86  64DF               	cpfsgt	indf2,c
  7350  001A88  D002               	goto	l3347
  7351                           
  7352                           ; BSR set to: 0
  7353                           ;Pattern_PtrnFunctions.c: 146: rising = 0;
  7354  001A8A  0E00               	movlw	0
  7355  001A8C  D008               	goto	L17
  7356  001A8E                     l3347:
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;Pattern_PtrnFunctions.c: 148: else if(*ptrnStepCounter <= 60){
  7360  001A8E  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7361  001A92  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7362  001A96  0E3D               	movlw	61
  7363  001A98  60DF               	cpfslt	indf2,c
  7364  001A9A  D003               	goto	l693
  7365                           
  7366                           ; BSR set to: 0
  7367                           ;Pattern_PtrnFunctions.c: 149: rising = 1;
  7368  001A9C  0E01               	movlw	1
  7369  001A9E                     L17:
  7370  001A9E  0100               	movlb	0	; () banked
  7371  001AA0  6FF3               	movwf	CenterBreathe@rising& (0+255),b
  7372  001AA2                     l693:
  7373                           
  7374                           ; BSR set to: 0
  7375                           ;Pattern_PtrnFunctions.c: 150: }
  7376                           ;Pattern_PtrnFunctions.c: 151: *ptrnStepCounter = (rising ? *ptrnStepCounter+15 : *ptrnS
      +                          tepCounter-15);
  7377  001AA2  0100               	movlb	0	; () banked
  7378  001AA4  51F3               	movf	CenterBreathe@rising& (0+255),w,b
  7379  001AA6  0100               	movlb	0	; () banked
  7380  001AA8  A4D8               	btfss	status,2,c
  7381  001AAA  D010               	goto	l3353
  7382                           
  7383                           ; BSR set to: 0
  7384  001AAC  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7385  001AB0  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7386  001AB4  50DF               	movf	indf2,w,c
  7387  001AB6  0100               	movlb	0	; () banked
  7388  001AB8  6F72               	movwf	??_CenterBreathe& (0+255),b
  7389  001ABA  0EF1               	movlw	241
  7390  001ABC  0100               	movlb	0	; () banked
  7391  001ABE  2572               	addwf	??_CenterBreathe& (0+255),w,b
  7392  001AC0  0100               	movlb	0	; () banked
  7393  001AC2  6F89               	movwf	_CenterBreathe$1234& (0+255),b
  7394  001AC4  0100               	movlb	0	; () banked
  7395  001AC6  6B8A               	clrf	(_CenterBreathe$1234+1)& (0+255),b
  7396  001AC8  0EFF               	movlw	255
  7397  001ACA  D00F               	goto	L18
  7398  001ACC                     l3353:
  7399                           
  7400                           ; BSR set to: 0
  7401  001ACC  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7402  001AD0  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7403  001AD4  50DF               	movf	indf2,w,c
  7404  001AD6  0100               	movlb	0	; () banked
  7405  001AD8  6F72               	movwf	??_CenterBreathe& (0+255),b
  7406  001ADA  0E0F               	movlw	15
  7407  001ADC  0100               	movlb	0	; () banked
  7408  001ADE  2572               	addwf	??_CenterBreathe& (0+255),w,b
  7409  001AE0  0100               	movlb	0	; () banked
  7410  001AE2  6F89               	movwf	_CenterBreathe$1234& (0+255),b
  7411  001AE4  0100               	movlb	0	; () banked
  7412  001AE6  6B8A               	clrf	(_CenterBreathe$1234+1)& (0+255),b
  7413  001AE8  0E00               	movlw	0
  7414  001AEA                     L18:
  7415  001AEA  238A               	addwfc	(_CenterBreathe$1234+1)& (0+255),f,b
  7416                           
  7417                           ; BSR set to: 0
  7418                           
  7419                           ; BSR set to: 0
  7420  001AEC  C06A  FFD9         	movff	CenterBreathe@ptrnStepCounter,fsr2l
  7421  001AF0  C06B  FFDA         	movff	CenterBreathe@ptrnStepCounter+1,fsr2h
  7422  001AF4  C089  FFDF         	movff	_CenterBreathe$1234,indf2
  7423                           
  7424                           ; BSR set to: 0
  7425  001AF8  0012               	return		;funcret
  7426  001AFA                     __end_of_CenterBreathe:
  7427                           	opt stack 0
  7428                           tosu	equ	0xFFF
  7429                           tosh	equ	0xFFE
  7430                           tosl	equ	0xFFD
  7431                           pclath	equ	0xFFA
  7432                           tblptru	equ	0xFF8
  7433                           tblptrh	equ	0xFF7
  7434                           tblptrl	equ	0xFF6
  7435                           tablat	equ	0xFF5
  7436                           prodh	equ	0xFF4
  7437                           prodl	equ	0xFF3
  7438                           postinc0	equ	0xFEE
  7439                           wreg	equ	0xFE8
  7440                           postdec1	equ	0xFE5
  7441                           fsr1h	equ	0xFE2
  7442                           fsr1l	equ	0xFE1
  7443                           indf2	equ	0xFDF
  7444                           postinc2	equ	0xFDE
  7445                           postdec2	equ	0xFDD
  7446                           plusw2	equ	0xFDB
  7447                           fsr2h	equ	0xFDA
  7448                           fsr2l	equ	0xFD9
  7449                           status	equ	0xFD8
  7450                           
  7451 ;; *************** function _BrokenPinwheel *****************
  7452 ;; Defined at:
  7453 ;;		line 203 in file "Pattern_PtrnFunctions.c"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;  ptrnPointer     2    8[BANK0 ] PTR unsigned int 
  7456 ;;		 -> PixelPattern(152), 
  7457 ;;  ptrnStepCoun    2   10[BANK0 ] PTR unsigned char 
  7458 ;;		 -> PatternStepCounter(1), 
  7459 ;;  cycleCounter    2   12[BANK0 ] PTR unsigned long 
  7460 ;;		 -> CycleCounter(4), 
  7461 ;;  base_hue        1   14[BANK0 ] unsigned char 
  7462 ;;  base_sat        1   15[BANK0 ] unsigned char 
  7463 ;;  15776           2   16[BANK0 ] PTR void 
  7464 ;;		 -> NULL(0), 
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;  i               1   36[BANK0 ] unsigned char 
  7467 ;;  val             1   35[BANK0 ] unsigned char 
  7468 ;;  fade            1   34[BANK0 ] unsigned char 
  7469 ;;  x               1   33[BANK0 ] unsigned char 
  7470 ;; Return value:  Size  Location     Type
  7471 ;;                  1    wreg      void 
  7472 ;; Registers used:
  7473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7474 ;; Tracked objects:
  7475 ;;		On entry : 0/0
  7476 ;;		On exit  : 0/0
  7477 ;;		Unchanged: 0/0
  7478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7479 ;;      Params:         0      10       0       0
  7480 ;;      Locals:         0       8       0       0
  7481 ;;      Temps:          0      11       0       0
  7482 ;;      Totals:         0      29       0       0
  7483 ;;Total ram usage:       29 bytes
  7484 ;; Hardware stack levels used:    1
  7485 ;; Hardware stack levels required when called:    8
  7486 ;; This function calls:
  7487 ;;		___awdiv
  7488 ;;		___awmod
  7489 ;; This function is called by:
  7490 ;;		_UpdatePattern
  7491 ;; This function uses a non-reentrant model
  7492 ;;
  7493                           
  7494                           	psect	text23
  7495  0003B8                     __ptext23:
  7496                           	opt stack 0
  7497  0003B8                     _BrokenPinwheel:
  7498                           	opt stack 18
  7499                           
  7500                           ;Pattern_PtrnFunctions.c: 204: uint8_t val, x;
  7501                           ;Pattern_PtrnFunctions.c: 205: uint8_t fade = 2;
  7502                           
  7503                           ; BSR set to: 0
  7504                           ;incstack = 0
  7505  0003B8  0E02               	movlw	2
  7506  0003BA  0100               	movlb	0	; () banked
  7507  0003BC  6F82               	movwf	BrokenPinwheel@fade& (0+255),b
  7508                           
  7509                           ;Pattern_PtrnFunctions.c: 207: for(uint8_t i=0;i<76/8;i++){
  7510  0003BE  0E00               	movlw	0
  7511  0003C0  0100               	movlb	0	; () banked
  7512  0003C2  6F84               	movwf	BrokenPinwheel@i& (0+255),b
  7513  0003C4                     l3451:
  7514                           
  7515                           ; BSR set to: 0
  7516  0003C4  0E08               	movlw	8
  7517  0003C6  0100               	movlb	0	; () banked
  7518  0003C8  6584               	cpfsgt	BrokenPinwheel@i& (0+255),b
  7519  0003CA  D001               	goto	l3455
  7520  0003CC  D2D9               	goto	l3491
  7521  0003CE                     l3455:
  7522                           
  7523                           ; BSR set to: 0
  7524                           ;Pattern_PtrnFunctions.c: 208: x = ((((76+i-*ptrnStepCounter)%76) < ((76+*ptrnStepCounte
      +                          r-i)%76)) ? ((76+i-*ptrnStepCounter)%76) : ((76+*ptrnStepCounter-i)%76));
  7525  0003CE  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  7526  0003D2  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  7527  0003D6  50DF               	movf	indf2,w,c
  7528  0003D8  0100               	movlb	0	; () banked
  7529  0003DA  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7530  0003DC  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7531  0003DE  0100               	movlb	0	; () banked
  7532  0003E0  1F72               	comf	??_BrokenPinwheel& (0+255),f,b
  7533  0003E2  1F73               	comf	(??_BrokenPinwheel+1)& (0+255),f,b
  7534  0003E4  4B72               	infsnz	??_BrokenPinwheel& (0+255),f,b
  7535  0003E6  2B73               	incf	(??_BrokenPinwheel+1)& (0+255),f,b
  7536  0003E8  0100               	movlb	0	; () banked
  7537  0003EA  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7538  0003EC  0100               	movlb	0	; () banked
  7539  0003EE  6F74               	movwf	(??_BrokenPinwheel+2)& (0+255),b
  7540  0003F0  6B75               	clrf	(??_BrokenPinwheel+3)& (0+255),b
  7541  0003F2  0100               	movlb	0	; () banked
  7542  0003F4  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7543  0003F6  0100               	movlb	0	; () banked
  7544  0003F8  2774               	addwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7545  0003FA  0100               	movlb	0	; () banked
  7546  0003FC  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7547  0003FE  0100               	movlb	0	; () banked
  7548  000400  2375               	addwfc	(??_BrokenPinwheel+3)& (0+255),f,b
  7549  000402  0E4C               	movlw	76
  7550  000404  0100               	movlb	0	; () banked
  7551  000406  2574               	addwf	(??_BrokenPinwheel+2)& (0+255),w,b
  7552  000408  0100               	movlb	0	; () banked
  7553  00040A  6F60               	movwf	___awmod@dividend& (0+255),b
  7554  00040C  0E00               	movlw	0
  7555  00040E  0100               	movlb	0	; () banked
  7556  000410  2175               	addwfc	(??_BrokenPinwheel+3)& (0+255),w,b
  7557  000412  0100               	movlb	0	; () banked
  7558  000414  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7559  000416  0E00               	movlw	0
  7560  000418  0100               	movlb	0	; () banked
  7561  00041A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7562  00041C  0E4C               	movlw	76
  7563  00041E  6F62               	movwf	___awmod@divisor& (0+255),b
  7564  000420  EC20  F019         	call	___awmod	;wreg free
  7565  000424  C060  F076         	movff	?___awmod,??_BrokenPinwheel+4
  7566  000428  C061  F077         	movff	?___awmod+1,??_BrokenPinwheel+5
  7567  00042C  0100               	movlb	0	; () banked
  7568  00042E  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7569  000430  0100               	movlb	0	; () banked
  7570  000432  6F78               	movwf	(??_BrokenPinwheel+6)& (0+255),b
  7571  000434  6B79               	clrf	(??_BrokenPinwheel+7)& (0+255),b
  7572  000436  0100               	movlb	0	; () banked
  7573  000438  1F78               	comf	(??_BrokenPinwheel+6)& (0+255),f,b
  7574  00043A  1F79               	comf	(??_BrokenPinwheel+7)& (0+255),f,b
  7575  00043C  4B78               	infsnz	(??_BrokenPinwheel+6)& (0+255),f,b
  7576  00043E  2B79               	incf	(??_BrokenPinwheel+7)& (0+255),f,b
  7577  000440  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  7578  000444  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  7579  000448  50DF               	movf	indf2,w,c
  7580  00044A  0100               	movlb	0	; () banked
  7581  00044C  6F7A               	movwf	(??_BrokenPinwheel+8)& (0+255),b
  7582  00044E  6B7B               	clrf	(??_BrokenPinwheel+9)& (0+255),b
  7583  000450  0100               	movlb	0	; () banked
  7584  000452  5178               	movf	(??_BrokenPinwheel+6)& (0+255),w,b
  7585  000454  0100               	movlb	0	; () banked
  7586  000456  277A               	addwf	(??_BrokenPinwheel+8)& (0+255),f,b
  7587  000458  0100               	movlb	0	; () banked
  7588  00045A  5179               	movf	(??_BrokenPinwheel+7)& (0+255),w,b
  7589  00045C  0100               	movlb	0	; () banked
  7590  00045E  237B               	addwfc	(??_BrokenPinwheel+9)& (0+255),f,b
  7591  000460  0E4C               	movlw	76
  7592  000462  0100               	movlb	0	; () banked
  7593  000464  257A               	addwf	(??_BrokenPinwheel+8)& (0+255),w,b
  7594  000466  0100               	movlb	0	; () banked
  7595  000468  6F60               	movwf	___awmod@dividend& (0+255),b
  7596  00046A  0E00               	movlw	0
  7597  00046C  0100               	movlb	0	; () banked
  7598  00046E  217B               	addwfc	(??_BrokenPinwheel+9)& (0+255),w,b
  7599  000470  0100               	movlb	0	; () banked
  7600  000472  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7601  000474  0E00               	movlw	0
  7602  000476  0100               	movlb	0	; () banked
  7603  000478  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7604  00047A  0E4C               	movlw	76
  7605  00047C  6F62               	movwf	___awmod@divisor& (0+255),b
  7606  00047E  EC20  F019         	call	___awmod	;wreg free
  7607  000482  0100               	movlb	0	; () banked
  7608  000484  5160               	movf	?___awmod& (0+255),w,b
  7609  000486  0100               	movlb	0	; () banked
  7610  000488  5D76               	subwf	(??_BrokenPinwheel+4)& (0+255),w,b
  7611  00048A  0100               	movlb	0	; () banked
  7612  00048C  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  7613  00048E  0A80               	xorlw	128
  7614  000490  0100               	movlb	0	; () banked
  7615  000492  6F7C               	movwf	(??_BrokenPinwheel+10)& (0+255),b
  7616  000494  0100               	movlb	0	; () banked
  7617  000496  5161               	movf	(?___awmod+1)& (0+255),w,b
  7618  000498  0A80               	xorlw	128
  7619  00049A  0100               	movlb	0	; () banked
  7620  00049C  597C               	subwfb	(??_BrokenPinwheel+10)& (0+255),w,b
  7621  00049E  A0D8               	btfss	status,0,c
  7622  0004A0  D02C               	goto	l3459
  7623                           
  7624                           ; BSR set to: 0
  7625  0004A2  0100               	movlb	0	; () banked
  7626  0004A4  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7627  0004A6  0100               	movlb	0	; () banked
  7628  0004A8  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7629  0004AA  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7630  0004AC  0100               	movlb	0	; () banked
  7631  0004AE  1F72               	comf	??_BrokenPinwheel& (0+255),f,b
  7632  0004B0  1F73               	comf	(??_BrokenPinwheel+1)& (0+255),f,b
  7633  0004B2  4B72               	infsnz	??_BrokenPinwheel& (0+255),f,b
  7634  0004B4  2B73               	incf	(??_BrokenPinwheel+1)& (0+255),f,b
  7635  0004B6  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  7636  0004BA  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  7637  0004BE  50DF               	movf	indf2,w,c
  7638  0004C0  0100               	movlb	0	; () banked
  7639  0004C2  6F74               	movwf	(??_BrokenPinwheel+2)& (0+255),b
  7640  0004C4  6B75               	clrf	(??_BrokenPinwheel+3)& (0+255),b
  7641  0004C6  0100               	movlb	0	; () banked
  7642  0004C8  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7643  0004CA  0100               	movlb	0	; () banked
  7644  0004CC  2774               	addwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7645  0004CE  0100               	movlb	0	; () banked
  7646  0004D0  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7647  0004D2  0100               	movlb	0	; () banked
  7648  0004D4  2375               	addwfc	(??_BrokenPinwheel+3)& (0+255),f,b
  7649  0004D6  0E4C               	movlw	76
  7650  0004D8  0100               	movlb	0	; () banked
  7651  0004DA  2574               	addwf	(??_BrokenPinwheel+2)& (0+255),w,b
  7652  0004DC  0100               	movlb	0	; () banked
  7653  0004DE  6F60               	movwf	___awmod@dividend& (0+255),b
  7654  0004E0  0E00               	movlw	0
  7655  0004E2  0100               	movlb	0	; () banked
  7656  0004E4  2175               	addwfc	(??_BrokenPinwheel+3)& (0+255),w,b
  7657  0004E6  0100               	movlb	0	; () banked
  7658  0004E8  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7659  0004EA  0E00               	movlw	0
  7660  0004EC  0100               	movlb	0	; () banked
  7661  0004EE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7662  0004F0  0E4C               	movlw	76
  7663  0004F2  6F62               	movwf	___awmod@divisor& (0+255),b
  7664  0004F4  EC20  F019         	call	___awmod	;wreg free
  7665  0004F8  D02B               	goto	L19
  7666  0004FA                     l3459:
  7667  0004FA  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  7668  0004FE  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  7669  000502  50DF               	movf	indf2,w,c
  7670  000504  0100               	movlb	0	; () banked
  7671  000506  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7672  000508  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7673  00050A  0100               	movlb	0	; () banked
  7674  00050C  1F72               	comf	??_BrokenPinwheel& (0+255),f,b
  7675  00050E  1F73               	comf	(??_BrokenPinwheel+1)& (0+255),f,b
  7676  000510  4B72               	infsnz	??_BrokenPinwheel& (0+255),f,b
  7677  000512  2B73               	incf	(??_BrokenPinwheel+1)& (0+255),f,b
  7678  000514  0100               	movlb	0	; () banked
  7679  000516  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7680  000518  0100               	movlb	0	; () banked
  7681  00051A  6F74               	movwf	(??_BrokenPinwheel+2)& (0+255),b
  7682  00051C  6B75               	clrf	(??_BrokenPinwheel+3)& (0+255),b
  7683  00051E  0100               	movlb	0	; () banked
  7684  000520  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7685  000522  0100               	movlb	0	; () banked
  7686  000524  2774               	addwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7687  000526  0100               	movlb	0	; () banked
  7688  000528  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7689  00052A  0100               	movlb	0	; () banked
  7690  00052C  2375               	addwfc	(??_BrokenPinwheel+3)& (0+255),f,b
  7691  00052E  0E4C               	movlw	76
  7692  000530  0100               	movlb	0	; () banked
  7693  000532  2574               	addwf	(??_BrokenPinwheel+2)& (0+255),w,b
  7694  000534  0100               	movlb	0	; () banked
  7695  000536  6F60               	movwf	___awmod@dividend& (0+255),b
  7696  000538  0E00               	movlw	0
  7697  00053A  0100               	movlb	0	; () banked
  7698  00053C  2175               	addwfc	(??_BrokenPinwheel+3)& (0+255),w,b
  7699  00053E  0100               	movlb	0	; () banked
  7700  000540  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  7701  000542  0E00               	movlw	0
  7702  000544  0100               	movlb	0	; () banked
  7703  000546  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7704  000548  0E4C               	movlw	76
  7705  00054A  6F62               	movwf	___awmod@divisor& (0+255),b
  7706  00054C  EC20  F019         	call	___awmod	;wreg free
  7707  000550                     L19:
  7708  000550  C060  F07D         	movff	?___awmod,_BrokenPinwheel$1285
  7709  000554  C061  F07E         	movff	?___awmod+1,_BrokenPinwheel$1285+1
  7710  000558  C07D  F081         	movff	_BrokenPinwheel$1285,BrokenPinwheel@x
  7711                           
  7712                           ;Pattern_PtrnFunctions.c: 209: val = (x < fade ? 0x0F-x*0x0F/fade : 0x00);
  7713  00055C  0100               	movlb	0	; () banked
  7714  00055E  5182               	movf	BrokenPinwheel@fade& (0+255),w,b
  7715  000560  0100               	movlb	0	; () banked
  7716  000562  5D81               	subwf	BrokenPinwheel@x& (0+255),w,b
  7717  000564  A0D8               	btfss	status,0,c
  7718  000566  D006               	goto	l3467
  7719                           
  7720                           ; BSR set to: 0
  7721  000568  0E00               	movlw	0
  7722  00056A  0100               	movlb	0	; () banked
  7723  00056C  6F80               	movwf	(_BrokenPinwheel$1286+1)& (0+255),b
  7724  00056E  0E00               	movlw	0
  7725  000570  6F7F               	movwf	_BrokenPinwheel$1286& (0+255),b
  7726  000572  D01E               	goto	l3469
  7727  000574                     l3467:
  7728                           
  7729                           ; BSR set to: 0
  7730  000574  0100               	movlb	0	; () banked
  7731  000576  5181               	movf	BrokenPinwheel@x& (0+255),w,b
  7732  000578  0D0F               	mullw	15
  7733  00057A  CFF3 F060          	movff	prodl,___awdiv@dividend
  7734  00057E  CFF4 F061          	movff	prodh,___awdiv@dividend+1
  7735  000582  C082  F062         	movff	BrokenPinwheel@fade,___awdiv@divisor
  7736  000586  0100               	movlb	0	; () banked
  7737  000588  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  7738  00058A  ECBC  F017         	call	___awdiv	;wreg free
  7739  00058E  0100               	movlb	0	; () banked
  7740  000590  1F60               	comf	?___awdiv& (0+255),f,b
  7741  000592  0100               	movlb	0	; () banked
  7742  000594  1F61               	comf	(?___awdiv+1)& (0+255),f,b
  7743  000596  0100               	movlb	0	; () banked
  7744  000598  4B60               	infsnz	?___awdiv& (0+255),f,b
  7745  00059A  2B61               	incf	(?___awdiv+1)& (0+255),f,b
  7746  00059C  0E0F               	movlw	15
  7747  00059E  0100               	movlb	0	; () banked
  7748  0005A0  2560               	addwf	?___awdiv& (0+255),w,b
  7749  0005A2  0100               	movlb	0	; () banked
  7750  0005A4  6F7F               	movwf	_BrokenPinwheel$1286& (0+255),b
  7751  0005A6  0E00               	movlw	0
  7752  0005A8  0100               	movlb	0	; () banked
  7753  0005AA  2161               	addwfc	(?___awdiv+1)& (0+255),w,b
  7754  0005AC  0100               	movlb	0	; () banked
  7755  0005AE  6F80               	movwf	(_BrokenPinwheel$1286+1)& (0+255),b
  7756  0005B0                     l3469:
  7757                           
  7758                           ; BSR set to: 0
  7759  0005B0  C07F  F083         	movff	_BrokenPinwheel$1286,BrokenPinwheel@val
  7760                           
  7761                           ; BSR set to: 0
  7762                           ;Pattern_PtrnFunctions.c: 210: ptrnPointer[i] = ((uint16_t)base_hue<<8) | (base_sat<<4) 
      +                          | val;
  7763  0005B4  0100               	movlb	0	; () banked
  7764  0005B6  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  7765  0005B8  0100               	movlb	0	; () banked
  7766  0005BA  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7767  0005BC  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7768  0005BE  0100               	movlb	0	; () banked
  7769  0005C0  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  7770  0005C2  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  7771  0005C4  0EF0               	movlw	240
  7772  0005C6  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7773  0005C8  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7774  0005CA  0B0F               	andlw	15
  7775  0005CC  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7776  0005CE  0EF0               	movlw	240
  7777  0005D0  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  7778  0005D2  0100               	movlb	0	; () banked
  7779  0005D4  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  7780  0005D6  0100               	movlb	0	; () banked
  7781  0005D8  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  7782  0005DA  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  7783  0005DC  0100               	movlb	0	; () banked
  7784  0005DE  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7785  0005E0  0100               	movlb	0	; () banked
  7786  0005E2  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7787  0005E4  0100               	movlb	0	; () banked
  7788  0005E6  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7789  0005E8  0100               	movlb	0	; () banked
  7790  0005EA  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7791  0005EC  0100               	movlb	0	; () banked
  7792  0005EE  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  7793  0005F0  0100               	movlb	0	; () banked
  7794  0005F2  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7795  0005F4  0E00               	movlw	0
  7796  0005F6  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7797  0005F8  0100               	movlb	0	; () banked
  7798  0005FA  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7799  0005FC  0D02               	mullw	2
  7800  0005FE  50F3               	movf	prodl,w,c
  7801  000600  0100               	movlb	0	; () banked
  7802  000602  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  7803  000604  6ED9               	movwf	fsr2l,c
  7804  000606  50F4               	movf	prodh,w,c
  7805  000608  0100               	movlb	0	; () banked
  7806  00060A  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  7807  00060C  6EDA               	movwf	fsr2h,c
  7808  00060E  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  7809  000612  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  7810                           
  7811                           ; BSR set to: 0
  7812                           ;Pattern_PtrnFunctions.c: 211: ptrnPointer[i+76/8] = ((uint16_t)base_hue<<8) | (base_sat
      +                          <<4) | val;
  7813  000616  0100               	movlb	0	; () banked
  7814  000618  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  7815  00061A  0100               	movlb	0	; () banked
  7816  00061C  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7817  00061E  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7818  000620  0100               	movlb	0	; () banked
  7819  000622  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  7820  000624  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  7821  000626  0EF0               	movlw	240
  7822  000628  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7823  00062A  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7824  00062C  0B0F               	andlw	15
  7825  00062E  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7826  000630  0EF0               	movlw	240
  7827  000632  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  7828  000634  0100               	movlb	0	; () banked
  7829  000636  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  7830  000638  0100               	movlb	0	; () banked
  7831  00063A  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  7832  00063C  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  7833  00063E  0100               	movlb	0	; () banked
  7834  000640  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7835  000642  0100               	movlb	0	; () banked
  7836  000644  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7837  000646  0100               	movlb	0	; () banked
  7838  000648  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7839  00064A  0100               	movlb	0	; () banked
  7840  00064C  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7841  00064E  0100               	movlb	0	; () banked
  7842  000650  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  7843  000652  0100               	movlb	0	; () banked
  7844  000654  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7845  000656  0E00               	movlw	0
  7846  000658  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7847  00065A  0100               	movlb	0	; () banked
  7848  00065C  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7849  00065E  0100               	movlb	0	; () banked
  7850  000660  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  7851  000662  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  7852  000664  90D8               	bcf	status,0,c
  7853  000666  0100               	movlb	0	; () banked
  7854  000668  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  7855  00066A  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  7856  00066C  0E12               	movlw	18
  7857  00066E  0100               	movlb	0	; () banked
  7858  000670  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  7859  000672  0E00               	movlw	0
  7860  000674  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  7861  000676  0100               	movlb	0	; () banked
  7862  000678  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  7863  00067A  0100               	movlb	0	; () banked
  7864  00067C  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  7865  00067E  6ED9               	movwf	fsr2l,c
  7866  000680  0100               	movlb	0	; () banked
  7867  000682  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  7868  000684  0100               	movlb	0	; () banked
  7869  000686  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  7870  000688  6EDA               	movwf	fsr2h,c
  7871  00068A  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  7872  00068E  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  7873                           
  7874                           ; BSR set to: 0
  7875                           ;Pattern_PtrnFunctions.c: 212: ptrnPointer[i+76/4] = ((uint16_t)base_hue<<8) | (base_sat
      +                          <<4) | val;
  7876  000692  0100               	movlb	0	; () banked
  7877  000694  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  7878  000696  0100               	movlb	0	; () banked
  7879  000698  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7880  00069A  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7881  00069C  0100               	movlb	0	; () banked
  7882  00069E  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  7883  0006A0  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  7884  0006A2  0EF0               	movlw	240
  7885  0006A4  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7886  0006A6  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7887  0006A8  0B0F               	andlw	15
  7888  0006AA  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7889  0006AC  0EF0               	movlw	240
  7890  0006AE  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  7891  0006B0  0100               	movlb	0	; () banked
  7892  0006B2  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  7893  0006B4  0100               	movlb	0	; () banked
  7894  0006B6  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  7895  0006B8  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  7896  0006BA  0100               	movlb	0	; () banked
  7897  0006BC  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7898  0006BE  0100               	movlb	0	; () banked
  7899  0006C0  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7900  0006C2  0100               	movlb	0	; () banked
  7901  0006C4  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7902  0006C6  0100               	movlb	0	; () banked
  7903  0006C8  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7904  0006CA  0100               	movlb	0	; () banked
  7905  0006CC  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  7906  0006CE  0100               	movlb	0	; () banked
  7907  0006D0  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7908  0006D2  0E00               	movlw	0
  7909  0006D4  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7910  0006D6  0100               	movlb	0	; () banked
  7911  0006D8  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7912  0006DA  0100               	movlb	0	; () banked
  7913  0006DC  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  7914  0006DE  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  7915  0006E0  90D8               	bcf	status,0,c
  7916  0006E2  0100               	movlb	0	; () banked
  7917  0006E4  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  7918  0006E6  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  7919  0006E8  0E26               	movlw	38
  7920  0006EA  0100               	movlb	0	; () banked
  7921  0006EC  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  7922  0006EE  0E00               	movlw	0
  7923  0006F0  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  7924  0006F2  0100               	movlb	0	; () banked
  7925  0006F4  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  7926  0006F6  0100               	movlb	0	; () banked
  7927  0006F8  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  7928  0006FA  6ED9               	movwf	fsr2l,c
  7929  0006FC  0100               	movlb	0	; () banked
  7930  0006FE  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  7931  000700  0100               	movlb	0	; () banked
  7932  000702  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  7933  000704  6EDA               	movwf	fsr2h,c
  7934  000706  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  7935  00070A  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  7936                           
  7937                           ; BSR set to: 0
  7938                           ;Pattern_PtrnFunctions.c: 213: ptrnPointer[i+76*3/8] = ((uint16_t)base_hue<<8) | (base_s
      +                          at<<4) | val;
  7939  00070E  0100               	movlb	0	; () banked
  7940  000710  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  7941  000712  0100               	movlb	0	; () banked
  7942  000714  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  7943  000716  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  7944  000718  0100               	movlb	0	; () banked
  7945  00071A  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  7946  00071C  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  7947  00071E  0EF0               	movlw	240
  7948  000720  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7949  000722  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7950  000724  0B0F               	andlw	15
  7951  000726  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  7952  000728  0EF0               	movlw	240
  7953  00072A  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  7954  00072C  0100               	movlb	0	; () banked
  7955  00072E  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  7956  000730  0100               	movlb	0	; () banked
  7957  000732  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  7958  000734  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  7959  000736  0100               	movlb	0	; () banked
  7960  000738  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  7961  00073A  0100               	movlb	0	; () banked
  7962  00073C  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7963  00073E  0100               	movlb	0	; () banked
  7964  000740  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  7965  000742  0100               	movlb	0	; () banked
  7966  000744  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7967  000746  0100               	movlb	0	; () banked
  7968  000748  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  7969  00074A  0100               	movlb	0	; () banked
  7970  00074C  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  7971  00074E  0E00               	movlw	0
  7972  000750  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  7973  000752  0100               	movlb	0	; () banked
  7974  000754  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  7975  000756  0100               	movlb	0	; () banked
  7976  000758  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  7977  00075A  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  7978  00075C  90D8               	bcf	status,0,c
  7979  00075E  0100               	movlb	0	; () banked
  7980  000760  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  7981  000762  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  7982  000764  0E38               	movlw	56
  7983  000766  0100               	movlb	0	; () banked
  7984  000768  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  7985  00076A  0E00               	movlw	0
  7986  00076C  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  7987  00076E  0100               	movlb	0	; () banked
  7988  000770  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  7989  000772  0100               	movlb	0	; () banked
  7990  000774  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  7991  000776  6ED9               	movwf	fsr2l,c
  7992  000778  0100               	movlb	0	; () banked
  7993  00077A  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  7994  00077C  0100               	movlb	0	; () banked
  7995  00077E  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  7996  000780  6EDA               	movwf	fsr2h,c
  7997  000782  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  7998  000786  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  7999                           
  8000                           ; BSR set to: 0
  8001                           ;Pattern_PtrnFunctions.c: 214: ptrnPointer[i+76/2] = ((uint16_t)base_hue<<8) | (base_sat
      +                          <<4) | val;
  8002  00078A  0100               	movlb	0	; () banked
  8003  00078C  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  8004  00078E  0100               	movlb	0	; () banked
  8005  000790  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  8006  000792  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  8007  000794  0100               	movlb	0	; () banked
  8008  000796  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  8009  000798  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  8010  00079A  0EF0               	movlw	240
  8011  00079C  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8012  00079E  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8013  0007A0  0B0F               	andlw	15
  8014  0007A2  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8015  0007A4  0EF0               	movlw	240
  8016  0007A6  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  8017  0007A8  0100               	movlb	0	; () banked
  8018  0007AA  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  8019  0007AC  0100               	movlb	0	; () banked
  8020  0007AE  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  8021  0007B0  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  8022  0007B2  0100               	movlb	0	; () banked
  8023  0007B4  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8024  0007B6  0100               	movlb	0	; () banked
  8025  0007B8  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8026  0007BA  0100               	movlb	0	; () banked
  8027  0007BC  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  8028  0007BE  0100               	movlb	0	; () banked
  8029  0007C0  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8030  0007C2  0100               	movlb	0	; () banked
  8031  0007C4  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  8032  0007C6  0100               	movlb	0	; () banked
  8033  0007C8  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8034  0007CA  0E00               	movlw	0
  8035  0007CC  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8036  0007CE  0100               	movlb	0	; () banked
  8037  0007D0  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  8038  0007D2  0100               	movlb	0	; () banked
  8039  0007D4  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  8040  0007D6  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  8041  0007D8  90D8               	bcf	status,0,c
  8042  0007DA  0100               	movlb	0	; () banked
  8043  0007DC  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  8044  0007DE  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  8045  0007E0  0E4C               	movlw	76
  8046  0007E2  0100               	movlb	0	; () banked
  8047  0007E4  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  8048  0007E6  0E00               	movlw	0
  8049  0007E8  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  8050  0007EA  0100               	movlb	0	; () banked
  8051  0007EC  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  8052  0007EE  0100               	movlb	0	; () banked
  8053  0007F0  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  8054  0007F2  6ED9               	movwf	fsr2l,c
  8055  0007F4  0100               	movlb	0	; () banked
  8056  0007F6  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  8057  0007F8  0100               	movlb	0	; () banked
  8058  0007FA  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  8059  0007FC  6EDA               	movwf	fsr2h,c
  8060  0007FE  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  8061  000802  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;Pattern_PtrnFunctions.c: 215: ptrnPointer[i+76*5/8] = ((uint16_t)base_hue<<8) | (base_s
      +                          at<<4) | val;
  8065  000806  0100               	movlb	0	; () banked
  8066  000808  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  8067  00080A  0100               	movlb	0	; () banked
  8068  00080C  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  8069  00080E  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  8070  000810  0100               	movlb	0	; () banked
  8071  000812  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  8072  000814  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  8073  000816  0EF0               	movlw	240
  8074  000818  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8075  00081A  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8076  00081C  0B0F               	andlw	15
  8077  00081E  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8078  000820  0EF0               	movlw	240
  8079  000822  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  8080  000824  0100               	movlb	0	; () banked
  8081  000826  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  8082  000828  0100               	movlb	0	; () banked
  8083  00082A  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  8084  00082C  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  8085  00082E  0100               	movlb	0	; () banked
  8086  000830  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8087  000832  0100               	movlb	0	; () banked
  8088  000834  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8089  000836  0100               	movlb	0	; () banked
  8090  000838  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  8091  00083A  0100               	movlb	0	; () banked
  8092  00083C  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8093  00083E  0100               	movlb	0	; () banked
  8094  000840  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  8095  000842  0100               	movlb	0	; () banked
  8096  000844  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8097  000846  0E00               	movlw	0
  8098  000848  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8099  00084A  0100               	movlb	0	; () banked
  8100  00084C  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  8101  00084E  0100               	movlb	0	; () banked
  8102  000850  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  8103  000852  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  8104  000854  90D8               	bcf	status,0,c
  8105  000856  0100               	movlb	0	; () banked
  8106  000858  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  8107  00085A  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  8108  00085C  0E5E               	movlw	94
  8109  00085E  0100               	movlb	0	; () banked
  8110  000860  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  8111  000862  0E00               	movlw	0
  8112  000864  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  8113  000866  0100               	movlb	0	; () banked
  8114  000868  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  8115  00086A  0100               	movlb	0	; () banked
  8116  00086C  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  8117  00086E  6ED9               	movwf	fsr2l,c
  8118  000870  0100               	movlb	0	; () banked
  8119  000872  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  8120  000874  0100               	movlb	0	; () banked
  8121  000876  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  8122  000878  6EDA               	movwf	fsr2h,c
  8123  00087A  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  8124  00087E  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;Pattern_PtrnFunctions.c: 216: ptrnPointer[i+76*3/4] = ((uint16_t)base_hue<<8) | (base_s
      +                          at<<4) | val;
  8128  000882  0100               	movlb	0	; () banked
  8129  000884  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  8130  000886  0100               	movlb	0	; () banked
  8131  000888  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  8132  00088A  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  8133  00088C  0100               	movlb	0	; () banked
  8134  00088E  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  8135  000890  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  8136  000892  0EF0               	movlw	240
  8137  000894  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8138  000896  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8139  000898  0B0F               	andlw	15
  8140  00089A  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8141  00089C  0EF0               	movlw	240
  8142  00089E  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  8143  0008A0  0100               	movlb	0	; () banked
  8144  0008A2  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  8145  0008A4  0100               	movlb	0	; () banked
  8146  0008A6  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  8147  0008A8  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  8148  0008AA  0100               	movlb	0	; () banked
  8149  0008AC  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8150  0008AE  0100               	movlb	0	; () banked
  8151  0008B0  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8152  0008B2  0100               	movlb	0	; () banked
  8153  0008B4  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  8154  0008B6  0100               	movlb	0	; () banked
  8155  0008B8  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8156  0008BA  0100               	movlb	0	; () banked
  8157  0008BC  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  8158  0008BE  0100               	movlb	0	; () banked
  8159  0008C0  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8160  0008C2  0E00               	movlw	0
  8161  0008C4  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8162  0008C6  0100               	movlb	0	; () banked
  8163  0008C8  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  8164  0008CA  0100               	movlb	0	; () banked
  8165  0008CC  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  8166  0008CE  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  8167  0008D0  90D8               	bcf	status,0,c
  8168  0008D2  0100               	movlb	0	; () banked
  8169  0008D4  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  8170  0008D6  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  8171  0008D8  0E72               	movlw	114
  8172  0008DA  0100               	movlb	0	; () banked
  8173  0008DC  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  8174  0008DE  0E00               	movlw	0
  8175  0008E0  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  8176  0008E2  0100               	movlb	0	; () banked
  8177  0008E4  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  8178  0008E6  0100               	movlb	0	; () banked
  8179  0008E8  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  8180  0008EA  6ED9               	movwf	fsr2l,c
  8181  0008EC  0100               	movlb	0	; () banked
  8182  0008EE  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  8183  0008F0  0100               	movlb	0	; () banked
  8184  0008F2  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  8185  0008F4  6EDA               	movwf	fsr2h,c
  8186  0008F6  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  8187  0008FA  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  8188                           
  8189                           ; BSR set to: 0
  8190                           ;Pattern_PtrnFunctions.c: 217: ptrnPointer[i+76*7/8] = ((uint16_t)base_hue<<8) | (base_s
      +                          at<<4) | val;
  8191  0008FE  0100               	movlb	0	; () banked
  8192  000900  516F               	movf	BrokenPinwheel@base_sat& (0+255),w,b
  8193  000902  0100               	movlb	0	; () banked
  8194  000904  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  8195  000906  6B73               	clrf	(??_BrokenPinwheel+1)& (0+255),b
  8196  000908  0100               	movlb	0	; () banked
  8197  00090A  3B72               	swapf	??_BrokenPinwheel& (0+255),f,b
  8198  00090C  3B73               	swapf	(??_BrokenPinwheel+1)& (0+255),f,b
  8199  00090E  0EF0               	movlw	240
  8200  000910  1773               	andwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8201  000912  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8202  000914  0B0F               	andlw	15
  8203  000916  1373               	iorwf	(??_BrokenPinwheel+1)& (0+255),f,b
  8204  000918  0EF0               	movlw	240
  8205  00091A  1772               	andwf	??_BrokenPinwheel& (0+255),f,b
  8206  00091C  0100               	movlb	0	; () banked
  8207  00091E  516E               	movf	BrokenPinwheel@base_hue& (0+255),w,b
  8208  000920  0100               	movlb	0	; () banked
  8209  000922  6F75               	movwf	(??_BrokenPinwheel+3)& (0+255),b
  8210  000924  6B74               	clrf	(??_BrokenPinwheel+2)& (0+255),b
  8211  000926  0100               	movlb	0	; () banked
  8212  000928  5172               	movf	??_BrokenPinwheel& (0+255),w,b
  8213  00092A  0100               	movlb	0	; () banked
  8214  00092C  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8215  00092E  0100               	movlb	0	; () banked
  8216  000930  5173               	movf	(??_BrokenPinwheel+1)& (0+255),w,b
  8217  000932  0100               	movlb	0	; () banked
  8218  000934  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8219  000936  0100               	movlb	0	; () banked
  8220  000938  5183               	movf	BrokenPinwheel@val& (0+255),w,b
  8221  00093A  0100               	movlb	0	; () banked
  8222  00093C  1374               	iorwf	(??_BrokenPinwheel+2)& (0+255),f,b
  8223  00093E  0E00               	movlw	0
  8224  000940  1375               	iorwf	(??_BrokenPinwheel+3)& (0+255),f,b
  8225  000942  0100               	movlb	0	; () banked
  8226  000944  5184               	movf	BrokenPinwheel@i& (0+255),w,b
  8227  000946  0100               	movlb	0	; () banked
  8228  000948  6F76               	movwf	(??_BrokenPinwheel+4)& (0+255),b
  8229  00094A  6B77               	clrf	(??_BrokenPinwheel+5)& (0+255),b
  8230  00094C  90D8               	bcf	status,0,c
  8231  00094E  0100               	movlb	0	; () banked
  8232  000950  3776               	rlcf	(??_BrokenPinwheel+4)& (0+255),f,b
  8233  000952  3777               	rlcf	(??_BrokenPinwheel+5)& (0+255),f,b
  8234  000954  0E84               	movlw	132
  8235  000956  0100               	movlb	0	; () banked
  8236  000958  2776               	addwf	(??_BrokenPinwheel+4)& (0+255),f,b
  8237  00095A  0E00               	movlw	0
  8238  00095C  2377               	addwfc	(??_BrokenPinwheel+5)& (0+255),f,b
  8239  00095E  0100               	movlb	0	; () banked
  8240  000960  5176               	movf	(??_BrokenPinwheel+4)& (0+255),w,b
  8241  000962  0100               	movlb	0	; () banked
  8242  000964  2568               	addwf	BrokenPinwheel@ptrnPointer& (0+255),w,b
  8243  000966  6ED9               	movwf	fsr2l,c
  8244  000968  0100               	movlb	0	; () banked
  8245  00096A  5177               	movf	(??_BrokenPinwheel+5)& (0+255),w,b
  8246  00096C  0100               	movlb	0	; () banked
  8247  00096E  2169               	addwfc	(BrokenPinwheel@ptrnPointer+1)& (0+255),w,b
  8248  000970  6EDA               	movwf	fsr2h,c
  8249  000972  C074  FFDE         	movff	??_BrokenPinwheel+2,postinc2
  8250  000976  C075  FFDD         	movff	??_BrokenPinwheel+3,postdec2
  8251                           
  8252                           ; BSR set to: 0
  8253  00097A  0100               	movlb	0	; () banked
  8254  00097C  2B84               	incf	BrokenPinwheel@i& (0+255),f,b
  8255  00097E  D522               	goto	l3451
  8256  000980                     l3491:
  8257                           
  8258                           ; BSR set to: 0
  8259                           ;Pattern_PtrnFunctions.c: 218: }
  8260                           ;Pattern_PtrnFunctions.c: 219: *ptrnStepCounter = (*ptrnStepCounter+1)%(76/4);
  8261  000980  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  8262  000984  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  8263  000988  50DF               	movf	indf2,w,c
  8264  00098A  0100               	movlb	0	; () banked
  8265  00098C  6F72               	movwf	??_BrokenPinwheel& (0+255),b
  8266  00098E  0E01               	movlw	1
  8267  000990  0100               	movlb	0	; () banked
  8268  000992  2572               	addwf	??_BrokenPinwheel& (0+255),w,b
  8269  000994  0100               	movlb	0	; () banked
  8270  000996  6F60               	movwf	___awmod@dividend& (0+255),b
  8271  000998  0100               	movlb	0	; () banked
  8272  00099A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  8273  00099C  0E00               	movlw	0
  8274  00099E  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  8275  0009A0  0E00               	movlw	0
  8276  0009A2  0100               	movlb	0	; () banked
  8277  0009A4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  8278  0009A6  0E13               	movlw	19
  8279  0009A8  6F62               	movwf	___awmod@divisor& (0+255),b
  8280  0009AA  EC20  F019         	call	___awmod	;wreg free
  8281  0009AE  0100               	movlb	0	; () banked
  8282  0009B0  5160               	movf	?___awmod& (0+255),w,b
  8283  0009B2  C06A  FFD9         	movff	BrokenPinwheel@ptrnStepCounter,fsr2l
  8284  0009B6  C06B  FFDA         	movff	BrokenPinwheel@ptrnStepCounter+1,fsr2h
  8285  0009BA  6EDF               	movwf	indf2,c
  8286                           
  8287                           ; BSR set to: 0
  8288  0009BC  0012               	return		;funcret
  8289  0009BE                     __end_of_BrokenPinwheel:
  8290                           	opt stack 0
  8291                           tosu	equ	0xFFF
  8292                           tosh	equ	0xFFE
  8293                           tosl	equ	0xFFD
  8294                           pclath	equ	0xFFA
  8295                           tblptru	equ	0xFF8
  8296                           tblptrh	equ	0xFF7
  8297                           tblptrl	equ	0xFF6
  8298                           tablat	equ	0xFF5
  8299                           prodh	equ	0xFF4
  8300                           prodl	equ	0xFF3
  8301                           postinc0	equ	0xFEE
  8302                           wreg	equ	0xFE8
  8303                           postdec1	equ	0xFE5
  8304                           fsr1h	equ	0xFE2
  8305                           fsr1l	equ	0xFE1
  8306                           indf2	equ	0xFDF
  8307                           postinc2	equ	0xFDE
  8308                           postdec2	equ	0xFDD
  8309                           plusw2	equ	0xFDB
  8310                           fsr2h	equ	0xFDA
  8311                           fsr2l	equ	0xFD9
  8312                           status	equ	0xFD8
  8313                           
  8314 ;; *************** function ___awdiv *****************
  8315 ;; Defined at:
  8316 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  8317 ;; Parameters:    Size  Location     Type
  8318 ;;  dividend        2    0[BANK0 ] int 
  8319 ;;  divisor         2    2[BANK0 ] int 
  8320 ;; Auto vars:     Size  Location     Type
  8321 ;;  quotient        2    6[BANK0 ] int 
  8322 ;;  sign            1    5[BANK0 ] unsigned char 
  8323 ;;  counter         1    4[BANK0 ] unsigned char 
  8324 ;; Return value:  Size  Location     Type
  8325 ;;                  2    0[BANK0 ] int 
  8326 ;; Registers used:
  8327 ;;		wreg, status,2, status,0
  8328 ;; Tracked objects:
  8329 ;;		On entry : 0/0
  8330 ;;		On exit  : 0/0
  8331 ;;		Unchanged: 0/0
  8332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8333 ;;      Params:         0       4       0       0
  8334 ;;      Locals:         0       4       0       0
  8335 ;;      Temps:          0       0       0       0
  8336 ;;      Totals:         0       8       0       0
  8337 ;;Total ram usage:        8 bytes
  8338 ;; Hardware stack levels used:    1
  8339 ;; Hardware stack levels required when called:    7
  8340 ;; This function calls:
  8341 ;;		Nothing
  8342 ;; This function is called by:
  8343 ;;		_CenterBreathe
  8344 ;;		_SingleFadedLoop
  8345 ;;		_DoubleFadedLoop
  8346 ;;		_BrokenPinwheel
  8347 ;;		_MirroredQuadrants
  8348 ;;		_SingleFocusBreathe
  8349 ;;		_UpdatePattern
  8350 ;;		_DoubleBrokenLoop
  8351 ;;		_SingleFocusPulse
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           	psect	text24
  8356  002F78                     __ptext24:
  8357                           	opt stack 0
  8358  002F78                     ___awdiv:
  8359                           	opt stack 19
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;incstack = 0
  8363  002F78  0E00               	movlw	0
  8364  002F7A  0100               	movlb	0	; () banked
  8365  002F7C  6F65               	movwf	___awdiv@sign& (0+255),b
  8366                           
  8367                           ; BSR set to: 0
  8368  002F7E  0100               	movlb	0	; () banked
  8369  002F80  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8370  002F82  D008               	goto	l3089
  8371                           
  8372                           ; BSR set to: 0
  8373  002F84  0100               	movlb	0	; () banked
  8374  002F86  6D62               	negf	___awdiv@divisor& (0+255),b
  8375  002F88  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8376  002F8A  B0D8               	btfsc	status,0,c
  8377  002F8C  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8378                           
  8379                           ; BSR set to: 0
  8380  002F8E  0E01               	movlw	1
  8381  002F90  0100               	movlb	0	; () banked
  8382  002F92  6F65               	movwf	___awdiv@sign& (0+255),b
  8383  002F94                     l3089:
  8384                           
  8385                           ; BSR set to: 0
  8386  002F94  0100               	movlb	0	; () banked
  8387  002F96  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8388  002F98  D008               	goto	l3095
  8389                           
  8390                           ; BSR set to: 0
  8391  002F9A  0100               	movlb	0	; () banked
  8392  002F9C  6D60               	negf	___awdiv@dividend& (0+255),b
  8393  002F9E  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8394  002FA0  B0D8               	btfsc	status,0,c
  8395  002FA2  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8396                           
  8397                           ; BSR set to: 0
  8398  002FA4  0E01               	movlw	1
  8399  002FA6  0100               	movlb	0	; () banked
  8400  002FA8  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  8401  002FAA                     l3095:
  8402                           
  8403                           ; BSR set to: 0
  8404  002FAA  0E00               	movlw	0
  8405  002FAC  0100               	movlb	0	; () banked
  8406  002FAE  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  8407  002FB0  0E00               	movlw	0
  8408  002FB2  6F66               	movwf	___awdiv@quotient& (0+255),b
  8409                           
  8410                           ; BSR set to: 0
  8411  002FB4  0100               	movlb	0	; () banked
  8412  002FB6  5162               	movf	___awdiv@divisor& (0+255),w,b
  8413  002FB8  0100               	movlb	0	; () banked
  8414  002FBA  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8415  002FBC  B4D8               	btfsc	status,2,c
  8416  002FBE  D02C               	goto	l3117
  8417                           
  8418                           ; BSR set to: 0
  8419  002FC0  0E01               	movlw	1
  8420  002FC2  0100               	movlb	0	; () banked
  8421  002FC4  6F64               	movwf	___awdiv@counter& (0+255),b
  8422  002FC6  D006               	goto	l3103
  8423  002FC8                     l3101:
  8424                           
  8425                           ; BSR set to: 0
  8426  002FC8  0100               	movlb	0	; () banked
  8427  002FCA  90D8               	bcf	status,0,c
  8428  002FCC  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  8429  002FCE  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8430  002FD0  0100               	movlb	0	; () banked
  8431  002FD2  2B64               	incf	___awdiv@counter& (0+255),f,b
  8432  002FD4                     l3103:
  8433                           
  8434                           ; BSR set to: 0
  8435  002FD4  0100               	movlb	0	; () banked
  8436  002FD6  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8437  002FD8  D7F7               	goto	l3101
  8438  002FDA                     l3105:
  8439                           
  8440                           ; BSR set to: 0
  8441  002FDA  0100               	movlb	0	; () banked
  8442  002FDC  90D8               	bcf	status,0,c
  8443  002FDE  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  8444  002FE0  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8445                           
  8446                           ; BSR set to: 0
  8447  002FE2  0100               	movlb	0	; () banked
  8448  002FE4  5162               	movf	___awdiv@divisor& (0+255),w,b
  8449  002FE6  0100               	movlb	0	; () banked
  8450  002FE8  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  8451  002FEA  0100               	movlb	0	; () banked
  8452  002FEC  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8453  002FEE  0100               	movlb	0	; () banked
  8454  002FF0  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8455  002FF2  A0D8               	btfss	status,0,c
  8456  002FF4  D00A               	goto	l3113
  8457                           
  8458                           ; BSR set to: 0
  8459  002FF6  0100               	movlb	0	; () banked
  8460  002FF8  5162               	movf	___awdiv@divisor& (0+255),w,b
  8461  002FFA  0100               	movlb	0	; () banked
  8462  002FFC  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  8463  002FFE  0100               	movlb	0	; () banked
  8464  003000  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8465  003002  0100               	movlb	0	; () banked
  8466  003004  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8467                           
  8468                           ; BSR set to: 0
  8469  003006  0100               	movlb	0	; () banked
  8470  003008  8166               	bsf	___awdiv@quotient& (0+255),0,b
  8471  00300A                     l3113:
  8472                           
  8473                           ; BSR set to: 0
  8474  00300A  0100               	movlb	0	; () banked
  8475  00300C  90D8               	bcf	status,0,c
  8476  00300E  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8477  003010  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  8478                           
  8479                           ; BSR set to: 0
  8480  003012  0100               	movlb	0	; () banked
  8481  003014  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  8482  003016  D7E1               	goto	l3105
  8483  003018                     l3117:
  8484                           
  8485                           ; BSR set to: 0
  8486  003018  0100               	movlb	0	; () banked
  8487  00301A  5165               	movf	___awdiv@sign& (0+255),w,b
  8488  00301C  0100               	movlb	0	; () banked
  8489  00301E  B4D8               	btfsc	status,2,c
  8490  003020  D005               	goto	l3121
  8491                           
  8492                           ; BSR set to: 0
  8493  003022  0100               	movlb	0	; () banked
  8494  003024  6D66               	negf	___awdiv@quotient& (0+255),b
  8495  003026  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8496  003028  B0D8               	btfsc	status,0,c
  8497  00302A  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8498  00302C                     l3121:
  8499                           
  8500                           ; BSR set to: 0
  8501  00302C  C066  F060         	movff	___awdiv@quotient,?___awdiv
  8502  003030  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  8503  003034  0012               	return	
  8504  003036                     __end_of___awdiv:
  8505                           	opt stack 0
  8506                           tosu	equ	0xFFF
  8507                           tosh	equ	0xFFE
  8508                           tosl	equ	0xFFD
  8509                           pclath	equ	0xFFA
  8510                           tblptru	equ	0xFF8
  8511                           tblptrh	equ	0xFF7
  8512                           tblptrl	equ	0xFF6
  8513                           tablat	equ	0xFF5
  8514                           prodh	equ	0xFF4
  8515                           prodl	equ	0xFF3
  8516                           postinc0	equ	0xFEE
  8517                           wreg	equ	0xFE8
  8518                           postdec1	equ	0xFE5
  8519                           fsr1h	equ	0xFE2
  8520                           fsr1l	equ	0xFE1
  8521                           indf2	equ	0xFDF
  8522                           postinc2	equ	0xFDE
  8523                           postdec2	equ	0xFDD
  8524                           plusw2	equ	0xFDB
  8525                           fsr2h	equ	0xFDA
  8526                           fsr2l	equ	0xFD9
  8527                           status	equ	0xFD8
  8528                           
  8529 ;; *************** function _ES_Timer_InitTimer *****************
  8530 ;; Defined at:
  8531 ;;		line 229 in file "ES_Timers.c"
  8532 ;; Parameters:    Size  Location     Type
  8533 ;;  Num             1    wreg     unsigned char 
  8534 ;;  NewTime         2    0[BANK0 ] unsigned int 
  8535 ;; Auto vars:     Size  Location     Type
  8536 ;;  Num             1    4[BANK0 ] unsigned char 
  8537 ;; Return value:  Size  Location     Type
  8538 ;;                  1    wreg      enum E15472
  8539 ;; Registers used:
  8540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8541 ;; Tracked objects:
  8542 ;;		On entry : 0/0
  8543 ;;		On exit  : 0/0
  8544 ;;		Unchanged: 0/0
  8545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8546 ;;      Params:         0       2       0       0
  8547 ;;      Locals:         0       1       0       0
  8548 ;;      Temps:          0       2       0       0
  8549 ;;      Totals:         0       5       0       0
  8550 ;;Total ram usage:        5 bytes
  8551 ;; Hardware stack levels used:    1
  8552 ;; Hardware stack levels required when called:    7
  8553 ;; This function calls:
  8554 ;;		Nothing
  8555 ;; This function is called by:
  8556 ;;		_ShowPattern
  8557 ;; This function uses a non-reentrant model
  8558 ;;
  8559                           
  8560                           	psect	text25
  8561  0033F2                     __ptext25:
  8562                           	opt stack 0
  8563  0033F2                     _ES_Timer_InitTimer:
  8564                           	opt stack 20
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;incstack = 0
  8568                           ;ES_Timer_InitTimer@Num stored from wreg
  8569  0033F2  0100               	movlb	0	; () banked
  8570  0033F4  6F64               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  8571                           
  8572                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  8573                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  8574                           ;ES_Timers.c: 236: (NewTime == 0) )
  8575  0033F6  0E10               	movlw	16
  8576  0033F8  0100               	movlb	0	; () banked
  8577  0033FA  6164               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  8578  0033FC  0012               	return	
  8579                           
  8580                           ; BSR set to: 0
  8581  0033FE  0100               	movlb	0	; () banked
  8582  003400  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  8583  003402  0D02               	mullw	2
  8584  003404  0E21               	movlw	low _Timer2PostFunc
  8585  003406  24F3               	addwf	prodl,w,c
  8586  003408  6EF6               	movwf	tblptrl,c
  8587  00340A  0E03               	movlw	high _Timer2PostFunc
  8588  00340C  20F4               	addwfc	prodh,w,c
  8589  00340E  6EF7               	movwf	tblptrh,c
  8590  003410                     	if	0	;There are less than 3 active tblptr bytes
  8591  003410                     	endif
  8592  003410  0009               	tblrd		*+
  8593  003412  50F5               	movf	tablat,w,c
  8594  003414  0009               	tblrd		*+
  8595  003416  10F5               	iorwf	tablat,w,c
  8596  003418  B4D8               	btfsc	status,2,c
  8597  00341A  0012               	return	
  8598                           
  8599                           ; BSR set to: 0
  8600  00341C  0100               	movlb	0	; () banked
  8601  00341E  5160               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  8602  003420  0100               	movlb	0	; () banked
  8603  003422  1161               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  8604  003424  B4D8               	btfsc	status,2,c
  8605  003426  0012               	return	
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  8609                           
  8610                           ; BSR set to: 0
  8611                           
  8612                           ; BSR set to: 0
  8613                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  8614                           ;	Return value of _ES_Timer_InitTimer is never used
  8615  003428  0100               	movlb	0	; () banked
  8616  00342A  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  8617  00342C  0D02               	mullw	2
  8618  00342E  0E00               	movlw	low _TMR_TimerArray
  8619  003430  24F3               	addwf	prodl,w,c
  8620  003432  6ED9               	movwf	fsr2l,c
  8621  003434  0E01               	movlw	high _TMR_TimerArray
  8622  003436  20F4               	addwfc	prodh,w,c
  8623  003438  6EDA               	movwf	fsr2h,c
  8624  00343A  C060  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  8625  00343E  C061  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  8626                           
  8627                           ; BSR set to: 0
  8628                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  8629  003442  0100               	movlb	0	; () banked
  8630  003444  5164               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  8631  003446  0D02               	mullw	2
  8632  003448  0E01               	movlw	low _BitNum2SetMask
  8633  00344A  24F3               	addwf	prodl,w,c
  8634  00344C  6EF6               	movwf	tblptrl,c
  8635  00344E  0E03               	movlw	high _BitNum2SetMask
  8636  003450  20F4               	addwfc	prodh,w,c
  8637  003452  6EF7               	movwf	tblptrh,c
  8638  003454                     	if	0	;There are less than 3 active tblptr bytes
  8639  003454                     	endif
  8640  003454  0009               	tblrd		*+
  8641  003456  CFF5 F062          	movff	tablat,??_ES_Timer_InitTimer
  8642  00345A  0009               	tblrd		*+
  8643  00345C  CFF5 F063          	movff	tablat,??_ES_Timer_InitTimer+1
  8644  003460  0100               	movlb	0	; () banked
  8645  003462  5162               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  8646  003464  0100               	movlb	0	; () banked
  8647  003466  13DF               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  8648  003468  0100               	movlb	0	; () banked
  8649  00346A  5163               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  8650  00346C  0100               	movlb	0	; () banked
  8651  00346E  13E0               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  8652  003470  0012               	return	
  8653  003472                     __end_of_ES_Timer_InitTimer:
  8654                           	opt stack 0
  8655                           tosu	equ	0xFFF
  8656                           tosh	equ	0xFFE
  8657                           tosl	equ	0xFFD
  8658                           pclath	equ	0xFFA
  8659                           tblptru	equ	0xFF8
  8660                           tblptrh	equ	0xFF7
  8661                           tblptrl	equ	0xFF6
  8662                           tablat	equ	0xFF5
  8663                           prodh	equ	0xFF4
  8664                           prodl	equ	0xFF3
  8665                           postinc0	equ	0xFEE
  8666                           wreg	equ	0xFE8
  8667                           postdec1	equ	0xFE5
  8668                           fsr1h	equ	0xFE2
  8669                           fsr1l	equ	0xFE1
  8670                           indf2	equ	0xFDF
  8671                           postinc2	equ	0xFDE
  8672                           postdec2	equ	0xFDD
  8673                           plusw2	equ	0xFDB
  8674                           fsr2h	equ	0xFDA
  8675                           fsr2l	equ	0xFD9
  8676                           status	equ	0xFD8
  8677                           
  8678 ;; *************** function _DotStar_Show *****************
  8679 ;; Defined at:
  8680 ;;		line 99 in file "Pattern_DotStarLED.c"
  8681 ;; Parameters:    Size  Location     Type
  8682 ;;  patternPoint    2   69[BANK0 ] PTR unsigned int 
  8683 ;;		 -> PixelPattern(152), 
  8684 ;; Auto vars:     Size  Location     Type
  8685 ;;  i               1   90[BANK0 ] unsigned char 
  8686 ;; Return value:  Size  Location     Type
  8687 ;;                  1    wreg      void 
  8688 ;; Registers used:
  8689 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8690 ;; Tracked objects:
  8691 ;;		On entry : 0/0
  8692 ;;		On exit  : 0/0
  8693 ;;		Unchanged: 0/0
  8694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8695 ;;      Params:         0       2       0       0
  8696 ;;      Locals:         0       1       0       0
  8697 ;;      Temps:          0      19       0       0
  8698 ;;      Totals:         0      22       0       0
  8699 ;;Total ram usage:       22 bytes
  8700 ;; Hardware stack levels used:    1
  8701 ;; Hardware stack levels required when called:   12
  8702 ;; This function calls:
  8703 ;;		_HSV_to_RGB
  8704 ;;		_SPI32_TransmitFrames
  8705 ;; This function is called by:
  8706 ;;		_ShowPattern
  8707 ;;		_StopPattern
  8708 ;; This function uses a non-reentrant model
  8709 ;;
  8710                           
  8711                           	psect	text26
  8712  0025B4                     __ptext26:
  8713                           	opt stack 0
  8714  0025B4                     _DotStar_Show:
  8715                           	opt stack 15
  8716                           
  8717                           ;Pattern_DotStarLED.c: 100: for(uint8_t i=1; i<=76; i++){
  8718                           
  8719                           ; BSR set to: 0
  8720                           ;incstack = 0
  8721  0025B4  0E01               	movlw	1
  8722  0025B6  0100               	movlb	0	; () banked
  8723  0025B8  6FBA               	movwf	DotStar_Show@i& (0+255),b
  8724  0025BA                     l3707:
  8725                           
  8726                           ; BSR set to: 0
  8727  0025BA  0E4C               	movlw	76
  8728  0025BC  0100               	movlb	0	; () banked
  8729  0025BE  65BA               	cpfsgt	DotStar_Show@i& (0+255),b
  8730  0025C0  D001               	goto	l3711
  8731  0025C2  D083               	goto	l3719
  8732  0025C4                     l3711:
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;Pattern_DotStarLED.c: 102: PixelFrames[i] = (0xe0000000 | ((uint32_t)*Brightness<<24) |
      +                           *(patternPointer+(i-1)));
  8736  0025C4  0EFE               	movlw	254
  8737  0025C6  0100               	movlb	0	; () banked
  8738  0025C8  6FA7               	movwf	??_DotStar_Show& (0+255),b
  8739  0025CA  0EFF               	movlw	255
  8740  0025CC  0100               	movlb	0	; () banked
  8741  0025CE  6FA8               	movwf	(??_DotStar_Show+1)& (0+255),b
  8742  0025D0  0100               	movlb	0	; () banked
  8743  0025D2  51BA               	movf	DotStar_Show@i& (0+255),w,b
  8744  0025D4  0100               	movlb	0	; () banked
  8745  0025D6  6FA9               	movwf	(??_DotStar_Show+2)& (0+255),b
  8746  0025D8  6BAA               	clrf	(??_DotStar_Show+3)& (0+255),b
  8747  0025DA  90D8               	bcf	status,0,c
  8748  0025DC  0100               	movlb	0	; () banked
  8749  0025DE  37A9               	rlcf	(??_DotStar_Show+2)& (0+255),f,b
  8750  0025E0  37AA               	rlcf	(??_DotStar_Show+3)& (0+255),f,b
  8751  0025E2  0100               	movlb	0	; () banked
  8752  0025E4  51A7               	movf	??_DotStar_Show& (0+255),w,b
  8753  0025E6  0100               	movlb	0	; () banked
  8754  0025E8  27A9               	addwf	(??_DotStar_Show+2)& (0+255),f,b
  8755  0025EA  0100               	movlb	0	; () banked
  8756  0025EC  51A8               	movf	(??_DotStar_Show+1)& (0+255),w,b
  8757  0025EE  0100               	movlb	0	; () banked
  8758  0025F0  23AA               	addwfc	(??_DotStar_Show+3)& (0+255),f,b
  8759  0025F2  0100               	movlb	0	; () banked
  8760  0025F4  51A9               	movf	(??_DotStar_Show+2)& (0+255),w,b
  8761  0025F6  0100               	movlb	0	; () banked
  8762  0025F8  25A5               	addwf	DotStar_Show@patternPointer& (0+255),w,b
  8763  0025FA  6ED9               	movwf	fsr2l,c
  8764  0025FC  0100               	movlb	0	; () banked
  8765  0025FE  51AA               	movf	(??_DotStar_Show+3)& (0+255),w,b
  8766  002600  0100               	movlb	0	; () banked
  8767  002602  21A6               	addwfc	(DotStar_Show@patternPointer+1)& (0+255),w,b
  8768  002604  6EDA               	movwf	fsr2h,c
  8769  002606  CFDE F0AB          	movff	postinc2,??_DotStar_Show+4
  8770  00260A  CFDD F0AC          	movff	postdec2,??_DotStar_Show+5
  8771  00260E  C0F0  FFD9         	movff	_Brightness,fsr2l
  8772  002612  C0F1  FFDA         	movff	_Brightness+1,fsr2h
  8773  002616  50DF               	movf	indf2,w,c
  8774  002618  0100               	movlb	0	; () banked
  8775  00261A  6FAD               	movwf	(??_DotStar_Show+6)& (0+255),b
  8776  00261C  C0AD  F0AE         	movff	??_DotStar_Show+6,??_DotStar_Show+7
  8777  002620  0100               	movlb	0	; () banked
  8778  002622  6BAF               	clrf	(??_DotStar_Show+8)& (0+255),b
  8779  002624  6BB0               	clrf	(??_DotStar_Show+9)& (0+255),b
  8780  002626  6BB1               	clrf	(??_DotStar_Show+10)& (0+255),b
  8781  002628  C0AE  F0B1         	movff	??_DotStar_Show+7,??_DotStar_Show+10
  8782  00262C  0100               	movlb	0	; () banked
  8783  00262E  6BB0               	clrf	(??_DotStar_Show+9)& (0+255),b
  8784  002630  6BAF               	clrf	(??_DotStar_Show+8)& (0+255),b
  8785  002632  6BAE               	clrf	(??_DotStar_Show+7)& (0+255),b
  8786  002634  0100               	movlb	0	; () banked
  8787  002636  51AB               	movf	(??_DotStar_Show+4)& (0+255),w,b
  8788  002638  0100               	movlb	0	; () banked
  8789  00263A  11AE               	iorwf	(??_DotStar_Show+7)& (0+255),w,b
  8790  00263C  0100               	movlb	0	; () banked
  8791  00263E  6FB2               	movwf	(??_DotStar_Show+11)& (0+255),b
  8792  002640  0100               	movlb	0	; () banked
  8793  002642  51AC               	movf	(??_DotStar_Show+5)& (0+255),w,b
  8794  002644  0100               	movlb	0	; () banked
  8795  002646  11AF               	iorwf	(??_DotStar_Show+8)& (0+255),w,b
  8796  002648  0100               	movlb	0	; () banked
  8797  00264A  6FB3               	movwf	(??_DotStar_Show+12)& (0+255),b
  8798  00264C  0E00               	movlw	0
  8799  00264E  0100               	movlb	0	; () banked
  8800  002650  11B0               	iorwf	(??_DotStar_Show+9)& (0+255),w,b
  8801  002652  0100               	movlb	0	; () banked
  8802  002654  6FB4               	movwf	(??_DotStar_Show+13)& (0+255),b
  8803  002656  0E00               	movlw	0
  8804  002658  0100               	movlb	0	; () banked
  8805  00265A  11B1               	iorwf	(??_DotStar_Show+10)& (0+255),w,b
  8806  00265C  0100               	movlb	0	; () banked
  8807  00265E  6FB5               	movwf	(??_DotStar_Show+14)& (0+255),b
  8808  002660  0E00               	movlw	0
  8809  002662  0100               	movlb	0	; () banked
  8810  002664  11B2               	iorwf	(??_DotStar_Show+11)& (0+255),w,b
  8811  002666  0100               	movlb	0	; () banked
  8812  002668  6FB6               	movwf	(??_DotStar_Show+15)& (0+255),b
  8813  00266A  0E00               	movlw	0
  8814  00266C  0100               	movlb	0	; () banked
  8815  00266E  11B3               	iorwf	(??_DotStar_Show+12)& (0+255),w,b
  8816  002670  0100               	movlb	0	; () banked
  8817  002672  6FB7               	movwf	(??_DotStar_Show+16)& (0+255),b
  8818  002674  0E00               	movlw	0
  8819  002676  0100               	movlb	0	; () banked
  8820  002678  11B4               	iorwf	(??_DotStar_Show+13)& (0+255),w,b
  8821  00267A  0100               	movlb	0	; () banked
  8822  00267C  6FB8               	movwf	(??_DotStar_Show+17)& (0+255),b
  8823  00267E  0EE0               	movlw	224
  8824  002680  0100               	movlb	0	; () banked
  8825  002682  11B5               	iorwf	(??_DotStar_Show+14)& (0+255),w,b
  8826  002684  0100               	movlb	0	; () banked
  8827  002686  6FB9               	movwf	(??_DotStar_Show+18)& (0+255),b
  8828  002688  0100               	movlb	0	; () banked
  8829  00268A  51BA               	movf	DotStar_Show@i& (0+255),w,b
  8830  00268C  0D04               	mullw	4
  8831  00268E  0EC4               	movlw	low _PixelFrames
  8832  002690  24F3               	addwf	prodl,w,c
  8833  002692  6ED9               	movwf	fsr2l,c
  8834  002694  0E01               	movlw	high _PixelFrames
  8835  002696  20F4               	addwfc	prodh,w,c
  8836  002698  6EDA               	movwf	fsr2h,c
  8837  00269A  C0B6  FFDE         	movff	??_DotStar_Show+15,postinc2
  8838  00269E  C0B7  FFDE         	movff	??_DotStar_Show+16,postinc2
  8839  0026A2  C0B8  FFDE         	movff	??_DotStar_Show+17,postinc2
  8840  0026A6  C0B9  FFDE         	movff	??_DotStar_Show+18,postinc2
  8841                           
  8842                           ; BSR set to: 0
  8843                           ;Pattern_DotStarLED.c: 106: HSV_to_RGB(PixelFrames+i);
  8844  0026AA  0100               	movlb	0	; () banked
  8845  0026AC  51BA               	movf	DotStar_Show@i& (0+255),w,b
  8846  0026AE  0D04               	mullw	4
  8847  0026B0  0EC4               	movlw	low _PixelFrames
  8848  0026B2  24F3               	addwf	prodl,w,c
  8849  0026B4  0100               	movlb	0	; () banked
  8850  0026B6  6F73               	movwf	HSV_to_RGB@HSV_Value& (0+255),b
  8851  0026B8  0E01               	movlw	high _PixelFrames
  8852  0026BA  20F4               	addwfc	prodh,w,c
  8853  0026BC  0100               	movlb	0	; () banked
  8854  0026BE  6F74               	movwf	(HSV_to_RGB@HSV_Value+1)& (0+255),b
  8855  0026C0  EC94  F007         	call	_HSV_to_RGB	;wreg free
  8856  0026C4  0100               	movlb	0	; () banked
  8857  0026C6  2BBA               	incf	DotStar_Show@i& (0+255),f,b
  8858  0026C8  D778               	goto	l3707
  8859  0026CA                     l3719:
  8860                           
  8861                           ; BSR set to: 0
  8862                           ;Pattern_DotStarLED.c: 113: }
  8863                           ;Pattern_DotStarLED.c: 116: SPI32_TransmitFrames(PixelFrames,76+3);
  8864  0026CA  0EC4               	movlw	low _PixelFrames
  8865  0026CC  0100               	movlb	0	; () banked
  8866  0026CE  6F80               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  8867  0026D0  0E01               	movlw	high _PixelFrames
  8868  0026D2  0100               	movlb	0	; () banked
  8869  0026D4  6F81               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  8870  0026D6  0E4F               	movlw	79
  8871  0026D8  0100               	movlb	0	; () banked
  8872  0026DA  6F82               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  8873  0026DC  EC3B  F01D         	call	_SPI32_TransmitFrames	;wreg free
  8874  0026E0  0012               	return		;funcret
  8875  0026E2                     __end_of_DotStar_Show:
  8876                           	opt stack 0
  8877                           tosu	equ	0xFFF
  8878                           tosh	equ	0xFFE
  8879                           tosl	equ	0xFFD
  8880                           pclath	equ	0xFFA
  8881                           tblptru	equ	0xFF8
  8882                           tblptrh	equ	0xFF7
  8883                           tblptrl	equ	0xFF6
  8884                           tablat	equ	0xFF5
  8885                           prodh	equ	0xFF4
  8886                           prodl	equ	0xFF3
  8887                           postinc0	equ	0xFEE
  8888                           wreg	equ	0xFE8
  8889                           postdec1	equ	0xFE5
  8890                           fsr1h	equ	0xFE2
  8891                           fsr1l	equ	0xFE1
  8892                           indf2	equ	0xFDF
  8893                           postinc2	equ	0xFDE
  8894                           postdec2	equ	0xFDD
  8895                           plusw2	equ	0xFDB
  8896                           fsr2h	equ	0xFDA
  8897                           fsr2l	equ	0xFD9
  8898                           status	equ	0xFD8
  8899                           
  8900 ;; *************** function _SPI32_TransmitFrames *****************
  8901 ;; Defined at:
  8902 ;;		line 216 in file "SPI32_ControlService.c"
  8903 ;; Parameters:    Size  Location     Type
  8904 ;;  framePointer    2   32[BANK0 ] PTR unsigned long 
  8905 ;;		 -> PixelFrames(316), 
  8906 ;;  numFrames       1   34[BANK0 ] unsigned char 
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;  transmitEven    3   35[BANK0 ] struct ES_Event_t
  8909 ;; Return value:  Size  Location     Type
  8910 ;;                  1    wreg      void 
  8911 ;; Registers used:
  8912 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8913 ;; Tracked objects:
  8914 ;;		On entry : 0/0
  8915 ;;		On exit  : 0/0
  8916 ;;		Unchanged: 0/0
  8917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8918 ;;      Params:         0       3       0       0
  8919 ;;      Locals:         0       3       0       0
  8920 ;;      Temps:          0       0       0       0
  8921 ;;      Totals:         0       6       0       0
  8922 ;;Total ram usage:        6 bytes
  8923 ;; Hardware stack levels used:    1
  8924 ;; Hardware stack levels required when called:   11
  8925 ;; This function calls:
  8926 ;;		_PostSPI32ControlService
  8927 ;; This function is called by:
  8928 ;;		_DotStar_Show
  8929 ;; This function uses a non-reentrant model
  8930 ;;
  8931                           
  8932                           	psect	text27
  8933  003A76                     __ptext27:
  8934                           	opt stack 0
  8935  003A76                     _SPI32_TransmitFrames:
  8936                           	opt stack 15
  8937                           
  8938                           ;SPI32_ControlService.c: 218: if(CurrentState == SPI32_Waiting4Send){
  8939                           
  8940                           ;incstack = 0
  8941  003A76  0100               	movlb	0	; () banked
  8942  003A78  05E2               	decf	SPI32_ControlService@CurrentState& (0+255),w,b
  8943  003A7A  A4D8               	btfss	status,2,c
  8944  003A7C  0012               	return	
  8945                           
  8946                           ; BSR set to: 0
  8947                           ;SPI32_ControlService.c: 220: FrameIndex = 0;
  8948  003A7E  0E00               	movlw	0
  8949  003A80  0100               	movlb	0	; () banked
  8950  003A82  6FE5               	movwf	_FrameIndex& (0+255),b
  8951                           
  8952                           ; BSR set to: 0
  8953                           ;SPI32_ControlService.c: 222: FramePointer = framePointer;
  8954  003A84  C080  F0D7         	movff	SPI32_TransmitFrames@framePointer,_FramePointer
  8955  003A88  C081  F0D8         	movff	SPI32_TransmitFrames@framePointer+1,_FramePointer+1
  8956                           
  8957                           ; BSR set to: 0
  8958                           ;SPI32_ControlService.c: 224: NumFrames = numFrames;
  8959  003A8C  C082  F0E7         	movff	SPI32_TransmitFrames@numFrames,_NumFrames
  8960                           
  8961                           ; BSR set to: 0
  8962                           ;SPI32_ControlService.c: 226: ES_Event transmitEvent;
  8963                           ;SPI32_ControlService.c: 227: transmitEvent.EventType = SPI32_TRANSMIT;
  8964  003A90  0E08               	movlw	8
  8965  003A92  0100               	movlb	0	; () banked
  8966  003A94  6F83               	movwf	SPI32_TransmitFrames@transmitEvent& (0+255),b
  8967                           
  8968                           ; BSR set to: 0
  8969                           ;SPI32_ControlService.c: 228: PostSPI32ControlService(transmitEvent);
  8970  003A96  C083  F07D         	movff	SPI32_TransmitFrames@transmitEvent,PostSPI32ControlService@ThisEvent
  8971  003A9A  C084  F07E         	movff	SPI32_TransmitFrames@transmitEvent+1,PostSPI32ControlService@ThisEvent+1
  8972  003A9E  C085  F07F         	movff	SPI32_TransmitFrames@transmitEvent+2,PostSPI32ControlService@ThisEvent+2
  8973  003AA2  ECD6  F01D         	call	_PostSPI32ControlService	;wreg free
  8974  003AA6  0012               	return	
  8975  003AA8                     __end_of_SPI32_TransmitFrames:
  8976                           	opt stack 0
  8977                           tosu	equ	0xFFF
  8978                           tosh	equ	0xFFE
  8979                           tosl	equ	0xFFD
  8980                           pclath	equ	0xFFA
  8981                           tblptru	equ	0xFF8
  8982                           tblptrh	equ	0xFF7
  8983                           tblptrl	equ	0xFF6
  8984                           tablat	equ	0xFF5
  8985                           prodh	equ	0xFF4
  8986                           prodl	equ	0xFF3
  8987                           postinc0	equ	0xFEE
  8988                           wreg	equ	0xFE8
  8989                           postdec1	equ	0xFE5
  8990                           fsr1h	equ	0xFE2
  8991                           fsr1l	equ	0xFE1
  8992                           indf2	equ	0xFDF
  8993                           postinc2	equ	0xFDE
  8994                           postdec2	equ	0xFDD
  8995                           plusw2	equ	0xFDB
  8996                           fsr2h	equ	0xFDA
  8997                           fsr2l	equ	0xFD9
  8998                           status	equ	0xFD8
  8999                           
  9000 ;; *************** function _PostPatternControlService *****************
  9001 ;; Defined at:
  9002 ;;		line 140 in file "Pattern_ControlService.c"
  9003 ;; Parameters:    Size  Location     Type
  9004 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  9005 ;; Auto vars:     Size  Location     Type
  9006 ;;		None
  9007 ;; Return value:  Size  Location     Type
  9008 ;;                  1    wreg      unsigned char 
  9009 ;; Registers used:
  9010 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9011 ;; Tracked objects:
  9012 ;;		On entry : 0/0
  9013 ;;		On exit  : 0/0
  9014 ;;		Unchanged: 0/0
  9015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9016 ;;      Params:         0       3       0       0
  9017 ;;      Locals:         0       0       0       0
  9018 ;;      Temps:          0       0       0       0
  9019 ;;      Totals:         0       3       0       0
  9020 ;;Total ram usage:        3 bytes
  9021 ;; Hardware stack levels used:    1
  9022 ;; Hardware stack levels required when called:   10
  9023 ;; This function calls:
  9024 ;;		_ES_PostToService
  9025 ;; This function is called by:
  9026 ;;		_RunPatternControlService
  9027 ;;		_ES_Timer_Tick_Resp
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031                           	psect	text28
  9032  003B90                     __ptext28:
  9033                           	opt stack 0
  9034  003B90                     _PostPatternControlService:
  9035                           	opt stack 0
  9036                           
  9037                           ;Skip over the trampoline to the duplicate function for level 2
  9038  003B90  B254               	btfsc	btemp,1,c
  9039  003B92  EF2E  F01E         	goto	i2_PostPatternControlService
  9040  003B96                     _PostPatternControlService$intlevel0:
  9041                           	opt stack 17
  9042                           
  9043                           ;Pattern_ControlService.c: 142: return ES_PostToService( MyPriority, ThisEvent);
  9044                           ;	Return value of _PostPatternControlService is never used
  9045                           
  9046                           ;incstack = 0
  9047  003B96  C07D  F077         	movff	PostPatternControlService@ThisEvent,ES_PostToService@TheEvent
  9048  003B9A  C07E  F078         	movff	PostPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  9049  003B9E  C07F  F079         	movff	PostPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  9050  003BA2  0100               	movlb	0	; () banked
  9051  003BA4  51E6               	movf	_MyPriority& (0+255),w,b
  9052  003BA6  ECF2  F01A         	call	_ES_PostToService
  9053  003BAA  0012               	return	
  9054  003BAC                     __end_of_PostPatternControlService:
  9055                           	opt stack 0
  9056                           tosu	equ	0xFFF
  9057                           tosh	equ	0xFFE
  9058                           tosl	equ	0xFFD
  9059                           pclath	equ	0xFFA
  9060                           tblptru	equ	0xFF8
  9061                           tblptrh	equ	0xFF7
  9062                           tblptrl	equ	0xFF6
  9063                           tablat	equ	0xFF5
  9064                           prodh	equ	0xFF4
  9065                           prodl	equ	0xFF3
  9066                           postinc0	equ	0xFEE
  9067                           wreg	equ	0xFE8
  9068                           postdec1	equ	0xFE5
  9069                           fsr1h	equ	0xFE2
  9070                           fsr1l	equ	0xFE1
  9071                           indf2	equ	0xFDF
  9072                           postinc2	equ	0xFDE
  9073                           postdec2	equ	0xFDD
  9074                           plusw2	equ	0xFDB
  9075                           fsr2h	equ	0xFDA
  9076                           fsr2l	equ	0xFD9
  9077                           status	equ	0xFD8
  9078                           
  9079 ;; *************** function _PostSPI32ControlService *****************
  9080 ;; Defined at:
  9081 ;;		line 119 in file "SPI32_ControlService.c"
  9082 ;; Parameters:    Size  Location     Type
  9083 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  9084 ;; Auto vars:     Size  Location     Type
  9085 ;;		None
  9086 ;; Return value:  Size  Location     Type
  9087 ;;                  1    wreg      unsigned char 
  9088 ;; Registers used:
  9089 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9090 ;; Tracked objects:
  9091 ;;		On entry : 0/0
  9092 ;;		On exit  : 0/0
  9093 ;;		Unchanged: 0/0
  9094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9095 ;;      Params:         0       3       0       0
  9096 ;;      Locals:         0       0       0       0
  9097 ;;      Temps:          0       0       0       0
  9098 ;;      Totals:         0       3       0       0
  9099 ;;Total ram usage:        3 bytes
  9100 ;; Hardware stack levels used:    1
  9101 ;; Hardware stack levels required when called:   10
  9102 ;; This function calls:
  9103 ;;		_ES_PostToService
  9104 ;; This function is called by:
  9105 ;;		_SPI32_TransmitFrames
  9106 ;;		_ES_Timer_Tick_Resp
  9107 ;; This function uses a non-reentrant model
  9108 ;;
  9109                           
  9110                           	psect	text29
  9111  003BAC                     __ptext29:
  9112                           	opt stack 0
  9113  003BAC                     _PostSPI32ControlService:
  9114                           	opt stack 0
  9115                           
  9116                           ;Skip over the trampoline to the duplicate function for level 2
  9117  003BAC  B254               	btfsc	btemp,1,c
  9118  003BAE  EF23  F01E         	goto	i2_PostSPI32ControlService
  9119  003BB2                     _PostSPI32ControlService$intlevel0:
  9120                           	opt stack 17
  9121                           
  9122                           ;SPI32_ControlService.c: 120: return ES_PostToService( MyPriority, ThisEvent);
  9123                           ;	Return value of _PostSPI32ControlService is never used
  9124                           
  9125                           ;incstack = 0
  9126  003BB2  C07D  F077         	movff	PostSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  9127  003BB6  C07E  F078         	movff	PostSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  9128  003BBA  C07F  F079         	movff	PostSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  9129  003BBE  0100               	movlb	0	; () banked
  9130  003BC0  51E3               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  9131  003BC2  ECF2  F01A         	call	_ES_PostToService
  9132  003BC6  0012               	return	
  9133  003BC8                     __end_of_PostSPI32ControlService:
  9134                           	opt stack 0
  9135                           tosu	equ	0xFFF
  9136                           tosh	equ	0xFFE
  9137                           tosl	equ	0xFFD
  9138                           pclath	equ	0xFFA
  9139                           tblptru	equ	0xFF8
  9140                           tblptrh	equ	0xFF7
  9141                           tblptrl	equ	0xFF6
  9142                           tablat	equ	0xFF5
  9143                           prodh	equ	0xFF4
  9144                           prodl	equ	0xFF3
  9145                           postinc0	equ	0xFEE
  9146                           wreg	equ	0xFE8
  9147                           postdec1	equ	0xFE5
  9148                           fsr1h	equ	0xFE2
  9149                           fsr1l	equ	0xFE1
  9150                           indf2	equ	0xFDF
  9151                           postinc2	equ	0xFDE
  9152                           postdec2	equ	0xFDD
  9153                           plusw2	equ	0xFDB
  9154                           fsr2h	equ	0xFDA
  9155                           fsr2l	equ	0xFD9
  9156                           status	equ	0xFD8
  9157                           
  9158 ;; *************** function _HSV_to_RGB *****************
  9159 ;; Defined at:
  9160 ;;		line 67 in file "Pattern_HSV_Convert.c"
  9161 ;; Parameters:    Size  Location     Type
  9162 ;;  HSV_Value       2   19[BANK0 ] PTR unsigned long 
  9163 ;;		 -> PixelFrames(316), 
  9164 ;; Auto vars:     Size  Location     Type
  9165 ;;  v               2   67[BANK0 ] unsigned int 
  9166 ;;  p               2   65[BANK0 ] unsigned int 
  9167 ;;  s               2   63[BANK0 ] unsigned int 
  9168 ;;  t               2   59[BANK0 ] unsigned int 
  9169 ;;  q               2   57[BANK0 ] unsigned int 
  9170 ;;  b               2   55[BANK0 ] unsigned int 
  9171 ;;  g               2   53[BANK0 ] unsigned int 
  9172 ;;  r               2   51[BANK0 ] unsigned int 
  9173 ;;  fpart           2   49[BANK0 ] unsigned int 
  9174 ;;  region          2   47[BANK0 ] unsigned int 
  9175 ;;  h               2   45[BANK0 ] unsigned int 
  9176 ;; Return value:  Size  Location     Type
  9177 ;;                  1    wreg      void 
  9178 ;; Registers used:
  9179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9180 ;; Tracked objects:
  9181 ;;		On entry : 0/0
  9182 ;;		On exit  : 0/0
  9183 ;;		Unchanged: 0/0
  9184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9185 ;;      Params:         0       2       0       0
  9186 ;;      Locals:         0      24       0       0
  9187 ;;      Temps:          0      24       0       0
  9188 ;;      Totals:         0      50       0       0
  9189 ;;Total ram usage:       50 bytes
  9190 ;; Hardware stack levels used:    1
  9191 ;; Hardware stack levels required when called:    8
  9192 ;; This function calls:
  9193 ;;		___lwdiv
  9194 ;;		___wmul
  9195 ;; This function is called by:
  9196 ;;		_DotStar_Show
  9197 ;; This function uses a non-reentrant model
  9198 ;;
  9199                           
  9200                           	psect	text30
  9201  000F28                     __ptext30:
  9202                           	opt stack 0
  9203  000F28                     _HSV_to_RGB:
  9204                           	opt stack 18
  9205                           
  9206                           ;Pattern_HSV_Convert.c: 68: uint16_t r, g, b, h, s, v, region, fpart, p, q, t;
  9207                           ;Pattern_HSV_Convert.c: 70: h = *HSV_Value >> 8;
  9208                           
  9209                           ;incstack = 0
  9210  000F28  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  9211  000F2C  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  9212  000F30  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  9213  000F34  CFDE F076          	movff	postinc2,??_HSV_to_RGB+1
  9214  000F38  CFDE F077          	movff	postinc2,??_HSV_to_RGB+2
  9215  000F3C  CFDE F078          	movff	postinc2,??_HSV_to_RGB+3
  9216  000F40  C076  F075         	movff	??_HSV_to_RGB+1,??_HSV_to_RGB
  9217  000F44  C077  F076         	movff	??_HSV_to_RGB+2,??_HSV_to_RGB+1
  9218  000F48  C078  F077         	movff	??_HSV_to_RGB+3,??_HSV_to_RGB+2
  9219  000F4C  0100               	movlb	0	; () banked
  9220  000F4E  6B78               	clrf	(??_HSV_to_RGB+3)& (0+255),b
  9221  000F50  C075  F08D         	movff	??_HSV_to_RGB,HSV_to_RGB@h
  9222  000F54  C076  F08E         	movff	??_HSV_to_RGB+1,HSV_to_RGB@h+1
  9223                           
  9224                           ; BSR set to: 0
  9225                           ;Pattern_HSV_Convert.c: 71: s = *HSV_Value & 0xF0;
  9226  000F58  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  9227  000F5C  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  9228  000F60  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  9229  000F64  CFDD F076          	movff	postdec2,??_HSV_to_RGB+1
  9230  000F68  0EF0               	movlw	240
  9231  000F6A  0100               	movlb	0	; () banked
  9232  000F6C  1575               	andwf	??_HSV_to_RGB& (0+255),w,b
  9233  000F6E  0100               	movlb	0	; () banked
  9234  000F70  6F9F               	movwf	HSV_to_RGB@s& (0+255),b
  9235  000F72  0100               	movlb	0	; () banked
  9236  000F74  6BA0               	clrf	(HSV_to_RGB@s+1)& (0+255),b
  9237                           
  9238                           ; BSR set to: 0
  9239                           ;Pattern_HSV_Convert.c: 72: s += s >> 4;
  9240  000F76  C09F  F075         	movff	HSV_to_RGB@s,??_HSV_to_RGB
  9241  000F7A  C0A0  F076         	movff	HSV_to_RGB@s+1,??_HSV_to_RGB+1
  9242  000F7E  0E04               	movlw	4
  9243  000F80  0100               	movlb	0	; () banked
  9244  000F82  6F77               	movwf	(??_HSV_to_RGB+2)& (0+255),b
  9245  000F84                     u1995:
  9246  000F84  0100               	movlb	0	; () banked
  9247  000F86  90D8               	bcf	status,0,c
  9248  000F88  3376               	rrcf	(??_HSV_to_RGB+1)& (0+255),f,b
  9249  000F8A  3375               	rrcf	??_HSV_to_RGB& (0+255),f,b
  9250  000F8C  0100               	movlb	0	; () banked
  9251  000F8E  2F77               	decfsz	(??_HSV_to_RGB+2)& (0+255),f,b
  9252  000F90  D7F9               	goto	u1995
  9253  000F92  0100               	movlb	0	; () banked
  9254  000F94  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  9255  000F96  0100               	movlb	0	; () banked
  9256  000F98  279F               	addwf	HSV_to_RGB@s& (0+255),f,b
  9257  000F9A  0100               	movlb	0	; () banked
  9258  000F9C  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  9259  000F9E  0100               	movlb	0	; () banked
  9260  000FA0  23A0               	addwfc	(HSV_to_RGB@s+1)& (0+255),f,b
  9261                           
  9262                           ; BSR set to: 0
  9263                           ;Pattern_HSV_Convert.c: 73: v = *HSV_Value & 0x0F;
  9264  000FA2  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  9265  000FA6  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  9266  000FAA  CFDE F075          	movff	postinc2,??_HSV_to_RGB
  9267  000FAE  CFDD F076          	movff	postdec2,??_HSV_to_RGB+1
  9268  000FB2  0E0F               	movlw	15
  9269  000FB4  0100               	movlb	0	; () banked
  9270  000FB6  1575               	andwf	??_HSV_to_RGB& (0+255),w,b
  9271  000FB8  0100               	movlb	0	; () banked
  9272  000FBA  6FA3               	movwf	HSV_to_RGB@v& (0+255),b
  9273  000FBC  0100               	movlb	0	; () banked
  9274  000FBE  6BA4               	clrf	(HSV_to_RGB@v+1)& (0+255),b
  9275                           
  9276                           ; BSR set to: 0
  9277                           ;Pattern_HSV_Convert.c: 74: v += v << 4;
  9278  000FC0  C0A3  F075         	movff	HSV_to_RGB@v,??_HSV_to_RGB
  9279  000FC4  C0A4  F076         	movff	HSV_to_RGB@v+1,??_HSV_to_RGB+1
  9280  000FC8  0100               	movlb	0	; () banked
  9281  000FCA  3B75               	swapf	??_HSV_to_RGB& (0+255),f,b
  9282  000FCC  3B76               	swapf	(??_HSV_to_RGB+1)& (0+255),f,b
  9283  000FCE  0EF0               	movlw	240
  9284  000FD0  1776               	andwf	(??_HSV_to_RGB+1)& (0+255),f,b
  9285  000FD2  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  9286  000FD4  0B0F               	andlw	15
  9287  000FD6  1376               	iorwf	(??_HSV_to_RGB+1)& (0+255),f,b
  9288  000FD8  0EF0               	movlw	240
  9289  000FDA  1775               	andwf	??_HSV_to_RGB& (0+255),f,b
  9290  000FDC  0100               	movlb	0	; () banked
  9291  000FDE  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  9292  000FE0  0100               	movlb	0	; () banked
  9293  000FE2  27A3               	addwf	HSV_to_RGB@v& (0+255),f,b
  9294  000FE4  0100               	movlb	0	; () banked
  9295  000FE6  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  9296  000FE8  0100               	movlb	0	; () banked
  9297  000FEA  23A4               	addwfc	(HSV_to_RGB@v+1)& (0+255),f,b
  9298                           
  9299                           ; BSR set to: 0
  9300                           ;Pattern_HSV_Convert.c: 77: if(s == 0) {
  9301  000FEC  0100               	movlb	0	; () banked
  9302  000FEE  519F               	movf	HSV_to_RGB@s& (0+255),w,b
  9303  000FF0  0100               	movlb	0	; () banked
  9304  000FF2  11A0               	iorwf	(HSV_to_RGB@s+1)& (0+255),w,b
  9305  000FF4  A4D8               	btfss	status,2,c
  9306  000FF6  D00D               	goto	l3203
  9307                           
  9308                           ; BSR set to: 0
  9309                           ;Pattern_HSV_Convert.c: 78: r = g = b = v;
  9310  000FF8  C0A3  F097         	movff	HSV_to_RGB@v,HSV_to_RGB@b
  9311  000FFC  C0A4  F098         	movff	HSV_to_RGB@v+1,HSV_to_RGB@b+1
  9312  001000  C097  F095         	movff	HSV_to_RGB@b,HSV_to_RGB@g
  9313  001004  C098  F096         	movff	HSV_to_RGB@b+1,HSV_to_RGB@g+1
  9314  001008  C095  F093         	movff	HSV_to_RGB@g,HSV_to_RGB@r
  9315  00100C  C096  F094         	movff	HSV_to_RGB@g+1,HSV_to_RGB@r+1
  9316                           
  9317                           ;Pattern_HSV_Convert.c: 79: }
  9318  001010  D129               	goto	l3223
  9319  001012                     l3203:
  9320                           
  9321                           ; BSR set to: 0
  9322                           ;Pattern_HSV_Convert.c: 82: else{
  9323                           ;Pattern_HSV_Convert.c: 84: region = h / 43;
  9324  001012  C08D  F06C         	movff	HSV_to_RGB@h,___lwdiv@dividend
  9325  001016  C08E  F06D         	movff	HSV_to_RGB@h+1,___lwdiv@dividend+1
  9326  00101A  0E00               	movlw	0
  9327  00101C  0100               	movlb	0	; () banked
  9328  00101E  6F6F               	movwf	(___lwdiv@divisor+1)& (0+255),b
  9329  001020  0E2B               	movlw	43
  9330  001022  6F6E               	movwf	___lwdiv@divisor& (0+255),b
  9331  001024  ECB6  F01A         	call	___lwdiv	;wreg free
  9332  001028  C06C  F08F         	movff	?___lwdiv,HSV_to_RGB@region
  9333  00102C  C06D  F090         	movff	?___lwdiv+1,HSV_to_RGB@region+1
  9334                           
  9335                           ;Pattern_HSV_Convert.c: 86: fpart = (h - (region * 43)) * 6;
  9336  001030  C08F  F066         	movff	HSV_to_RGB@region,___wmul@multiplier
  9337  001034  C090  F067         	movff	HSV_to_RGB@region+1,___wmul@multiplier+1
  9338  001038  0E00               	movlw	0
  9339  00103A  0100               	movlb	0	; () banked
  9340  00103C  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9341  00103E  0E2B               	movlw	43
  9342  001040  6F68               	movwf	___wmul@multiplicand& (0+255),b
  9343  001042  EC06  F01D         	call	___wmul	;wreg free
  9344  001046  0100               	movlb	0	; () banked
  9345  001048  1F66               	comf	?___wmul& (0+255),f,b
  9346  00104A  0100               	movlb	0	; () banked
  9347  00104C  1F67               	comf	(?___wmul+1)& (0+255),f,b
  9348  00104E  0100               	movlb	0	; () banked
  9349  001050  4B66               	infsnz	?___wmul& (0+255),f,b
  9350  001052  2B67               	incf	(?___wmul+1)& (0+255),f,b
  9351  001054  0100               	movlb	0	; () banked
  9352  001056  518D               	movf	HSV_to_RGB@h& (0+255),w,b
  9353  001058  0100               	movlb	0	; () banked
  9354  00105A  2566               	addwf	?___wmul& (0+255),w,b
  9355  00105C  0100               	movlb	0	; () banked
  9356  00105E  6F9D               	movwf	_HSV_to_RGB$1985& (0+255),b
  9357  001060  0100               	movlb	0	; () banked
  9358  001062  518E               	movf	(HSV_to_RGB@h+1)& (0+255),w,b
  9359  001064  0100               	movlb	0	; () banked
  9360  001066  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  9361  001068  0100               	movlb	0	; () banked
  9362  00106A  6F9E               	movwf	(_HSV_to_RGB$1985+1)& (0+255),b
  9363                           
  9364                           ; BSR set to: 0
  9365                           ;Pattern_HSV_Convert.c: 86: fpart = (h - (region * 43)) * 6;
  9366  00106C  C09D  F066         	movff	_HSV_to_RGB$1985,___wmul@multiplier
  9367  001070  C09E  F067         	movff	_HSV_to_RGB$1985+1,___wmul@multiplier+1
  9368  001074  0E00               	movlw	0
  9369  001076  0100               	movlb	0	; () banked
  9370  001078  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9371  00107A  0E06               	movlw	6
  9372  00107C  6F68               	movwf	___wmul@multiplicand& (0+255),b
  9373  00107E  EC06  F01D         	call	___wmul	;wreg free
  9374  001082  C066  F091         	movff	?___wmul,HSV_to_RGB@fpart
  9375  001086  C067  F092         	movff	?___wmul+1,HSV_to_RGB@fpart+1
  9376                           
  9377                           ;Pattern_HSV_Convert.c: 89: p = (v * (255 - s)) >> 8;
  9378  00108A  C09F  F075         	movff	HSV_to_RGB@s,??_HSV_to_RGB
  9379  00108E  C0A0  F076         	movff	HSV_to_RGB@s+1,??_HSV_to_RGB+1
  9380  001092  0100               	movlb	0	; () banked
  9381  001094  1F75               	comf	??_HSV_to_RGB& (0+255),f,b
  9382  001096  1F76               	comf	(??_HSV_to_RGB+1)& (0+255),f,b
  9383  001098  4B75               	infsnz	??_HSV_to_RGB& (0+255),f,b
  9384  00109A  2B76               	incf	(??_HSV_to_RGB+1)& (0+255),f,b
  9385  00109C  0EFF               	movlw	255
  9386  00109E  0100               	movlb	0	; () banked
  9387  0010A0  2575               	addwf	??_HSV_to_RGB& (0+255),w,b
  9388  0010A2  0100               	movlb	0	; () banked
  9389  0010A4  6F66               	movwf	___wmul@multiplier& (0+255),b
  9390  0010A6  0E00               	movlw	0
  9391  0010A8  0100               	movlb	0	; () banked
  9392  0010AA  2176               	addwfc	(??_HSV_to_RGB+1)& (0+255),w,b
  9393  0010AC  0100               	movlb	0	; () banked
  9394  0010AE  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  9395  0010B0  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  9396  0010B4  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  9397  0010B8  EC06  F01D         	call	___wmul	;wreg free
  9398  0010BC  0100               	movlb	0	; () banked
  9399  0010BE  5167               	movf	(?___wmul+1)& (0+255),w,b
  9400  0010C0  0100               	movlb	0	; () banked
  9401  0010C2  6FA1               	movwf	HSV_to_RGB@p& (0+255),b
  9402  0010C4  6BA2               	clrf	(HSV_to_RGB@p+1)& (0+255),b
  9403                           
  9404                           ; BSR set to: 0
  9405                           ;Pattern_HSV_Convert.c: 90: q = (v * (255 - ((s * fpart) >> 8))) >> 8;
  9406  0010C6  C09F  F066         	movff	HSV_to_RGB@s,___wmul@multiplier
  9407  0010CA  C0A0  F067         	movff	HSV_to_RGB@s+1,___wmul@multiplier+1
  9408  0010CE  C091  F068         	movff	HSV_to_RGB@fpart,___wmul@multiplicand
  9409  0010D2  C092  F069         	movff	HSV_to_RGB@fpart+1,___wmul@multiplicand+1
  9410  0010D6  EC06  F01D         	call	___wmul	;wreg free
  9411  0010DA  0100               	movlb	0	; () banked
  9412  0010DC  C067  F066         	movff	?___wmul+1,?___wmul
  9413  0010E0  0100               	movlb	0	; () banked
  9414  0010E2  6B67               	clrf	(?___wmul+1)& (0+255),b
  9415  0010E4  0100               	movlb	0	; () banked
  9416  0010E6  1F66               	comf	?___wmul& (0+255),f,b
  9417  0010E8  0100               	movlb	0	; () banked
  9418  0010EA  1F67               	comf	(?___wmul+1)& (0+255),f,b
  9419  0010EC  0100               	movlb	0	; () banked
  9420  0010EE  4B66               	infsnz	?___wmul& (0+255),f,b
  9421  0010F0  2B67               	incf	(?___wmul+1)& (0+255),f,b
  9422  0010F2  0EFF               	movlw	255
  9423  0010F4  0100               	movlb	0	; () banked
  9424  0010F6  2566               	addwf	?___wmul& (0+255),w,b
  9425  0010F8  0100               	movlb	0	; () banked
  9426  0010FA  6F9D               	movwf	_HSV_to_RGB$1985& (0+255),b
  9427  0010FC  0E00               	movlw	0
  9428  0010FE  0100               	movlb	0	; () banked
  9429  001100  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  9430  001102  0100               	movlb	0	; () banked
  9431  001104  6F9E               	movwf	(_HSV_to_RGB$1985+1)& (0+255),b
  9432                           
  9433                           ; BSR set to: 0
  9434                           ;Pattern_HSV_Convert.c: 90: q = (v * (255 - ((s * fpart) >> 8))) >> 8;
  9435  001106  C09D  F066         	movff	_HSV_to_RGB$1985,___wmul@multiplier
  9436  00110A  C09E  F067         	movff	_HSV_to_RGB$1985+1,___wmul@multiplier+1
  9437  00110E  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  9438  001112  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  9439  001116  EC06  F01D         	call	___wmul	;wreg free
  9440  00111A  0100               	movlb	0	; () banked
  9441  00111C  5167               	movf	(?___wmul+1)& (0+255),w,b
  9442  00111E  0100               	movlb	0	; () banked
  9443  001120  6F99               	movwf	HSV_to_RGB@q& (0+255),b
  9444  001122  6B9A               	clrf	(HSV_to_RGB@q+1)& (0+255),b
  9445                           
  9446                           ; BSR set to: 0
  9447                           ;Pattern_HSV_Convert.c: 91: t = (v * (255 - ((s * (255 - fpart)) >> 8))) >> 8;
  9448  001124  C091  F075         	movff	HSV_to_RGB@fpart,??_HSV_to_RGB
  9449  001128  C092  F076         	movff	HSV_to_RGB@fpart+1,??_HSV_to_RGB+1
  9450  00112C  0100               	movlb	0	; () banked
  9451  00112E  1F75               	comf	??_HSV_to_RGB& (0+255),f,b
  9452  001130  1F76               	comf	(??_HSV_to_RGB+1)& (0+255),f,b
  9453  001132  4B75               	infsnz	??_HSV_to_RGB& (0+255),f,b
  9454  001134  2B76               	incf	(??_HSV_to_RGB+1)& (0+255),f,b
  9455  001136  0EFF               	movlw	255
  9456  001138  0100               	movlb	0	; () banked
  9457  00113A  2575               	addwf	??_HSV_to_RGB& (0+255),w,b
  9458  00113C  0100               	movlb	0	; () banked
  9459  00113E  6F66               	movwf	___wmul@multiplier& (0+255),b
  9460  001140  0E00               	movlw	0
  9461  001142  0100               	movlb	0	; () banked
  9462  001144  2176               	addwfc	(??_HSV_to_RGB+1)& (0+255),w,b
  9463  001146  0100               	movlb	0	; () banked
  9464  001148  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
  9465  00114A  C09F  F068         	movff	HSV_to_RGB@s,___wmul@multiplicand
  9466  00114E  C0A0  F069         	movff	HSV_to_RGB@s+1,___wmul@multiplicand+1
  9467  001152  EC06  F01D         	call	___wmul	;wreg free
  9468  001156  0100               	movlb	0	; () banked
  9469  001158  C067  F066         	movff	?___wmul+1,?___wmul
  9470  00115C  0100               	movlb	0	; () banked
  9471  00115E  6B67               	clrf	(?___wmul+1)& (0+255),b
  9472  001160  0100               	movlb	0	; () banked
  9473  001162  1F66               	comf	?___wmul& (0+255),f,b
  9474  001164  0100               	movlb	0	; () banked
  9475  001166  1F67               	comf	(?___wmul+1)& (0+255),f,b
  9476  001168  0100               	movlb	0	; () banked
  9477  00116A  4B66               	infsnz	?___wmul& (0+255),f,b
  9478  00116C  2B67               	incf	(?___wmul+1)& (0+255),f,b
  9479  00116E  0EFF               	movlw	255
  9480  001170  0100               	movlb	0	; () banked
  9481  001172  2566               	addwf	?___wmul& (0+255),w,b
  9482  001174  0100               	movlb	0	; () banked
  9483  001176  6F9D               	movwf	_HSV_to_RGB$1985& (0+255),b
  9484  001178  0E00               	movlw	0
  9485  00117A  0100               	movlb	0	; () banked
  9486  00117C  2167               	addwfc	(?___wmul+1)& (0+255),w,b
  9487  00117E  0100               	movlb	0	; () banked
  9488  001180  6F9E               	movwf	(_HSV_to_RGB$1985+1)& (0+255),b
  9489                           
  9490                           ; BSR set to: 0
  9491                           ;Pattern_HSV_Convert.c: 91: t = (v * (255 - ((s * (255 - fpart)) >> 8))) >> 8;
  9492  001182  C09D  F066         	movff	_HSV_to_RGB$1985,___wmul@multiplier
  9493  001186  C09E  F067         	movff	_HSV_to_RGB$1985+1,___wmul@multiplier+1
  9494  00118A  C0A3  F068         	movff	HSV_to_RGB@v,___wmul@multiplicand
  9495  00118E  C0A4  F069         	movff	HSV_to_RGB@v+1,___wmul@multiplicand+1
  9496  001192  EC06  F01D         	call	___wmul	;wreg free
  9497  001196  0100               	movlb	0	; () banked
  9498  001198  5167               	movf	(?___wmul+1)& (0+255),w,b
  9499  00119A  0100               	movlb	0	; () banked
  9500  00119C  6F9B               	movwf	HSV_to_RGB@t& (0+255),b
  9501  00119E  6B9C               	clrf	(HSV_to_RGB@t+1)& (0+255),b
  9502                           
  9503                           ;Pattern_HSV_Convert.c: 94: switch(region) {
  9504  0011A0  D046               	goto	l3221
  9505  0011A2                     l487:
  9506                           
  9507                           ; BSR set to: 0
  9508                           ;Pattern_HSV_Convert.c: 96: r = v; g = t; b = p; break;
  9509  0011A2  C0A3  F093         	movff	HSV_to_RGB@v,HSV_to_RGB@r
  9510  0011A6  C0A4  F094         	movff	HSV_to_RGB@v+1,HSV_to_RGB@r+1
  9511  0011AA  C09B  F095         	movff	HSV_to_RGB@t,HSV_to_RGB@g
  9512  0011AE  C09C  F096         	movff	HSV_to_RGB@t+1,HSV_to_RGB@g+1
  9513  0011B2  D008               	goto	L20
  9514  0011B4                     l489:
  9515                           
  9516                           ; BSR set to: 0
  9517                           ;Pattern_HSV_Convert.c: 98: r = q; g = v; b = p; break;
  9518  0011B4  C099  F093         	movff	HSV_to_RGB@q,HSV_to_RGB@r
  9519  0011B8  C09A  F094         	movff	HSV_to_RGB@q+1,HSV_to_RGB@r+1
  9520  0011BC  C0A3  F095         	movff	HSV_to_RGB@v,HSV_to_RGB@g
  9521  0011C0  C0A4  F096         	movff	HSV_to_RGB@v+1,HSV_to_RGB@g+1
  9522  0011C4                     L20:
  9523  0011C4  C0A1  F097         	movff	HSV_to_RGB@p,HSV_to_RGB@b
  9524  0011C8  C0A2  F098         	movff	HSV_to_RGB@p+1,HSV_to_RGB@b+1
  9525  0011CC  D04B               	goto	l3223
  9526  0011CE                     l490:
  9527                           
  9528                           ; BSR set to: 0
  9529                           ;Pattern_HSV_Convert.c: 100: r = p; g = v; b = t; break;
  9530  0011CE  C0A1  F093         	movff	HSV_to_RGB@p,HSV_to_RGB@r
  9531  0011D2  C0A2  F094         	movff	HSV_to_RGB@p+1,HSV_to_RGB@r+1
  9532  0011D6  C0A3  F095         	movff	HSV_to_RGB@v,HSV_to_RGB@g
  9533  0011DA  C0A4  F096         	movff	HSV_to_RGB@v+1,HSV_to_RGB@g+1
  9534  0011DE  C09B  F097         	movff	HSV_to_RGB@t,HSV_to_RGB@b
  9535  0011E2  C09C  F098         	movff	HSV_to_RGB@t+1,HSV_to_RGB@b+1
  9536  0011E6  D03E               	goto	l3223
  9537  0011E8                     l491:
  9538                           
  9539                           ; BSR set to: 0
  9540                           ;Pattern_HSV_Convert.c: 102: r = p; g = q; b = v; break;
  9541  0011E8  C0A1  F093         	movff	HSV_to_RGB@p,HSV_to_RGB@r
  9542  0011EC  C0A2  F094         	movff	HSV_to_RGB@p+1,HSV_to_RGB@r+1
  9543  0011F0  C099  F095         	movff	HSV_to_RGB@q,HSV_to_RGB@g
  9544  0011F4  C09A  F096         	movff	HSV_to_RGB@q+1,HSV_to_RGB@g+1
  9545  0011F8  D008               	goto	L21
  9546  0011FA                     l492:
  9547                           
  9548                           ; BSR set to: 0
  9549                           ;Pattern_HSV_Convert.c: 104: r = t; g = p; b = v; break;
  9550  0011FA  C09B  F093         	movff	HSV_to_RGB@t,HSV_to_RGB@r
  9551  0011FE  C09C  F094         	movff	HSV_to_RGB@t+1,HSV_to_RGB@r+1
  9552  001202  C0A1  F095         	movff	HSV_to_RGB@p,HSV_to_RGB@g
  9553  001206  C0A2  F096         	movff	HSV_to_RGB@p+1,HSV_to_RGB@g+1
  9554  00120A                     L21:
  9555  00120A  C0A3  F097         	movff	HSV_to_RGB@v,HSV_to_RGB@b
  9556  00120E  C0A4  F098         	movff	HSV_to_RGB@v+1,HSV_to_RGB@b+1
  9557  001212  D028               	goto	l3223
  9558  001214                     l493:
  9559                           
  9560                           ; BSR set to: 0
  9561                           ;Pattern_HSV_Convert.c: 106: r = v; g = p; b = q; break;
  9562  001214  C0A3  F093         	movff	HSV_to_RGB@v,HSV_to_RGB@r
  9563  001218  C0A4  F094         	movff	HSV_to_RGB@v+1,HSV_to_RGB@r+1
  9564  00121C  C0A1  F095         	movff	HSV_to_RGB@p,HSV_to_RGB@g
  9565  001220  C0A2  F096         	movff	HSV_to_RGB@p+1,HSV_to_RGB@g+1
  9566  001224  C099  F097         	movff	HSV_to_RGB@q,HSV_to_RGB@b
  9567  001228  C09A  F098         	movff	HSV_to_RGB@q+1,HSV_to_RGB@b+1
  9568                           
  9569                           ; BSR set to: 0
  9570                           ;Pattern_HSV_Convert.c: 107: }
  9571  00122C  D01B               	goto	l3223
  9572  00122E                     l3221:
  9573                           
  9574                           ; BSR set to: 0
  9575  00122E  C08F  F075         	movff	HSV_to_RGB@region,??_HSV_to_RGB
  9576  001232  C090  F076         	movff	HSV_to_RGB@region+1,??_HSV_to_RGB+1
  9577                           
  9578                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9579                           ; Switch size 1, requested type "space"
  9580                           ; Number of cases is 1, Range of values is 0 to 0
  9581                           ; switch strategies available:
  9582                           ; Name         Instructions Cycles
  9583                           ; simple_byte            4     3 (average)
  9584                           ;	Chosen strategy is simple_byte
  9585  001236  0100               	movlb	0	; () banked
  9586  001238  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  9587  00123A  0A00               	xorlw	0	; case 0
  9588  00123C  A4D8               	btfss	status,2,c
  9589  00123E  D7EA               	goto	l493
  9590                           
  9591                           ; BSR set to: 0
  9592                           ; Switch size 1, requested type "space"
  9593                           ; Number of cases is 5, Range of values is 0 to 4
  9594                           ; switch strategies available:
  9595                           ; Name         Instructions Cycles
  9596                           ; simple_byte           16     9 (average)
  9597                           ;	Chosen strategy is simple_byte
  9598  001240  0100               	movlb	0	; () banked
  9599  001242  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  9600  001244  0A00               	xorlw	0	; case 0
  9601  001246  B4D8               	btfsc	status,2,c
  9602  001248  D7AC               	goto	l487
  9603  00124A  0A01               	xorlw	1	; case 1
  9604  00124C  B4D8               	btfsc	status,2,c
  9605  00124E  D7B2               	goto	l489
  9606  001250  0A03               	xorlw	3	; case 2
  9607  001252  B4D8               	btfsc	status,2,c
  9608  001254  D7BC               	goto	l490
  9609  001256  0A01               	xorlw	1	; case 3
  9610  001258  B4D8               	btfsc	status,2,c
  9611  00125A  D7C6               	goto	l491
  9612  00125C  0A07               	xorlw	7	; case 4
  9613  00125E  B4D8               	btfsc	status,2,c
  9614  001260  D7CC               	goto	l492
  9615  001262  D7D8               	goto	l493
  9616  001264                     l3223:
  9617                           
  9618                           ; BSR set to: 0
  9619                           ;Pattern_HSV_Convert.c: 108: }
  9620                           ;Pattern_HSV_Convert.c: 111: *HSV_Value = (*HSV_Value & 0xFF000000) | ((uint32_t)b << 16
      +                          ) | ((uint32_t)g << 8) | ((uint32_t)r);
  9621  001264  0100               	movlb	0	; () banked
  9622  001266  5195               	movf	HSV_to_RGB@g& (0+255),w,b
  9623  001268  0100               	movlb	0	; () banked
  9624  00126A  6F75               	movwf	??_HSV_to_RGB& (0+255),b
  9625  00126C  0100               	movlb	0	; () banked
  9626  00126E  5196               	movf	(HSV_to_RGB@g+1)& (0+255),w,b
  9627  001270  0100               	movlb	0	; () banked
  9628  001272  6F76               	movwf	(??_HSV_to_RGB+1)& (0+255),b
  9629  001274  0100               	movlb	0	; () banked
  9630  001276  6B77               	clrf	(??_HSV_to_RGB+2)& (0+255),b
  9631  001278  0100               	movlb	0	; () banked
  9632  00127A  6B78               	clrf	(??_HSV_to_RGB+3)& (0+255),b
  9633  00127C  C077  F078         	movff	??_HSV_to_RGB+2,??_HSV_to_RGB+3
  9634  001280  C076  F077         	movff	??_HSV_to_RGB+1,??_HSV_to_RGB+2
  9635  001284  C075  F076         	movff	??_HSV_to_RGB,??_HSV_to_RGB+1
  9636  001288  0100               	movlb	0	; () banked
  9637  00128A  6B75               	clrf	??_HSV_to_RGB& (0+255),b
  9638  00128C  0100               	movlb	0	; () banked
  9639  00128E  5197               	movf	HSV_to_RGB@b& (0+255),w,b
  9640  001290  0100               	movlb	0	; () banked
  9641  001292  6F79               	movwf	(??_HSV_to_RGB+4)& (0+255),b
  9642  001294  0100               	movlb	0	; () banked
  9643  001296  5198               	movf	(HSV_to_RGB@b+1)& (0+255),w,b
  9644  001298  0100               	movlb	0	; () banked
  9645  00129A  6F7A               	movwf	(??_HSV_to_RGB+5)& (0+255),b
  9646  00129C  0100               	movlb	0	; () banked
  9647  00129E  6B7B               	clrf	(??_HSV_to_RGB+6)& (0+255),b
  9648  0012A0  0100               	movlb	0	; () banked
  9649  0012A2  6B7C               	clrf	(??_HSV_to_RGB+7)& (0+255),b
  9650  0012A4  C07A  F07C         	movff	??_HSV_to_RGB+5,??_HSV_to_RGB+7
  9651  0012A8  C079  F07B         	movff	??_HSV_to_RGB+4,??_HSV_to_RGB+6
  9652  0012AC  0100               	movlb	0	; () banked
  9653  0012AE  6B7A               	clrf	(??_HSV_to_RGB+5)& (0+255),b
  9654  0012B0  6B79               	clrf	(??_HSV_to_RGB+4)& (0+255),b
  9655  0012B2  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  9656  0012B6  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  9657  0012BA  0E00               	movlw	0
  9658  0012BC  14DE               	andwf	postinc2,w,c
  9659  0012BE  0100               	movlb	0	; () banked
  9660  0012C0  6F7D               	movwf	(??_HSV_to_RGB+8)& (0+255),b
  9661  0012C2  0E00               	movlw	0
  9662  0012C4  14DE               	andwf	postinc2,w,c
  9663  0012C6  0100               	movlb	0	; () banked
  9664  0012C8  6F7E               	movwf	(??_HSV_to_RGB+9)& (0+255),b
  9665  0012CA  0E00               	movlw	0
  9666  0012CC  14DE               	andwf	postinc2,w,c
  9667  0012CE  0100               	movlb	0	; () banked
  9668  0012D0  6F7F               	movwf	(??_HSV_to_RGB+10)& (0+255),b
  9669  0012D2  0EFF               	movlw	255
  9670  0012D4  14DE               	andwf	postinc2,w,c
  9671  0012D6  0100               	movlb	0	; () banked
  9672  0012D8  6F80               	movwf	(??_HSV_to_RGB+11)& (0+255),b
  9673  0012DA  0100               	movlb	0	; () banked
  9674  0012DC  5179               	movf	(??_HSV_to_RGB+4)& (0+255),w,b
  9675  0012DE  0100               	movlb	0	; () banked
  9676  0012E0  117D               	iorwf	(??_HSV_to_RGB+8)& (0+255),w,b
  9677  0012E2  0100               	movlb	0	; () banked
  9678  0012E4  6F81               	movwf	(??_HSV_to_RGB+12)& (0+255),b
  9679  0012E6  0100               	movlb	0	; () banked
  9680  0012E8  517A               	movf	(??_HSV_to_RGB+5)& (0+255),w,b
  9681  0012EA  0100               	movlb	0	; () banked
  9682  0012EC  117E               	iorwf	(??_HSV_to_RGB+9)& (0+255),w,b
  9683  0012EE  0100               	movlb	0	; () banked
  9684  0012F0  6F82               	movwf	(??_HSV_to_RGB+13)& (0+255),b
  9685  0012F2  0100               	movlb	0	; () banked
  9686  0012F4  517B               	movf	(??_HSV_to_RGB+6)& (0+255),w,b
  9687  0012F6  0100               	movlb	0	; () banked
  9688  0012F8  117F               	iorwf	(??_HSV_to_RGB+10)& (0+255),w,b
  9689  0012FA  0100               	movlb	0	; () banked
  9690  0012FC  6F83               	movwf	(??_HSV_to_RGB+14)& (0+255),b
  9691  0012FE  0100               	movlb	0	; () banked
  9692  001300  517C               	movf	(??_HSV_to_RGB+7)& (0+255),w,b
  9693  001302  0100               	movlb	0	; () banked
  9694  001304  1180               	iorwf	(??_HSV_to_RGB+11)& (0+255),w,b
  9695  001306  0100               	movlb	0	; () banked
  9696  001308  6F84               	movwf	(??_HSV_to_RGB+15)& (0+255),b
  9697  00130A  0100               	movlb	0	; () banked
  9698  00130C  5175               	movf	??_HSV_to_RGB& (0+255),w,b
  9699  00130E  0100               	movlb	0	; () banked
  9700  001310  1181               	iorwf	(??_HSV_to_RGB+12)& (0+255),w,b
  9701  001312  0100               	movlb	0	; () banked
  9702  001314  6F85               	movwf	(??_HSV_to_RGB+16)& (0+255),b
  9703  001316  0100               	movlb	0	; () banked
  9704  001318  5176               	movf	(??_HSV_to_RGB+1)& (0+255),w,b
  9705  00131A  0100               	movlb	0	; () banked
  9706  00131C  1182               	iorwf	(??_HSV_to_RGB+13)& (0+255),w,b
  9707  00131E  0100               	movlb	0	; () banked
  9708  001320  6F86               	movwf	(??_HSV_to_RGB+17)& (0+255),b
  9709  001322  0100               	movlb	0	; () banked
  9710  001324  5177               	movf	(??_HSV_to_RGB+2)& (0+255),w,b
  9711  001326  0100               	movlb	0	; () banked
  9712  001328  1183               	iorwf	(??_HSV_to_RGB+14)& (0+255),w,b
  9713  00132A  0100               	movlb	0	; () banked
  9714  00132C  6F87               	movwf	(??_HSV_to_RGB+18)& (0+255),b
  9715  00132E  0100               	movlb	0	; () banked
  9716  001330  5178               	movf	(??_HSV_to_RGB+3)& (0+255),w,b
  9717  001332  0100               	movlb	0	; () banked
  9718  001334  1184               	iorwf	(??_HSV_to_RGB+15)& (0+255),w,b
  9719  001336  0100               	movlb	0	; () banked
  9720  001338  6F88               	movwf	(??_HSV_to_RGB+19)& (0+255),b
  9721  00133A  0100               	movlb	0	; () banked
  9722  00133C  5193               	movf	HSV_to_RGB@r& (0+255),w,b
  9723  00133E  0100               	movlb	0	; () banked
  9724  001340  1185               	iorwf	(??_HSV_to_RGB+16)& (0+255),w,b
  9725  001342  0100               	movlb	0	; () banked
  9726  001344  6F89               	movwf	(??_HSV_to_RGB+20)& (0+255),b
  9727  001346  0100               	movlb	0	; () banked
  9728  001348  5194               	movf	(HSV_to_RGB@r+1)& (0+255),w,b
  9729  00134A  0100               	movlb	0	; () banked
  9730  00134C  1186               	iorwf	(??_HSV_to_RGB+17)& (0+255),w,b
  9731  00134E  0100               	movlb	0	; () banked
  9732  001350  6F8A               	movwf	(??_HSV_to_RGB+21)& (0+255),b
  9733  001352  0E00               	movlw	0
  9734  001354  0100               	movlb	0	; () banked
  9735  001356  1187               	iorwf	(??_HSV_to_RGB+18)& (0+255),w,b
  9736  001358  0100               	movlb	0	; () banked
  9737  00135A  6F8B               	movwf	(??_HSV_to_RGB+22)& (0+255),b
  9738  00135C  0E00               	movlw	0
  9739  00135E  0100               	movlb	0	; () banked
  9740  001360  1188               	iorwf	(??_HSV_to_RGB+19)& (0+255),w,b
  9741  001362  0100               	movlb	0	; () banked
  9742  001364  6F8C               	movwf	(??_HSV_to_RGB+23)& (0+255),b
  9743  001366  C073  FFD9         	movff	HSV_to_RGB@HSV_Value,fsr2l
  9744  00136A  C074  FFDA         	movff	HSV_to_RGB@HSV_Value+1,fsr2h
  9745  00136E  C089  FFDE         	movff	??_HSV_to_RGB+20,postinc2
  9746  001372  C08A  FFDE         	movff	??_HSV_to_RGB+21,postinc2
  9747  001376  C08B  FFDE         	movff	??_HSV_to_RGB+22,postinc2
  9748  00137A  C08C  FFDE         	movff	??_HSV_to_RGB+23,postinc2
  9749  00137E  0012               	return	
  9750  001380                     __end_of_HSV_to_RGB:
  9751                           	opt stack 0
  9752                           tosu	equ	0xFFF
  9753                           tosh	equ	0xFFE
  9754                           tosl	equ	0xFFD
  9755                           pclath	equ	0xFFA
  9756                           tblptru	equ	0xFF8
  9757                           tblptrh	equ	0xFF7
  9758                           tblptrl	equ	0xFF6
  9759                           tablat	equ	0xFF5
  9760                           prodh	equ	0xFF4
  9761                           prodl	equ	0xFF3
  9762                           postinc0	equ	0xFEE
  9763                           wreg	equ	0xFE8
  9764                           postdec1	equ	0xFE5
  9765                           fsr1h	equ	0xFE2
  9766                           fsr1l	equ	0xFE1
  9767                           indf2	equ	0xFDF
  9768                           postinc2	equ	0xFDE
  9769                           postdec2	equ	0xFDD
  9770                           plusw2	equ	0xFDB
  9771                           fsr2h	equ	0xFDA
  9772                           fsr2l	equ	0xFD9
  9773                           status	equ	0xFD8
  9774                           
  9775 ;; *************** function ___lwdiv *****************
  9776 ;; Defined at:
  9777 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;  dividend        2   12[BANK0 ] unsigned int 
  9780 ;;  divisor         2   14[BANK0 ] unsigned int 
  9781 ;; Auto vars:     Size  Location     Type
  9782 ;;  quotient        2   16[BANK0 ] unsigned int 
  9783 ;;  counter         1   18[BANK0 ] unsigned char 
  9784 ;; Return value:  Size  Location     Type
  9785 ;;                  2   12[BANK0 ] unsigned int 
  9786 ;; Registers used:
  9787 ;;		wreg, status,2, status,0
  9788 ;; Tracked objects:
  9789 ;;		On entry : 0/0
  9790 ;;		On exit  : 0/0
  9791 ;;		Unchanged: 0/0
  9792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9793 ;;      Params:         0       4       0       0
  9794 ;;      Locals:         0       3       0       0
  9795 ;;      Temps:          0       0       0       0
  9796 ;;      Totals:         0       7       0       0
  9797 ;;Total ram usage:        7 bytes
  9798 ;; Hardware stack levels used:    1
  9799 ;; Hardware stack levels required when called:    7
  9800 ;; This function calls:
  9801 ;;		Nothing
  9802 ;; This function is called by:
  9803 ;;		_HSV_to_RGB
  9804 ;;		_HueTest
  9805 ;; This function uses a non-reentrant model
  9806 ;;
  9807                           
  9808                           	psect	text31
  9809  00356C                     __ptext31:
  9810                           	opt stack 0
  9811  00356C                     ___lwdiv:
  9812                           	opt stack 18
  9813                           
  9814                           ; BSR set to: 0
  9815                           ;incstack = 0
  9816  00356C  0E00               	movlw	0
  9817  00356E  0100               	movlb	0	; () banked
  9818  003570  6F71               	movwf	(___lwdiv@quotient+1)& (0+255),b
  9819  003572  0E00               	movlw	0
  9820  003574  6F70               	movwf	___lwdiv@quotient& (0+255),b
  9821                           
  9822                           ; BSR set to: 0
  9823  003576  0100               	movlb	0	; () banked
  9824  003578  516E               	movf	___lwdiv@divisor& (0+255),w,b
  9825  00357A  0100               	movlb	0	; () banked
  9826  00357C  116F               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  9827  00357E  B4D8               	btfsc	status,2,c
  9828  003580  D02C               	goto	l1283
  9829                           
  9830                           ; BSR set to: 0
  9831  003582  0E01               	movlw	1
  9832  003584  0100               	movlb	0	; () banked
  9833  003586  6F72               	movwf	___lwdiv@counter& (0+255),b
  9834  003588  D006               	goto	l3133
  9835  00358A                     l3131:
  9836                           
  9837                           ; BSR set to: 0
  9838  00358A  0100               	movlb	0	; () banked
  9839  00358C  90D8               	bcf	status,0,c
  9840  00358E  376E               	rlcf	___lwdiv@divisor& (0+255),f,b
  9841  003590  376F               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  9842  003592  0100               	movlb	0	; () banked
  9843  003594  2B72               	incf	___lwdiv@counter& (0+255),f,b
  9844  003596                     l3133:
  9845                           
  9846                           ; BSR set to: 0
  9847  003596  0100               	movlb	0	; () banked
  9848  003598  AF6F               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  9849  00359A  D7F7               	goto	l3131
  9850  00359C                     l3135:
  9851                           
  9852                           ; BSR set to: 0
  9853  00359C  0100               	movlb	0	; () banked
  9854  00359E  90D8               	bcf	status,0,c
  9855  0035A0  3770               	rlcf	___lwdiv@quotient& (0+255),f,b
  9856  0035A2  3771               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  9857                           
  9858                           ; BSR set to: 0
  9859  0035A4  0100               	movlb	0	; () banked
  9860  0035A6  516E               	movf	___lwdiv@divisor& (0+255),w,b
  9861  0035A8  0100               	movlb	0	; () banked
  9862  0035AA  5D6C               	subwf	___lwdiv@dividend& (0+255),w,b
  9863  0035AC  0100               	movlb	0	; () banked
  9864  0035AE  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9865  0035B0  0100               	movlb	0	; () banked
  9866  0035B2  596D               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  9867  0035B4  A0D8               	btfss	status,0,c
  9868  0035B6  D00A               	goto	l3143
  9869                           
  9870                           ; BSR set to: 0
  9871  0035B8  0100               	movlb	0	; () banked
  9872  0035BA  516E               	movf	___lwdiv@divisor& (0+255),w,b
  9873  0035BC  0100               	movlb	0	; () banked
  9874  0035BE  5F6C               	subwf	___lwdiv@dividend& (0+255),f,b
  9875  0035C0  0100               	movlb	0	; () banked
  9876  0035C2  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9877  0035C4  0100               	movlb	0	; () banked
  9878  0035C6  5B6D               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  9879                           
  9880                           ; BSR set to: 0
  9881  0035C8  0100               	movlb	0	; () banked
  9882  0035CA  8170               	bsf	___lwdiv@quotient& (0+255),0,b
  9883  0035CC                     l3143:
  9884                           
  9885                           ; BSR set to: 0
  9886  0035CC  0100               	movlb	0	; () banked
  9887  0035CE  90D8               	bcf	status,0,c
  9888  0035D0  336F               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  9889  0035D2  336E               	rrcf	___lwdiv@divisor& (0+255),f,b
  9890                           
  9891                           ; BSR set to: 0
  9892  0035D4  0100               	movlb	0	; () banked
  9893  0035D6  2F72               	decfsz	___lwdiv@counter& (0+255),f,b
  9894  0035D8  D7E1               	goto	l3135
  9895  0035DA                     l1283:
  9896                           
  9897                           ; BSR set to: 0
  9898  0035DA  C070  F06C         	movff	___lwdiv@quotient,?___lwdiv
  9899  0035DE  C071  F06D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9900                           
  9901                           ; BSR set to: 0
  9902  0035E2  0012               	return		;funcret
  9903  0035E4                     __end_of___lwdiv:
  9904                           	opt stack 0
  9905                           tosu	equ	0xFFF
  9906                           tosh	equ	0xFFE
  9907                           tosl	equ	0xFFD
  9908                           pclath	equ	0xFFA
  9909                           tblptru	equ	0xFF8
  9910                           tblptrh	equ	0xFF7
  9911                           tblptrl	equ	0xFF6
  9912                           tablat	equ	0xFF5
  9913                           prodh	equ	0xFF4
  9914                           prodl	equ	0xFF3
  9915                           postinc0	equ	0xFEE
  9916                           wreg	equ	0xFE8
  9917                           postdec1	equ	0xFE5
  9918                           fsr1h	equ	0xFE2
  9919                           fsr1l	equ	0xFE1
  9920                           indf2	equ	0xFDF
  9921                           postinc2	equ	0xFDE
  9922                           postdec2	equ	0xFDD
  9923                           plusw2	equ	0xFDB
  9924                           fsr2h	equ	0xFDA
  9925                           fsr2l	equ	0xFD9
  9926                           status	equ	0xFD8
  9927                           
  9928 ;; *************** function _PausePattern *****************
  9929 ;; Defined at:
  9930 ;;		line 286 in file "Pattern_ControlService.c"
  9931 ;; Parameters:    Size  Location     Type
  9932 ;;		None
  9933 ;; Auto vars:     Size  Location     Type
  9934 ;;		None
  9935 ;; Return value:  Size  Location     Type
  9936 ;;                  1    wreg      void 
  9937 ;; Registers used:
  9938 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9939 ;; Tracked objects:
  9940 ;;		On entry : 0/0
  9941 ;;		On exit  : 0/0
  9942 ;;		Unchanged: 0/0
  9943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9944 ;;      Params:         0       0       0       0
  9945 ;;      Locals:         0       0       0       0
  9946 ;;      Temps:          0       0       0       0
  9947 ;;      Totals:         0       0       0       0
  9948 ;;Total ram usage:        0 bytes
  9949 ;; Hardware stack levels used:    1
  9950 ;; Hardware stack levels required when called:    8
  9951 ;; This function calls:
  9952 ;;		_ES_Timer_StopTimer
  9953 ;; This function is called by:
  9954 ;;		_RunPatternControlService
  9955 ;; This function uses a non-reentrant model
  9956 ;;
  9957                           
  9958                           	psect	text32
  9959  003CBC                     __ptext32:
  9960                           	opt stack 0
  9961  003CBC                     _PausePattern:
  9962                           	opt stack 20
  9963                           
  9964                           ;Pattern_ControlService.c: 288: ES_Timer_StopTimer(0);
  9965                           
  9966                           ; BSR set to: 0
  9967                           ;incstack = 0
  9968  003CBC  0E00               	movlw	0
  9969  003CBE  EC1F  F01C         	call	_ES_Timer_StopTimer
  9970  003CC2  0012               	return		;funcret
  9971  003CC4                     __end_of_PausePattern:
  9972                           	opt stack 0
  9973                           tosu	equ	0xFFF
  9974                           tosh	equ	0xFFE
  9975                           tosl	equ	0xFFD
  9976                           pclath	equ	0xFFA
  9977                           tblptru	equ	0xFF8
  9978                           tblptrh	equ	0xFF7
  9979                           tblptrl	equ	0xFF6
  9980                           tablat	equ	0xFF5
  9981                           prodh	equ	0xFF4
  9982                           prodl	equ	0xFF3
  9983                           postinc0	equ	0xFEE
  9984                           wreg	equ	0xFE8
  9985                           postdec1	equ	0xFE5
  9986                           fsr1h	equ	0xFE2
  9987                           fsr1l	equ	0xFE1
  9988                           indf2	equ	0xFDF
  9989                           postinc2	equ	0xFDE
  9990                           postdec2	equ	0xFDD
  9991                           plusw2	equ	0xFDB
  9992                           fsr2h	equ	0xFDA
  9993                           fsr2l	equ	0xFD9
  9994                           status	equ	0xFD8
  9995                           
  9996 ;; *************** function _ES_Timer_StopTimer *****************
  9997 ;; Defined at:
  9998 ;;		line 205 in file "ES_Timers.c"
  9999 ;; Parameters:    Size  Location     Type
 10000 ;;  Num             1    wreg     unsigned char 
 10001 ;; Auto vars:     Size  Location     Type
 10002 ;;  Num             1    4[BANK0 ] unsigned char 
 10003 ;; Return value:  Size  Location     Type
 10004 ;;                  1    wreg      enum E15472
 10005 ;; Registers used:
 10006 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 10007 ;; Tracked objects:
 10008 ;;		On entry : 0/0
 10009 ;;		On exit  : 0/0
 10010 ;;		Unchanged: 0/0
 10011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10012 ;;      Params:         0       0       0       0
 10013 ;;      Locals:         0       1       0       0
 10014 ;;      Temps:          0       4       0       0
 10015 ;;      Totals:         0       5       0       0
 10016 ;;Total ram usage:        5 bytes
 10017 ;; Hardware stack levels used:    1
 10018 ;; Hardware stack levels required when called:    7
 10019 ;; This function calls:
 10020 ;;		Nothing
 10021 ;; This function is called by:
 10022 ;;		_StopPattern
 10023 ;;		_PausePattern
 10024 ;; This function uses a non-reentrant model
 10025 ;;
 10026                           
 10027                           	psect	text33
 10028  00383E                     __ptext33:
 10029                           	opt stack 0
 10030  00383E                     _ES_Timer_StopTimer:
 10031                           	opt stack 20
 10032                           
 10033                           ;incstack = 0
 10034                           ;ES_Timer_StopTimer@Num stored from wreg
 10035  00383E  0100               	movlb	0	; () banked
 10036  003840  6F64               	movwf	ES_Timer_StopTimer@Num& (0+255),b
 10037                           
 10038                           ;ES_Timers.c: 207: if( Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0])) )
 10039  003842  0E0F               	movlw	15
 10040  003844  0100               	movlb	0	; () banked
 10041  003846  6564               	cpfsgt	ES_Timer_StopTimer@Num& (0+255),b
 10042  003848  D001               	goto	l3627
 10043  00384A  0012               	return	
 10044  00384C                     l3627:
 10045                           
 10046                           ; BSR set to: 0
 10047                           ;ES_Timers.c: 209: TMR_ActiveFlags &= ~BitNum2SetMask[Num];
 10048  00384C  0100               	movlb	0	; () banked
 10049  00384E  5164               	movf	ES_Timer_StopTimer@Num& (0+255),w,b
 10050  003850  0D02               	mullw	2
 10051  003852  0E01               	movlw	low _BitNum2SetMask
 10052  003854  24F3               	addwf	prodl,w,c
 10053  003856  6EF6               	movwf	tblptrl,c
 10054  003858  0E03               	movlw	high _BitNum2SetMask
 10055  00385A  20F4               	addwfc	prodh,w,c
 10056  00385C  6EF7               	movwf	tblptrh,c
 10057  00385E                     	if	0	;There are less than 3 active tblptr bytes
 10058  00385E                     	endif
 10059  00385E  0009               	tblrd		*+
 10060  003860  CFF5 F060          	movff	tablat,??_ES_Timer_StopTimer
 10061  003864  0009               	tblrd		*+
 10062  003866  CFF5 F061          	movff	tablat,??_ES_Timer_StopTimer+1
 10063  00386A  0100               	movlb	0	; () banked
 10064  00386C  1D60               	comf	??_ES_Timer_StopTimer& (0+255),w,b
 10065  00386E  0100               	movlb	0	; () banked
 10066  003870  6F62               	movwf	(??_ES_Timer_StopTimer+2)& (0+255),b
 10067  003872  0100               	movlb	0	; () banked
 10068  003874  1D61               	comf	(??_ES_Timer_StopTimer+1)& (0+255),w,b
 10069  003876  0100               	movlb	0	; () banked
 10070  003878  6F63               	movwf	(??_ES_Timer_StopTimer+3)& (0+255),b
 10071  00387A  0100               	movlb	0	; () banked
 10072  00387C  5162               	movf	(??_ES_Timer_StopTimer+2)& (0+255),w,b
 10073  00387E  0100               	movlb	0	; () banked
 10074  003880  17DF               	andwf	_TMR_ActiveFlags& (0+255),f,b
 10075  003882  0100               	movlb	0	; () banked
 10076  003884  5163               	movf	(??_ES_Timer_StopTimer+3)& (0+255),w,b
 10077  003886  0100               	movlb	0	; () banked
 10078  003888  17E0               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
 10079  00388A  0012               	return	
 10080  00388C                     __end_of_ES_Timer_StopTimer:
 10081                           	opt stack 0
 10082                           tosu	equ	0xFFF
 10083                           tosh	equ	0xFFE
 10084                           tosl	equ	0xFFD
 10085                           pclath	equ	0xFFA
 10086                           tblptru	equ	0xFF8
 10087                           tblptrh	equ	0xFF7
 10088                           tblptrl	equ	0xFF6
 10089                           tablat	equ	0xFF5
 10090                           prodh	equ	0xFF4
 10091                           prodl	equ	0xFF3
 10092                           postinc0	equ	0xFEE
 10093                           wreg	equ	0xFE8
 10094                           postdec1	equ	0xFE5
 10095                           fsr1h	equ	0xFE2
 10096                           fsr1l	equ	0xFE1
 10097                           indf2	equ	0xFDF
 10098                           postinc2	equ	0xFDE
 10099                           postdec2	equ	0xFDD
 10100                           plusw2	equ	0xFDB
 10101                           fsr2h	equ	0xFDA
 10102                           fsr2l	equ	0xFD9
 10103                           status	equ	0xFD8
 10104                           
 10105 ;; *************** function _ES_DeQueue *****************
 10106 ;; Defined at:
 10107 ;;		line 164 in file "ES_Queue.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
 10110 ;;		 -> Queue1(12), Queue0(12), 
 10111 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
 10112 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
 10113 ;; Auto vars:     Size  Location     Type
 10114 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
 10115 ;;		 -> Queue1(12), Queue0(12), 
 10116 ;;  NumLeft         1   19[BANK0 ] unsigned char 
 10117 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
 10118 ;; Return value:  Size  Location     Type
 10119 ;;                  1    wreg      unsigned char 
 10120 ;; Registers used:
 10121 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10122 ;; Tracked objects:
 10123 ;;		On entry : 0/0
 10124 ;;		On exit  : 0/0
 10125 ;;		Unchanged: 0/0
 10126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10127 ;;      Params:         0       4       0       0
 10128 ;;      Locals:         0       4       0       0
 10129 ;;      Temps:          0       2       0       0
 10130 ;;      Totals:         0      10       0       0
 10131 ;;Total ram usage:       10 bytes
 10132 ;; Hardware stack levels used:    1
 10133 ;; Hardware stack levels required when called:    8
 10134 ;; This function calls:
 10135 ;;		___lbmod
 10136 ;;		___wmul
 10137 ;; This function is called by:
 10138 ;;		_ES_Run
 10139 ;;		_ES_RecallEvents
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           	psect	text34
 10144  0026E2                     __ptext34:
 10145                           	opt stack 0
 10146  0026E2                     _ES_DeQueue:
 10147                           	opt stack 21
 10148                           
 10149                           ;ES_Queue.c: 166: unsigned char SaveCrit;
 10150                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
 10151                           ;ES_Queue.c: 168: uint8_t NumLeft;
 10152                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
 10153                           
 10154                           ; BSR set to: 0
 10155                           ;incstack = 0
 10156  0026E2  C06C  F074         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
 10157  0026E6  C06D  F075         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
 10158                           
 10159                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
 10160  0026EA  0100               	movlb	0	; () banked
 10161  0026EC  EE20 F002          	lfsr	2,2
 10162  0026F0  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10163  0026F2  26D9               	addwf	fsr2l,f,c
 10164  0026F4  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10165  0026F6  22DA               	addwfc	fsr2h,f,c
 10166  0026F8  50DF               	movf	indf2,w,c
 10167  0026FA  B4D8               	btfsc	status,2,c
 10168  0026FC  D06F               	goto	l3953
 10169                           
 10170                           ; BSR set to: 0
 10171                           
 10172                           ;ES_Queue.c: 172: {
 10173                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
 10174  0026FE  CFF2 F072          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
 10175  002702  9EF2               	bcf	intcon,7,c	;volatile
 10176                           
 10177                           ; BSR set to: 0
 10178                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
 10179                           
 10180                           ; BSR set to: 0
 10181  002704  0100               	movlb	0	; () banked
 10182  002706  EE20 F001          	lfsr	2,1
 10183  00270A  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10184  00270C  26D9               	addwf	fsr2l,f,c
 10185  00270E  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10186  002710  22DA               	addwfc	fsr2h,f,c
 10187  002712  50DF               	movf	indf2,w,c
 10188  002714  0100               	movlb	0	; () banked
 10189  002716  6F70               	movwf	??_ES_DeQueue& (0+255),b
 10190  002718  0E01               	movlw	1
 10191  00271A  0100               	movlb	0	; () banked
 10192  00271C  2570               	addwf	??_ES_DeQueue& (0+255),w,b
 10193  00271E  0100               	movlb	0	; () banked
 10194  002720  6F66               	movwf	___wmul@multiplier& (0+255),b
 10195  002722  0100               	movlb	0	; () banked
 10196  002724  6B67               	clrf	(___wmul@multiplier+1)& (0+255),b
 10197  002726  0E00               	movlw	0
 10198  002728  2367               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 10199  00272A  0E00               	movlw	0
 10200  00272C  0100               	movlb	0	; () banked
 10201  00272E  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10202  002730  0E03               	movlw	3
 10203  002732  6F68               	movwf	___wmul@multiplicand& (0+255),b
 10204  002734  EC06  F01D         	call	___wmul	;wreg free
 10205  002738  0100               	movlb	0	; () banked
 10206  00273A  5166               	movf	?___wmul& (0+255),w,b
 10207  00273C  0100               	movlb	0	; () banked
 10208  00273E  256C               	addwf	ES_DeQueue@pBlock& (0+255),w,b
 10209  002740  6ED9               	movwf	fsr2l,c
 10210  002742  0100               	movlb	0	; () banked
 10211  002744  5167               	movf	(?___wmul+1)& (0+255),w,b
 10212  002746  0100               	movlb	0	; () banked
 10213  002748  216D               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
 10214  00274A  6EDA               	movwf	fsr2h,c
 10215  00274C  C06E  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
 10216  002750  C06F  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
 10217  002754  CFDE FFE6          	movff	postinc2,postinc1
 10218  002758  CFDE FFE6          	movff	postinc2,postinc1
 10219  00275C  CFDE FFE6          	movff	postinc2,postinc1
 10220                           
 10221                           ; BSR set to: 0
 10222                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
 10223  002760  0100               	movlb	0	; () banked
 10224  002762  EE20 F001          	lfsr	2,1
 10225  002766  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10226  002768  26D9               	addwf	fsr2l,f,c
 10227  00276A  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10228  00276C  22DA               	addwfc	fsr2h,f,c
 10229  00276E  2ADF               	incf	indf2,f,c
 10230                           
 10231                           ; BSR set to: 0
 10232                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
 10233  002770  C074  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
 10234  002774  C075  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
 10235  002778  0100               	movlb	0	; () banked
 10236  00277A  EE10 F001          	lfsr	1,1
 10237  00277E  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10238  002780  26E1               	addwf	fsr1l,f,c
 10239  002782  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10240  002784  22E2               	addwfc	fsr1h,f,c
 10241  002786  50DE               	movf	postinc2,w,c
 10242  002788  5CE6               	subwf	postinc1,w,c
 10243  00278A  A0D8               	btfss	status,0,c
 10244  00278C  D019               	goto	l3949
 10245                           
 10246                           ; BSR set to: 0
 10247                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
 10248  00278E  0100               	movlb	0	; () banked
 10249  002790  EE20 F001          	lfsr	2,1
 10250  002794  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10251  002796  26D9               	addwf	fsr2l,f,c
 10252  002798  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10253  00279A  22DA               	addwfc	fsr2h,f,c
 10254  00279C  C074  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
 10255  0027A0  C075  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
 10256  0027A4  50E7               	movf	indf1,w,c
 10257  0027A6  0100               	movlb	0	; () banked
 10258  0027A8  6F60               	movwf	___lbmod@divisor& (0+255),b
 10259  0027AA  0100               	movlb	0	; () banked
 10260  0027AC  EE10 F001          	lfsr	1,1
 10261  0027B0  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10262  0027B2  26E1               	addwf	fsr1l,f,c
 10263  0027B4  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10264  0027B6  22E2               	addwfc	fsr1h,f,c
 10265  0027B8  50E7               	movf	indf1,w,c
 10266  0027BA  EC6D  F01C         	call	___lbmod
 10267  0027BE  6EDF               	movwf	indf2,c
 10268  0027C0                     l3949:
 10269                           
 10270                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
 10271  0027C0  0100               	movlb	0	; () banked
 10272  0027C2  EE20 F002          	lfsr	2,2
 10273  0027C6  5174               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
 10274  0027C8  26D9               	addwf	fsr2l,f,c
 10275  0027CA  5175               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
 10276  0027CC  22DA               	addwfc	fsr2h,f,c
 10277  0027CE  06DF               	decf	indf2,f,c
 10278  0027D0  50DF               	movf	indf2,w,c
 10279  0027D2  0100               	movlb	0	; () banked
 10280  0027D4  6F73               	movwf	ES_DeQueue@NumLeft& (0+255),b
 10281                           
 10282                           ; BSR set to: 0
 10283                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
 10284  0027D6  C072  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
 10285                           
 10286                           ;ES_Queue.c: 183: }else {
 10287  0027DA  D014               	goto	l3959
 10288  0027DC                     l3953:
 10289                           
 10290                           ; BSR set to: 0
 10291                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
 10292  0027DC  C06E  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
 10293  0027E0  C06F  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
 10294  0027E4  0E00               	movlw	0
 10295  0027E6  6EDF               	movwf	indf2,c
 10296                           
 10297                           ; BSR set to: 0
 10298                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
 10299  0027E8  0100               	movlb	0	; () banked
 10300  0027EA  EE20 F001          	lfsr	2,1
 10301  0027EE  516E               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
 10302  0027F0  26D9               	addwf	fsr2l,f,c
 10303  0027F2  516F               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
 10304  0027F4  22DA               	addwfc	fsr2h,f,c
 10305  0027F6  0E00               	movlw	0
 10306  0027F8  6EDE               	movwf	postinc2,c
 10307  0027FA  0E00               	movlw	0
 10308  0027FC  6EDD               	movwf	postdec2,c
 10309                           
 10310                           ; BSR set to: 0
 10311                           ;ES_Queue.c: 186: NumLeft = 0;
 10312  0027FE  0E00               	movlw	0
 10313  002800  0100               	movlb	0	; () banked
 10314  002802  6F73               	movwf	ES_DeQueue@NumLeft& (0+255),b
 10315  002804                     l3959:
 10316                           
 10317                           ; BSR set to: 0
 10318                           ;ES_Queue.c: 187: }
 10319                           ;ES_Queue.c: 188: return NumLeft;
 10320  002804  0100               	movlb	0	; () banked
 10321  002806  5173               	movf	ES_DeQueue@NumLeft& (0+255),w,b
 10322  002808  0012               	return	
 10323  00280A                     __end_of_ES_DeQueue:
 10324                           	opt stack 0
 10325                           tosu	equ	0xFFF
 10326                           tosh	equ	0xFFE
 10327                           tosl	equ	0xFFD
 10328                           pclath	equ	0xFFA
 10329                           tblptru	equ	0xFF8
 10330                           tblptrh	equ	0xFF7
 10331                           tblptrl	equ	0xFF6
 10332                           tablat	equ	0xFF5
 10333                           prodh	equ	0xFF4
 10334                           prodl	equ	0xFF3
 10335                           intcon	equ	0xFF2
 10336                           postinc0	equ	0xFEE
 10337                           wreg	equ	0xFE8
 10338                           indf1	equ	0xFE7
 10339                           postinc1	equ	0xFE6
 10340                           postdec1	equ	0xFE5
 10341                           fsr1h	equ	0xFE2
 10342                           fsr1l	equ	0xFE1
 10343                           indf2	equ	0xFDF
 10344                           postinc2	equ	0xFDE
 10345                           postdec2	equ	0xFDD
 10346                           plusw2	equ	0xFDB
 10347                           fsr2h	equ	0xFDA
 10348                           fsr2l	equ	0xFD9
 10349                           status	equ	0xFD8
 10350                           
 10351 ;; *************** function ___lbmod *****************
 10352 ;; Defined at:
 10353 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
 10354 ;; Parameters:    Size  Location     Type
 10355 ;;  dividend        1    wreg     unsigned char 
 10356 ;;  divisor         1    0[BANK0 ] unsigned char 
 10357 ;; Auto vars:     Size  Location     Type
 10358 ;;  dividend        1    1[BANK0 ] unsigned char 
 10359 ;;  rem             1    3[BANK0 ] unsigned char 
 10360 ;;  counter         1    2[BANK0 ] unsigned char 
 10361 ;; Return value:  Size  Location     Type
 10362 ;;                  1    wreg      unsigned char 
 10363 ;; Registers used:
 10364 ;;		wreg, status,2, status,0
 10365 ;; Tracked objects:
 10366 ;;		On entry : 0/0
 10367 ;;		On exit  : 0/0
 10368 ;;		Unchanged: 0/0
 10369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10370 ;;      Params:         0       1       0       0
 10371 ;;      Locals:         0       3       0       0
 10372 ;;      Temps:          0       0       0       0
 10373 ;;      Totals:         0       4       0       0
 10374 ;;Total ram usage:        4 bytes
 10375 ;; Hardware stack levels used:    1
 10376 ;; Hardware stack levels required when called:    7
 10377 ;; This function calls:
 10378 ;;		Nothing
 10379 ;; This function is called by:
 10380 ;;		_ES_DeQueue
 10381 ;; This function uses a non-reentrant model
 10382 ;;
 10383                           
 10384                           	psect	text35
 10385  0038DA                     __ptext35:
 10386                           	opt stack 0
 10387  0038DA                     ___lbmod:
 10388                           	opt stack 21
 10389                           
 10390                           ; BSR set to: 0
 10391                           ;incstack = 0
 10392                           ;___lbmod@dividend stored from wreg
 10393  0038DA  0100               	movlb	0	; () banked
 10394  0038DC  6F61               	movwf	___lbmod@dividend& (0+255),b
 10395  0038DE  0E08               	movlw	8
 10396  0038E0  0100               	movlb	0	; () banked
 10397  0038E2  6F62               	movwf	___lbmod@counter& (0+255),b
 10398  0038E4  0E00               	movlw	0
 10399  0038E6  0100               	movlb	0	; () banked
 10400  0038E8  6F63               	movwf	___lbmod@rem& (0+255),b
 10401  0038EA                     l3919:
 10402                           
 10403                           ; BSR set to: 0
 10404  0038EA  90D8               	bcf	status,0,c
 10405  0038EC  0100               	movlb	0	; () banked
 10406  0038EE  3561               	rlcf	___lbmod@dividend& (0+255),w,b
 10407  0038F0  0100               	movlb	0	; () banked
 10408  0038F2  3563               	rlcf	___lbmod@rem& (0+255),w,b
 10409  0038F4  0100               	movlb	0	; () banked
 10410  0038F6  6F63               	movwf	___lbmod@rem& (0+255),b
 10411                           
 10412                           ; BSR set to: 0
 10413  0038F8  0100               	movlb	0	; () banked
 10414  0038FA  90D8               	bcf	status,0,c
 10415  0038FC  3761               	rlcf	___lbmod@dividend& (0+255),f,b
 10416                           
 10417                           ; BSR set to: 0
 10418  0038FE  0100               	movlb	0	; () banked
 10419  003900  5160               	movf	___lbmod@divisor& (0+255),w,b
 10420  003902  0100               	movlb	0	; () banked
 10421  003904  5D63               	subwf	___lbmod@rem& (0+255),w,b
 10422  003906  A0D8               	btfss	status,0,c
 10423  003908  D004               	goto	l3927
 10424                           
 10425                           ; BSR set to: 0
 10426  00390A  0100               	movlb	0	; () banked
 10427  00390C  5160               	movf	___lbmod@divisor& (0+255),w,b
 10428  00390E  0100               	movlb	0	; () banked
 10429  003910  5F63               	subwf	___lbmod@rem& (0+255),f,b
 10430  003912                     l3927:
 10431                           
 10432                           ; BSR set to: 0
 10433  003912  0100               	movlb	0	; () banked
 10434  003914  2F62               	decfsz	___lbmod@counter& (0+255),f,b
 10435  003916  D7E9               	goto	l3919
 10436                           
 10437                           ; BSR set to: 0
 10438                           
 10439                           ; BSR set to: 0
 10440  003918  0100               	movlb	0	; () banked
 10441  00391A  5163               	movf	___lbmod@rem& (0+255),w,b
 10442  00391C  0012               	return	
 10443  00391E                     __end_of___lbmod:
 10444                           	opt stack 0
 10445                           tosu	equ	0xFFF
 10446                           tosh	equ	0xFFE
 10447                           tosl	equ	0xFFD
 10448                           pclath	equ	0xFFA
 10449                           tblptru	equ	0xFF8
 10450                           tblptrh	equ	0xFF7
 10451                           tblptrl	equ	0xFF6
 10452                           tablat	equ	0xFF5
 10453                           prodh	equ	0xFF4
 10454                           prodl	equ	0xFF3
 10455                           intcon	equ	0xFF2
 10456                           postinc0	equ	0xFEE
 10457                           wreg	equ	0xFE8
 10458                           indf1	equ	0xFE7
 10459                           postinc1	equ	0xFE6
 10460                           postdec1	equ	0xFE5
 10461                           fsr1h	equ	0xFE2
 10462                           fsr1l	equ	0xFE1
 10463                           indf2	equ	0xFDF
 10464                           postinc2	equ	0xFDE
 10465                           postdec2	equ	0xFDD
 10466                           plusw2	equ	0xFDB
 10467                           fsr2h	equ	0xFDA
 10468                           fsr2l	equ	0xFD9
 10469                           status	equ	0xFD8
 10470                           
 10471 ;; *************** function _ES_Initialize *****************
 10472 ;; Defined at:
 10473 ;;		line 242 in file "ES_Framework.c"
 10474 ;; Parameters:    Size  Location     Type
 10475 ;;  NewRate         2   33[BANK0 ] enum E15423
 10476 ;; Auto vars:     Size  Location     Type
 10477 ;;  i               1   35[BANK0 ] unsigned char 
 10478 ;; Return value:  Size  Location     Type
 10479 ;;                  1    wreg      enum E15494
 10480 ;; Registers used:
 10481 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10482 ;; Tracked objects:
 10483 ;;		On entry : 0/0
 10484 ;;		On exit  : 0/0
 10485 ;;		Unchanged: 0/0
 10486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10487 ;;      Params:         0       2       0       0
 10488 ;;      Locals:         0       1       0       0
 10489 ;;      Temps:          0       0       0       0
 10490 ;;      Totals:         0       3       0       0
 10491 ;;Total ram usage:        3 bytes
 10492 ;; Hardware stack levels used:    1
 10493 ;; Hardware stack levels required when called:   11
 10494 ;; This function calls:
 10495 ;;		_ES_InitQueue
 10496 ;;		_ES_Timer_Init
 10497 ;;		_InitPatternControlService
 10498 ;;		_InitSPI32ControlService
 10499 ;; This function is called by:
 10500 ;;		_main
 10501 ;; This function uses a non-reentrant model
 10502 ;;
 10503                           
 10504                           	psect	text36
 10505  002C14                     __ptext36:
 10506                           	opt stack 0
 10507  002C14                     _ES_Initialize:
 10508                           	opt stack 19
 10509                           
 10510                           ;ES_Framework.c: 243: uint8_t i;
 10511                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
 10512                           
 10513                           ; BSR set to: 0
 10514                           ;incstack = 0
 10515  002C14  C081  F062         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
 10516  002C18  C082  F063         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
 10517  002C1C  EC42  F01E         	call	_ES_Timer_Init	;wreg free
 10518                           
 10519                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
 10520  002C20  0E00               	movlw	0
 10521  002C22  0100               	movlb	0	; () banked
 10522  002C24  6F83               	movwf	ES_Initialize@i& (0+255),b
 10523  002C26                     l4165:
 10524                           
 10525                           ; BSR set to: 0
 10526  002C26  0E01               	movlw	1
 10527  002C28  0100               	movlb	0	; () banked
 10528  002C2A  6583               	cpfsgt	ES_Initialize@i& (0+255),b
 10529  002C2C  D001               	goto	l4169
 10530  002C2E  D066               	goto	l4189
 10531  002C30                     l4169:
 10532                           
 10533                           ; BSR set to: 0
 10534                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
 10535                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
 10536  002C30  0100               	movlb	0	; () banked
 10537  002C32  5183               	movf	ES_Initialize@i& (0+255),w,b
 10538  002C34  0D04               	mullw	4
 10539  002C36  0E50               	movlw	low _ServDescList
 10540  002C38  24F3               	addwf	prodl,w,c
 10541  002C3A  6EF6               	movwf	tblptrl,c
 10542  002C3C  0E03               	movlw	high _ServDescList
 10543  002C3E  20F4               	addwfc	prodh,w,c
 10544  002C40  6EF7               	movwf	tblptrh,c
 10545  002C42                     	if	0	;There are less than 3 active tblptr bytes
 10546  002C42                     	endif
 10547  002C42  0009               	tblrd		*+
 10548  002C44  50F5               	movf	tablat,w,c
 10549  002C46  0009               	tblrd		*+
 10550  002C48  10F5               	iorwf	tablat,w,c
 10551  002C4A  B4D8               	btfsc	status,2,c
 10552  002C4C  D013               	goto	l4173
 10553                           
 10554                           ; BSR set to: 0
 10555  002C4E  0100               	movlb	0	; () banked
 10556  002C50  5183               	movf	ES_Initialize@i& (0+255),w,b
 10557  002C52  0D04               	mullw	4
 10558  002C54  0E02               	movlw	2
 10559  002C56  26F3               	addwf	prodl,f,c
 10560  002C58  0E00               	movlw	0
 10561  002C5A  22F4               	addwfc	prodh,f,c
 10562  002C5C  0E50               	movlw	low _ServDescList
 10563  002C5E  24F3               	addwf	prodl,w,c
 10564  002C60  6EF6               	movwf	tblptrl,c
 10565  002C62  0E03               	movlw	high _ServDescList
 10566  002C64  20F4               	addwfc	prodh,w,c
 10567  002C66  6EF7               	movwf	tblptrh,c
 10568  002C68                     	if	0	;There are less than 3 active tblptr bytes
 10569  002C68                     	endif
 10570  002C68  0009               	tblrd		*+
 10571  002C6A  50F5               	movf	tablat,w,c
 10572  002C6C  0009               	tblrd		*+
 10573  002C6E  10F5               	iorwf	tablat,w,c
 10574  002C70  A4D8               	btfss	status,2,c
 10575  002C72  D002               	goto	l4177
 10576  002C74                     l4173:
 10577                           
 10578                           ; BSR set to: 0
 10579                           ;ES_Framework.c: 249: return FailedPointer;
 10580  002C74  0E03               	movlw	3
 10581                           
 10582                           ; BSR set to: 0
 10583  002C76  0012               	return	
 10584  002C78                     l4177:
 10585                           
 10586                           ; BSR set to: 0
 10587                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
 10588  002C78  0100               	movlb	0	; () banked
 10589  002C7A  5183               	movf	ES_Initialize@i& (0+255),w,b
 10590  002C7C  0D03               	mullw	3
 10591  002C7E  0E58               	movlw	low _EventQueues
 10592  002C80  24F3               	addwf	prodl,w,c
 10593  002C82  6EF6               	movwf	tblptrl,c
 10594  002C84  0E03               	movlw	high _EventQueues
 10595  002C86  20F4               	addwfc	prodh,w,c
 10596  002C88  6EF7               	movwf	tblptrh,c
 10597  002C8A                     	if	0	;There are less than 3 active tblptr bytes
 10598  002C8A                     	endif
 10599  002C8A  0009               	tblrd		*+
 10600  002C8C  CFF5 F060          	movff	tablat,ES_InitQueue@pBlock
 10601  002C90  000A               	tblrd		*-
 10602  002C92  CFF5 F061          	movff	tablat,ES_InitQueue@pBlock+1
 10603  002C96  0100               	movlb	0	; () banked
 10604  002C98  5183               	movf	ES_Initialize@i& (0+255),w,b
 10605  002C9A  0D03               	mullw	3
 10606  002C9C  0E02               	movlw	2
 10607  002C9E  26F3               	addwf	prodl,f,c
 10608  002CA0  0E00               	movlw	0
 10609  002CA2  22F4               	addwfc	prodh,f,c
 10610  002CA4  0E58               	movlw	low _EventQueues
 10611  002CA6  24F3               	addwf	prodl,w,c
 10612  002CA8  6EF6               	movwf	tblptrl,c
 10613  002CAA  0E03               	movlw	high _EventQueues
 10614  002CAC  20F4               	addwfc	prodh,w,c
 10615  002CAE  6EF7               	movwf	tblptrh,c
 10616  002CB0                     	if	0	;There are less than 3 active tblptr bytes
 10617  002CB0                     	endif
 10618  002CB0  0008               	tblrd		*
 10619  002CB2  CFF5 F062          	movff	tablat,ES_InitQueue@BlockSize
 10620  002CB6  ECAE  F01C         	call	_ES_InitQueue	;wreg free
 10621                           
 10622                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
 10623  002CBA  0100               	movlb	0	; () banked
 10624  002CBC  5183               	movf	ES_Initialize@i& (0+255),w,b
 10625  002CBE  0D04               	mullw	4
 10626  002CC0  0E50               	movlw	low _ServDescList
 10627  002CC2  24F3               	addwf	prodl,w,c
 10628  002CC4  6EF6               	movwf	tblptrl,c
 10629  002CC6  0E03               	movlw	high _ServDescList
 10630  002CC8  20F4               	addwfc	prodh,w,c
 10631  002CCA  6EF7               	movwf	tblptrh,c
 10632  002CCC                     	if	0	;There are less than 3 active tblptr bytes
 10633  002CCC                     	endif
 10634  002CCC  D801               	call	u3098
 10635  002CCE  D00E               	goto	u3099
 10636  002CD0                     u3098:
 10637  002CD0  0005               	push	
 10638  002CD2  6EFA               	movwf	pclath,c
 10639  002CD4  0009               	tblrd		*+
 10640  002CD6  50F5               	movf	tablat,w,c
 10641  002CD8  6EFD               	movwf	tosl,c
 10642  002CDA  0009               	tblrd		*+
 10643  002CDC  50F5               	movf	tablat,w,c
 10644  002CDE  6EFE               	movwf	tosh,c
 10645  002CE0  50F8               	movf	tblptru,w,c
 10646  002CE2  6EFF               	movwf	tosu,c
 10647  002CE4  50FA               	movf	pclath,w,c
 10648  002CE6  0100               	movlb	0	; () banked
 10649  002CE8  5183               	movf	ES_Initialize@i& (0+255),w,b
 10650  002CEA  0012               	return		;indir
 10651  002CEC                     u3099:
 10652  002CEC  06E8               	decf	wreg,f,c
 10653  002CEE  B4D8               	btfsc	status,2,c
 10654  002CF0  D002               	goto	l4185
 10655                           
 10656                           ;ES_Framework.c: 254: return FailedInit;
 10657  002CF2  0E05               	movlw	5
 10658  002CF4  0012               	return	
 10659  002CF6                     l4185:
 10660  002CF6  0100               	movlb	0	; () banked
 10661  002CF8  2B83               	incf	ES_Initialize@i& (0+255),f,b
 10662  002CFA  D795               	goto	l4165
 10663  002CFC                     l4189:
 10664                           
 10665                           ; BSR set to: 0
 10666                           ;ES_Framework.c: 255: }
 10667                           ;ES_Framework.c: 256: return Success;
 10668  002CFC  0E00               	movlw	0
 10669  002CFE  0012               	return	
 10670  002D00                     __end_of_ES_Initialize:
 10671                           	opt stack 0
 10672                           tosu	equ	0xFFF
 10673                           tosh	equ	0xFFE
 10674                           tosl	equ	0xFFD
 10675                           pclath	equ	0xFFA
 10676                           tblptru	equ	0xFF8
 10677                           tblptrh	equ	0xFF7
 10678                           tblptrl	equ	0xFF6
 10679                           tablat	equ	0xFF5
 10680                           prodh	equ	0xFF4
 10681                           prodl	equ	0xFF3
 10682                           intcon	equ	0xFF2
 10683                           postinc0	equ	0xFEE
 10684                           wreg	equ	0xFE8
 10685                           indf1	equ	0xFE7
 10686                           postinc1	equ	0xFE6
 10687                           postdec1	equ	0xFE5
 10688                           fsr1h	equ	0xFE2
 10689                           fsr1l	equ	0xFE1
 10690                           indf2	equ	0xFDF
 10691                           postinc2	equ	0xFDE
 10692                           postdec2	equ	0xFDD
 10693                           plusw2	equ	0xFDB
 10694                           fsr2h	equ	0xFDA
 10695                           fsr2l	equ	0xFD9
 10696                           status	equ	0xFD8
 10697                           
 10698 ;; *************** function _InitPatternControlService *****************
 10699 ;; Defined at:
 10700 ;;		line 99 in file "Pattern_ControlService.c"
 10701 ;; Parameters:    Size  Location     Type
 10702 ;;  Priority        1    wreg     unsigned char 
 10703 ;; Auto vars:     Size  Location     Type
 10704 ;;  Priority        1   32[BANK0 ] unsigned char 
 10705 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
 10706 ;; Return value:  Size  Location     Type
 10707 ;;                  1    wreg      unsigned char 
 10708 ;; Registers used:
 10709 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10710 ;; Tracked objects:
 10711 ;;		On entry : 0/0
 10712 ;;		On exit  : 0/0
 10713 ;;		Unchanged: 0/0
 10714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10715 ;;      Params:         0       0       0       0
 10716 ;;      Locals:         0       4       0       0
 10717 ;;      Temps:          0       0       0       0
 10718 ;;      Totals:         0       4       0       0
 10719 ;;Total ram usage:        4 bytes
 10720 ;; Hardware stack levels used:    1
 10721 ;; Hardware stack levels required when called:   10
 10722 ;; This function calls:
 10723 ;;		_CAN_Init
 10724 ;;		_DotStar_Init
 10725 ;;		_ES_PostToService
 10726 ;;		_SetupPattern
 10727 ;; This function is called by:
 10728 ;;		_ES_Initialize
 10729 ;; This function uses a non-reentrant model
 10730 ;;
 10731                           
 10732                           	psect	text37
 10733  003734                     __ptext37:
 10734                           	opt stack 0
 10735  003734                     _InitPatternControlService:
 10736                           	opt stack 19
 10737                           
 10738                           ;incstack = 0
 10739                           ;InitPatternControlService@Priority stored from wreg
 10740  003734  0100               	movlb	0	; () banked
 10741  003736  6F80               	movwf	InitPatternControlService@Priority& (0+255),b
 10742                           
 10743                           ;Pattern_ControlService.c: 101: ES_Event ThisEvent;
 10744                           ;Pattern_ControlService.c: 103: MyPriority = Priority;
 10745  003738  C080  F0E6         	movff	InitPatternControlService@Priority,_MyPriority
 10746                           
 10747                           ;Pattern_ControlService.c: 105: DotStar_Init(&PatternConfigs[1]);
 10748  00373C  0EF8               	movlw	low (_PatternConfigs+1)
 10749  00373E  0100               	movlb	0	; () banked
 10750  003740  6F60               	movwf	DotStar_Init@brightnessPointer& (0+255),b
 10751  003742  0E00               	movlw	high (_PatternConfigs+1)
 10752  003744  0100               	movlb	0	; () banked
 10753  003746  6F61               	movwf	(DotStar_Init@brightnessPointer+1)& (0+255),b
 10754  003748  ECF6  F01B         	call	_DotStar_Init
 10755                           
 10756                           ;Pattern_ControlService.c: 106: SetupPattern(&PatternConfigs[0], &PatternConfigs[2]);
 10757  00374C  0EF7               	movlw	low _PatternConfigs
 10758  00374E  0100               	movlb	0	; () banked
 10759  003750  6F60               	movwf	SetupPattern@patternIDPointer& (0+255),b
 10760  003752  0E00               	movlw	high _PatternConfigs
 10761  003754  0100               	movlb	0	; () banked
 10762  003756  6F61               	movwf	(SetupPattern@patternIDPointer+1)& (0+255),b
 10763  003758  0EF9               	movlw	low (_PatternConfigs+2)
 10764  00375A  0100               	movlb	0	; () banked
 10765  00375C  6F62               	movwf	SetupPattern@listeningFocusPointer& (0+255),b
 10766  00375E  0E00               	movlw	high (_PatternConfigs+2)
 10767  003760  0100               	movlb	0	; () banked
 10768  003762  6F63               	movwf	(SetupPattern@listeningFocusPointer+1)& (0+255),b
 10769  003764  EC39  F01E         	call	_SetupPattern	;wreg free
 10770                           
 10771                           ;Pattern_ControlService.c: 108: CAN_Init();
 10772  003768  EC55  F01E         	call	_CAN_Init	;wreg free
 10773                           
 10774                           ;Pattern_ControlService.c: 110: CurrentState = Pattern_Startup;
 10775  00376C  0E00               	movlw	0
 10776  00376E  0100               	movlb	0	; () banked
 10777  003770  6FE4               	movwf	_CurrentState& (0+255),b
 10778                           
 10779                           ; BSR set to: 0
 10780                           ;Pattern_ControlService.c: 112: ThisEvent.EventType = ES_INIT;
 10781  003772  0E02               	movlw	2
 10782  003774  0100               	movlb	0	; () banked
 10783  003776  6F7D               	movwf	InitPatternControlService@ThisEvent& (0+255),b
 10784                           
 10785                           ; BSR set to: 0
 10786                           ;Pattern_ControlService.c: 113: if (ES_PostToService( MyPriority, ThisEvent) == 1)
 10787  003778  C07D  F077         	movff	InitPatternControlService@ThisEvent,ES_PostToService@TheEvent
 10788  00377C  C07E  F078         	movff	InitPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
 10789  003780  C07F  F079         	movff	InitPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
 10790  003784  0100               	movlb	0	; () banked
 10791  003786  51E6               	movf	_MyPriority& (0+255),w,b
 10792  003788  ECF2  F01A         	call	_ES_PostToService
 10793  00378C  06E8               	decf	wreg,f,c
 10794  00378E  A4D8               	btfss	status,2,c
 10795  003790  D002               	goto	l4007
 10796                           
 10797                           ;Pattern_ControlService.c: 114: {
 10798                           ;Pattern_ControlService.c: 115: return 1;
 10799  003792  0E01               	movlw	1
 10800                           
 10801                           ;Pattern_ControlService.c: 116: }else
 10802  003794  0012               	return	
 10803  003796                     l4007:
 10804                           
 10805                           ;Pattern_ControlService.c: 117: {
 10806                           ;Pattern_ControlService.c: 118: return 0;
 10807  003796  0E00               	movlw	0
 10808  003798  0012               	return	
 10809  00379A                     __end_of_InitPatternControlService:
 10810                           	opt stack 0
 10811                           tosu	equ	0xFFF
 10812                           tosh	equ	0xFFE
 10813                           tosl	equ	0xFFD
 10814                           pclath	equ	0xFFA
 10815                           tblptru	equ	0xFF8
 10816                           tblptrh	equ	0xFF7
 10817                           tblptrl	equ	0xFF6
 10818                           tablat	equ	0xFF5
 10819                           prodh	equ	0xFF4
 10820                           prodl	equ	0xFF3
 10821                           intcon	equ	0xFF2
 10822                           postinc0	equ	0xFEE
 10823                           wreg	equ	0xFE8
 10824                           indf1	equ	0xFE7
 10825                           postinc1	equ	0xFE6
 10826                           postdec1	equ	0xFE5
 10827                           fsr1h	equ	0xFE2
 10828                           fsr1l	equ	0xFE1
 10829                           indf2	equ	0xFDF
 10830                           postinc2	equ	0xFDE
 10831                           postdec2	equ	0xFDD
 10832                           plusw2	equ	0xFDB
 10833                           fsr2h	equ	0xFDA
 10834                           fsr2l	equ	0xFD9
 10835                           status	equ	0xFD8
 10836                           
 10837 ;; *************** function _InitSPI32ControlService *****************
 10838 ;; Defined at:
 10839 ;;		line 81 in file "SPI32_ControlService.c"
 10840 ;; Parameters:    Size  Location     Type
 10841 ;;  Priority        1    wreg     unsigned char 
 10842 ;; Auto vars:     Size  Location     Type
 10843 ;;  Priority        1   32[BANK0 ] unsigned char 
 10844 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
 10845 ;; Return value:  Size  Location     Type
 10846 ;;                  1    wreg      unsigned char 
 10847 ;; Registers used:
 10848 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10849 ;; Tracked objects:
 10850 ;;		On entry : 0/0
 10851 ;;		On exit  : 0/0
 10852 ;;		Unchanged: 0/0
 10853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10854 ;;      Params:         0       0       0       0
 10855 ;;      Locals:         0       4       0       0
 10856 ;;      Temps:          0       0       0       0
 10857 ;;      Totals:         0       4       0       0
 10858 ;;Total ram usage:        4 bytes
 10859 ;; Hardware stack levels used:    1
 10860 ;; Hardware stack levels required when called:   10
 10861 ;; This function calls:
 10862 ;;		_ES_PostToService
 10863 ;;		_SPI32_Init
 10864 ;; This function is called by:
 10865 ;;		_ES_Initialize
 10866 ;; This function uses a non-reentrant model
 10867 ;;
 10868                           
 10869                           	psect	text38
 10870  003998                     __ptext38:
 10871                           	opt stack 0
 10872  003998                     _InitSPI32ControlService:
 10873                           	opt stack 19
 10874                           
 10875                           ;incstack = 0
 10876                           ;InitSPI32ControlService@Priority stored from wreg
 10877  003998  0100               	movlb	0	; () banked
 10878  00399A  6F80               	movwf	InitSPI32ControlService@Priority& (0+255),b
 10879                           
 10880                           ;SPI32_ControlService.c: 83: ES_Event ThisEvent;
 10881                           ;SPI32_ControlService.c: 85: MyPriority = Priority;
 10882  00399C  C080  F0E3         	movff	InitSPI32ControlService@Priority,SPI32_ControlService@MyPriority
 10883                           
 10884                           ;SPI32_ControlService.c: 87: SPI32_Init();
 10885  0039A0  EC62  F01E         	call	_SPI32_Init	;wreg free
 10886                           
 10887                           ;SPI32_ControlService.c: 89: CurrentState = SPI32_Startup;
 10888  0039A4  0E00               	movlw	0
 10889  0039A6  0100               	movlb	0	; () banked
 10890  0039A8  6FE2               	movwf	SPI32_ControlService@CurrentState& (0+255),b
 10891                           
 10892                           ; BSR set to: 0
 10893                           ;SPI32_ControlService.c: 91: ThisEvent.EventType = ES_INIT;
 10894  0039AA  0E02               	movlw	2
 10895  0039AC  0100               	movlb	0	; () banked
 10896  0039AE  6F7D               	movwf	InitSPI32ControlService@ThisEvent& (0+255),b
 10897                           
 10898                           ; BSR set to: 0
 10899                           ;SPI32_ControlService.c: 92: if (ES_PostToService( MyPriority, ThisEvent) == 1)
 10900  0039B0  C07D  F077         	movff	InitSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
 10901  0039B4  C07E  F078         	movff	InitSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
 10902  0039B8  C07F  F079         	movff	InitSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
 10903  0039BC  0100               	movlb	0	; () banked
 10904  0039BE  51E3               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
 10905  0039C0  ECF2  F01A         	call	_ES_PostToService
 10906  0039C4  06E8               	decf	wreg,f,c
 10907  0039C6  A4D8               	btfss	status,2,c
 10908  0039C8  D002               	goto	l4075
 10909                           
 10910                           ;SPI32_ControlService.c: 93: {
 10911                           ;SPI32_ControlService.c: 94: return 1;
 10912  0039CA  0E01               	movlw	1
 10913                           
 10914                           ;SPI32_ControlService.c: 95: }else
 10915  0039CC  0012               	return	
 10916  0039CE                     l4075:
 10917                           
 10918                           ;SPI32_ControlService.c: 96: {
 10919                           ;SPI32_ControlService.c: 97: return 0;
 10920  0039CE  0E00               	movlw	0
 10921  0039D0  0012               	return	
 10922  0039D2                     __end_of_InitSPI32ControlService:
 10923                           	opt stack 0
 10924                           tosu	equ	0xFFF
 10925                           tosh	equ	0xFFE
 10926                           tosl	equ	0xFFD
 10927                           pclath	equ	0xFFA
 10928                           tblptru	equ	0xFF8
 10929                           tblptrh	equ	0xFF7
 10930                           tblptrl	equ	0xFF6
 10931                           tablat	equ	0xFF5
 10932                           prodh	equ	0xFF4
 10933                           prodl	equ	0xFF3
 10934                           intcon	equ	0xFF2
 10935                           postinc0	equ	0xFEE
 10936                           wreg	equ	0xFE8
 10937                           indf1	equ	0xFE7
 10938                           postinc1	equ	0xFE6
 10939                           postdec1	equ	0xFE5
 10940                           fsr1h	equ	0xFE2
 10941                           fsr1l	equ	0xFE1
 10942                           indf2	equ	0xFDF
 10943                           postinc2	equ	0xFDE
 10944                           postdec2	equ	0xFDD
 10945                           plusw2	equ	0xFDB
 10946                           fsr2h	equ	0xFDA
 10947                           fsr2l	equ	0xFD9
 10948                           status	equ	0xFD8
 10949                           
 10950 ;; *************** function _SPI32_Init *****************
 10951 ;; Defined at:
 10952 ;;		line 66 in file "SPI32_HW.c"
 10953 ;; Parameters:    Size  Location     Type
 10954 ;;		None
 10955 ;; Auto vars:     Size  Location     Type
 10956 ;;		None
 10957 ;; Return value:  Size  Location     Type
 10958 ;;                  1    wreg      void 
 10959 ;; Registers used:
 10960 ;;		wreg, status,2, cstack
 10961 ;; Tracked objects:
 10962 ;;		On entry : 0/0
 10963 ;;		On exit  : 0/0
 10964 ;;		Unchanged: 0/0
 10965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10966 ;;      Params:         0       0       0       0
 10967 ;;      Locals:         0       0       0       0
 10968 ;;      Temps:          0       0       0       0
 10969 ;;      Totals:         0       0       0       0
 10970 ;;Total ram usage:        0 bytes
 10971 ;; Hardware stack levels used:    1
 10972 ;; Hardware stack levels required when called:    8
 10973 ;; This function calls:
 10974 ;;		_HW_Init
 10975 ;; This function is called by:
 10976 ;;		_InitSPI32ControlService
 10977 ;; This function uses a non-reentrant model
 10978 ;;
 10979                           
 10980                           	psect	text39
 10981  003CC4                     __ptext39:
 10982                           	opt stack 0
 10983  003CC4                     _SPI32_Init:
 10984                           	opt stack 20
 10985                           
 10986                           ;SPI32_HW.c: 68: HW_Init();
 10987                           
 10988                           ;incstack = 0
 10989  003CC4  EC7A  F01D         	call	_HW_Init	;wreg free
 10990  003CC8  0012               	return		;funcret
 10991  003CCA                     __end_of_SPI32_Init:
 10992                           	opt stack 0
 10993                           tosu	equ	0xFFF
 10994                           tosh	equ	0xFFE
 10995                           tosl	equ	0xFFD
 10996                           pclath	equ	0xFFA
 10997                           tblptru	equ	0xFF8
 10998                           tblptrh	equ	0xFF7
 10999                           tblptrl	equ	0xFF6
 11000                           tablat	equ	0xFF5
 11001                           prodh	equ	0xFF4
 11002                           prodl	equ	0xFF3
 11003                           intcon	equ	0xFF2
 11004                           postinc0	equ	0xFEE
 11005                           wreg	equ	0xFE8
 11006                           indf1	equ	0xFE7
 11007                           postinc1	equ	0xFE6
 11008                           postdec1	equ	0xFE5
 11009                           fsr1h	equ	0xFE2
 11010                           fsr1l	equ	0xFE1
 11011                           indf2	equ	0xFDF
 11012                           postinc2	equ	0xFDE
 11013                           postdec2	equ	0xFDD
 11014                           plusw2	equ	0xFDB
 11015                           fsr2h	equ	0xFDA
 11016                           fsr2l	equ	0xFD9
 11017                           status	equ	0xFD8
 11018                           
 11019 ;; *************** function _HW_Init *****************
 11020 ;; Defined at:
 11021 ;;		line 120 in file "SPI32_HW.c"
 11022 ;; Parameters:    Size  Location     Type
 11023 ;;		None
 11024 ;; Auto vars:     Size  Location     Type
 11025 ;;		None
 11026 ;; Return value:  Size  Location     Type
 11027 ;;                  1    wreg      void 
 11028 ;; Registers used:
 11029 ;;		wreg, status,2
 11030 ;; Tracked objects:
 11031 ;;		On entry : 0/0
 11032 ;;		On exit  : 0/0
 11033 ;;		Unchanged: 0/0
 11034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11035 ;;      Params:         0       0       0       0
 11036 ;;      Locals:         0       0       0       0
 11037 ;;      Temps:          0       0       0       0
 11038 ;;      Totals:         0       0       0       0
 11039 ;;Total ram usage:        0 bytes
 11040 ;; Hardware stack levels used:    1
 11041 ;; Hardware stack levels required when called:    7
 11042 ;; This function calls:
 11043 ;;		Nothing
 11044 ;; This function is called by:
 11045 ;;		_SPI32_Init
 11046 ;; This function uses a non-reentrant model
 11047 ;;
 11048                           
 11049                           	psect	text40
 11050  003AF4                     __ptext40:
 11051                           	opt stack 0
 11052  003AF4                     _HW_Init:
 11053                           	opt stack 20
 11054                           
 11055                           ;SPI32_HW.c: 126: PORTC = 0x00;
 11056                           
 11057                           ;incstack = 0
 11058  003AF4  0E00               	movlw	0
 11059  003AF6  6E82               	movwf	3970,c	;volatile
 11060                           
 11061                           ;SPI32_HW.c: 127: LATC = 0x00;
 11062  003AF8  0E00               	movlw	0
 11063  003AFA  6E8B               	movwf	3979,c	;volatile
 11064                           
 11065                           ;SPI32_HW.c: 128: ADCON1 = 0x0F;
 11066  003AFC  0E0F               	movlw	15
 11067  003AFE  6EC1               	movwf	4033,c	;volatile
 11068                           
 11069                           ;SPI32_HW.c: 129: TRISC = 0x00;
 11070  003B00  0E00               	movlw	0
 11071  003B02  6E94               	movwf	3988,c	;volatile
 11072                           
 11073                           ;SPI32_HW.c: 131: SSPIE = 1;
 11074  003B04  869D               	bsf	3997,3,c	;volatile
 11075                           
 11076                           ;SPI32_HW.c: 135: SSPCON1 = 0x00;
 11077  003B06  0E00               	movlw	0
 11078  003B08  6EC6               	movwf	4038,c	;volatile
 11079                           
 11080                           ;SPI32_HW.c: 136: SSPSTAT = 0b01000000;
 11081  003B0A  0E40               	movlw	64
 11082  003B0C  6EC7               	movwf	4039,c	;volatile
 11083                           
 11084                           ;SPI32_HW.c: 137: SSPADD = 0xFF;
 11085  003B0E  68C8               	setf	4040,c	;volatile
 11086                           
 11087                           ;SPI32_HW.c: 138: SSPCON1 = 0b00110000;
 11088  003B10  0E30               	movlw	48
 11089  003B12  6EC6               	movwf	4038,c	;volatile
 11090  003B14  0012               	return		;funcret
 11091  003B16                     __end_of_HW_Init:
 11092                           	opt stack 0
 11093                           tosu	equ	0xFFF
 11094                           tosh	equ	0xFFE
 11095                           tosl	equ	0xFFD
 11096                           pclath	equ	0xFFA
 11097                           tblptru	equ	0xFF8
 11098                           tblptrh	equ	0xFF7
 11099                           tblptrl	equ	0xFF6
 11100                           tablat	equ	0xFF5
 11101                           prodh	equ	0xFF4
 11102                           prodl	equ	0xFF3
 11103                           intcon	equ	0xFF2
 11104                           postinc0	equ	0xFEE
 11105                           wreg	equ	0xFE8
 11106                           indf1	equ	0xFE7
 11107                           postinc1	equ	0xFE6
 11108                           postdec1	equ	0xFE5
 11109                           fsr1h	equ	0xFE2
 11110                           fsr1l	equ	0xFE1
 11111                           indf2	equ	0xFDF
 11112                           postinc2	equ	0xFDE
 11113                           postdec2	equ	0xFDD
 11114                           plusw2	equ	0xFDB
 11115                           fsr2h	equ	0xFDA
 11116                           fsr2l	equ	0xFD9
 11117                           status	equ	0xFD8
 11118                           
 11119 ;; *************** function _SetupPattern *****************
 11120 ;; Defined at:
 11121 ;;		line 89 in file "Pattern_PtrnGenerator.c"
 11122 ;; Parameters:    Size  Location     Type
 11123 ;;  patternIDPoi    2    0[BANK0 ] PTR unsigned char 
 11124 ;;		 -> PatternConfigs(4), 
 11125 ;;  listeningFoc    2    2[BANK0 ] PTR unsigned char 
 11126 ;;		 -> PatternConfigs(4), 
 11127 ;; Auto vars:     Size  Location     Type
 11128 ;;		None
 11129 ;; Return value:  Size  Location     Type
 11130 ;;                  1    wreg      void 
 11131 ;; Registers used:
 11132 ;;		wreg, status,2, status,0
 11133 ;; Tracked objects:
 11134 ;;		On entry : 0/0
 11135 ;;		On exit  : 0/0
 11136 ;;		Unchanged: 0/0
 11137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11138 ;;      Params:         0       4       0       0
 11139 ;;      Locals:         0       0       0       0
 11140 ;;      Temps:          0       0       0       0
 11141 ;;      Totals:         0       4       0       0
 11142 ;;Total ram usage:        4 bytes
 11143 ;; Hardware stack levels used:    1
 11144 ;; Hardware stack levels required when called:    7
 11145 ;; This function calls:
 11146 ;;		Nothing
 11147 ;; This function is called by:
 11148 ;;		_InitPatternControlService
 11149 ;; This function uses a non-reentrant model
 11150 ;;
 11151                           
 11152                           	psect	text41
 11153  003C72                     __ptext41:
 11154                           	opt stack 0
 11155  003C72                     _SetupPattern:
 11156                           	opt stack 21
 11157                           
 11158                           ;Pattern_PtrnGenerator.c: 91: PatternID = patternIDPointer;
 11159                           
 11160                           ;incstack = 0
 11161  003C72  C060  F0DB         	movff	SetupPattern@patternIDPointer,_PatternID
 11162  003C76  C061  F0DC         	movff	SetupPattern@patternIDPointer+1,_PatternID+1
 11163                           
 11164                           ;Pattern_PtrnGenerator.c: 92: ListeningFocus = listeningFocusPointer;
 11165  003C7A  C062  F0D9         	movff	SetupPattern@listeningFocusPointer,_ListeningFocus
 11166  003C7E  C063  F0DA         	movff	SetupPattern@listeningFocusPointer+1,_ListeningFocus+1
 11167  003C82  0012               	return		;funcret
 11168  003C84                     __end_of_SetupPattern:
 11169                           	opt stack 0
 11170                           tosu	equ	0xFFF
 11171                           tosh	equ	0xFFE
 11172                           tosl	equ	0xFFD
 11173                           pclath	equ	0xFFA
 11174                           tblptru	equ	0xFF8
 11175                           tblptrh	equ	0xFF7
 11176                           tblptrl	equ	0xFF6
 11177                           tablat	equ	0xFF5
 11178                           prodh	equ	0xFF4
 11179                           prodl	equ	0xFF3
 11180                           intcon	equ	0xFF2
 11181                           postinc0	equ	0xFEE
 11182                           wreg	equ	0xFE8
 11183                           indf1	equ	0xFE7
 11184                           postinc1	equ	0xFE6
 11185                           postdec1	equ	0xFE5
 11186                           fsr1h	equ	0xFE2
 11187                           fsr1l	equ	0xFE1
 11188                           indf2	equ	0xFDF
 11189                           postinc2	equ	0xFDE
 11190                           postdec2	equ	0xFDD
 11191                           plusw2	equ	0xFDB
 11192                           fsr2h	equ	0xFDA
 11193                           fsr2l	equ	0xFD9
 11194                           status	equ	0xFD8
 11195                           
 11196 ;; *************** function _ES_PostToService *****************
 11197 ;; Defined at:
 11198 ;;		line 351 in file "ES_Framework.c"
 11199 ;; Parameters:    Size  Location     Type
 11200 ;;  WhichService    1    wreg     unsigned char 
 11201 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
 11202 ;; Auto vars:     Size  Location     Type
 11203 ;;  WhichService    1   28[BANK0 ] unsigned char 
 11204 ;; Return value:  Size  Location     Type
 11205 ;;                  1    wreg      unsigned char 
 11206 ;; Registers used:
 11207 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11208 ;; Tracked objects:
 11209 ;;		On entry : 0/0
 11210 ;;		On exit  : 0/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11213 ;;      Params:         0       3       0       0
 11214 ;;      Locals:         0       1       0       0
 11215 ;;      Temps:          0       2       0       0
 11216 ;;      Totals:         0       6       0       0
 11217 ;;Total ram usage:        6 bytes
 11218 ;; Hardware stack levels used:    1
 11219 ;; Hardware stack levels required when called:    9
 11220 ;; This function calls:
 11221 ;;		_ES_EnQueueFIFO
 11222 ;; This function is called by:
 11223 ;;		_InitPatternControlService
 11224 ;;		_PostPatternControlService
 11225 ;;		_InitSPI32ControlService
 11226 ;;		_PostSPI32ControlService
 11227 ;; This function uses a non-reentrant model
 11228 ;;
 11229                           
 11230                           	psect	text42
 11231  0035E4                     __ptext42:
 11232                           	opt stack 0
 11233  0035E4                     _ES_PostToService:
 11234                           	opt stack 17
 11235                           
 11236                           ;incstack = 0
 11237                           ;ES_PostToService@WhichService stored from wreg
 11238  0035E4  0100               	movlb	0	; () banked
 11239  0035E6  6F7C               	movwf	ES_PostToService@WhichService& (0+255),b
 11240                           
 11241                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
 11242                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
 11243                           ;ES_Framework.c: 354: 1 )){
 11244  0035E8  0E02               	movlw	2
 11245  0035EA  0100               	movlb	0	; () banked
 11246  0035EC  617C               	cpfslt	ES_PostToService@WhichService& (0+255),b
 11247  0035EE  D033               	goto	l3073
 11248                           
 11249                           ; BSR set to: 0
 11250  0035F0  0100               	movlb	0	; () banked
 11251  0035F2  517C               	movf	ES_PostToService@WhichService& (0+255),w,b
 11252  0035F4  0D03               	mullw	3
 11253  0035F6  0E58               	movlw	low _EventQueues
 11254  0035F8  24F3               	addwf	prodl,w,c
 11255  0035FA  6EF6               	movwf	tblptrl,c
 11256  0035FC  0E03               	movlw	high _EventQueues
 11257  0035FE  20F4               	addwfc	prodh,w,c
 11258  003600  6EF7               	movwf	tblptrh,c
 11259  003602                     	if	0	;There are less than 3 active tblptr bytes
 11260  003602                     	endif
 11261  003602  0009               	tblrd		*+
 11262  003604  CFF5 F06C          	movff	tablat,ES_EnQueueFIFO@pBlock
 11263  003608  000A               	tblrd		*-
 11264  00360A  CFF5 F06D          	movff	tablat,ES_EnQueueFIFO@pBlock+1
 11265  00360E  C077  F06E         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
 11266  003612  C078  F06F         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
 11267  003616  C079  F070         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
 11268  00361A  EC80  F016         	call	_ES_EnQueueFIFO	;wreg free
 11269  00361E  06E8               	decf	wreg,f,c
 11270  003620  A4D8               	btfss	status,2,c
 11271  003622  D019               	goto	l3073
 11272                           
 11273                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
 11274  003624  0100               	movlb	0	; () banked
 11275  003626  517C               	movf	ES_PostToService@WhichService& (0+255),w,b
 11276  003628  0D02               	mullw	2
 11277  00362A  0E01               	movlw	low _BitNum2SetMask
 11278  00362C  24F3               	addwf	prodl,w,c
 11279  00362E  6EF6               	movwf	tblptrl,c
 11280  003630  0E03               	movlw	high _BitNum2SetMask
 11281  003632  20F4               	addwfc	prodh,w,c
 11282  003634  6EF7               	movwf	tblptrh,c
 11283  003636                     	if	0	;There are less than 3 active tblptr bytes
 11284  003636                     	endif
 11285  003636  0009               	tblrd		*+
 11286  003638  CFF5 F07A          	movff	tablat,??_ES_PostToService
 11287  00363C  0009               	tblrd		*+
 11288  00363E  CFF5 F07B          	movff	tablat,??_ES_PostToService+1
 11289  003642  0100               	movlb	0	; () banked
 11290  003644  517A               	movf	??_ES_PostToService& (0+255),w,b
 11291  003646  0100               	movlb	0	; () banked
 11292  003648  13DD               	iorwf	_Ready& (0+255),f,b
 11293  00364A  0100               	movlb	0	; () banked
 11294  00364C  517B               	movf	(??_ES_PostToService+1)& (0+255),w,b
 11295  00364E  0100               	movlb	0	; () banked
 11296  003650  13DE               	iorwf	(_Ready+1)& (0+255),f,b
 11297                           
 11298                           ; BSR set to: 0
 11299                           ;ES_Framework.c: 356: return 1;
 11300  003652  0E01               	movlw	1
 11301                           
 11302                           ; BSR set to: 0
 11303                           ;ES_Framework.c: 357: } else
 11304                           
 11305                           ; BSR set to: 0
 11306  003654  0012               	return	
 11307  003656                     l3073:
 11308                           
 11309                           ;ES_Framework.c: 358: return 0;
 11310  003656  0E00               	movlw	0
 11311  003658  0012               	return	
 11312  00365A                     __end_of_ES_PostToService:
 11313                           	opt stack 0
 11314                           tosu	equ	0xFFF
 11315                           tosh	equ	0xFFE
 11316                           tosl	equ	0xFFD
 11317                           pclath	equ	0xFFA
 11318                           tblptru	equ	0xFF8
 11319                           tblptrh	equ	0xFF7
 11320                           tblptrl	equ	0xFF6
 11321                           tablat	equ	0xFF5
 11322                           prodh	equ	0xFF4
 11323                           prodl	equ	0xFF3
 11324                           intcon	equ	0xFF2
 11325                           postinc0	equ	0xFEE
 11326                           wreg	equ	0xFE8
 11327                           indf1	equ	0xFE7
 11328                           postinc1	equ	0xFE6
 11329                           postdec1	equ	0xFE5
 11330                           fsr1h	equ	0xFE2
 11331                           fsr1l	equ	0xFE1
 11332                           indf2	equ	0xFDF
 11333                           postinc2	equ	0xFDE
 11334                           postdec2	equ	0xFDD
 11335                           plusw2	equ	0xFDB
 11336                           fsr2h	equ	0xFDA
 11337                           fsr2l	equ	0xFD9
 11338                           status	equ	0xFD8
 11339                           
 11340 ;; *************** function _ES_EnQueueFIFO *****************
 11341 ;; Defined at:
 11342 ;;		line 85 in file "ES_Queue.c"
 11343 ;; Parameters:    Size  Location     Type
 11344 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
 11345 ;;		 -> Queue1(12), Queue0(12), 
 11346 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
 11347 ;; Auto vars:     Size  Location     Type
 11348 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
 11349 ;;		 -> Queue1(12), Queue0(12), 
 11350 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
 11351 ;; Return value:  Size  Location     Type
 11352 ;;                  1    wreg      unsigned char 
 11353 ;; Registers used:
 11354 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11355 ;; Tracked objects:
 11356 ;;		On entry : 0/0
 11357 ;;		On exit  : 0/0
 11358 ;;		Unchanged: 0/0
 11359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11360 ;;      Params:         0       5       0       0
 11361 ;;      Locals:         0       3       0       0
 11362 ;;      Temps:          0       3       0       0
 11363 ;;      Totals:         0      11       0       0
 11364 ;;Total ram usage:       11 bytes
 11365 ;; Hardware stack levels used:    1
 11366 ;; Hardware stack levels required when called:    8
 11367 ;; This function calls:
 11368 ;;		___awmod
 11369 ;;		___wmul
 11370 ;; This function is called by:
 11371 ;;		_ES_PostToService
 11372 ;;		_ES_PostAll
 11373 ;; This function uses a non-reentrant model
 11374 ;;
 11375                           
 11376                           	psect	text43
 11377  002D00                     __ptext43:
 11378                           	opt stack 0
 11379  002D00                     _ES_EnQueueFIFO:
 11380                           	opt stack 17
 11381                           
 11382                           ;ES_Queue.c: 87: unsigned char SaveCrit;
 11383                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
 11384                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
 11385                           
 11386                           ;incstack = 0
 11387  002D00  C06C  F075         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
 11388  002D04  C06D  F076         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
 11389                           
 11390                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
 11391  002D08  C075  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
 11392  002D0C  C076  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
 11393  002D10  0100               	movlb	0	; () banked
 11394  002D12  EE10 F002          	lfsr	1,2
 11395  002D16  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
 11396  002D18  26E1               	addwf	fsr1l,f,c
 11397  002D1A  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
 11398  002D1C  22E2               	addwfc	fsr1h,f,c
 11399  002D1E  50DE               	movf	postinc2,w,c
 11400  002D20  5CE6               	subwf	postinc1,w,c
 11401  002D22  B0D8               	btfsc	status,0,c
 11402  002D24  D05C               	goto	l3057
 11403                           
 11404                           ; BSR set to: 0
 11405                           
 11406                           ;ES_Queue.c: 92: {
 11407                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
 11408  002D26  CFF2 F074          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
 11409  002D2A  9EF2               	bcf	intcon,7,c	;volatile
 11410                           
 11411                           ; BSR set to: 0
 11412                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
 11413                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
 11414                           
 11415                           ; BSR set to: 0
 11416  002D2C  C075  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
 11417  002D30  C076  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
 11418  002D34  50DF               	movf	indf2,w,c
 11419  002D36  0100               	movlb	0	; () banked
 11420  002D38  6F71               	movwf	??_ES_EnQueueFIFO& (0+255),b
 11421  002D3A  0100               	movlb	0	; () banked
 11422  002D3C  5171               	movf	??_ES_EnQueueFIFO& (0+255),w,b
 11423  002D3E  0100               	movlb	0	; () banked
 11424  002D40  6F62               	movwf	___awmod@divisor& (0+255),b
 11425  002D42  6B63               	clrf	(___awmod@divisor+1)& (0+255),b
 11426  002D44  0100               	movlb	0	; () banked
 11427  002D46  EE20 F002          	lfsr	2,2
 11428  002D4A  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
 11429  002D4C  26D9               	addwf	fsr2l,f,c
 11430  002D4E  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
 11431  002D50  22DA               	addwfc	fsr2h,f,c
 11432  002D52  50DF               	movf	indf2,w,c
 11433  002D54  0100               	movlb	0	; () banked
 11434  002D56  6F72               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
 11435  002D58  0100               	movlb	0	; () banked
 11436  002D5A  EE20 F001          	lfsr	2,1
 11437  002D5E  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
 11438  002D60  26D9               	addwf	fsr2l,f,c
 11439  002D62  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
 11440  002D64  22DA               	addwfc	fsr2h,f,c
 11441  002D66  50DF               	movf	indf2,w,c
 11442  002D68  0100               	movlb	0	; () banked
 11443  002D6A  6F73               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
 11444  002D6C  0100               	movlb	0	; () banked
 11445  002D6E  5173               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
 11446  002D70  0100               	movlb	0	; () banked
 11447  002D72  2572               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
 11448  002D74  0100               	movlb	0	; () banked
 11449  002D76  6F60               	movwf	___awmod@dividend& (0+255),b
 11450  002D78  0100               	movlb	0	; () banked
 11451  002D7A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 11452  002D7C  0100               	movlb	0	; () banked
 11453  002D7E  3761               	rlcf	(___awmod@dividend+1)& (0+255),f,b
 11454  002D80  EC20  F019         	call	___awmod	;wreg free
 11455  002D84  0E01               	movlw	1
 11456  002D86  0100               	movlb	0	; () banked
 11457  002D88  2560               	addwf	?___awmod& (0+255),w,b
 11458  002D8A  0100               	movlb	0	; () banked
 11459  002D8C  6F66               	movwf	___wmul@multiplier& (0+255),b
 11460  002D8E  0E00               	movlw	0
 11461  002D90  0100               	movlb	0	; () banked
 11462  002D92  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 11463  002D94  0100               	movlb	0	; () banked
 11464  002D96  6F67               	movwf	(___wmul@multiplier+1)& (0+255),b
 11465  002D98  0E00               	movlw	0
 11466  002D9A  0100               	movlb	0	; () banked
 11467  002D9C  6F69               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11468  002D9E  0E03               	movlw	3
 11469  002DA0  6F68               	movwf	___wmul@multiplicand& (0+255),b
 11470  002DA2  EC06  F01D         	call	___wmul	;wreg free
 11471  002DA6  0100               	movlb	0	; () banked
 11472  002DA8  5166               	movf	?___wmul& (0+255),w,b
 11473  002DAA  0100               	movlb	0	; () banked
 11474  002DAC  256C               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
 11475  002DAE  6ED9               	movwf	fsr2l,c
 11476  002DB0  0100               	movlb	0	; () banked
 11477  002DB2  5167               	movf	(?___wmul+1)& (0+255),w,b
 11478  002DB4  0100               	movlb	0	; () banked
 11479  002DB6  216D               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
 11480  002DB8  6EDA               	movwf	fsr2h,c
 11481  002DBA  C06E  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
 11482  002DBE  C06F  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
 11483  002DC2  C070  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
 11484                           
 11485                           ; BSR set to: 0
 11486                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
 11487  002DC6  0100               	movlb	0	; () banked
 11488  002DC8  EE20 F002          	lfsr	2,2
 11489  002DCC  5175               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
 11490  002DCE  26D9               	addwf	fsr2l,f,c
 11491  002DD0  5176               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
 11492  002DD2  22DA               	addwfc	fsr2h,f,c
 11493  002DD4  2ADF               	incf	indf2,f,c
 11494                           
 11495                           ; BSR set to: 0
 11496                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
 11497  002DD6  C074  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
 11498                           
 11499                           ; BSR set to: 0
 11500                           ;ES_Queue.c: 101: return(1);
 11501  002DDA  0E01               	movlw	1
 11502                           
 11503                           ; BSR set to: 0
 11504                           ;ES_Queue.c: 102: }else
 11505                           
 11506                           ; BSR set to: 0
 11507  002DDC  0012               	return	
 11508  002DDE                     l3057:
 11509                           
 11510                           ; BSR set to: 0
 11511                           ;ES_Queue.c: 103: return(0);
 11512  002DDE  0E00               	movlw	0
 11513                           
 11514                           ; BSR set to: 0
 11515  002DE0  0012               	return	
 11516  002DE2                     __end_of_ES_EnQueueFIFO:
 11517                           	opt stack 0
 11518                           tosu	equ	0xFFF
 11519                           tosh	equ	0xFFE
 11520                           tosl	equ	0xFFD
 11521                           pclath	equ	0xFFA
 11522                           tblptru	equ	0xFF8
 11523                           tblptrh	equ	0xFF7
 11524                           tblptrl	equ	0xFF6
 11525                           tablat	equ	0xFF5
 11526                           prodh	equ	0xFF4
 11527                           prodl	equ	0xFF3
 11528                           intcon	equ	0xFF2
 11529                           postinc0	equ	0xFEE
 11530                           wreg	equ	0xFE8
 11531                           indf1	equ	0xFE7
 11532                           postinc1	equ	0xFE6
 11533                           postdec1	equ	0xFE5
 11534                           fsr1h	equ	0xFE2
 11535                           fsr1l	equ	0xFE1
 11536                           indf2	equ	0xFDF
 11537                           postinc2	equ	0xFDE
 11538                           postdec2	equ	0xFDD
 11539                           plusw2	equ	0xFDB
 11540                           fsr2h	equ	0xFDA
 11541                           fsr2l	equ	0xFD9
 11542                           status	equ	0xFD8
 11543                           
 11544 ;; *************** function ___wmul *****************
 11545 ;; Defined at:
 11546 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 11547 ;; Parameters:    Size  Location     Type
 11548 ;;  multiplier      2    6[BANK0 ] unsigned int 
 11549 ;;  multiplicand    2    8[BANK0 ] unsigned int 
 11550 ;; Auto vars:     Size  Location     Type
 11551 ;;  product         2   10[BANK0 ] unsigned int 
 11552 ;; Return value:  Size  Location     Type
 11553 ;;                  2    6[BANK0 ] unsigned int 
 11554 ;; Registers used:
 11555 ;;		wreg, status,2, status,0, prodl, prodh
 11556 ;; Tracked objects:
 11557 ;;		On entry : 0/0
 11558 ;;		On exit  : 0/0
 11559 ;;		Unchanged: 0/0
 11560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11561 ;;      Params:         0       4       0       0
 11562 ;;      Locals:         0       2       0       0
 11563 ;;      Temps:          0       0       0       0
 11564 ;;      Totals:         0       6       0       0
 11565 ;;Total ram usage:        6 bytes
 11566 ;; Hardware stack levels used:    1
 11567 ;; Hardware stack levels required when called:    7
 11568 ;; This function calls:
 11569 ;;		Nothing
 11570 ;; This function is called by:
 11571 ;;		_ES_EnQueueFIFO
 11572 ;;		_ES_DeQueue
 11573 ;;		_HSV_to_RGB
 11574 ;;		_HueTest
 11575 ;;		i2_ES_EnQueueFIFO
 11576 ;;		_ES_EnQueueLIFO
 11577 ;; This function uses a non-reentrant model
 11578 ;;
 11579                           
 11580                           	psect	text44
 11581  003A0C                     __ptext44:
 11582                           	opt stack 0
 11583  003A0C                     ___wmul:
 11584                           	opt stack 17
 11585                           
 11586                           ; BSR set to: 0
 11587                           ;incstack = 0
 11588  003A0C  0100               	movlb	0	; () banked
 11589  003A0E  5166               	movf	___wmul@multiplier& (0+255),w,b
 11590  003A10  0100               	movlb	0	; () banked
 11591  003A12  0368               	mulwf	___wmul@multiplicand& (0+255),b
 11592  003A14  CFF3 F06A          	movff	prodl,___wmul@product
 11593  003A18  CFF4 F06B          	movff	prodh,___wmul@product+1
 11594  003A1C  0100               	movlb	0	; () banked
 11595  003A1E  5166               	movf	___wmul@multiplier& (0+255),w,b
 11596  003A20  0100               	movlb	0	; () banked
 11597  003A22  0369               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 11598  003A24  50F3               	movf	prodl,w,c
 11599  003A26  0100               	movlb	0	; () banked
 11600  003A28  276B               	addwf	(___wmul@product+1)& (0+255),f,b
 11601  003A2A  0100               	movlb	0	; () banked
 11602  003A2C  5167               	movf	(___wmul@multiplier+1)& (0+255),w,b
 11603  003A2E  0100               	movlb	0	; () banked
 11604  003A30  0368               	mulwf	___wmul@multiplicand& (0+255),b
 11605  003A32  50F3               	movf	prodl,w,c
 11606  003A34  0100               	movlb	0	; () banked
 11607  003A36  276B               	addwf	(___wmul@product+1)& (0+255),f,b
 11608                           
 11609                           ; BSR set to: 0
 11610  003A38  C06A  F066         	movff	___wmul@product,?___wmul
 11611  003A3C  C06B  F067         	movff	___wmul@product+1,?___wmul+1
 11612  003A40  0012               	return	
 11613  003A42                     __end_of___wmul:
 11614                           	opt stack 0
 11615                           tosu	equ	0xFFF
 11616                           tosh	equ	0xFFE
 11617                           tosl	equ	0xFFD
 11618                           pclath	equ	0xFFA
 11619                           tblptru	equ	0xFF8
 11620                           tblptrh	equ	0xFF7
 11621                           tblptrl	equ	0xFF6
 11622                           tablat	equ	0xFF5
 11623                           prodh	equ	0xFF4
 11624                           prodl	equ	0xFF3
 11625                           intcon	equ	0xFF2
 11626                           postinc0	equ	0xFEE
 11627                           wreg	equ	0xFE8
 11628                           indf1	equ	0xFE7
 11629                           postinc1	equ	0xFE6
 11630                           postdec1	equ	0xFE5
 11631                           fsr1h	equ	0xFE2
 11632                           fsr1l	equ	0xFE1
 11633                           indf2	equ	0xFDF
 11634                           postinc2	equ	0xFDE
 11635                           postdec2	equ	0xFDD
 11636                           plusw2	equ	0xFDB
 11637                           fsr2h	equ	0xFDA
 11638                           fsr2l	equ	0xFD9
 11639                           status	equ	0xFD8
 11640                           
 11641 ;; *************** function ___awmod *****************
 11642 ;; Defined at:
 11643 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
 11644 ;; Parameters:    Size  Location     Type
 11645 ;;  dividend        2    0[BANK0 ] int 
 11646 ;;  divisor         2    2[BANK0 ] int 
 11647 ;; Auto vars:     Size  Location     Type
 11648 ;;  sign            1    5[BANK0 ] unsigned char 
 11649 ;;  counter         1    4[BANK0 ] unsigned char 
 11650 ;; Return value:  Size  Location     Type
 11651 ;;                  2    0[BANK0 ] int 
 11652 ;; Registers used:
 11653 ;;		wreg, status,2, status,0
 11654 ;; Tracked objects:
 11655 ;;		On entry : 0/0
 11656 ;;		On exit  : 0/0
 11657 ;;		Unchanged: 0/0
 11658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11659 ;;      Params:         0       4       0       0
 11660 ;;      Locals:         0       2       0       0
 11661 ;;      Temps:          0       0       0       0
 11662 ;;      Totals:         0       6       0       0
 11663 ;;Total ram usage:        6 bytes
 11664 ;; Hardware stack levels used:    1
 11665 ;; Hardware stack levels required when called:    7
 11666 ;; This function calls:
 11667 ;;		Nothing
 11668 ;; This function is called by:
 11669 ;;		_ES_EnQueueFIFO
 11670 ;;		_HueTest
 11671 ;;		_CenterBreathe
 11672 ;;		_SingleFadedLoop
 11673 ;;		_DoubleFadedLoop
 11674 ;;		_BrokenPinwheel
 11675 ;;		_MirroredQuadrants
 11676 ;;		_SingleFocusBreathe
 11677 ;;		_DoubleBrokenLoop
 11678 ;;		_SingleFocusPulse
 11679 ;; This function uses a non-reentrant model
 11680 ;;
 11681                           
 11682                           	psect	text45
 11683  003240                     __ptext45:
 11684                           	opt stack 0
 11685  003240                     ___awmod:
 11686                           	opt stack 17
 11687                           
 11688                           ; BSR set to: 0
 11689                           ;incstack = 0
 11690  003240  0E00               	movlw	0
 11691  003242  0100               	movlb	0	; () banked
 11692  003244  6F65               	movwf	___awmod@sign& (0+255),b
 11693                           
 11694                           ; BSR set to: 0
 11695  003246  0100               	movlb	0	; () banked
 11696  003248  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11697  00324A  D008               	goto	l3013
 11698                           
 11699                           ; BSR set to: 0
 11700  00324C  0100               	movlb	0	; () banked
 11701  00324E  6D60               	negf	___awmod@dividend& (0+255),b
 11702  003250  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
 11703  003252  B0D8               	btfsc	status,0,c
 11704  003254  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
 11705                           
 11706                           ; BSR set to: 0
 11707  003256  0E01               	movlw	1
 11708  003258  0100               	movlb	0	; () banked
 11709  00325A  6F65               	movwf	___awmod@sign& (0+255),b
 11710  00325C                     l3013:
 11711                           
 11712                           ; BSR set to: 0
 11713  00325C  0100               	movlb	0	; () banked
 11714  00325E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11715  003260  D005               	goto	l3017
 11716                           
 11717                           ; BSR set to: 0
 11718  003262  0100               	movlb	0	; () banked
 11719  003264  6D62               	negf	___awmod@divisor& (0+255),b
 11720  003266  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
 11721  003268  B0D8               	btfsc	status,0,c
 11722  00326A  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
 11723  00326C                     l3017:
 11724                           
 11725                           ; BSR set to: 0
 11726  00326C  0100               	movlb	0	; () banked
 11727  00326E  5162               	movf	___awmod@divisor& (0+255),w,b
 11728  003270  0100               	movlb	0	; () banked
 11729  003272  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11730  003274  B4D8               	btfsc	status,2,c
 11731  003276  D026               	goto	l3033
 11732                           
 11733                           ; BSR set to: 0
 11734  003278  0E01               	movlw	1
 11735  00327A  0100               	movlb	0	; () banked
 11736  00327C  6F64               	movwf	___awmod@counter& (0+255),b
 11737  00327E  D006               	goto	l3023
 11738  003280                     l3021:
 11739                           
 11740                           ; BSR set to: 0
 11741  003280  0100               	movlb	0	; () banked
 11742  003282  90D8               	bcf	status,0,c
 11743  003284  3762               	rlcf	___awmod@divisor& (0+255),f,b
 11744  003286  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11745  003288  0100               	movlb	0	; () banked
 11746  00328A  2B64               	incf	___awmod@counter& (0+255),f,b
 11747  00328C                     l3023:
 11748                           
 11749                           ; BSR set to: 0
 11750  00328C  0100               	movlb	0	; () banked
 11751  00328E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11752  003290  D7F7               	goto	l3021
 11753  003292                     l3025:
 11754                           
 11755                           ; BSR set to: 0
 11756  003292  0100               	movlb	0	; () banked
 11757  003294  5162               	movf	___awmod@divisor& (0+255),w,b
 11758  003296  0100               	movlb	0	; () banked
 11759  003298  5D60               	subwf	___awmod@dividend& (0+255),w,b
 11760  00329A  0100               	movlb	0	; () banked
 11761  00329C  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
 11762  00329E  0100               	movlb	0	; () banked
 11763  0032A0  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11764  0032A2  A0D8               	btfss	status,0,c
 11765  0032A4  D008               	goto	l3029
 11766                           
 11767                           ; BSR set to: 0
 11768  0032A6  0100               	movlb	0	; () banked
 11769  0032A8  5162               	movf	___awmod@divisor& (0+255),w,b
 11770  0032AA  0100               	movlb	0	; () banked
 11771  0032AC  5F60               	subwf	___awmod@dividend& (0+255),f,b
 11772  0032AE  0100               	movlb	0	; () banked
 11773  0032B0  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
 11774  0032B2  0100               	movlb	0	; () banked
 11775  0032B4  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11776  0032B6                     l3029:
 11777                           
 11778                           ; BSR set to: 0
 11779  0032B6  0100               	movlb	0	; () banked
 11780  0032B8  90D8               	bcf	status,0,c
 11781  0032BA  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11782  0032BC  3362               	rrcf	___awmod@divisor& (0+255),f,b
 11783                           
 11784                           ; BSR set to: 0
 11785  0032BE  0100               	movlb	0	; () banked
 11786  0032C0  2F64               	decfsz	___awmod@counter& (0+255),f,b
 11787  0032C2  D7E7               	goto	l3025
 11788  0032C4                     l3033:
 11789                           
 11790                           ; BSR set to: 0
 11791  0032C4  0100               	movlb	0	; () banked
 11792  0032C6  5165               	movf	___awmod@sign& (0+255),w,b
 11793  0032C8  0100               	movlb	0	; () banked
 11794  0032CA  B4D8               	btfsc	status,2,c
 11795  0032CC  D005               	goto	l3037
 11796                           
 11797                           ; BSR set to: 0
 11798  0032CE  0100               	movlb	0	; () banked
 11799  0032D0  6D60               	negf	___awmod@dividend& (0+255),b
 11800  0032D2  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
 11801  0032D4  B0D8               	btfsc	status,0,c
 11802  0032D6  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
 11803  0032D8                     l3037:
 11804                           
 11805                           ; BSR set to: 0
 11806  0032D8  C060  F060         	movff	___awmod@dividend,?___awmod
 11807  0032DC  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
 11808  0032E0  0012               	return	
 11809  0032E2                     __end_of___awmod:
 11810                           	opt stack 0
 11811                           tosu	equ	0xFFF
 11812                           tosh	equ	0xFFE
 11813                           tosl	equ	0xFFD
 11814                           pclath	equ	0xFFA
 11815                           tblptru	equ	0xFF8
 11816                           tblptrh	equ	0xFF7
 11817                           tblptrl	equ	0xFF6
 11818                           tablat	equ	0xFF5
 11819                           prodh	equ	0xFF4
 11820                           prodl	equ	0xFF3
 11821                           intcon	equ	0xFF2
 11822                           postinc0	equ	0xFEE
 11823                           wreg	equ	0xFE8
 11824                           indf1	equ	0xFE7
 11825                           postinc1	equ	0xFE6
 11826                           postdec1	equ	0xFE5
 11827                           fsr1h	equ	0xFE2
 11828                           fsr1l	equ	0xFE1
 11829                           indf2	equ	0xFDF
 11830                           postinc2	equ	0xFDE
 11831                           postdec2	equ	0xFDD
 11832                           plusw2	equ	0xFDB
 11833                           fsr2h	equ	0xFDA
 11834                           fsr2l	equ	0xFD9
 11835                           status	equ	0xFD8
 11836                           
 11837 ;; *************** function _DotStar_Init *****************
 11838 ;; Defined at:
 11839 ;;		line 70 in file "Pattern_DotStarLED.c"
 11840 ;; Parameters:    Size  Location     Type
 11841 ;;  brightnessPo    2    0[BANK0 ] PTR unsigned char 
 11842 ;;		 -> PatternConfigs(4), 
 11843 ;; Auto vars:     Size  Location     Type
 11844 ;;		None
 11845 ;; Return value:  Size  Location     Type
 11846 ;;                  1    wreg      void 
 11847 ;; Registers used:
 11848 ;;		wreg, status,2, status,0
 11849 ;; Tracked objects:
 11850 ;;		On entry : 0/0
 11851 ;;		On exit  : 0/0
 11852 ;;		Unchanged: 0/0
 11853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11854 ;;      Params:         0       2       0       0
 11855 ;;      Locals:         0       0       0       0
 11856 ;;      Temps:          0       0       0       0
 11857 ;;      Totals:         0       2       0       0
 11858 ;;Total ram usage:        2 bytes
 11859 ;; Hardware stack levels used:    1
 11860 ;; Hardware stack levels required when called:    7
 11861 ;; This function calls:
 11862 ;;		Nothing
 11863 ;; This function is called by:
 11864 ;;		_InitPatternControlService
 11865 ;; This function uses a non-reentrant model
 11866 ;;
 11867                           
 11868                           	psect	text46
 11869  0037EC                     __ptext46:
 11870                           	opt stack 0
 11871  0037EC                     _DotStar_Init:
 11872                           	opt stack 21
 11873                           
 11874                           ;Pattern_DotStarLED.c: 72: Brightness = brightnessPointer;
 11875                           
 11876                           ; BSR set to: 0
 11877                           ;incstack = 0
 11878  0037EC  C060  F0F0         	movff	DotStar_Init@brightnessPointer,_Brightness
 11879  0037F0  C061  F0F1         	movff	DotStar_Init@brightnessPointer+1,_Brightness+1
 11880                           
 11881                           ;Pattern_DotStarLED.c: 74: PixelFrames[0] = 0x0;
 11882  0037F4  0E00               	movlw	0
 11883  0037F6  CFE8 F1C4          	movff	wreg,_PixelFrames
 11884  0037FA  0E00               	movlw	0
 11885  0037FC  CFE8 F1C5          	movff	wreg,_PixelFrames+1
 11886  003800  0E00               	movlw	0
 11887  003802  CFE8 F1C6          	movff	wreg,_PixelFrames+2
 11888  003806  0E00               	movlw	0
 11889  003808  CFE8 F1C7          	movff	wreg,_PixelFrames+3
 11890                           
 11891                           ;Pattern_DotStarLED.c: 75: PixelFrames[76+1] = 0xffffffff;
 11892  00380C  0EFF               	movlw	255
 11893  00380E  CFE8 F2F8          	movff	wreg,_PixelFrames+308
 11894  003812  0EFF               	movlw	255
 11895  003814  CFE8 F2F9          	movff	wreg,_PixelFrames+309
 11896  003818  0EFF               	movlw	255
 11897  00381A  CFE8 F2FA          	movff	wreg,_PixelFrames+310
 11898  00381E  0EFF               	movlw	255
 11899  003820  CFE8 F2FB          	movff	wreg,_PixelFrames+311
 11900                           
 11901                           ;Pattern_DotStarLED.c: 77: PixelFrames[76+1+1] = 0xffffffff;
 11902  003824  0EFF               	movlw	255
 11903  003826  CFE8 F2FC          	movff	wreg,_PixelFrames+312
 11904  00382A  0EFF               	movlw	255
 11905  00382C  CFE8 F2FD          	movff	wreg,_PixelFrames+313
 11906  003830  0EFF               	movlw	255
 11907  003832  CFE8 F2FE          	movff	wreg,_PixelFrames+314
 11908  003836  0EFF               	movlw	255
 11909  003838  CFE8 F2FF          	movff	wreg,_PixelFrames+315
 11910  00383C  0012               	return		;funcret
 11911  00383E                     __end_of_DotStar_Init:
 11912                           	opt stack 0
 11913                           tosu	equ	0xFFF
 11914                           tosh	equ	0xFFE
 11915                           tosl	equ	0xFFD
 11916                           pclath	equ	0xFFA
 11917                           tblptru	equ	0xFF8
 11918                           tblptrh	equ	0xFF7
 11919                           tblptrl	equ	0xFF6
 11920                           tablat	equ	0xFF5
 11921                           prodh	equ	0xFF4
 11922                           prodl	equ	0xFF3
 11923                           intcon	equ	0xFF2
 11924                           postinc0	equ	0xFEE
 11925                           wreg	equ	0xFE8
 11926                           indf1	equ	0xFE7
 11927                           postinc1	equ	0xFE6
 11928                           postdec1	equ	0xFE5
 11929                           fsr1h	equ	0xFE2
 11930                           fsr1l	equ	0xFE1
 11931                           indf2	equ	0xFDF
 11932                           postinc2	equ	0xFDE
 11933                           postdec2	equ	0xFDD
 11934                           plusw2	equ	0xFDB
 11935                           fsr2h	equ	0xFDA
 11936                           fsr2l	equ	0xFD9
 11937                           status	equ	0xFD8
 11938                           
 11939 ;; *************** function _CAN_Init *****************
 11940 ;; Defined at:
 11941 ;;		line 60 in file "CAN_RX_HW.c"
 11942 ;; Parameters:    Size  Location     Type
 11943 ;;		None
 11944 ;; Auto vars:     Size  Location     Type
 11945 ;;		None
 11946 ;; Return value:  Size  Location     Type
 11947 ;;                  1    wreg      void 
 11948 ;; Registers used:
 11949 ;;		wreg, status,2, cstack
 11950 ;; Tracked objects:
 11951 ;;		On entry : 0/0
 11952 ;;		On exit  : 0/0
 11953 ;;		Unchanged: 0/0
 11954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11955 ;;      Params:         0       0       0       0
 11956 ;;      Locals:         0       0       0       0
 11957 ;;      Temps:          0       0       0       0
 11958 ;;      Totals:         0       0       0       0
 11959 ;;Total ram usage:        0 bytes
 11960 ;; Hardware stack levels used:    1
 11961 ;; Hardware stack levels required when called:    8
 11962 ;; This function calls:
 11963 ;;		_InitCanHardware
 11964 ;;		_InitPins
 11965 ;; This function is called by:
 11966 ;;		_InitPatternControlService
 11967 ;; This function uses a non-reentrant model
 11968 ;;
 11969                           
 11970                           	psect	text47
 11971  003CAA                     __ptext47:
 11972                           	opt stack 0
 11973  003CAA                     _CAN_Init:
 11974                           	opt stack 20
 11975                           
 11976                           ;CAN_RX_HW.c: 61: InitPins();
 11977                           
 11978                           ;incstack = 0
 11979  003CAA  ECFE  F01D         	call	_InitPins	;wreg free
 11980                           
 11981                           ;CAN_RX_HW.c: 62: InitCanHardware();
 11982  003CAE  EC78  F01A         	call	_InitCanHardware	;wreg free
 11983  003CB2  0012               	return		;funcret
 11984  003CB4                     __end_of_CAN_Init:
 11985                           	opt stack 0
 11986                           tosu	equ	0xFFF
 11987                           tosh	equ	0xFFE
 11988                           tosl	equ	0xFFD
 11989                           pclath	equ	0xFFA
 11990                           tblptru	equ	0xFF8
 11991                           tblptrh	equ	0xFF7
 11992                           tblptrl	equ	0xFF6
 11993                           tablat	equ	0xFF5
 11994                           prodh	equ	0xFF4
 11995                           prodl	equ	0xFF3
 11996                           intcon	equ	0xFF2
 11997                           postinc0	equ	0xFEE
 11998                           wreg	equ	0xFE8
 11999                           indf1	equ	0xFE7
 12000                           postinc1	equ	0xFE6
 12001                           postdec1	equ	0xFE5
 12002                           fsr1h	equ	0xFE2
 12003                           fsr1l	equ	0xFE1
 12004                           indf2	equ	0xFDF
 12005                           postinc2	equ	0xFDE
 12006                           postdec2	equ	0xFDD
 12007                           plusw2	equ	0xFDB
 12008                           fsr2h	equ	0xFDA
 12009                           fsr2l	equ	0xFD9
 12010                           status	equ	0xFD8
 12011                           
 12012 ;; *************** function _InitPins *****************
 12013 ;; Defined at:
 12014 ;;		line 155 in file "CAN_RX_HW.c"
 12015 ;; Parameters:    Size  Location     Type
 12016 ;;		None
 12017 ;; Auto vars:     Size  Location     Type
 12018 ;;		None
 12019 ;; Return value:  Size  Location     Type
 12020 ;;                  1    wreg      void 
 12021 ;; Registers used:
 12022 ;;		wreg, status,2
 12023 ;; Tracked objects:
 12024 ;;		On entry : 0/0
 12025 ;;		On exit  : 0/0
 12026 ;;		Unchanged: 0/0
 12027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12028 ;;      Params:         0       0       0       0
 12029 ;;      Locals:         0       0       0       0
 12030 ;;      Temps:          0       0       0       0
 12031 ;;      Totals:         0       0       0       0
 12032 ;;Total ram usage:        0 bytes
 12033 ;; Hardware stack levels used:    1
 12034 ;; Hardware stack levels required when called:    7
 12035 ;; This function calls:
 12036 ;;		Nothing
 12037 ;; This function is called by:
 12038 ;;		_CAN_Init
 12039 ;; This function uses a non-reentrant model
 12040 ;;
 12041                           
 12042                           	psect	text48
 12043  003BFC                     __ptext48:
 12044                           	opt stack 0
 12045  003BFC                     _InitPins:
 12046                           	opt stack 20
 12047                           
 12048                           ;CAN_RX_HW.c: 158: PORTB = 0x00;
 12049                           
 12050                           ;incstack = 0
 12051  003BFC  0E00               	movlw	0
 12052  003BFE  6E81               	movwf	3969,c	;volatile
 12053                           
 12054                           ;CAN_RX_HW.c: 159: LATB = 0x00;
 12055  003C00  0E00               	movlw	0
 12056  003C02  6E8A               	movwf	3978,c	;volatile
 12057                           
 12058                           ;CAN_RX_HW.c: 160: TRISBbits.TRISB2 = 0;
 12059  003C04  9493               	bcf	3987,2,c	;volatile
 12060                           
 12061                           ;CAN_RX_HW.c: 161: TRISBbits.TRISB3 = 1;
 12062  003C06  8693               	bsf	3987,3,c	;volatile
 12063                           
 12064                           ;CAN_RX_HW.c: 164: PORTA = 0x00;
 12065  003C08  0E00               	movlw	0
 12066  003C0A  6E80               	movwf	3968,c	;volatile
 12067                           
 12068                           ;CAN_RX_HW.c: 165: LATA = 0x00;
 12069  003C0C  0E00               	movlw	0
 12070  003C0E  6E89               	movwf	3977,c	;volatile
 12071                           
 12072                           ;CAN_RX_HW.c: 166: TRISA = 0x00;
 12073  003C10  0E00               	movlw	0
 12074  003C12  6E92               	movwf	3986,c	;volatile
 12075  003C14  0012               	return		;funcret
 12076  003C16                     __end_of_InitPins:
 12077                           	opt stack 0
 12078                           tosu	equ	0xFFF
 12079                           tosh	equ	0xFFE
 12080                           tosl	equ	0xFFD
 12081                           pclath	equ	0xFFA
 12082                           tblptru	equ	0xFF8
 12083                           tblptrh	equ	0xFF7
 12084                           tblptrl	equ	0xFF6
 12085                           tablat	equ	0xFF5
 12086                           prodh	equ	0xFF4
 12087                           prodl	equ	0xFF3
 12088                           intcon	equ	0xFF2
 12089                           postinc0	equ	0xFEE
 12090                           wreg	equ	0xFE8
 12091                           indf1	equ	0xFE7
 12092                           postinc1	equ	0xFE6
 12093                           postdec1	equ	0xFE5
 12094                           fsr1h	equ	0xFE2
 12095                           fsr1l	equ	0xFE1
 12096                           indf2	equ	0xFDF
 12097                           postinc2	equ	0xFDE
 12098                           postdec2	equ	0xFDD
 12099                           plusw2	equ	0xFDB
 12100                           fsr2h	equ	0xFDA
 12101                           fsr2l	equ	0xFD9
 12102                           status	equ	0xFD8
 12103                           
 12104 ;; *************** function _InitCanHardware *****************
 12105 ;; Defined at:
 12106 ;;		line 95 in file "CAN_RX_HW.c"
 12107 ;; Parameters:    Size  Location     Type
 12108 ;;		None
 12109 ;; Auto vars:     Size  Location     Type
 12110 ;;		None
 12111 ;; Return value:  Size  Location     Type
 12112 ;;                  1    wreg      void 
 12113 ;; Registers used:
 12114 ;;		wreg, status,2
 12115 ;; Tracked objects:
 12116 ;;		On entry : 0/0
 12117 ;;		On exit  : 0/0
 12118 ;;		Unchanged: 0/0
 12119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12120 ;;      Params:         0       0       0       0
 12121 ;;      Locals:         0       0       0       0
 12122 ;;      Temps:          0       0       0       0
 12123 ;;      Totals:         0       0       0       0
 12124 ;;Total ram usage:        0 bytes
 12125 ;; Hardware stack levels used:    1
 12126 ;; Hardware stack levels required when called:    7
 12127 ;; This function calls:
 12128 ;;		Nothing
 12129 ;; This function is called by:
 12130 ;;		_CAN_Init
 12131 ;; This function uses a non-reentrant model
 12132 ;;
 12133                           
 12134                           	psect	text49
 12135  0034F0                     __ptext49:
 12136                           	opt stack 0
 12137  0034F0                     _InitCanHardware:
 12138                           	opt stack 20
 12139                           
 12140                           ;CAN_RX_HW.c: 99: CANCON = 0x80;
 12141                           
 12142                           ;incstack = 0
 12143  0034F0  0E80               	movlw	128
 12144  0034F2  6E6F               	movwf	3951,c	;volatile
 12145  0034F4                     l609:
 12146  0034F4  AE6E               	btfss	3950,7,c	;volatile
 12147  0034F6  D7FE               	goto	l609
 12148                           
 12149                           ;CAN_RX_HW.c: 102: CIOCON = 0x20;
 12150  0034F8  0E20               	movlw	32
 12151  0034FA  6E73               	movwf	3955,c	;volatile
 12152                           
 12153                           ;CAN_RX_HW.c: 105: BRGCON2bits.SEG2PHTS = 1;
 12154  0034FC  8E71               	bsf	3953,7,c	;volatile
 12155                           
 12156                           ;CAN_RX_HW.c: 107: BRGCON1bits.BRP0 = 1;
 12157  0034FE  8070               	bsf	3952,0,c	;volatile
 12158                           
 12159                           ;CAN_RX_HW.c: 108: BRGCON1bits.BRP1 = 0;
 12160  003500  9270               	bcf	3952,1,c	;volatile
 12161                           
 12162                           ;CAN_RX_HW.c: 109: BRGCON2bits.PRSEG0 = 0;
 12163  003502  9071               	bcf	3953,0,c	;volatile
 12164                           
 12165                           ;CAN_RX_HW.c: 110: BRGCON2bits.PRSEG1 = 1;
 12166  003504  8271               	bsf	3953,1,c	;volatile
 12167                           
 12168                           ;CAN_RX_HW.c: 111: BRGCON2bits.PRSEG2 = 1;
 12169  003506  8471               	bsf	3953,2,c	;volatile
 12170                           
 12171                           ;CAN_RX_HW.c: 112: BRGCON2bits.SEG1PH0 = 1;
 12172  003508  8671               	bsf	3953,3,c	;volatile
 12173                           
 12174                           ;CAN_RX_HW.c: 113: BRGCON2bits.SEG1PH1 = 0;
 12175  00350A  9871               	bcf	3953,4,c	;volatile
 12176                           
 12177                           ;CAN_RX_HW.c: 114: BRGCON2bits.SEG1PH2 = 1;
 12178  00350C  8A71               	bsf	3953,5,c	;volatile
 12179                           
 12180                           ;CAN_RX_HW.c: 115: BRGCON3bits.SEG2PH0 = 1;
 12181  00350E  8072               	bsf	3954,0,c	;volatile
 12182                           
 12183                           ;CAN_RX_HW.c: 116: BRGCON1bits.SJW0 = 1;
 12184  003510  8C70               	bsf	3952,6,c	;volatile
 12185                           
 12186                           ;CAN_RX_HW.c: 120: RXB0CONbits.RXB0DBEN = 0;
 12187  003512  9460               	bcf	3936,2,c	;volatile
 12188                           
 12189                           ;CAN_RX_HW.c: 121: RXB0CONbits.RXM0 = 0;
 12190  003514  9A60               	bcf	3936,5,c	;volatile
 12191                           
 12192                           ;CAN_RX_HW.c: 122: RXB0CONbits.RXM1 = 0;
 12193  003516  9C60               	bcf	3936,6,c	;volatile
 12194                           
 12195                           ;CAN_RX_HW.c: 123: RXF0SIDH = 0x00;
 12196  003518  0E00               	movlw	0
 12197  00351A  010F               	movlb	15	; () banked
 12198  00351C  6F00               	movwf	0,b	;volatile
 12199                           
 12200                           ;CAN_RX_HW.c: 124: RXF0SIDL = 0x08;
 12201  00351E  0E08               	movlw	8
 12202  003520  010F               	movlb	15	; () banked
 12203  003522  6F01               	movwf	1,b	;volatile
 12204                           
 12205                           ;CAN_RX_HW.c: 125: RXF0EIDH = 0x00;
 12206  003524  0E00               	movlw	0
 12207  003526  010F               	movlb	15	; () banked
 12208  003528  6F02               	movwf	2,b	;volatile
 12209                           
 12210                           ;CAN_RX_HW.c: 126: RXF0EIDL = 0x01;
 12211  00352A  0E01               	movlw	1
 12212  00352C  010F               	movlb	15	; () banked
 12213  00352E  6F03               	movwf	3,b	;volatile
 12214                           
 12215                           ;CAN_RX_HW.c: 128: RXM0SIDH = 0x00;
 12216  003530  0E00               	movlw	0
 12217  003532  010F               	movlb	15	; () banked
 12218  003534  6F18               	movwf	24,b	;volatile
 12219                           
 12220                           ;CAN_RX_HW.c: 129: RXM0SIDL = 0x00;
 12221  003536  0E00               	movlw	0
 12222  003538  010F               	movlb	15	; () banked
 12223  00353A  6F19               	movwf	25,b	;volatile
 12224                           
 12225                           ;CAN_RX_HW.c: 130: RXM0EIDH = 0x00;
 12226  00353C  0E00               	movlw	0
 12227  00353E  010F               	movlb	15	; () banked
 12228  003540  6F1A               	movwf	26,b	;volatile
 12229                           
 12230                           ;CAN_RX_HW.c: 131: RXM0EIDL = 0x01;
 12231  003542  0E01               	movlw	1
 12232  003544  010F               	movlb	15	; () banked
 12233  003546  6F1B               	movwf	27,b	;volatile
 12234                           
 12235                           ;CAN_RX_HW.c: 135: ECANCON = 0x00;
 12236  003548  0E00               	movlw	0
 12237  00354A  6E77               	movwf	3959,c	;volatile
 12238                           
 12239                           ;CAN_RX_HW.c: 136: CANCON = 0b00010000;
 12240  00354C  0E10               	movlw	16
 12241  00354E  6E6F               	movwf	3951,c	;volatile
 12242  003550                     l612:
 12243  003550  BE6E               	btfsc	3950,7,c	;volatile
 12244  003552  D7FE               	goto	l612
 12245                           
 12246                           ;CAN_RX_HW.c: 140: RXB0IE = 1;
 12247  003554  80A3               	bsf	4003,0,c	;volatile
 12248                           
 12249                           ;CAN_RX_HW.c: 141: ERRIE = 1;
 12250  003556  8AA3               	bsf	4003,5,c	;volatile
 12251                           
 12252                           ;CAN_RX_HW.c: 142: IRXIE = 1;
 12253  003558  8EA3               	bsf	4003,7,c	;volatile
 12254                           
 12255                           ;CAN_RX_HW.c: 146: RXB0IF = 0;
 12256  00355A  90A4               	bcf	4004,0,c	;volatile
 12257                           
 12258                           ;CAN_RX_HW.c: 147: ERRIF = 0;
 12259  00355C  9AA4               	bcf	4004,5,c	;volatile
 12260                           
 12261                           ;CAN_RX_HW.c: 148: IRXIF = 0;
 12262  00355E  9EA4               	bcf	4004,7,c	;volatile
 12263                           
 12264                           ;CAN_RX_HW.c: 149: TXB0IE = 1;
 12265  003560  84A3               	bsf	4003,2,c	;volatile
 12266                           
 12267                           ;CAN_RX_HW.c: 150: TXB0IF = 0;
 12268  003562  94A4               	bcf	4004,2,c	;volatile
 12269                           
 12270                           ;CAN_RX_HW.c: 151: TXB0CONbits.TXREQ = 0;
 12271  003564  010F               	movlb	15	; () banked
 12272  003566  9740               	bcf	64,3,b	;volatile
 12273                           
 12274                           ;CAN_RX_HW.c: 152: RXB0CONbits.RXFUL = 0;
 12275  003568  9E60               	bcf	3936,7,c	;volatile
 12276                           
 12277                           ; BSR set to: 15
 12278  00356A  0012               	return		;funcret
 12279  00356C                     __end_of_InitCanHardware:
 12280                           	opt stack 0
 12281                           tosu	equ	0xFFF
 12282                           tosh	equ	0xFFE
 12283                           tosl	equ	0xFFD
 12284                           pclath	equ	0xFFA
 12285                           tblptru	equ	0xFF8
 12286                           tblptrh	equ	0xFF7
 12287                           tblptrl	equ	0xFF6
 12288                           tablat	equ	0xFF5
 12289                           prodh	equ	0xFF4
 12290                           prodl	equ	0xFF3
 12291                           intcon	equ	0xFF2
 12292                           postinc0	equ	0xFEE
 12293                           wreg	equ	0xFE8
 12294                           indf1	equ	0xFE7
 12295                           postinc1	equ	0xFE6
 12296                           postdec1	equ	0xFE5
 12297                           fsr1h	equ	0xFE2
 12298                           fsr1l	equ	0xFE1
 12299                           indf2	equ	0xFDF
 12300                           postinc2	equ	0xFDE
 12301                           postdec2	equ	0xFDD
 12302                           plusw2	equ	0xFDB
 12303                           fsr2h	equ	0xFDA
 12304                           fsr2l	equ	0xFD9
 12305                           status	equ	0xFD8
 12306                           
 12307 ;; *************** function _ES_Timer_Init *****************
 12308 ;; Defined at:
 12309 ;;		line 130 in file "ES_Timers.c"
 12310 ;; Parameters:    Size  Location     Type
 12311 ;;  Rate            2    2[BANK0 ] enum E15423
 12312 ;; Auto vars:     Size  Location     Type
 12313 ;;		None
 12314 ;; Return value:  Size  Location     Type
 12315 ;;                  1    wreg      void 
 12316 ;; Registers used:
 12317 ;;		wreg, status,2, cstack
 12318 ;; Tracked objects:
 12319 ;;		On entry : 0/0
 12320 ;;		On exit  : 0/0
 12321 ;;		Unchanged: 0/0
 12322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12323 ;;      Params:         0       2       0       0
 12324 ;;      Locals:         0       0       0       0
 12325 ;;      Temps:          0       0       0       0
 12326 ;;      Totals:         0       2       0       0
 12327 ;;Total ram usage:        2 bytes
 12328 ;; Hardware stack levels used:    1
 12329 ;; Hardware stack levels required when called:    8
 12330 ;; This function calls:
 12331 ;;		__HW_Timer_Init
 12332 ;; This function is called by:
 12333 ;;		_ES_Initialize
 12334 ;; This function uses a non-reentrant model
 12335 ;;
 12336                           
 12337                           	psect	text50
 12338  003C84                     __ptext50:
 12339                           	opt stack 0
 12340  003C84                     _ES_Timer_Init:
 12341                           	opt stack 21
 12342                           
 12343                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
 12344                           
 12345                           ; BSR set to: 15
 12346                           ;incstack = 0
 12347  003C84  C062  F060         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
 12348  003C88  C063  F061         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
 12349  003C8C  ECAB  F01D         	call	__HW_Timer_Init	;wreg free
 12350  003C90  0012               	return		;funcret
 12351  003C92                     __end_of_ES_Timer_Init:
 12352                           	opt stack 0
 12353                           tosu	equ	0xFFF
 12354                           tosh	equ	0xFFE
 12355                           tosl	equ	0xFFD
 12356                           pclath	equ	0xFFA
 12357                           tblptru	equ	0xFF8
 12358                           tblptrh	equ	0xFF7
 12359                           tblptrl	equ	0xFF6
 12360                           tablat	equ	0xFF5
 12361                           prodh	equ	0xFF4
 12362                           prodl	equ	0xFF3
 12363                           intcon	equ	0xFF2
 12364                           postinc0	equ	0xFEE
 12365                           wreg	equ	0xFE8
 12366                           indf1	equ	0xFE7
 12367                           postinc1	equ	0xFE6
 12368                           postdec1	equ	0xFE5
 12369                           fsr1h	equ	0xFE2
 12370                           fsr1l	equ	0xFE1
 12371                           indf2	equ	0xFDF
 12372                           postinc2	equ	0xFDE
 12373                           postdec2	equ	0xFDD
 12374                           plusw2	equ	0xFDB
 12375                           fsr2h	equ	0xFDA
 12376                           fsr2l	equ	0xFD9
 12377                           status	equ	0xFD8
 12378                           
 12379 ;; *************** function __HW_Timer_Init *****************
 12380 ;; Defined at:
 12381 ;;		line 72 in file "ES_Port.c"
 12382 ;; Parameters:    Size  Location     Type
 12383 ;;  Rate            2    0[BANK0 ] enum E15412
 12384 ;; Auto vars:     Size  Location     Type
 12385 ;;		None
 12386 ;; Return value:  Size  Location     Type
 12387 ;;                  1    wreg      void 
 12388 ;; Registers used:
 12389 ;;		wreg, status,2
 12390 ;; Tracked objects:
 12391 ;;		On entry : 0/0
 12392 ;;		On exit  : 0/0
 12393 ;;		Unchanged: 0/0
 12394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12395 ;;      Params:         0       2       0       0
 12396 ;;      Locals:         0       0       0       0
 12397 ;;      Temps:          0       0       0       0
 12398 ;;      Totals:         0       2       0       0
 12399 ;;Total ram usage:        2 bytes
 12400 ;; Hardware stack levels used:    1
 12401 ;; Hardware stack levels required when called:    7
 12402 ;; This function calls:
 12403 ;;		Nothing
 12404 ;; This function is called by:
 12405 ;;		_ES_Timer_Init
 12406 ;; This function uses a non-reentrant model
 12407 ;;
 12408                           
 12409                           	psect	text51
 12410  003B56                     __ptext51:
 12411                           	opt stack 0
 12412  003B56                     __HW_Timer_Init:
 12413                           	opt stack 21
 12414                           
 12415                           ;ES_Port.c: 80: PIE1 = 0b00000100;
 12416                           
 12417                           ;incstack = 0
 12418  003B56  0E04               	movlw	4
 12419  003B58  6E9D               	movwf	3997,c	;volatile
 12420                           
 12421                           ;ES_Port.c: 85: INTCON = 0b01000000;
 12422  003B5A  0E40               	movlw	64
 12423  003B5C  6EF2               	movwf	intcon,c	;volatile
 12424                           
 12425                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
 12426  003B5E  0E0A               	movlw	10
 12427  003B60  6EBD               	movwf	4029,c	;volatile
 12428                           
 12429                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
 12430  003B62  0E01               	movlw	1
 12431  003B64  6EBE               	movwf	4030,c	;volatile
 12432                           
 12433                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
 12434  003B66  0E00               	movlw	0
 12435  003B68  6EBF               	movwf	4031,c	;volatile
 12436                           
 12437                           ;ES_Port.c: 107: T1CON = 0b00100001;
 12438  003B6A  0E21               	movlw	33
 12439  003B6C  6ECD               	movwf	4045,c	;volatile
 12440                           
 12441                           ;ES_Port.c: 108: PEIE = 1;
 12442  003B6E  8CF2               	bsf	intcon,6,c	;volatile
 12443                           
 12444                           ;ES_Port.c: 109: {GIE = 1;};
 12445  003B70  8EF2               	bsf	intcon,7,c	;volatile
 12446  003B72  0012               	return		;funcret
 12447  003B74                     __end_of__HW_Timer_Init:
 12448                           	opt stack 0
 12449                           tosu	equ	0xFFF
 12450                           tosh	equ	0xFFE
 12451                           tosl	equ	0xFFD
 12452                           pclath	equ	0xFFA
 12453                           tblptru	equ	0xFF8
 12454                           tblptrh	equ	0xFF7
 12455                           tblptrl	equ	0xFF6
 12456                           tablat	equ	0xFF5
 12457                           prodh	equ	0xFF4
 12458                           prodl	equ	0xFF3
 12459                           intcon	equ	0xFF2
 12460                           postinc0	equ	0xFEE
 12461                           wreg	equ	0xFE8
 12462                           indf1	equ	0xFE7
 12463                           postinc1	equ	0xFE6
 12464                           postdec1	equ	0xFE5
 12465                           fsr1h	equ	0xFE2
 12466                           fsr1l	equ	0xFE1
 12467                           indf2	equ	0xFDF
 12468                           postinc2	equ	0xFDE
 12469                           postdec2	equ	0xFDD
 12470                           plusw2	equ	0xFDB
 12471                           fsr2h	equ	0xFDA
 12472                           fsr2l	equ	0xFD9
 12473                           status	equ	0xFD8
 12474                           
 12475 ;; *************** function _ES_InitQueue *****************
 12476 ;; Defined at:
 12477 ;;		line 58 in file "ES_Queue.c"
 12478 ;; Parameters:    Size  Location     Type
 12479 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
 12480 ;;		 -> Queue1(12), Queue0(12), 
 12481 ;;  BlockSize       1    2[BANK0 ] unsigned char 
 12482 ;; Auto vars:     Size  Location     Type
 12483 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
 12484 ;;		 -> Queue1(12), Queue0(12), 
 12485 ;; Return value:  Size  Location     Type
 12486 ;;                  1    wreg      unsigned char 
 12487 ;; Registers used:
 12488 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12489 ;; Tracked objects:
 12490 ;;		On entry : 0/0
 12491 ;;		On exit  : 0/0
 12492 ;;		Unchanged: 0/0
 12493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12494 ;;      Params:         0       3       0       0
 12495 ;;      Locals:         0       2       0       0
 12496 ;;      Temps:          0       0       0       0
 12497 ;;      Totals:         0       5       0       0
 12498 ;;Total ram usage:        5 bytes
 12499 ;; Hardware stack levels used:    1
 12500 ;; Hardware stack levels required when called:    7
 12501 ;; This function calls:
 12502 ;;		Nothing
 12503 ;; This function is called by:
 12504 ;;		_ES_Initialize
 12505 ;; This function uses a non-reentrant model
 12506 ;;
 12507                           
 12508                           	psect	text52
 12509  00395C                     __ptext52:
 12510                           	opt stack 0
 12511  00395C                     _ES_InitQueue:
 12512                           	opt stack 22
 12513                           
 12514                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
 12515                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
 12516                           
 12517                           ;incstack = 0
 12518  00395C  C060  F063         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
 12519  003960  C061  F064         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
 12520                           
 12521                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
 12522  003964  0100               	movlb	0	; () banked
 12523  003966  0562               	decf	ES_InitQueue@BlockSize& (0+255),w,b
 12524  003968  C063  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
 12525  00396C  C064  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
 12526  003970  6EDF               	movwf	indf2,c
 12527                           
 12528                           ; BSR set to: 0
 12529                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
 12530  003972  0100               	movlb	0	; () banked
 12531  003974  EE20 F001          	lfsr	2,1
 12532  003978  5163               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
 12533  00397A  26D9               	addwf	fsr2l,f,c
 12534  00397C  5164               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
 12535  00397E  22DA               	addwfc	fsr2h,f,c
 12536  003980  0E00               	movlw	0
 12537  003982  6EDF               	movwf	indf2,c
 12538                           
 12539                           ; BSR set to: 0
 12540                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
 12541  003984  0100               	movlb	0	; () banked
 12542  003986  EE20 F002          	lfsr	2,2
 12543  00398A  5163               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
 12544  00398C  26D9               	addwf	fsr2l,f,c
 12545  00398E  5164               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
 12546  003990  22DA               	addwfc	fsr2h,f,c
 12547  003992  0E00               	movlw	0
 12548  003994  6EDF               	movwf	indf2,c
 12549  003996  0012               	return	
 12550  003998                     __end_of_ES_InitQueue:
 12551                           	opt stack 0
 12552                           tosu	equ	0xFFF
 12553                           tosh	equ	0xFFE
 12554                           tosl	equ	0xFFD
 12555                           pclath	equ	0xFFA
 12556                           tblptru	equ	0xFF8
 12557                           tblptrh	equ	0xFF7
 12558                           tblptrl	equ	0xFF6
 12559                           tablat	equ	0xFF5
 12560                           prodh	equ	0xFF4
 12561                           prodl	equ	0xFF3
 12562                           intcon	equ	0xFF2
 12563                           postinc0	equ	0xFEE
 12564                           wreg	equ	0xFE8
 12565                           indf1	equ	0xFE7
 12566                           postinc1	equ	0xFE6
 12567                           postdec1	equ	0xFE5
 12568                           fsr1h	equ	0xFE2
 12569                           fsr1l	equ	0xFE1
 12570                           indf2	equ	0xFDF
 12571                           postinc2	equ	0xFDE
 12572                           postdec2	equ	0xFDD
 12573                           plusw2	equ	0xFDB
 12574                           fsr2h	equ	0xFDA
 12575                           fsr2l	equ	0xFD9
 12576                           status	equ	0xFD8
 12577                           
 12578 ;; *************** function _ISR *****************
 12579 ;; Defined at:
 12580 ;;		line 112 in file "ES_Port.c"
 12581 ;; Parameters:    Size  Location     Type
 12582 ;;		None
 12583 ;; Auto vars:     Size  Location     Type
 12584 ;;		None
 12585 ;; Return value:  Size  Location     Type
 12586 ;;                  1    wreg      void 
 12587 ;; Registers used:
 12588 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12589 ;; Tracked objects:
 12590 ;;		On entry : 0/0
 12591 ;;		On exit  : 0/0
 12592 ;;		Unchanged: 0/0
 12593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12594 ;;      Params:         0       0       0       0
 12595 ;;      Locals:         0       0       0       0
 12596 ;;      Temps:         16       0       0       0
 12597 ;;      Totals:        16       0       0       0
 12598 ;;Total ram usage:       16 bytes
 12599 ;; Hardware stack levels used:    1
 12600 ;; Hardware stack levels required when called:    6
 12601 ;; This function calls:
 12602 ;;		_CAN_BusErrorResponse
 12603 ;;		_CAN_ErrorResponse
 12604 ;;		_CAN_RCVResponse
 12605 ;;		_CAN_XmitResponse
 12606 ;;		_SPI32_EOTResponse
 12607 ;; This function is called by:
 12608 ;;		Interrupt level 2
 12609 ;; This function uses a non-reentrant model
 12610 ;;
 12611                           
 12612                           	psect	intcode
 12613  000008                     __pintcode:
 12614                           	opt stack 0
 12615  000008                     _ISR:
 12616                           	opt stack 15
 12617                           
 12618                           ; BSR set to: 0
 12619                           ;incstack = 0
 12620  000008  8254               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12621  00000A  CFFA F028          	movff	pclath,??_ISR+2
 12622  00000E  CFFB F029          	movff	pclatu,??_ISR+3
 12623  000012  EDF1  F016         	call	int_func,f	;refresh shadow registers
 12624                           tosu	equ	0xFFF
 12625                           tosh	equ	0xFFE
 12626                           tosl	equ	0xFFD
 12627                           pclatu	equ	0xFFB
 12628                           pclath	equ	0xFFA
 12629                           tblptru	equ	0xFF8
 12630                           tblptrh	equ	0xFF7
 12631                           tblptrl	equ	0xFF6
 12632                           tablat	equ	0xFF5
 12633                           prodh	equ	0xFF4
 12634                           prodl	equ	0xFF3
 12635                           intcon	equ	0xFF2
 12636                           postinc0	equ	0xFEE
 12637                           wreg	equ	0xFE8
 12638                           indf1	equ	0xFE7
 12639                           postinc1	equ	0xFE6
 12640                           postdec1	equ	0xFE5
 12641                           fsr1h	equ	0xFE2
 12642                           fsr1l	equ	0xFE1
 12643                           indf2	equ	0xFDF
 12644                           postinc2	equ	0xFDE
 12645                           postdec2	equ	0xFDD
 12646                           plusw2	equ	0xFDB
 12647                           fsr2h	equ	0xFDA
 12648                           fsr2l	equ	0xFD9
 12649                           status	equ	0xFD8
 12650                           
 12651                           	psect	intcode_body
 12652  002DE2                     __pintcode_body:
 12653                           	opt stack 15
 12654  002DE2                     int_func:
 12655                           	opt stack 15
 12656  002DE2  0006               	pop		; remove dummy address from shadow register refresh
 12657  002DE4  CFE9 F02A          	movff	fsr0l,??_ISR+4
 12658  002DE8  CFEA F02B          	movff	fsr0h,??_ISR+5
 12659  002DEC  CFE1 F02C          	movff	fsr1l,??_ISR+6
 12660  002DF0  CFE2 F02D          	movff	fsr1h,??_ISR+7
 12661  002DF4  CFD9 F02E          	movff	fsr2l,??_ISR+8
 12662  002DF8  CFDA F02F          	movff	fsr2h,??_ISR+9
 12663  002DFC  CFF3 F030          	movff	prodl,??_ISR+10
 12664  002E00  CFF4 F031          	movff	prodh,??_ISR+11
 12665  002E04  CFF6 F032          	movff	tblptrl,??_ISR+12
 12666  002E08  CFF7 F033          	movff	tblptrh,??_ISR+13
 12667  002E0C  CFF8 F034          	movff	tblptru,??_ISR+14
 12668  002E10  CFF5 F035          	movff	tablat,??_ISR+15
 12669                           
 12670                           ;ES_Port.c: 115: static unsigned int LastTime;
 12671                           ;ES_Port.c: 116: static unsigned int NextTime;
 12672                           ;ES_Port.c: 118: if (CCP1IF == 1)
 12673  002E14  A49E               	btfss	3998,2,c	;volatile
 12674  002E16  D015               	goto	i2l4321
 12675                           
 12676                           ;ES_Port.c: 119: {
 12677                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
 12678  002E18  50BF               	movf	4031,w,c	;volatile
 12679  002E1A  6E26               	movwf	??_ISR& (0+255),c
 12680  002E1C  50BE               	movf	4030,w,c	;volatile
 12681  002E1E  6E3A               	movwf	ISR@LastTime,c
 12682  002E20  C026  F03B         	movff	??_ISR,ISR@LastTime+1
 12683                           
 12684                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
 12685  002E24  0E20               	movlw	32
 12686  002E26  243A               	addwf	ISR@LastTime,w,c
 12687  002E28  6E3C               	movwf	ISR@NextTime,c
 12688  002E2A  0E4E               	movlw	78
 12689  002E2C  203B               	addwfc	ISR@LastTime+1,w,c
 12690  002E2E  6E3D               	movwf	ISR@NextTime+1,c
 12691                           
 12692                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
 12693  002E30  503D               	movf	ISR@NextTime+1,w,c
 12694  002E32  6EBF               	movwf	4031,c	;volatile
 12695                           
 12696                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
 12697  002E34  C03C  FFBE         	movff	ISR@NextTime,4030	;volatile
 12698                           
 12699                           ;ES_Port.c: 124: CCP1IF = 0;
 12700  002E38  949E               	bcf	3998,2,c	;volatile
 12701                           
 12702                           ;ES_Port.c: 125: TickCount++;
 12703  002E3A  0100               	movlb	0	; () banked
 12704  002E3C  2BE8               	incf	_TickCount& (0+255),f,b	;volatile
 12705                           
 12706                           ; BSR set to: 0
 12707                           ;ES_Port.c: 126: SysTickCounter++;
 12708  002E3E  4A3E               	infsnz	_SysTickCounter,f,c	;volatile
 12709  002E40  2A3F               	incf	_SysTickCounter+1,f,c	;volatile
 12710  002E42                     i2l4321:
 12711                           
 12712                           ;ES_Port.c: 127: }
 12713                           ;ES_Port.c: 128: if (SSPIF == 1)
 12714  002E42  A69E               	btfss	3998,3,c	;volatile
 12715  002E44  D003               	goto	i2l4327
 12716                           
 12717                           ;ES_Port.c: 129: {
 12718                           ;ES_Port.c: 130: SSPIF = 0;
 12719  002E46  969E               	bcf	3998,3,c	;volatile
 12720                           
 12721                           ;ES_Port.c: 131: SPI32_EOTResponse();
 12722  002E48  ECE9  F01C         	call	_SPI32_EOTResponse	;wreg free
 12723  002E4C                     i2l4327:
 12724                           
 12725                           ;ES_Port.c: 132: }
 12726                           ;ES_Port.c: 133: if (TXB0IF == 1)
 12727  002E4C  A4A4               	btfss	4004,2,c	;volatile
 12728  002E4E  D003               	goto	i2l4333
 12729                           
 12730                           ;ES_Port.c: 134: {
 12731                           ;ES_Port.c: 135: TXB0IF = 0;
 12732  002E50  94A4               	bcf	4004,2,c	;volatile
 12733                           
 12734                           ;ES_Port.c: 136: CAN_XmitResponse();
 12735  002E52  EC65  F01E         	call	_CAN_XmitResponse	;wreg free
 12736  002E56                     i2l4333:
 12737                           
 12738                           ;ES_Port.c: 137: }
 12739                           ;ES_Port.c: 138: if (RXB0IF == 1) {
 12740  002E56  A0A4               	btfss	4004,0,c	;volatile
 12741  002E58  D003               	goto	i2l4339
 12742                           
 12743                           ;ES_Port.c: 139: RXB0IF = 0;
 12744  002E5A  90A4               	bcf	4004,0,c	;volatile
 12745                           
 12746                           ;ES_Port.c: 140: CAN_RCVResponse();
 12747  002E5C  EC49  F01E         	call	_CAN_RCVResponse	;wreg free
 12748  002E60                     i2l4339:
 12749                           
 12750                           ;ES_Port.c: 141: }
 12751                           ;ES_Port.c: 142: if (ERRIF == 1) {
 12752  002E60  AAA4               	btfss	4004,5,c	;volatile
 12753  002E62  D003               	goto	i2l4345
 12754                           
 12755                           ;ES_Port.c: 143: ERRIF = 0;
 12756  002E64  9AA4               	bcf	4004,5,c	;volatile
 12757                           
 12758                           ;ES_Port.c: 144: CAN_ErrorResponse();
 12759  002E66  EC6A  F01E         	call	_CAN_ErrorResponse	;wreg free
 12760  002E6A                     i2l4345:
 12761                           
 12762                           ;ES_Port.c: 145: }
 12763                           ;ES_Port.c: 146: if (IRXIF == 1) {
 12764  002E6A  AEA4               	btfss	4004,7,c	;volatile
 12765  002E6C  D003               	goto	i2l167
 12766                           
 12767                           ;ES_Port.c: 147: IRXIF = 0;
 12768  002E6E  9EA4               	bcf	4004,7,c	;volatile
 12769                           
 12770                           ;ES_Port.c: 148: CAN_BusErrorResponse();
 12771  002E70  EC6B  F01E         	call	_CAN_BusErrorResponse	;wreg free
 12772  002E74                     i2l167:
 12773  002E74  C035  FFF5         	movff	??_ISR+15,tablat
 12774  002E78  C034  FFF8         	movff	??_ISR+14,tblptru
 12775  002E7C  C033  FFF7         	movff	??_ISR+13,tblptrh
 12776  002E80  C032  FFF6         	movff	??_ISR+12,tblptrl
 12777  002E84  C031  FFF4         	movff	??_ISR+11,prodh
 12778  002E88  C030  FFF3         	movff	??_ISR+10,prodl
 12779  002E8C  C02F  FFDA         	movff	??_ISR+9,fsr2h
 12780  002E90  C02E  FFD9         	movff	??_ISR+8,fsr2l
 12781  002E94  C02D  FFE2         	movff	??_ISR+7,fsr1h
 12782  002E98  C02C  FFE1         	movff	??_ISR+6,fsr1l
 12783  002E9C  C02B  FFEA         	movff	??_ISR+5,fsr0h
 12784  002EA0  C02A  FFE9         	movff	??_ISR+4,fsr0l
 12785  002EA4  C029  FFFB         	movff	??_ISR+3,pclatu
 12786  002EA8  C028  FFFA         	movff	??_ISR+2,pclath
 12787  002EAC  9254               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12788  002EAE  0011               	retfie		f
 12789  002EB0                     __end_of_ISR:
 12790                           	opt stack 0
 12791                           tosu	equ	0xFFF
 12792                           tosh	equ	0xFFE
 12793                           tosl	equ	0xFFD
 12794                           pclatu	equ	0xFFB
 12795                           pclath	equ	0xFFA
 12796                           tblptru	equ	0xFF8
 12797                           tblptrh	equ	0xFF7
 12798                           tblptrl	equ	0xFF6
 12799                           tablat	equ	0xFF5
 12800                           prodh	equ	0xFF4
 12801                           prodl	equ	0xFF3
 12802                           intcon	equ	0xFF2
 12803                           postinc0	equ	0xFEE
 12804                           fsr0h	equ	0xFEA
 12805                           fsr0l	equ	0xFE9
 12806                           wreg	equ	0xFE8
 12807                           indf1	equ	0xFE7
 12808                           postinc1	equ	0xFE6
 12809                           postdec1	equ	0xFE5
 12810                           fsr1h	equ	0xFE2
 12811                           fsr1l	equ	0xFE1
 12812                           indf2	equ	0xFDF
 12813                           postinc2	equ	0xFDE
 12814                           postdec2	equ	0xFDD
 12815                           plusw2	equ	0xFDB
 12816                           fsr2h	equ	0xFDA
 12817                           fsr2l	equ	0xFD9
 12818                           status	equ	0xFD8
 12819                           
 12820 ;; *************** function _SPI32_EOTResponse *****************
 12821 ;; Defined at:
 12822 ;;		line 160 in file "SPI32_HW.c"
 12823 ;; Parameters:    Size  Location     Type
 12824 ;;		None
 12825 ;; Auto vars:     Size  Location     Type
 12826 ;;  EOTevent        3   32[COMRAM] struct ES_Event_t
 12827 ;; Return value:  Size  Location     Type
 12828 ;;                  1    wreg      void 
 12829 ;; Registers used:
 12830 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12831 ;; Tracked objects:
 12832 ;;		On entry : 0/0
 12833 ;;		On exit  : 0/0
 12834 ;;		Unchanged: 0/0
 12835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12836 ;;      Params:         0       0       0       0
 12837 ;;      Locals:         3       0       0       0
 12838 ;;      Temps:          0       0       0       0
 12839 ;;      Totals:         3       0       0       0
 12840 ;;Total ram usage:        3 bytes
 12841 ;; Hardware stack levels used:    1
 12842 ;; Hardware stack levels required when called:    4
 12843 ;; This function calls:
 12844 ;;		i2_PostSPI32ControlService
 12845 ;;		i2_SPI32_SendFrame
 12846 ;; This function is called by:
 12847 ;;		_ISR
 12848 ;; This function uses a non-reentrant model
 12849 ;;
 12850                           
 12851                           	psect	text54
 12852  0039D2                     __ptext54:
 12853                           	opt stack 0
 12854  0039D2                     _SPI32_EOTResponse:
 12855                           	opt stack 16
 12856                           
 12857                           ;SPI32_HW.c: 162: if(FrameByte == 0){
 12858                           
 12859                           ;incstack = 0
 12860  0039D2  0100               	movlb	0	; () banked
 12861  0039D4  51F6               	movf	_FrameByte& (0+255),w,b
 12862  0039D6  A4D8               	btfss	status,2,c
 12863  0039D8  D00E               	goto	i2l4219
 12864                           
 12865                           ; BSR set to: 0
 12866                           ;SPI32_HW.c: 164: FrameByte = 4;
 12867  0039DA  0E04               	movlw	4
 12868  0039DC  0100               	movlb	0	; () banked
 12869  0039DE  6FF6               	movwf	_FrameByte& (0+255),b
 12870                           
 12871                           ;SPI32_HW.c: 166: ES_Event EOTevent;
 12872                           ;SPI32_HW.c: 167: EOTevent.EventType = ES_TIMEOUT;
 12873  0039E0  0E03               	movlw	3
 12874  0039E2  6E21               	movwf	SPI32_EOTResponse@EOTevent,c
 12875                           
 12876                           ; BSR set to: 0
 12877                           ;SPI32_HW.c: 168: PostSPI32ControlService(EOTevent);
 12878  0039E4  C021  F01E         	movff	SPI32_EOTResponse@EOTevent,i2PostSPI32ControlService@ThisEvent
 12879  0039E8  C022  F01F         	movff	SPI32_EOTResponse@EOTevent+1,i2PostSPI32ControlService@ThisEvent+1
 12880  0039EC  C023  F020         	movff	SPI32_EOTResponse@EOTevent+2,i2PostSPI32ControlService@ThisEvent+2
 12881  0039F0  EC23  F01E         	call	i2_PostSPI32ControlService	;wreg free
 12882                           
 12883                           ;SPI32_HW.c: 169: }
 12884  0039F4  0012               	return	
 12885  0039F6                     i2l4219:
 12886                           
 12887                           ;SPI32_HW.c: 170: else{
 12888                           ;SPI32_HW.c: 172: SPI32_SendFrame(TransmitFrame);
 12889  0039F6  C036  F001         	movff	_TransmitFrame,i2SPI32_SendFrame@newFrame
 12890  0039FA  C037  F002         	movff	_TransmitFrame+1,i2SPI32_SendFrame@newFrame+1
 12891  0039FE  C038  F003         	movff	_TransmitFrame+2,i2SPI32_SendFrame@newFrame+2
 12892  003A02  C039  F004         	movff	_TransmitFrame+3,i2SPI32_SendFrame@newFrame+3
 12893  003A06  EC46  F01C         	call	i2_SPI32_SendFrame	;wreg free
 12894  003A0A  0012               	return	
 12895  003A0C                     __end_of_SPI32_EOTResponse:
 12896                           	opt stack 0
 12897                           tosu	equ	0xFFF
 12898                           tosh	equ	0xFFE
 12899                           tosl	equ	0xFFD
 12900                           pclatu	equ	0xFFB
 12901                           pclath	equ	0xFFA
 12902                           tblptru	equ	0xFF8
 12903                           tblptrh	equ	0xFF7
 12904                           tblptrl	equ	0xFF6
 12905                           tablat	equ	0xFF5
 12906                           prodh	equ	0xFF4
 12907                           prodl	equ	0xFF3
 12908                           intcon	equ	0xFF2
 12909                           postinc0	equ	0xFEE
 12910                           fsr0h	equ	0xFEA
 12911                           fsr0l	equ	0xFE9
 12912                           wreg	equ	0xFE8
 12913                           indf1	equ	0xFE7
 12914                           postinc1	equ	0xFE6
 12915                           postdec1	equ	0xFE5
 12916                           fsr1h	equ	0xFE2
 12917                           fsr1l	equ	0xFE1
 12918                           indf2	equ	0xFDF
 12919                           postinc2	equ	0xFDE
 12920                           postdec2	equ	0xFDD
 12921                           plusw2	equ	0xFDB
 12922                           fsr2h	equ	0xFDA
 12923                           fsr2l	equ	0xFD9
 12924                           status	equ	0xFD8
 12925                           
 12926 ;; *************** function i2_SPI32_SendFrame *****************
 12927 ;; Defined at:
 12928 ;;		line 89 in file "SPI32_HW.c"
 12929 ;; Parameters:    Size  Location     Type
 12930 ;;  newFrame        4    0[COMRAM] unsigned long 
 12931 ;; Auto vars:     Size  Location     Type
 12932 ;;		None
 12933 ;; Return value:  Size  Location     Type
 12934 ;;                  1    wreg      void 
 12935 ;; Registers used:
 12936 ;;		wreg, status,2, status,0, prodl, prodh
 12937 ;; Tracked objects:
 12938 ;;		On entry : 0/0
 12939 ;;		On exit  : 0/0
 12940 ;;		Unchanged: 0/0
 12941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12942 ;;      Params:         4       0       0       0
 12943 ;;      Locals:         0       0       0       0
 12944 ;;      Temps:          4       0       0       0
 12945 ;;      Totals:         8       0       0       0
 12946 ;;Total ram usage:        8 bytes
 12947 ;; Hardware stack levels used:    1
 12948 ;; This function calls:
 12949 ;;		Nothing
 12950 ;; This function is called by:
 12951 ;;		_SPI32_EOTResponse
 12952 ;; This function uses a non-reentrant model
 12953 ;;
 12954                           
 12955                           	psect	text55
 12956  00388C                     __ptext55:
 12957                           	opt stack 0
 12958  00388C                     i2_SPI32_SendFrame:
 12959                           	opt stack 19
 12960                           
 12961                           ;SPI32_HW.c: 92: if(FrameByte == 4){
 12962                           
 12963                           ;incstack = 0
 12964  00388C  0E04               	movlw	4
 12965  00388E  0100               	movlb	0	; () banked
 12966  003890  19F6               	xorwf	_FrameByte& (0+255),w,b
 12967  003892  A4D8               	btfss	status,2,c
 12968  003894  D008               	goto	i2l4157
 12969                           
 12970                           ; BSR set to: 0
 12971                           ;SPI32_HW.c: 94: TransmitFrame = newFrame;
 12972  003896  C001  F036         	movff	i2SPI32_SendFrame@newFrame,_TransmitFrame
 12973  00389A  C002  F037         	movff	i2SPI32_SendFrame@newFrame+1,_TransmitFrame+1
 12974  00389E  C003  F038         	movff	i2SPI32_SendFrame@newFrame+2,_TransmitFrame+2
 12975  0038A2  C004  F039         	movff	i2SPI32_SendFrame@newFrame+3,_TransmitFrame+3
 12976  0038A6                     i2l4157:
 12977                           
 12978                           ; BSR set to: 0
 12979                           ;SPI32_HW.c: 95: }
 12980                           ;SPI32_HW.c: 97: FrameByte--;
 12981  0038A6  0100               	movlb	0	; () banked
 12982  0038A8  07F6               	decf	_FrameByte& (0+255),f,b
 12983                           
 12984                           ; BSR set to: 0
 12985                           ;SPI32_HW.c: 99: SSPBUF = (uint8_t)(newFrame>>(FrameByte*8));
 12986  0038AA  0100               	movlb	0	; () banked
 12987  0038AC  51F6               	movf	_FrameByte& (0+255),w,b
 12988  0038AE  0D08               	mullw	8
 12989  0038B0  50F3               	movf	prodl,w,c
 12990  0038B2  C001  F005         	movff	i2SPI32_SendFrame@newFrame,??i2_SPI32_SendFrame
 12991  0038B6  C002  F006         	movff	i2SPI32_SendFrame@newFrame+1,??i2_SPI32_SendFrame+1
 12992  0038BA  C003  F007         	movff	i2SPI32_SendFrame@newFrame+2,??i2_SPI32_SendFrame+2
 12993  0038BE  C004  F008         	movff	i2SPI32_SendFrame@newFrame+3,??i2_SPI32_SendFrame+3
 12994  0038C2  2AE8               	incf	wreg,f,c
 12995  0038C4  D005               	goto	i2u305_40
 12996  0038C6                     i2u305_45:
 12997  0038C6  90D8               	bcf	status,0,c
 12998  0038C8  3208               	rrcf	??i2_SPI32_SendFrame+3,f,c
 12999  0038CA  3207               	rrcf	??i2_SPI32_SendFrame+2,f,c
 13000  0038CC  3206               	rrcf	??i2_SPI32_SendFrame+1,f,c
 13001  0038CE  3205               	rrcf	??i2_SPI32_SendFrame,f,c
 13002  0038D0                     i2u305_40:
 13003  0038D0  2EE8               	decfsz	wreg,f,c
 13004  0038D2  D7F9               	goto	i2u305_45
 13005  0038D4  5005               	movf	??i2_SPI32_SendFrame,w,c
 13006  0038D6  6EC9               	movwf	4041,c	;volatile
 13007                           
 13008                           ; BSR set to: 0
 13009  0038D8  0012               	return		;funcret
 13010  0038DA                     __end_ofi2_SPI32_SendFrame:
 13011                           	opt stack 0
 13012                           tosu	equ	0xFFF
 13013                           tosh	equ	0xFFE
 13014                           tosl	equ	0xFFD
 13015                           pclatu	equ	0xFFB
 13016                           pclath	equ	0xFFA
 13017                           tblptru	equ	0xFF8
 13018                           tblptrh	equ	0xFF7
 13019                           tblptrl	equ	0xFF6
 13020                           tablat	equ	0xFF5
 13021                           prodh	equ	0xFF4
 13022                           prodl	equ	0xFF3
 13023                           intcon	equ	0xFF2
 13024                           postinc0	equ	0xFEE
 13025                           fsr0h	equ	0xFEA
 13026                           fsr0l	equ	0xFE9
 13027                           wreg	equ	0xFE8
 13028                           indf1	equ	0xFE7
 13029                           postinc1	equ	0xFE6
 13030                           postdec1	equ	0xFE5
 13031                           fsr1h	equ	0xFE2
 13032                           fsr1l	equ	0xFE1
 13033                           indf2	equ	0xFDF
 13034                           postinc2	equ	0xFDE
 13035                           postdec2	equ	0xFDD
 13036                           plusw2	equ	0xFDB
 13037                           fsr2h	equ	0xFDA
 13038                           fsr2l	equ	0xFD9
 13039                           status	equ	0xFD8
 13040                           
 13041 ;; *************** function i2_PostSPI32ControlService *****************
 13042 ;; Defined at:
 13043 ;;		line 119 in file "SPI32_ControlService.c"
 13044 ;; Parameters:    Size  Location     Type
 13045 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
 13046 ;; Auto vars:     Size  Location     Type
 13047 ;;		None
 13048 ;; Return value:  Size  Location     Type
 13049 ;;                  1    wreg      unsigned char 
 13050 ;; Registers used:
 13051 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13052 ;; Tracked objects:
 13053 ;;		On entry : 0/0
 13054 ;;		On exit  : 0/0
 13055 ;;		Unchanged: 0/0
 13056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13057 ;;      Params:         3       0       0       0
 13058 ;;      Locals:         0       0       0       0
 13059 ;;      Temps:          0       0       0       0
 13060 ;;      Totals:         3       0       0       0
 13061 ;;Total ram usage:        3 bytes
 13062 ;; Hardware stack levels used:    1
 13063 ;; Hardware stack levels required when called:    3
 13064 ;; This function calls:
 13065 ;;		i2_ES_PostToService
 13066 ;; This function is called by:
 13067 ;;		_SPI32_EOTResponse
 13068 ;; This function uses a non-reentrant model
 13069 ;;
 13070                           
 13071                           	psect	text56
 13072  003C46                     __ptext56:
 13073                           	opt stack 0
 13074  003C46                     i2_PostSPI32ControlService:
 13075                           	opt stack 16
 13076                           
 13077                           ;SPI32_ControlService.c: 120: return ES_PostToService( MyPriority, ThisEvent);
 13078                           ;	Return value of i2_PostSPI32ControlService is never used
 13079                           
 13080                           ; BSR set to: 0
 13081                           ;incstack = 0
 13082  003C46  C01E  F018         	movff	i2PostSPI32ControlService@ThisEvent,i2ES_PostToService@TheEvent
 13083  003C4A  C01F  F019         	movff	i2PostSPI32ControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
 13084  003C4E  C020  F01A         	movff	i2PostSPI32ControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
 13085  003C52  0100               	movlb	0	; () banked
 13086  003C54  51E3               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
 13087  003C56  EC65  F01B         	call	i2_ES_PostToService
 13088  003C5A  0012               	return	
 13089  003C5C                     __end_ofi2_PostSPI32ControlService:
 13090                           	opt stack 0
 13091                           tosu	equ	0xFFF
 13092                           tosh	equ	0xFFE
 13093                           tosl	equ	0xFFD
 13094                           pclatu	equ	0xFFB
 13095                           pclath	equ	0xFFA
 13096                           tblptru	equ	0xFF8
 13097                           tblptrh	equ	0xFF7
 13098                           tblptrl	equ	0xFF6
 13099                           tablat	equ	0xFF5
 13100                           prodh	equ	0xFF4
 13101                           prodl	equ	0xFF3
 13102                           intcon	equ	0xFF2
 13103                           postinc0	equ	0xFEE
 13104                           fsr0h	equ	0xFEA
 13105                           fsr0l	equ	0xFE9
 13106                           wreg	equ	0xFE8
 13107                           indf1	equ	0xFE7
 13108                           postinc1	equ	0xFE6
 13109                           postdec1	equ	0xFE5
 13110                           fsr1h	equ	0xFE2
 13111                           fsr1l	equ	0xFE1
 13112                           indf2	equ	0xFDF
 13113                           postinc2	equ	0xFDE
 13114                           postdec2	equ	0xFDD
 13115                           plusw2	equ	0xFDB
 13116                           fsr2h	equ	0xFDA
 13117                           fsr2l	equ	0xFD9
 13118                           status	equ	0xFD8
 13119                           
 13120 ;; *************** function _CAN_XmitResponse *****************
 13121 ;; Defined at:
 13122 ;;		line 66 in file "CAN_RX_HW.c"
 13123 ;; Parameters:    Size  Location     Type
 13124 ;;		None
 13125 ;; Auto vars:     Size  Location     Type
 13126 ;;		None
 13127 ;; Return value:  Size  Location     Type
 13128 ;;                  1    wreg      void 
 13129 ;; Registers used:
 13130 ;;		None
 13131 ;; Tracked objects:
 13132 ;;		On entry : 0/0
 13133 ;;		On exit  : 0/0
 13134 ;;		Unchanged: 0/0
 13135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13136 ;;      Params:         0       0       0       0
 13137 ;;      Locals:         0       0       0       0
 13138 ;;      Temps:          0       0       0       0
 13139 ;;      Totals:         0       0       0       0
 13140 ;;Total ram usage:        0 bytes
 13141 ;; Hardware stack levels used:    1
 13142 ;; This function calls:
 13143 ;;		Nothing
 13144 ;; This function is called by:
 13145 ;;		_ISR
 13146 ;; This function uses a non-reentrant model
 13147 ;;
 13148                           
 13149                           	psect	text57
 13150  003CCA                     __ptext57:
 13151                           	opt stack 0
 13152  003CCA                     _CAN_XmitResponse:
 13153                           	opt stack 20
 13154                           
 13155                           ;CAN_RX_HW.c: 68: TXB0CONbits.TXREQ = 0;
 13156                           
 13157                           ;incstack = 0
 13158  003CCA  010F               	movlb	15	; () banked
 13159  003CCC  9740               	bcf	64,3,b	;volatile
 13160                           
 13161                           ; BSR set to: 15
 13162  003CCE  0012               	return		;funcret
 13163  003CD0                     __end_of_CAN_XmitResponse:
 13164                           	opt stack 0
 13165                           tosu	equ	0xFFF
 13166                           tosh	equ	0xFFE
 13167                           tosl	equ	0xFFD
 13168                           pclatu	equ	0xFFB
 13169                           pclath	equ	0xFFA
 13170                           tblptru	equ	0xFF8
 13171                           tblptrh	equ	0xFF7
 13172                           tblptrl	equ	0xFF6
 13173                           tablat	equ	0xFF5
 13174                           prodh	equ	0xFF4
 13175                           prodl	equ	0xFF3
 13176                           intcon	equ	0xFF2
 13177                           postinc0	equ	0xFEE
 13178                           fsr0h	equ	0xFEA
 13179                           fsr0l	equ	0xFE9
 13180                           wreg	equ	0xFE8
 13181                           indf1	equ	0xFE7
 13182                           postinc1	equ	0xFE6
 13183                           postdec1	equ	0xFE5
 13184                           fsr1h	equ	0xFE2
 13185                           fsr1l	equ	0xFE1
 13186                           indf2	equ	0xFDF
 13187                           postinc2	equ	0xFDE
 13188                           postdec2	equ	0xFDD
 13189                           plusw2	equ	0xFDB
 13190                           fsr2h	equ	0xFDA
 13191                           fsr2l	equ	0xFD9
 13192                           status	equ	0xFD8
 13193                           
 13194 ;; *************** function _CAN_RCVResponse *****************
 13195 ;; Defined at:
 13196 ;;		line 72 in file "CAN_RX_HW.c"
 13197 ;; Parameters:    Size  Location     Type
 13198 ;;		None
 13199 ;; Auto vars:     Size  Location     Type
 13200 ;;		None
 13201 ;; Return value:  Size  Location     Type
 13202 ;;                  2  137[None  ] int 
 13203 ;; Registers used:
 13204 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13205 ;; Tracked objects:
 13206 ;;		On entry : 0/0
 13207 ;;		On exit  : 0/0
 13208 ;;		Unchanged: 0/0
 13209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13210 ;;      Params:         0       0       0       0
 13211 ;;      Locals:         0       0       0       0
 13212 ;;      Temps:          0       0       0       0
 13213 ;;      Totals:         0       0       0       0
 13214 ;;Total ram usage:        0 bytes
 13215 ;; Hardware stack levels used:    1
 13216 ;; Hardware stack levels required when called:    5
 13217 ;; This function calls:
 13218 ;;		_ProcessReceive
 13219 ;; This function is called by:
 13220 ;;		_ISR
 13221 ;; This function uses a non-reentrant model
 13222 ;;
 13223                           
 13224                           	psect	text58
 13225  003C92                     __ptext58:
 13226                           	opt stack 0
 13227  003C92                     _CAN_RCVResponse:
 13228                           	opt stack 15
 13229                           
 13230                           ;CAN_RX_HW.c: 74: if (RXB0CONbits.RXFUL == 1) {
 13231                           
 13232                           ; BSR set to: 15
 13233                           ;incstack = 0
 13234  003C92  AE60               	btfss	3936,7,c	;volatile
 13235  003C94  0012               	return	
 13236                           
 13237                           ;CAN_RX_HW.c: 75: ProcessReceive();
 13238  003C96  EC75  F018         	call	_ProcessReceive	;wreg free
 13239                           
 13240                           ;CAN_RX_HW.c: 76: RXB0CONbits.RXFUL = 0;
 13241  003C9A  9E60               	bcf	3936,7,c	;volatile
 13242  003C9C  0012               	return	
 13243  003C9E                     __end_of_CAN_RCVResponse:
 13244                           	opt stack 0
 13245                           tosu	equ	0xFFF
 13246                           tosh	equ	0xFFE
 13247                           tosl	equ	0xFFD
 13248                           pclatu	equ	0xFFB
 13249                           pclath	equ	0xFFA
 13250                           tblptru	equ	0xFF8
 13251                           tblptrh	equ	0xFF7
 13252                           tblptrl	equ	0xFF6
 13253                           tablat	equ	0xFF5
 13254                           prodh	equ	0xFF4
 13255                           prodl	equ	0xFF3
 13256                           intcon	equ	0xFF2
 13257                           postinc0	equ	0xFEE
 13258                           fsr0h	equ	0xFEA
 13259                           fsr0l	equ	0xFE9
 13260                           wreg	equ	0xFE8
 13261                           indf1	equ	0xFE7
 13262                           postinc1	equ	0xFE6
 13263                           postdec1	equ	0xFE5
 13264                           fsr1h	equ	0xFE2
 13265                           fsr1l	equ	0xFE1
 13266                           indf2	equ	0xFDF
 13267                           postinc2	equ	0xFDE
 13268                           postdec2	equ	0xFDD
 13269                           plusw2	equ	0xFDB
 13270                           fsr2h	equ	0xFDA
 13271                           fsr2l	equ	0xFD9
 13272                           status	equ	0xFD8
 13273                           
 13274 ;; *************** function _ProcessReceive *****************
 13275 ;; Defined at:
 13276 ;;		line 169 in file "CAN_RX_HW.c"
 13277 ;; Parameters:    Size  Location     Type
 13278 ;;		None
 13279 ;; Auto vars:     Size  Location     Type
 13280 ;;  Event2Post      3   34[COMRAM] struct ES_Event_t
 13281 ;; Return value:  Size  Location     Type
 13282 ;;                  1    wreg      void 
 13283 ;; Registers used:
 13284 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13285 ;; Tracked objects:
 13286 ;;		On entry : 0/0
 13287 ;;		On exit  : 0/0
 13288 ;;		Unchanged: 0/0
 13289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13290 ;;      Params:         0       0       0       0
 13291 ;;      Locals:         5       0       0       0
 13292 ;;      Temps:          0       0       0       0
 13293 ;;      Totals:         5       0       0       0
 13294 ;;Total ram usage:        5 bytes
 13295 ;; Hardware stack levels used:    1
 13296 ;; Hardware stack levels required when called:    4
 13297 ;; This function calls:
 13298 ;;		_SetBrightness
 13299 ;;		_SetListenFocus
 13300 ;;		_SetPattern
 13301 ;;		i2_PostPatternControlService
 13302 ;;		i2___awmod
 13303 ;; This function is called by:
 13304 ;;		_CAN_RCVResponse
 13305 ;; This function uses a non-reentrant model
 13306 ;;
 13307                           
 13308                           	psect	text59
 13309  0030EA                     __ptext59:
 13310                           	opt stack 0
 13311  0030EA                     _ProcessReceive:
 13312                           	opt stack 15
 13313                           
 13314                           ;CAN_RX_HW.c: 171: static uint8_t CurrentPattern = 0;
 13315                           ;CAN_RX_HW.c: 172: static uint8_t LastButton = 0xFF;
 13316                           ;CAN_RX_HW.c: 174: if (RXB0SIDH == 0x00 && RXB0SIDL == 0x18 && RXB0EIDH == 0x00 && RXB0E
      +                          IDL == 0x01) {
 13317                           
 13318                           ;incstack = 0
 13319  0030EA  5061               	movf	3937,w,c	;volatile
 13320  0030EC  A4D8               	btfss	status,2,c
 13321  0030EE  0012               	return	
 13322  0030F0  0E18               	movlw	24
 13323  0030F2  1862               	xorwf	3938,w,c	;volatile
 13324  0030F4  A4D8               	btfss	status,2,c
 13325  0030F6  0012               	return	
 13326  0030F8  5063               	movf	3939,w,c	;volatile
 13327  0030FA  A4D8               	btfss	status,2,c
 13328  0030FC  0012               	return	
 13329  0030FE  0464               	decf	3940,w,c	;volatile
 13330  003100  A4D8               	btfss	status,2,c
 13331  003102  0012               	return	
 13332                           
 13333                           ;CAN_RX_HW.c: 175: ES_Event Event2Post;
 13334                           ;CAN_RX_HW.c: 176: if(RXB0D0 != 0xFF){
 13335  003104  2866               	incf	3942,w,c	;volatile
 13336  003106  A4D8               	btfss	status,2,c
 13337  003108  D02B               	goto	i2l4143
 13338  00310A  D039               	goto	i2l4145
 13339  00310C                     i2l4121:
 13340                           
 13341                           ;CAN_RX_HW.c: 179: Event2Post.EventType = PATTERN_START;
 13342  00310C  0E05               	movlw	5
 13343  00310E  6E23               	movwf	ProcessReceive@Event2Post,c
 13344                           
 13345                           ;CAN_RX_HW.c: 180: break;
 13346  003110  D034               	goto	i2l629
 13347  003112                     i2l4123:
 13348                           
 13349                           ;CAN_RX_HW.c: 182: Event2Post.EventType = (LastButton == 0x01 ? PATTERN_END : PATTERN_PA
      +                          USE);
 13350  003112  0452               	decf	ProcessReceive@LastButton,w,c
 13351  003114  B4D8               	btfsc	status,2,c
 13352  003116  D004               	goto	i2l4127
 13353  003118  0E00               	movlw	0
 13354  00311A  6E22               	movwf	_ProcessReceive$1191+1,c
 13355  00311C  0E07               	movlw	7
 13356  00311E  D003               	goto	L22
 13357  003120                     i2l4127:
 13358  003120  0E00               	movlw	0
 13359  003122  6E22               	movwf	_ProcessReceive$1191+1,c
 13360  003124  0E06               	movlw	6
 13361  003126                     L22:
 13362  003126  6E21               	movwf	_ProcessReceive$1191,c
 13363  003128  C021  F023         	movff	_ProcessReceive$1191,ProcessReceive@Event2Post
 13364                           
 13365                           ;CAN_RX_HW.c: 183: break;
 13366  00312C  D026               	goto	i2l629
 13367  00312E                     i2l4131:
 13368                           
 13369                           ;CAN_RX_HW.c: 186: SetPattern(0xFF);
 13370  00312E  0EFF               	movlw	255
 13371  003130  EC4F  F01E         	call	_SetPattern
 13372                           
 13373                           ;CAN_RX_HW.c: 187: Event2Post.EventType = PATTERN_START;
 13374  003134  0E05               	movlw	5
 13375  003136  6E23               	movwf	ProcessReceive@Event2Post,c
 13376                           
 13377                           ;CAN_RX_HW.c: 192: CurrentPattern = 0;
 13378  003138  0E00               	movlw	0
 13379  00313A  D010               	goto	L23
 13380  00313C                     i2l4137:
 13381                           
 13382                           ;CAN_RX_HW.c: 195: SetPattern(CurrentPattern);
 13383  00313C  5044               	movf	ProcessReceive@CurrentPattern,w,c
 13384  00313E  EC4F  F01E         	call	_SetPattern
 13385                           
 13386                           ;CAN_RX_HW.c: 196: CurrentPattern = (CurrentPattern+1)%9;
 13387  003142  0E01               	movlw	1
 13388  003144  2444               	addwf	ProcessReceive@CurrentPattern,w,c
 13389  003146  6E01               	movwf	i2___awmod@dividend,c
 13390  003148  6A02               	clrf	i2___awmod@dividend+1,c
 13391  00314A  0E00               	movlw	0
 13392  00314C  2202               	addwfc	i2___awmod@dividend+1,f,c
 13393  00314E  0E00               	movlw	0
 13394  003150  6E04               	movwf	i2___awmod@divisor+1,c
 13395  003152  0E09               	movlw	9
 13396  003154  6E03               	movwf	i2___awmod@divisor,c
 13397  003156  EC2D  F01B         	call	i2___awmod	;wreg free
 13398  00315A  5001               	movf	?i2___awmod,w,c
 13399  00315C                     L23:
 13400  00315C  6E44               	movwf	ProcessReceive@CurrentPattern,c
 13401                           
 13402                           ;CAN_RX_HW.c: 198: }
 13403                           
 13404                           ;CAN_RX_HW.c: 197: break;
 13405  00315E  D00D               	goto	i2l629
 13406  003160                     i2l4143:
 13407  003160  5066               	movf	3942,w,c	;volatile
 13408                           
 13409                           ; Switch size 1, requested type "space"
 13410                           ; Number of cases is 4, Range of values is 0 to 3
 13411                           ; switch strategies available:
 13412                           ; Name         Instructions Cycles
 13413                           ; simple_byte           13     7 (average)
 13414                           ;	Chosen strategy is simple_byte
 13415  003162  0A00               	xorlw	0	; case 0
 13416  003164  B4D8               	btfsc	status,2,c
 13417  003166  D7D2               	goto	i2l4121
 13418  003168  0A01               	xorlw	1	; case 1
 13419  00316A  B4D8               	btfsc	status,2,c
 13420  00316C  D7D2               	goto	i2l4123
 13421  00316E  0A03               	xorlw	3	; case 2
 13422  003170  B4D8               	btfsc	status,2,c
 13423  003172  D7DD               	goto	i2l4131
 13424  003174  0A01               	xorlw	1	; case 3
 13425  003176  B4D8               	btfsc	status,2,c
 13426  003178  D7E1               	goto	i2l4137
 13427  00317A                     i2l629:
 13428                           
 13429                           ;CAN_RX_HW.c: 200: LastButton = RXB0D0;
 13430  00317A  CF66 F052          	movff	3942,ProcessReceive@LastButton	;volatile
 13431  00317E                     i2l4145:
 13432                           
 13433                           ;CAN_RX_HW.c: 201: }
 13434                           ;CAN_RX_HW.c: 203: SetBrightness(RXB0D1);
 13435  00317E  5067               	movf	3943,w,c	;volatile
 13436  003180  EC67  F01D         	call	_SetBrightness
 13437                           
 13438                           ;CAN_RX_HW.c: 205: SetListenFocus(RXB0D2);
 13439  003184  5068               	movf	3944,w,c	;volatile
 13440  003186  EC9B  F01D         	call	_SetListenFocus
 13441                           
 13442                           ;CAN_RX_HW.c: 207: PostPatternControlService(Event2Post);
 13443  00318A  C023  F01E         	movff	ProcessReceive@Event2Post,i2PostPatternControlService@ThisEvent
 13444  00318E  C024  F01F         	movff	ProcessReceive@Event2Post+1,i2PostPatternControlService@ThisEvent+1
 13445  003192  C025  F020         	movff	ProcessReceive@Event2Post+2,i2PostPatternControlService@ThisEvent+2
 13446  003196  EC2E  F01E         	call	i2_PostPatternControlService	;wreg free
 13447  00319A  0012               	return	
 13448  00319C                     __end_of_ProcessReceive:
 13449                           	opt stack 0
 13450                           tosu	equ	0xFFF
 13451                           tosh	equ	0xFFE
 13452                           tosl	equ	0xFFD
 13453                           pclatu	equ	0xFFB
 13454                           pclath	equ	0xFFA
 13455                           tblptru	equ	0xFF8
 13456                           tblptrh	equ	0xFF7
 13457                           tblptrl	equ	0xFF6
 13458                           tablat	equ	0xFF5
 13459                           prodh	equ	0xFF4
 13460                           prodl	equ	0xFF3
 13461                           intcon	equ	0xFF2
 13462                           postinc0	equ	0xFEE
 13463                           fsr0h	equ	0xFEA
 13464                           fsr0l	equ	0xFE9
 13465                           wreg	equ	0xFE8
 13466                           indf1	equ	0xFE7
 13467                           postinc1	equ	0xFE6
 13468                           postdec1	equ	0xFE5
 13469                           fsr1h	equ	0xFE2
 13470                           fsr1l	equ	0xFE1
 13471                           indf2	equ	0xFDF
 13472                           postinc2	equ	0xFDE
 13473                           postdec2	equ	0xFDD
 13474                           plusw2	equ	0xFDB
 13475                           fsr2h	equ	0xFDA
 13476                           fsr2l	equ	0xFD9
 13477                           status	equ	0xFD8
 13478                           
 13479 ;; *************** function i2_PostPatternControlService *****************
 13480 ;; Defined at:
 13481 ;;		line 140 in file "Pattern_ControlService.c"
 13482 ;; Parameters:    Size  Location     Type
 13483 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
 13484 ;; Auto vars:     Size  Location     Type
 13485 ;;		None
 13486 ;; Return value:  Size  Location     Type
 13487 ;;                  1    wreg      unsigned char 
 13488 ;; Registers used:
 13489 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13490 ;; Tracked objects:
 13491 ;;		On entry : 0/0
 13492 ;;		On exit  : 0/0
 13493 ;;		Unchanged: 0/0
 13494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13495 ;;      Params:         3       0       0       0
 13496 ;;      Locals:         0       0       0       0
 13497 ;;      Temps:          0       0       0       0
 13498 ;;      Totals:         3       0       0       0
 13499 ;;Total ram usage:        3 bytes
 13500 ;; Hardware stack levels used:    1
 13501 ;; Hardware stack levels required when called:    3
 13502 ;; This function calls:
 13503 ;;		i2_ES_PostToService
 13504 ;; This function is called by:
 13505 ;;		_ProcessReceive
 13506 ;; This function uses a non-reentrant model
 13507 ;;
 13508                           
 13509                           	psect	text60
 13510  003C5C                     __ptext60:
 13511                           	opt stack 0
 13512  003C5C                     i2_PostPatternControlService:
 13513                           	opt stack 15
 13514                           
 13515                           ;Pattern_ControlService.c: 142: return ES_PostToService( MyPriority, ThisEvent);
 13516                           ;	Return value of i2_PostPatternControlService is never used
 13517                           
 13518                           ;incstack = 0
 13519  003C5C  C01E  F018         	movff	i2PostPatternControlService@ThisEvent,i2ES_PostToService@TheEvent
 13520  003C60  C01F  F019         	movff	i2PostPatternControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
 13521  003C64  C020  F01A         	movff	i2PostPatternControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
 13522  003C68  0100               	movlb	0	; () banked
 13523  003C6A  51E6               	movf	_MyPriority& (0+255),w,b
 13524  003C6C  EC65  F01B         	call	i2_ES_PostToService
 13525  003C70  0012               	return	
 13526  003C72                     __end_ofi2_PostPatternControlService:
 13527                           	opt stack 0
 13528                           tosu	equ	0xFFF
 13529                           tosh	equ	0xFFE
 13530                           tosl	equ	0xFFD
 13531                           pclatu	equ	0xFFB
 13532                           pclath	equ	0xFFA
 13533                           tblptru	equ	0xFF8
 13534                           tblptrh	equ	0xFF7
 13535                           tblptrl	equ	0xFF6
 13536                           tablat	equ	0xFF5
 13537                           prodh	equ	0xFF4
 13538                           prodl	equ	0xFF3
 13539                           intcon	equ	0xFF2
 13540                           postinc0	equ	0xFEE
 13541                           fsr0h	equ	0xFEA
 13542                           fsr0l	equ	0xFE9
 13543                           wreg	equ	0xFE8
 13544                           indf1	equ	0xFE7
 13545                           postinc1	equ	0xFE6
 13546                           postdec1	equ	0xFE5
 13547                           fsr1h	equ	0xFE2
 13548                           fsr1l	equ	0xFE1
 13549                           indf2	equ	0xFDF
 13550                           postinc2	equ	0xFDE
 13551                           postdec2	equ	0xFDD
 13552                           plusw2	equ	0xFDB
 13553                           fsr2h	equ	0xFDA
 13554                           fsr2l	equ	0xFD9
 13555                           status	equ	0xFD8
 13556                           
 13557 ;; *************** function i2_ES_PostToService *****************
 13558 ;; Defined at:
 13559 ;;		line 351 in file "ES_Framework.c"
 13560 ;; Parameters:    Size  Location     Type
 13561 ;;  WhichService    1    wreg     unsigned char 
 13562 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
 13563 ;; Auto vars:     Size  Location     Type
 13564 ;;  WhichService    1   28[COMRAM] unsigned char 
 13565 ;; Return value:  Size  Location     Type
 13566 ;;                  1    wreg      unsigned char 
 13567 ;; Registers used:
 13568 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13569 ;; Tracked objects:
 13570 ;;		On entry : 0/0
 13571 ;;		On exit  : 0/0
 13572 ;;		Unchanged: 0/0
 13573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13574 ;;      Params:         3       0       0       0
 13575 ;;      Locals:         1       0       0       0
 13576 ;;      Temps:          2       0       0       0
 13577 ;;      Totals:         6       0       0       0
 13578 ;;Total ram usage:        6 bytes
 13579 ;; Hardware stack levels used:    1
 13580 ;; Hardware stack levels required when called:    2
 13581 ;; This function calls:
 13582 ;;		i2_ES_EnQueueFIFO
 13583 ;; This function is called by:
 13584 ;;		i2_PostPatternControlService
 13585 ;;		i2_PostSPI32ControlService
 13586 ;; This function uses a non-reentrant model
 13587 ;;
 13588                           
 13589                           	psect	text61
 13590  0036CA                     __ptext61:
 13591                           	opt stack 0
 13592  0036CA                     i2_ES_PostToService:
 13593                           	opt stack 16
 13594                           
 13595                           ;incstack = 0
 13596                           ;i2ES_PostToService@WhichService stored from wreg
 13597  0036CA  6E1D               	movwf	i2ES_PostToService@WhichService,c
 13598                           
 13599                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
 13600                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
 13601                           ;ES_Framework.c: 354: 1 )){
 13602  0036CC  0E02               	movlw	2
 13603  0036CE  601D               	cpfslt	i2ES_PostToService@WhichService,c
 13604  0036D0  D02F               	goto	i2l3793
 13605  0036D2  501D               	movf	i2ES_PostToService@WhichService,w,c
 13606  0036D4  0D03               	mullw	3
 13607  0036D6  0E58               	movlw	low _EventQueues
 13608  0036D8  24F3               	addwf	prodl,w,c
 13609  0036DA  6EF6               	movwf	tblptrl,c
 13610  0036DC  0E03               	movlw	high _EventQueues
 13611  0036DE  20F4               	addwfc	prodh,w,c
 13612  0036E0  6EF7               	movwf	tblptrh,c
 13613  0036E2                     	if	0	;There are less than 3 active tblptr bytes
 13614  0036E2                     	endif
 13615  0036E2  0009               	tblrd		*+
 13616  0036E4  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
 13617  0036E8  000A               	tblrd		*-
 13618  0036EA  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
 13619  0036EE  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
 13620  0036F2  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
 13621  0036F6  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
 13622  0036FA  EC1B  F018         	call	i2_ES_EnQueueFIFO	;wreg free
 13623  0036FE  06E8               	decf	wreg,f,c
 13624  003700  A4D8               	btfss	status,2,c
 13625  003702  D016               	goto	i2l3793
 13626                           
 13627                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
 13628  003704  501D               	movf	i2ES_PostToService@WhichService,w,c
 13629  003706  0D02               	mullw	2
 13630  003708  0E01               	movlw	low _BitNum2SetMask
 13631  00370A  24F3               	addwf	prodl,w,c
 13632  00370C  6EF6               	movwf	tblptrl,c
 13633  00370E  0E03               	movlw	high _BitNum2SetMask
 13634  003710  20F4               	addwfc	prodh,w,c
 13635  003712  6EF7               	movwf	tblptrh,c
 13636  003714                     	if	0	;There are less than 3 active tblptr bytes
 13637  003714                     	endif
 13638  003714  0009               	tblrd		*+
 13639  003716  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
 13640  00371A  0009               	tblrd		*+
 13641  00371C  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
 13642  003720  501B               	movf	??i2_ES_PostToService,w,c
 13643  003722  0100               	movlb	0	; () banked
 13644  003724  13DD               	iorwf	_Ready& (0+255),f,b
 13645  003726  501C               	movf	??i2_ES_PostToService+1,w,c
 13646  003728  0100               	movlb	0	; () banked
 13647  00372A  13DE               	iorwf	(_Ready+1)& (0+255),f,b
 13648                           
 13649                           ; BSR set to: 0
 13650                           ;ES_Framework.c: 356: return 1;
 13651  00372C  0E01               	movlw	1
 13652                           
 13653                           ; BSR set to: 0
 13654                           ;ES_Framework.c: 357: } else
 13655                           
 13656                           ; BSR set to: 0
 13657  00372E  0012               	return	
 13658  003730                     i2l3793:
 13659                           
 13660                           ;ES_Framework.c: 358: return 0;
 13661  003730  0E00               	movlw	0
 13662  003732  0012               	return	
 13663  003734                     __end_ofi2_ES_PostToService:
 13664                           	opt stack 0
 13665                           tosu	equ	0xFFF
 13666                           tosh	equ	0xFFE
 13667                           tosl	equ	0xFFD
 13668                           pclatu	equ	0xFFB
 13669                           pclath	equ	0xFFA
 13670                           tblptru	equ	0xFF8
 13671                           tblptrh	equ	0xFF7
 13672                           tblptrl	equ	0xFF6
 13673                           tablat	equ	0xFF5
 13674                           prodh	equ	0xFF4
 13675                           prodl	equ	0xFF3
 13676                           intcon	equ	0xFF2
 13677                           postinc0	equ	0xFEE
 13678                           fsr0h	equ	0xFEA
 13679                           fsr0l	equ	0xFE9
 13680                           wreg	equ	0xFE8
 13681                           indf1	equ	0xFE7
 13682                           postinc1	equ	0xFE6
 13683                           postdec1	equ	0xFE5
 13684                           fsr1h	equ	0xFE2
 13685                           fsr1l	equ	0xFE1
 13686                           indf2	equ	0xFDF
 13687                           postinc2	equ	0xFDE
 13688                           postdec2	equ	0xFDD
 13689                           plusw2	equ	0xFDB
 13690                           fsr2h	equ	0xFDA
 13691                           fsr2l	equ	0xFD9
 13692                           status	equ	0xFD8
 13693                           
 13694 ;; *************** function i2_ES_EnQueueFIFO *****************
 13695 ;; Defined at:
 13696 ;;		line 85 in file "ES_Queue.c"
 13697 ;; Parameters:    Size  Location     Type
 13698 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
 13699 ;;		 -> Queue1(12), Queue0(12), 
 13700 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
 13701 ;; Auto vars:     Size  Location     Type
 13702 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
 13703 ;;		 -> Queue1(12), Queue0(12), 
 13704 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
 13705 ;; Return value:  Size  Location     Type
 13706 ;;                  1    wreg      unsigned char 
 13707 ;; Registers used:
 13708 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13709 ;; Tracked objects:
 13710 ;;		On entry : 0/0
 13711 ;;		On exit  : 0/0
 13712 ;;		Unchanged: 0/0
 13713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13714 ;;      Params:         5       0       0       0
 13715 ;;      Locals:         3       0       0       0
 13716 ;;      Temps:          3       0       0       0
 13717 ;;      Totals:        11       0       0       0
 13718 ;;Total ram usage:       11 bytes
 13719 ;; Hardware stack levels used:    1
 13720 ;; Hardware stack levels required when called:    1
 13721 ;; This function calls:
 13722 ;;		i2___awmod
 13723 ;;		i2___wmul
 13724 ;; This function is called by:
 13725 ;;		i2_ES_PostToService
 13726 ;; This function uses a non-reentrant model
 13727 ;;
 13728                           
 13729                           	psect	text62
 13730  003036                     __ptext62:
 13731                           	opt stack 0
 13732  003036                     i2_ES_EnQueueFIFO:
 13733                           	opt stack 16
 13734                           
 13735                           ;ES_Queue.c: 87: unsigned char SaveCrit;
 13736                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
 13737                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
 13738                           
 13739                           ;incstack = 0
 13740  003036  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
 13741  00303A  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
 13742                           
 13743                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
 13744  00303E  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
 13745  003042  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
 13746  003046  EE10 F002          	lfsr	1,2
 13747  00304A  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 13748  00304C  26E1               	addwf	fsr1l,f,c
 13749  00304E  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 13750  003050  22E2               	addwfc	fsr1h,f,c
 13751  003052  50DE               	movf	postinc2,w,c
 13752  003054  5CE6               	subwf	postinc1,w,c
 13753  003056  B0D8               	btfsc	status,0,c
 13754  003058  D046               	goto	i2l3599
 13755                           
 13756                           ;ES_Queue.c: 92: {
 13757                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
 13758  00305A  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
 13759  00305E  9EF2               	bcf	intcon,7,c	;volatile
 13760                           
 13761                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
 13762                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
 13763  003060  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
 13764  003064  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
 13765  003068  50DF               	movf	indf2,w,c
 13766  00306A  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
 13767  00306C  5012               	movf	??i2_ES_EnQueueFIFO,w,c
 13768  00306E  6E03               	movwf	i2___awmod@divisor,c
 13769  003070  6A04               	clrf	i2___awmod@divisor+1,c
 13770  003072  EE20 F002          	lfsr	2,2
 13771  003076  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 13772  003078  26D9               	addwf	fsr2l,f,c
 13773  00307A  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 13774  00307C  22DA               	addwfc	fsr2h,f,c
 13775  00307E  50DF               	movf	indf2,w,c
 13776  003080  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
 13777  003082  EE20 F001          	lfsr	2,1
 13778  003086  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 13779  003088  26D9               	addwf	fsr2l,f,c
 13780  00308A  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 13781  00308C  22DA               	addwfc	fsr2h,f,c
 13782  00308E  50DF               	movf	indf2,w,c
 13783  003090  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
 13784  003092  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
 13785  003094  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
 13786  003096  6E01               	movwf	i2___awmod@dividend,c
 13787  003098  6A02               	clrf	i2___awmod@dividend+1,c
 13788  00309A  3602               	rlcf	i2___awmod@dividend+1,f,c
 13789  00309C  EC2D  F01B         	call	i2___awmod	;wreg free
 13790  0030A0  0E01               	movlw	1
 13791  0030A2  2401               	addwf	?i2___awmod,w,c
 13792  0030A4  6E07               	movwf	i2___wmul@multiplier,c
 13793  0030A6  0E00               	movlw	0
 13794  0030A8  2002               	addwfc	?i2___awmod+1,w,c
 13795  0030AA  6E08               	movwf	i2___wmul@multiplier+1,c
 13796  0030AC  0E00               	movlw	0
 13797  0030AE  6E0A               	movwf	i2___wmul@multiplicand+1,c
 13798  0030B0  0E03               	movlw	3
 13799  0030B2  6E09               	movwf	i2___wmul@multiplicand,c
 13800  0030B4  EC54  F01D         	call	i2___wmul	;wreg free
 13801  0030B8  5007               	movf	?i2___wmul,w,c
 13802  0030BA  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
 13803  0030BC  6ED9               	movwf	fsr2l,c
 13804  0030BE  5008               	movf	?i2___wmul+1,w,c
 13805  0030C0  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
 13806  0030C2  6EDA               	movwf	fsr2h,c
 13807  0030C4  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
 13808  0030C8  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
 13809  0030CC  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
 13810                           
 13811                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
 13812  0030D0  EE20 F002          	lfsr	2,2
 13813  0030D4  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
 13814  0030D6  26D9               	addwf	fsr2l,f,c
 13815  0030D8  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
 13816  0030DA  22DA               	addwfc	fsr2h,f,c
 13817  0030DC  2ADF               	incf	indf2,f,c
 13818                           
 13819                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
 13820  0030DE  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
 13821                           
 13822                           ;ES_Queue.c: 101: return(1);
 13823  0030E2  0E01               	movlw	1
 13824                           
 13825                           ;ES_Queue.c: 102: }else
 13826  0030E4  0012               	return	
 13827  0030E6                     i2l3599:
 13828                           
 13829                           ;ES_Queue.c: 103: return(0);
 13830  0030E6  0E00               	movlw	0
 13831  0030E8  0012               	return	
 13832  0030EA                     __end_ofi2_ES_EnQueueFIFO:
 13833                           	opt stack 0
 13834                           tosu	equ	0xFFF
 13835                           tosh	equ	0xFFE
 13836                           tosl	equ	0xFFD
 13837                           pclatu	equ	0xFFB
 13838                           pclath	equ	0xFFA
 13839                           tblptru	equ	0xFF8
 13840                           tblptrh	equ	0xFF7
 13841                           tblptrl	equ	0xFF6
 13842                           tablat	equ	0xFF5
 13843                           prodh	equ	0xFF4
 13844                           prodl	equ	0xFF3
 13845                           intcon	equ	0xFF2
 13846                           postinc0	equ	0xFEE
 13847                           fsr0h	equ	0xFEA
 13848                           fsr0l	equ	0xFE9
 13849                           wreg	equ	0xFE8
 13850                           indf1	equ	0xFE7
 13851                           postinc1	equ	0xFE6
 13852                           postdec1	equ	0xFE5
 13853                           fsr1h	equ	0xFE2
 13854                           fsr1l	equ	0xFE1
 13855                           indf2	equ	0xFDF
 13856                           postinc2	equ	0xFDE
 13857                           postdec2	equ	0xFDD
 13858                           plusw2	equ	0xFDB
 13859                           fsr2h	equ	0xFDA
 13860                           fsr2l	equ	0xFD9
 13861                           status	equ	0xFD8
 13862                           
 13863 ;; *************** function i2___wmul *****************
 13864 ;; Defined at:
 13865 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 13866 ;; Parameters:    Size  Location     Type
 13867 ;;  multiplier      2    6[COMRAM] unsigned int 
 13868 ;;  multiplicand    2    8[COMRAM] unsigned int 
 13869 ;; Auto vars:     Size  Location     Type
 13870 ;;  __wmul          2   10[COMRAM] unsigned int 
 13871 ;; Return value:  Size  Location     Type
 13872 ;;                  2    6[COMRAM] unsigned int 
 13873 ;; Registers used:
 13874 ;;		wreg, status,2, status,0, prodl, prodh
 13875 ;; Tracked objects:
 13876 ;;		On entry : 0/0
 13877 ;;		On exit  : 0/0
 13878 ;;		Unchanged: 0/0
 13879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13880 ;;      Params:         4       0       0       0
 13881 ;;      Locals:         2       0       0       0
 13882 ;;      Temps:          0       0       0       0
 13883 ;;      Totals:         6       0       0       0
 13884 ;;Total ram usage:        6 bytes
 13885 ;; Hardware stack levels used:    1
 13886 ;; This function calls:
 13887 ;;		Nothing
 13888 ;; This function is called by:
 13889 ;;		i2_ES_EnQueueFIFO
 13890 ;; This function uses a non-reentrant model
 13891 ;;
 13892                           
 13893                           	psect	text63
 13894  003AA8                     __ptext63:
 13895                           	opt stack 0
 13896  003AA8                     i2___wmul:
 13897                           	opt stack 16
 13898                           
 13899                           ;incstack = 0
 13900  003AA8  5007               	movf	i2___wmul@multiplier,w,c
 13901  003AAA  0209               	mulwf	i2___wmul@multiplicand,c
 13902  003AAC  CFF3 F00B          	movff	prodl,i2___wmul@product
 13903  003AB0  CFF4 F00C          	movff	prodh,i2___wmul@product+1
 13904  003AB4  5007               	movf	i2___wmul@multiplier,w,c
 13905  003AB6  020A               	mulwf	i2___wmul@multiplicand+1,c
 13906  003AB8  50F3               	movf	prodl,w,c
 13907  003ABA  260C               	addwf	i2___wmul@product+1,f,c
 13908  003ABC  5008               	movf	i2___wmul@multiplier+1,w,c
 13909  003ABE  0209               	mulwf	i2___wmul@multiplicand,c
 13910  003AC0  50F3               	movf	prodl,w,c
 13911  003AC2  260C               	addwf	i2___wmul@product+1,f,c
 13912  003AC4  C00B  F007         	movff	i2___wmul@product,?i2___wmul
 13913  003AC8  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
 13914  003ACC  0012               	return	
 13915  003ACE                     __end_ofi2___wmul:
 13916                           	opt stack 0
 13917                           tosu	equ	0xFFF
 13918                           tosh	equ	0xFFE
 13919                           tosl	equ	0xFFD
 13920                           pclatu	equ	0xFFB
 13921                           pclath	equ	0xFFA
 13922                           tblptru	equ	0xFF8
 13923                           tblptrh	equ	0xFF7
 13924                           tblptrl	equ	0xFF6
 13925                           tablat	equ	0xFF5
 13926                           prodh	equ	0xFF4
 13927                           prodl	equ	0xFF3
 13928                           intcon	equ	0xFF2
 13929                           postinc0	equ	0xFEE
 13930                           fsr0h	equ	0xFEA
 13931                           fsr0l	equ	0xFE9
 13932                           wreg	equ	0xFE8
 13933                           indf1	equ	0xFE7
 13934                           postinc1	equ	0xFE6
 13935                           postdec1	equ	0xFE5
 13936                           fsr1h	equ	0xFE2
 13937                           fsr1l	equ	0xFE1
 13938                           indf2	equ	0xFDF
 13939                           postinc2	equ	0xFDE
 13940                           postdec2	equ	0xFDD
 13941                           plusw2	equ	0xFDB
 13942                           fsr2h	equ	0xFDA
 13943                           fsr2l	equ	0xFD9
 13944                           status	equ	0xFD8
 13945                           
 13946 ;; *************** function i2___awmod *****************
 13947 ;; Defined at:
 13948 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
 13949 ;; Parameters:    Size  Location     Type
 13950 ;;  dividend        2    0[COMRAM] int 
 13951 ;;  divisor         2    2[COMRAM] int 
 13952 ;; Auto vars:     Size  Location     Type
 13953 ;;  __awmod         1    5[COMRAM] unsigned char 
 13954 ;;  __awmod         1    4[COMRAM] unsigned char 
 13955 ;; Return value:  Size  Location     Type
 13956 ;;                  2    0[COMRAM] int 
 13957 ;; Registers used:
 13958 ;;		wreg, status,2, status,0
 13959 ;; Tracked objects:
 13960 ;;		On entry : 0/0
 13961 ;;		On exit  : 0/0
 13962 ;;		Unchanged: 0/0
 13963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13964 ;;      Params:         4       0       0       0
 13965 ;;      Locals:         2       0       0       0
 13966 ;;      Temps:          0       0       0       0
 13967 ;;      Totals:         6       0       0       0
 13968 ;;Total ram usage:        6 bytes
 13969 ;; Hardware stack levels used:    1
 13970 ;; This function calls:
 13971 ;;		Nothing
 13972 ;; This function is called by:
 13973 ;;		_ProcessReceive
 13974 ;;		i2_ES_EnQueueFIFO
 13975 ;; This function uses a non-reentrant model
 13976 ;;
 13977                           
 13978                           	psect	text64
 13979  00365A                     __ptext64:
 13980                           	opt stack 0
 13981  00365A                     i2___awmod:
 13982                           	opt stack 16
 13983                           
 13984                           ;incstack = 0
 13985  00365A  0E00               	movlw	0
 13986  00365C  6E06               	movwf	i2___awmod@sign,c
 13987  00365E  AE02               	btfss	i2___awmod@dividend+1,7,c
 13988  003660  D006               	goto	i2l3155
 13989  003662  6C01               	negf	i2___awmod@dividend,c
 13990  003664  1E02               	comf	i2___awmod@dividend+1,f,c
 13991  003666  B0D8               	btfsc	status,0,c
 13992  003668  2A02               	incf	i2___awmod@dividend+1,f,c
 13993  00366A  0E01               	movlw	1
 13994  00366C  6E06               	movwf	i2___awmod@sign,c
 13995  00366E                     i2l3155:
 13996  00366E  AE04               	btfss	i2___awmod@divisor+1,7,c
 13997  003670  D004               	goto	i2l3159
 13998  003672  6C03               	negf	i2___awmod@divisor,c
 13999  003674  1E04               	comf	i2___awmod@divisor+1,f,c
 14000  003676  B0D8               	btfsc	status,0,c
 14001  003678  2A04               	incf	i2___awmod@divisor+1,f,c
 14002  00367A                     i2l3159:
 14003  00367A  5003               	movf	i2___awmod@divisor,w,c
 14004  00367C  1004               	iorwf	i2___awmod@divisor+1,w,c
 14005  00367E  B4D8               	btfsc	status,2,c
 14006  003680  D018               	goto	i2l3175
 14007  003682  0E01               	movlw	1
 14008  003684  6E05               	movwf	i2___awmod@counter,c
 14009  003686  D004               	goto	i2l3165
 14010  003688                     i2l3163:
 14011  003688  90D8               	bcf	status,0,c
 14012  00368A  3603               	rlcf	i2___awmod@divisor,f,c
 14013  00368C  3604               	rlcf	i2___awmod@divisor+1,f,c
 14014  00368E  2A05               	incf	i2___awmod@counter,f,c
 14015  003690                     i2l3165:
 14016  003690  AE04               	btfss	i2___awmod@divisor+1,7,c
 14017  003692  D7FA               	goto	i2l3163
 14018  003694                     i2l3167:
 14019  003694  5003               	movf	i2___awmod@divisor,w,c
 14020  003696  5C01               	subwf	i2___awmod@dividend,w,c
 14021  003698  5004               	movf	i2___awmod@divisor+1,w,c
 14022  00369A  5802               	subwfb	i2___awmod@dividend+1,w,c
 14023  00369C  A0D8               	btfss	status,0,c
 14024  00369E  D004               	goto	i2l3171
 14025  0036A0  5003               	movf	i2___awmod@divisor,w,c
 14026  0036A2  5E01               	subwf	i2___awmod@dividend,f,c
 14027  0036A4  5004               	movf	i2___awmod@divisor+1,w,c
 14028  0036A6  5A02               	subwfb	i2___awmod@dividend+1,f,c
 14029  0036A8                     i2l3171:
 14030  0036A8  90D8               	bcf	status,0,c
 14031  0036AA  3204               	rrcf	i2___awmod@divisor+1,f,c
 14032  0036AC  3203               	rrcf	i2___awmod@divisor,f,c
 14033  0036AE  2E05               	decfsz	i2___awmod@counter,f,c
 14034  0036B0  D7F1               	goto	i2l3167
 14035  0036B2                     i2l3175:
 14036  0036B2  5006               	movf	i2___awmod@sign,w,c
 14037  0036B4  B4D8               	btfsc	status,2,c
 14038  0036B6  D004               	goto	i2l3179
 14039  0036B8  6C01               	negf	i2___awmod@dividend,c
 14040  0036BA  1E02               	comf	i2___awmod@dividend+1,f,c
 14041  0036BC  B0D8               	btfsc	status,0,c
 14042  0036BE  2A02               	incf	i2___awmod@dividend+1,f,c
 14043  0036C0                     i2l3179:
 14044  0036C0  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 14045  0036C4  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 14046  0036C8  0012               	return	
 14047  0036CA                     __end_ofi2___awmod:
 14048                           	opt stack 0
 14049                           tosu	equ	0xFFF
 14050                           tosh	equ	0xFFE
 14051                           tosl	equ	0xFFD
 14052                           pclatu	equ	0xFFB
 14053                           pclath	equ	0xFFA
 14054                           tblptru	equ	0xFF8
 14055                           tblptrh	equ	0xFF7
 14056                           tblptrl	equ	0xFF6
 14057                           tablat	equ	0xFF5
 14058                           prodh	equ	0xFF4
 14059                           prodl	equ	0xFF3
 14060                           intcon	equ	0xFF2
 14061                           postinc0	equ	0xFEE
 14062                           fsr0h	equ	0xFEA
 14063                           fsr0l	equ	0xFE9
 14064                           wreg	equ	0xFE8
 14065                           indf1	equ	0xFE7
 14066                           postinc1	equ	0xFE6
 14067                           postdec1	equ	0xFE5
 14068                           fsr1h	equ	0xFE2
 14069                           fsr1l	equ	0xFE1
 14070                           indf2	equ	0xFDF
 14071                           postinc2	equ	0xFDE
 14072                           postdec2	equ	0xFDD
 14073                           plusw2	equ	0xFDB
 14074                           fsr2h	equ	0xFDA
 14075                           fsr2l	equ	0xFD9
 14076                           status	equ	0xFD8
 14077                           
 14078 ;; *************** function _SetPattern *****************
 14079 ;; Defined at:
 14080 ;;		line 241 in file "Pattern_ControlService.c"
 14081 ;; Parameters:    Size  Location     Type
 14082 ;;  PatternID       1    wreg     unsigned char 
 14083 ;; Auto vars:     Size  Location     Type
 14084 ;;  PatternID       1    0[COMRAM] unsigned char 
 14085 ;; Return value:  Size  Location     Type
 14086 ;;                  1    wreg      void 
 14087 ;; Registers used:
 14088 ;;		wreg, status,2, cstack
 14089 ;; Tracked objects:
 14090 ;;		On entry : 0/0
 14091 ;;		On exit  : 0/0
 14092 ;;		Unchanged: 0/0
 14093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14094 ;;      Params:         0       0       0       0
 14095 ;;      Locals:         1       0       0       0
 14096 ;;      Temps:          0       0       0       0
 14097 ;;      Totals:         1       0       0       0
 14098 ;;Total ram usage:        1 bytes
 14099 ;; Hardware stack levels used:    1
 14100 ;; Hardware stack levels required when called:    1
 14101 ;; This function calls:
 14102 ;;		i2_ResetPattern
 14103 ;; This function is called by:
 14104 ;;		_ProcessReceive
 14105 ;; This function uses a non-reentrant model
 14106 ;;
 14107                           
 14108                           	psect	text65
 14109  003C9E                     __ptext65:
 14110                           	opt stack 0
 14111  003C9E                     _SetPattern:
 14112                           	opt stack 17
 14113                           
 14114                           ;incstack = 0
 14115                           ;SetPattern@PatternID stored from wreg
 14116  003C9E  6E01               	movwf	SetPattern@PatternID,c
 14117                           
 14118                           ;Pattern_ControlService.c: 242: PatternConfigs[0] = PatternID;
 14119  003CA0  C001  F0F7         	movff	SetPattern@PatternID,_PatternConfigs
 14120                           
 14121                           ;Pattern_ControlService.c: 244: ResetPattern();
 14122  003CA4  EC0B  F01E         	call	i2_ResetPattern	;wreg free
 14123  003CA8  0012               	return		;funcret
 14124  003CAA                     __end_of_SetPattern:
 14125                           	opt stack 0
 14126                           tosu	equ	0xFFF
 14127                           tosh	equ	0xFFE
 14128                           tosl	equ	0xFFD
 14129                           pclatu	equ	0xFFB
 14130                           pclath	equ	0xFFA
 14131                           tblptru	equ	0xFF8
 14132                           tblptrh	equ	0xFF7
 14133                           tblptrl	equ	0xFF6
 14134                           tablat	equ	0xFF5
 14135                           prodh	equ	0xFF4
 14136                           prodl	equ	0xFF3
 14137                           intcon	equ	0xFF2
 14138                           postinc0	equ	0xFEE
 14139                           fsr0h	equ	0xFEA
 14140                           fsr0l	equ	0xFE9
 14141                           wreg	equ	0xFE8
 14142                           indf1	equ	0xFE7
 14143                           postinc1	equ	0xFE6
 14144                           postdec1	equ	0xFE5
 14145                           fsr1h	equ	0xFE2
 14146                           fsr1l	equ	0xFE1
 14147                           indf2	equ	0xFDF
 14148                           postinc2	equ	0xFDE
 14149                           postdec2	equ	0xFDD
 14150                           plusw2	equ	0xFDB
 14151                           fsr2h	equ	0xFDA
 14152                           fsr2l	equ	0xFD9
 14153                           status	equ	0xFD8
 14154                           
 14155 ;; *************** function i2_ResetPattern *****************
 14156 ;; Defined at:
 14157 ;;		line 113 in file "Pattern_PtrnGenerator.c"
 14158 ;; Parameters:    Size  Location     Type
 14159 ;;		None
 14160 ;; Auto vars:     Size  Location     Type
 14161 ;;		None
 14162 ;; Return value:  Size  Location     Type
 14163 ;;                  1    wreg      void 
 14164 ;; Registers used:
 14165 ;;		wreg, status,2
 14166 ;; Tracked objects:
 14167 ;;		On entry : 0/0
 14168 ;;		On exit  : 0/0
 14169 ;;		Unchanged: 0/0
 14170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14171 ;;      Params:         0       0       0       0
 14172 ;;      Locals:         0       0       0       0
 14173 ;;      Temps:          0       0       0       0
 14174 ;;      Totals:         0       0       0       0
 14175 ;;Total ram usage:        0 bytes
 14176 ;; Hardware stack levels used:    1
 14177 ;; This function calls:
 14178 ;;		Nothing
 14179 ;; This function is called by:
 14180 ;;		_SetPattern
 14181 ;; This function uses a non-reentrant model
 14182 ;;
 14183                           
 14184                           	psect	text66
 14185  003C16                     __ptext66:
 14186                           	opt stack 0
 14187  003C16                     i2_ResetPattern:
 14188                           	opt stack 17
 14189                           
 14190                           ;Pattern_PtrnGenerator.c: 115: PatternStepCounter = 0;
 14191                           
 14192                           ;incstack = 0
 14193  003C16  0E00               	movlw	0
 14194  003C18  0100               	movlb	0	; () banked
 14195  003C1A  6FF2               	movwf	_PatternStepCounter& (0+255),b
 14196                           
 14197                           ;Pattern_PtrnGenerator.c: 117: CycleCounter = 0;
 14198  003C1C  0E00               	movlw	0
 14199  003C1E  0100               	movlb	0	; () banked
 14200  003C20  6FE9               	movwf	_CycleCounter& (0+255),b
 14201  003C22  0E00               	movlw	0
 14202  003C24  6FEA               	movwf	(_CycleCounter+1)& (0+255),b
 14203  003C26  0E00               	movlw	0
 14204  003C28  6FEB               	movwf	(_CycleCounter+2)& (0+255),b
 14205  003C2A  0E00               	movlw	0
 14206  003C2C  6FEC               	movwf	(_CycleCounter+3)& (0+255),b
 14207                           
 14208                           ; BSR set to: 0
 14209  003C2E  0012               	return		;funcret
 14210  003C30                     __end_ofi2_ResetPattern:
 14211                           	opt stack 0
 14212                           tosu	equ	0xFFF
 14213                           tosh	equ	0xFFE
 14214                           tosl	equ	0xFFD
 14215                           pclatu	equ	0xFFB
 14216                           pclath	equ	0xFFA
 14217                           tblptru	equ	0xFF8
 14218                           tblptrh	equ	0xFF7
 14219                           tblptrl	equ	0xFF6
 14220                           tablat	equ	0xFF5
 14221                           prodh	equ	0xFF4
 14222                           prodl	equ	0xFF3
 14223                           intcon	equ	0xFF2
 14224                           postinc0	equ	0xFEE
 14225                           fsr0h	equ	0xFEA
 14226                           fsr0l	equ	0xFE9
 14227                           wreg	equ	0xFE8
 14228                           indf1	equ	0xFE7
 14229                           postinc1	equ	0xFE6
 14230                           postdec1	equ	0xFE5
 14231                           fsr1h	equ	0xFE2
 14232                           fsr1l	equ	0xFE1
 14233                           indf2	equ	0xFDF
 14234                           postinc2	equ	0xFDE
 14235                           postdec2	equ	0xFDD
 14236                           plusw2	equ	0xFDB
 14237                           fsr2h	equ	0xFDA
 14238                           fsr2l	equ	0xFD9
 14239                           status	equ	0xFD8
 14240                           
 14241 ;; *************** function _SetListenFocus *****************
 14242 ;; Defined at:
 14243 ;;		line 254 in file "Pattern_ControlService.c"
 14244 ;; Parameters:    Size  Location     Type
 14245 ;;  listFocus       1    wreg     unsigned char 
 14246 ;; Auto vars:     Size  Location     Type
 14247 ;;  listFocus       1    8[COMRAM] unsigned char 
 14248 ;; Return value:  Size  Location     Type
 14249 ;;                  1    wreg      void 
 14250 ;; Registers used:
 14251 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14252 ;; Tracked objects:
 14253 ;;		On entry : 0/0
 14254 ;;		On exit  : 0/0
 14255 ;;		Unchanged: 0/0
 14256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14257 ;;      Params:         0       0       0       0
 14258 ;;      Locals:         1       0       0       0
 14259 ;;      Temps:          0       0       0       0
 14260 ;;      Totals:         1       0       0       0
 14261 ;;Total ram usage:        1 bytes
 14262 ;; Hardware stack levels used:    1
 14263 ;; Hardware stack levels required when called:    1
 14264 ;; This function calls:
 14265 ;;		i2___awdiv
 14266 ;; This function is called by:
 14267 ;;		_ProcessReceive
 14268 ;; This function uses a non-reentrant model
 14269 ;;
 14270                           
 14271                           	psect	text67
 14272  003B36                     __ptext67:
 14273                           	opt stack 0
 14274  003B36                     _SetListenFocus:
 14275                           	opt stack 17
 14276                           
 14277                           ; BSR set to: 0
 14278                           ;incstack = 0
 14279                           ;SetListenFocus@listFocus stored from wreg
 14280  003B36  6E09               	movwf	SetListenFocus@listFocus,c
 14281                           
 14282                           ;Pattern_ControlService.c: 255: PatternConfigs[2] = listFocus*76/255;
 14283  003B38  5009               	movf	SetListenFocus@listFocus,w,c
 14284  003B3A  0D4C               	mullw	76
 14285  003B3C  CFF3 F001          	movff	prodl,i2___awdiv@dividend
 14286  003B40  CFF4 F002          	movff	prodh,i2___awdiv@dividend+1
 14287  003B44  0E00               	movlw	0
 14288  003B46  6E04               	movwf	i2___awdiv@divisor+1,c
 14289  003B48  6803               	setf	i2___awdiv@divisor,c
 14290  003B4A  ECB7  F019         	call	i2___awdiv	;wreg free
 14291  003B4E  5001               	movf	?i2___awdiv,w,c
 14292  003B50  0100               	movlb	0	; () banked
 14293  003B52  6FF9               	movwf	(_PatternConfigs+2)& (0+255),b
 14294                           
 14295                           ; BSR set to: 0
 14296  003B54  0012               	return		;funcret
 14297  003B56                     __end_of_SetListenFocus:
 14298                           	opt stack 0
 14299                           tosu	equ	0xFFF
 14300                           tosh	equ	0xFFE
 14301                           tosl	equ	0xFFD
 14302                           pclatu	equ	0xFFB
 14303                           pclath	equ	0xFFA
 14304                           tblptru	equ	0xFF8
 14305                           tblptrh	equ	0xFF7
 14306                           tblptrl	equ	0xFF6
 14307                           tablat	equ	0xFF5
 14308                           prodh	equ	0xFF4
 14309                           prodl	equ	0xFF3
 14310                           intcon	equ	0xFF2
 14311                           postinc0	equ	0xFEE
 14312                           fsr0h	equ	0xFEA
 14313                           fsr0l	equ	0xFE9
 14314                           wreg	equ	0xFE8
 14315                           indf1	equ	0xFE7
 14316                           postinc1	equ	0xFE6
 14317                           postdec1	equ	0xFE5
 14318                           fsr1h	equ	0xFE2
 14319                           fsr1l	equ	0xFE1
 14320                           indf2	equ	0xFDF
 14321                           postinc2	equ	0xFDE
 14322                           postdec2	equ	0xFDD
 14323                           plusw2	equ	0xFDB
 14324                           fsr2h	equ	0xFDA
 14325                           fsr2l	equ	0xFD9
 14326                           status	equ	0xFD8
 14327                           
 14328 ;; *************** function _SetBrightness *****************
 14329 ;; Defined at:
 14330 ;;		line 248 in file "Pattern_ControlService.c"
 14331 ;; Parameters:    Size  Location     Type
 14332 ;;  brightness      1    wreg     unsigned char 
 14333 ;; Auto vars:     Size  Location     Type
 14334 ;;  brightness      1   10[COMRAM] unsigned char 
 14335 ;;  newBrightnes    2    8[COMRAM] unsigned int 
 14336 ;; Return value:  Size  Location     Type
 14337 ;;                  1    wreg      void 
 14338 ;; Registers used:
 14339 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14340 ;; Tracked objects:
 14341 ;;		On entry : 0/0
 14342 ;;		On exit  : 0/0
 14343 ;;		Unchanged: 0/0
 14344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14345 ;;      Params:         0       0       0       0
 14346 ;;      Locals:         3       0       0       0
 14347 ;;      Temps:          0       0       0       0
 14348 ;;      Totals:         3       0       0       0
 14349 ;;Total ram usage:        3 bytes
 14350 ;; Hardware stack levels used:    1
 14351 ;; Hardware stack levels required when called:    1
 14352 ;; This function calls:
 14353 ;;		i2___awdiv
 14354 ;; This function is called by:
 14355 ;;		_ProcessReceive
 14356 ;; This function uses a non-reentrant model
 14357 ;;
 14358                           
 14359                           	psect	text68
 14360  003ACE                     __ptext68:
 14361                           	opt stack 0
 14362  003ACE                     _SetBrightness:
 14363                           	opt stack 17
 14364                           
 14365                           ; BSR set to: 0
 14366                           ;incstack = 0
 14367                           ;SetBrightness@brightness stored from wreg
 14368  003ACE  6E0B               	movwf	SetBrightness@brightness,c
 14369                           
 14370                           ;Pattern_ControlService.c: 249: uint16_t newBrightness = brightness*MaxBrightness/255;
 14371  003AD0  500B               	movf	SetBrightness@brightness,w,c
 14372  003AD2  0253               	mulwf	_MaxBrightness,c
 14373  003AD4  CFF3 F001          	movff	prodl,i2___awdiv@dividend
 14374  003AD8  CFF4 F002          	movff	prodh,i2___awdiv@dividend+1
 14375  003ADC  0E00               	movlw	0
 14376  003ADE  6E04               	movwf	i2___awdiv@divisor+1,c
 14377  003AE0  6803               	setf	i2___awdiv@divisor,c
 14378  003AE2  ECB7  F019         	call	i2___awdiv	;wreg free
 14379  003AE6  C001  F009         	movff	?i2___awdiv,SetBrightness@newBrightness
 14380  003AEA  C002  F00A         	movff	?i2___awdiv+1,SetBrightness@newBrightness+1
 14381                           
 14382                           ;Pattern_ControlService.c: 250: PatternConfigs[1] = newBrightness;
 14383  003AEE  C009  F0F8         	movff	SetBrightness@newBrightness,_PatternConfigs+1
 14384  003AF2  0012               	return		;funcret
 14385  003AF4                     __end_of_SetBrightness:
 14386                           	opt stack 0
 14387                           tosu	equ	0xFFF
 14388                           tosh	equ	0xFFE
 14389                           tosl	equ	0xFFD
 14390                           pclatu	equ	0xFFB
 14391                           pclath	equ	0xFFA
 14392                           tblptru	equ	0xFF8
 14393                           tblptrh	equ	0xFF7
 14394                           tblptrl	equ	0xFF6
 14395                           tablat	equ	0xFF5
 14396                           prodh	equ	0xFF4
 14397                           prodl	equ	0xFF3
 14398                           intcon	equ	0xFF2
 14399                           postinc0	equ	0xFEE
 14400                           fsr0h	equ	0xFEA
 14401                           fsr0l	equ	0xFE9
 14402                           wreg	equ	0xFE8
 14403                           indf1	equ	0xFE7
 14404                           postinc1	equ	0xFE6
 14405                           postdec1	equ	0xFE5
 14406                           fsr1h	equ	0xFE2
 14407                           fsr1l	equ	0xFE1
 14408                           indf2	equ	0xFDF
 14409                           postinc2	equ	0xFDE
 14410                           postdec2	equ	0xFDD
 14411                           plusw2	equ	0xFDB
 14412                           fsr2h	equ	0xFDA
 14413                           fsr2l	equ	0xFD9
 14414                           status	equ	0xFD8
 14415                           
 14416 ;; *************** function i2___awdiv *****************
 14417 ;; Defined at:
 14418 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
 14419 ;; Parameters:    Size  Location     Type
 14420 ;;  dividend        2    0[COMRAM] int 
 14421 ;;  divisor         2    2[COMRAM] int 
 14422 ;; Auto vars:     Size  Location     Type
 14423 ;;  __awdiv         2    6[COMRAM] int 
 14424 ;;  __awdiv         1    5[COMRAM] unsigned char 
 14425 ;;  __awdiv         1    4[COMRAM] unsigned char 
 14426 ;; Return value:  Size  Location     Type
 14427 ;;                  2    0[COMRAM] int 
 14428 ;; Registers used:
 14429 ;;		wreg, status,2, status,0
 14430 ;; Tracked objects:
 14431 ;;		On entry : 0/0
 14432 ;;		On exit  : 0/0
 14433 ;;		Unchanged: 0/0
 14434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14435 ;;      Params:         4       0       0       0
 14436 ;;      Locals:         4       0       0       0
 14437 ;;      Temps:          0       0       0       0
 14438 ;;      Totals:         8       0       0       0
 14439 ;;Total ram usage:        8 bytes
 14440 ;; Hardware stack levels used:    1
 14441 ;; This function calls:
 14442 ;;		Nothing
 14443 ;; This function is called by:
 14444 ;;		_SetBrightness
 14445 ;;		_SetListenFocus
 14446 ;; This function uses a non-reentrant model
 14447 ;;
 14448                           
 14449                           	psect	text69
 14450  00336E                     __ptext69:
 14451                           	opt stack 0
 14452  00336E                     i2___awdiv:
 14453                           	opt stack 17
 14454                           
 14455                           ;incstack = 0
 14456  00336E  0E00               	movlw	0
 14457  003370  6E06               	movwf	i2___awdiv@sign,c
 14458  003372  AE04               	btfss	i2___awdiv@divisor+1,7,c
 14459  003374  D006               	goto	i2l3807
 14460  003376  6C03               	negf	i2___awdiv@divisor,c
 14461  003378  1E04               	comf	i2___awdiv@divisor+1,f,c
 14462  00337A  B0D8               	btfsc	status,0,c
 14463  00337C  2A04               	incf	i2___awdiv@divisor+1,f,c
 14464  00337E  0E01               	movlw	1
 14465  003380  6E06               	movwf	i2___awdiv@sign,c
 14466  003382                     i2l3807:
 14467  003382  AE02               	btfss	i2___awdiv@dividend+1,7,c
 14468  003384  D006               	goto	i2l3813
 14469  003386  6C01               	negf	i2___awdiv@dividend,c
 14470  003388  1E02               	comf	i2___awdiv@dividend+1,f,c
 14471  00338A  B0D8               	btfsc	status,0,c
 14472  00338C  2A02               	incf	i2___awdiv@dividend+1,f,c
 14473  00338E  0E01               	movlw	1
 14474  003390  1A06               	xorwf	i2___awdiv@sign,f,c
 14475  003392                     i2l3813:
 14476  003392  0E00               	movlw	0
 14477  003394  6E08               	movwf	i2___awdiv@quotient+1,c
 14478  003396  0E00               	movlw	0
 14479  003398  6E07               	movwf	i2___awdiv@quotient,c
 14480  00339A  5003               	movf	i2___awdiv@divisor,w,c
 14481  00339C  1004               	iorwf	i2___awdiv@divisor+1,w,c
 14482  00339E  B4D8               	btfsc	status,2,c
 14483  0033A0  D01C               	goto	i2l3835
 14484  0033A2  0E01               	movlw	1
 14485  0033A4  6E05               	movwf	i2___awdiv@counter,c
 14486  0033A6  D004               	goto	i2l3821
 14487  0033A8                     i2l3819:
 14488  0033A8  90D8               	bcf	status,0,c
 14489  0033AA  3603               	rlcf	i2___awdiv@divisor,f,c
 14490  0033AC  3604               	rlcf	i2___awdiv@divisor+1,f,c
 14491  0033AE  2A05               	incf	i2___awdiv@counter,f,c
 14492  0033B0                     i2l3821:
 14493  0033B0  AE04               	btfss	i2___awdiv@divisor+1,7,c
 14494  0033B2  D7FA               	goto	i2l3819
 14495  0033B4                     i2l3823:
 14496  0033B4  90D8               	bcf	status,0,c
 14497  0033B6  3607               	rlcf	i2___awdiv@quotient,f,c
 14498  0033B8  3608               	rlcf	i2___awdiv@quotient+1,f,c
 14499  0033BA  5003               	movf	i2___awdiv@divisor,w,c
 14500  0033BC  5C01               	subwf	i2___awdiv@dividend,w,c
 14501  0033BE  5004               	movf	i2___awdiv@divisor+1,w,c
 14502  0033C0  5802               	subwfb	i2___awdiv@dividend+1,w,c
 14503  0033C2  A0D8               	btfss	status,0,c
 14504  0033C4  D005               	goto	i2l3831
 14505  0033C6  5003               	movf	i2___awdiv@divisor,w,c
 14506  0033C8  5E01               	subwf	i2___awdiv@dividend,f,c
 14507  0033CA  5004               	movf	i2___awdiv@divisor+1,w,c
 14508  0033CC  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 14509  0033CE  8007               	bsf	i2___awdiv@quotient,0,c
 14510  0033D0                     i2l3831:
 14511  0033D0  90D8               	bcf	status,0,c
 14512  0033D2  3204               	rrcf	i2___awdiv@divisor+1,f,c
 14513  0033D4  3203               	rrcf	i2___awdiv@divisor,f,c
 14514  0033D6  2E05               	decfsz	i2___awdiv@counter,f,c
 14515  0033D8  D7ED               	goto	i2l3823
 14516  0033DA                     i2l3835:
 14517  0033DA  5006               	movf	i2___awdiv@sign,w,c
 14518  0033DC  B4D8               	btfsc	status,2,c
 14519  0033DE  D004               	goto	i2l3839
 14520  0033E0  6C07               	negf	i2___awdiv@quotient,c
 14521  0033E2  1E08               	comf	i2___awdiv@quotient+1,f,c
 14522  0033E4  B0D8               	btfsc	status,0,c
 14523  0033E6  2A08               	incf	i2___awdiv@quotient+1,f,c
 14524  0033E8                     i2l3839:
 14525  0033E8  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 14526  0033EC  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 14527  0033F0  0012               	return	
 14528  0033F2                     __end_ofi2___awdiv:
 14529                           	opt stack 0
 14530                           tosu	equ	0xFFF
 14531                           tosh	equ	0xFFE
 14532                           tosl	equ	0xFFD
 14533                           pclatu	equ	0xFFB
 14534                           pclath	equ	0xFFA
 14535                           tblptru	equ	0xFF8
 14536                           tblptrh	equ	0xFF7
 14537                           tblptrl	equ	0xFF6
 14538                           tablat	equ	0xFF5
 14539                           prodh	equ	0xFF4
 14540                           prodl	equ	0xFF3
 14541                           intcon	equ	0xFF2
 14542                           postinc0	equ	0xFEE
 14543                           fsr0h	equ	0xFEA
 14544                           fsr0l	equ	0xFE9
 14545                           wreg	equ	0xFE8
 14546                           indf1	equ	0xFE7
 14547                           postinc1	equ	0xFE6
 14548                           postdec1	equ	0xFE5
 14549                           fsr1h	equ	0xFE2
 14550                           fsr1l	equ	0xFE1
 14551                           indf2	equ	0xFDF
 14552                           postinc2	equ	0xFDE
 14553                           postdec2	equ	0xFDD
 14554                           plusw2	equ	0xFDB
 14555                           fsr2h	equ	0xFDA
 14556                           fsr2l	equ	0xFD9
 14557                           status	equ	0xFD8
 14558                           
 14559 ;; *************** function _CAN_ErrorResponse *****************
 14560 ;; Defined at:
 14561 ;;		line 81 in file "CAN_RX_HW.c"
 14562 ;; Parameters:    Size  Location     Type
 14563 ;;		None
 14564 ;; Auto vars:     Size  Location     Type
 14565 ;;		None
 14566 ;; Return value:  Size  Location     Type
 14567 ;;                  1    wreg      void 
 14568 ;; Registers used:
 14569 ;;		None
 14570 ;; Tracked objects:
 14571 ;;		On entry : 0/0
 14572 ;;		On exit  : 0/0
 14573 ;;		Unchanged: 0/0
 14574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14575 ;;      Params:         0       0       0       0
 14576 ;;      Locals:         0       0       0       0
 14577 ;;      Temps:          0       0       0       0
 14578 ;;      Totals:         0       0       0       0
 14579 ;;Total ram usage:        0 bytes
 14580 ;; Hardware stack levels used:    1
 14581 ;; This function calls:
 14582 ;;		Nothing
 14583 ;; This function is called by:
 14584 ;;		_ISR
 14585 ;; This function uses a non-reentrant model
 14586 ;;
 14587                           
 14588                           	psect	text70
 14589  003CD4                     __ptext70:
 14590                           	opt stack 0
 14591  003CD4                     _CAN_ErrorResponse:
 14592                           	opt stack 20
 14593                           
 14594                           ;incstack = 0
 14595  003CD4  0012               	return		;funcret
 14596  003CD6                     __end_of_CAN_ErrorResponse:
 14597                           	opt stack 0
 14598                           tosu	equ	0xFFF
 14599                           tosh	equ	0xFFE
 14600                           tosl	equ	0xFFD
 14601                           pclatu	equ	0xFFB
 14602                           pclath	equ	0xFFA
 14603                           tblptru	equ	0xFF8
 14604                           tblptrh	equ	0xFF7
 14605                           tblptrl	equ	0xFF6
 14606                           tablat	equ	0xFF5
 14607                           prodh	equ	0xFF4
 14608                           prodl	equ	0xFF3
 14609                           intcon	equ	0xFF2
 14610                           postinc0	equ	0xFEE
 14611                           fsr0h	equ	0xFEA
 14612                           fsr0l	equ	0xFE9
 14613                           wreg	equ	0xFE8
 14614                           indf1	equ	0xFE7
 14615                           postinc1	equ	0xFE6
 14616                           postdec1	equ	0xFE5
 14617                           fsr1h	equ	0xFE2
 14618                           fsr1l	equ	0xFE1
 14619                           indf2	equ	0xFDF
 14620                           postinc2	equ	0xFDE
 14621                           postdec2	equ	0xFDD
 14622                           plusw2	equ	0xFDB
 14623                           fsr2h	equ	0xFDA
 14624                           fsr2l	equ	0xFD9
 14625                           status	equ	0xFD8
 14626                           
 14627 ;; *************** function _CAN_BusErrorResponse *****************
 14628 ;; Defined at:
 14629 ;;		line 87 in file "CAN_RX_HW.c"
 14630 ;; Parameters:    Size  Location     Type
 14631 ;;		None
 14632 ;; Auto vars:     Size  Location     Type
 14633 ;;		None
 14634 ;; Return value:  Size  Location     Type
 14635 ;;                  1    wreg      void 
 14636 ;; Registers used:
 14637 ;;		None
 14638 ;; Tracked objects:
 14639 ;;		On entry : 0/0
 14640 ;;		On exit  : 0/0
 14641 ;;		Unchanged: 0/0
 14642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14643 ;;      Params:         0       0       0       0
 14644 ;;      Locals:         0       0       0       0
 14645 ;;      Temps:          0       0       0       0
 14646 ;;      Totals:         0       0       0       0
 14647 ;;Total ram usage:        0 bytes
 14648 ;; Hardware stack levels used:    1
 14649 ;; This function calls:
 14650 ;;		Nothing
 14651 ;; This function is called by:
 14652 ;;		_ISR
 14653 ;; This function uses a non-reentrant model
 14654 ;;
 14655                           
 14656                           	psect	text71
 14657  003CD6                     __ptext71:
 14658                           	opt stack 0
 14659  003CD6                     _CAN_BusErrorResponse:
 14660                           	opt stack 20
 14661                           
 14662                           ;incstack = 0
 14663  003CD6  0012               	return		;funcret
 14664  003CD8                     __end_of_CAN_BusErrorResponse:
 14665                           	opt stack 0
 14666                           tosu	equ	0xFFF
 14667                           tosh	equ	0xFFE
 14668                           tosl	equ	0xFFD
 14669                           pclatu	equ	0xFFB
 14670                           pclath	equ	0xFFA
 14671                           tblptru	equ	0xFF8
 14672                           tblptrh	equ	0xFF7
 14673                           tblptrl	equ	0xFF6
 14674                           tablat	equ	0xFF5
 14675                           prodh	equ	0xFF4
 14676                           prodl	equ	0xFF3
 14677                           intcon	equ	0xFF2
 14678                           postinc0	equ	0xFEE
 14679                           fsr0h	equ	0xFEA
 14680                           fsr0l	equ	0xFE9
 14681                           wreg	equ	0xFE8
 14682                           indf1	equ	0xFE7
 14683                           postinc1	equ	0xFE6
 14684                           postdec1	equ	0xFE5
 14685                           fsr1h	equ	0xFE2
 14686                           fsr1l	equ	0xFE1
 14687                           indf2	equ	0xFDF
 14688                           postinc2	equ	0xFDE
 14689                           postdec2	equ	0xFDD
 14690                           plusw2	equ	0xFDB
 14691                           fsr2h	equ	0xFDA
 14692                           fsr2l	equ	0xFD9
 14693                           status	equ	0xFD8
 14694                           tosu	equ	0xFFF
 14695                           tosh	equ	0xFFE
 14696                           tosl	equ	0xFFD
 14697                           pclatu	equ	0xFFB
 14698                           pclath	equ	0xFFA
 14699                           tblptru	equ	0xFF8
 14700                           tblptrh	equ	0xFF7
 14701                           tblptrl	equ	0xFF6
 14702                           tablat	equ	0xFF5
 14703                           prodh	equ	0xFF4
 14704                           prodl	equ	0xFF3
 14705                           intcon	equ	0xFF2
 14706                           postinc0	equ	0xFEE
 14707                           fsr0h	equ	0xFEA
 14708                           fsr0l	equ	0xFE9
 14709                           wreg	equ	0xFE8
 14710                           indf1	equ	0xFE7
 14711                           postinc1	equ	0xFE6
 14712                           postdec1	equ	0xFE5
 14713                           fsr1h	equ	0xFE2
 14714                           fsr1l	equ	0xFE1
 14715                           indf2	equ	0xFDF
 14716                           postinc2	equ	0xFDE
 14717                           postdec2	equ	0xFDD
 14718                           plusw2	equ	0xFDB
 14719                           fsr2h	equ	0xFDA
 14720                           fsr2l	equ	0xFD9
 14721                           status	equ	0xFD8
 14722                           
 14723                           	psect	text72
 14724  000000                     __ptext72:
 14725                           	opt stack 0
 14726                           tosu	equ	0xFFF
 14727                           tosh	equ	0xFFE
 14728                           tosl	equ	0xFFD
 14729                           pclatu	equ	0xFFB
 14730                           pclath	equ	0xFFA
 14731                           tblptru	equ	0xFF8
 14732                           tblptrh	equ	0xFF7
 14733                           tblptrl	equ	0xFF6
 14734                           tablat	equ	0xFF5
 14735                           prodh	equ	0xFF4
 14736                           prodl	equ	0xFF3
 14737                           intcon	equ	0xFF2
 14738                           postinc0	equ	0xFEE
 14739                           fsr0h	equ	0xFEA
 14740                           fsr0l	equ	0xFE9
 14741                           wreg	equ	0xFE8
 14742                           indf1	equ	0xFE7
 14743                           postinc1	equ	0xFE6
 14744                           postdec1	equ	0xFE5
 14745                           fsr1h	equ	0xFE2
 14746                           fsr1l	equ	0xFE1
 14747                           indf2	equ	0xFDF
 14748                           postinc2	equ	0xFDE
 14749                           postdec2	equ	0xFDD
 14750                           plusw2	equ	0xFDB
 14751                           fsr2h	equ	0xFDA
 14752                           fsr2l	equ	0xFD9
 14753                           status	equ	0xFD8
 14754                           
 14755                           	psect	rparam
 14756  0000                     tosu	equ	0xFFF
 14757                           tosh	equ	0xFFE
 14758                           tosl	equ	0xFFD
 14759                           pclatu	equ	0xFFB
 14760                           pclath	equ	0xFFA
 14761                           tblptru	equ	0xFF8
 14762                           tblptrh	equ	0xFF7
 14763                           tblptrl	equ	0xFF6
 14764                           tablat	equ	0xFF5
 14765                           prodh	equ	0xFF4
 14766                           prodl	equ	0xFF3
 14767                           intcon	equ	0xFF2
 14768                           postinc0	equ	0xFEE
 14769                           fsr0h	equ	0xFEA
 14770                           fsr0l	equ	0xFE9
 14771                           wreg	equ	0xFE8
 14772                           indf1	equ	0xFE7
 14773                           postinc1	equ	0xFE6
 14774                           postdec1	equ	0xFE5
 14775                           fsr1h	equ	0xFE2
 14776                           fsr1l	equ	0xFE1
 14777                           indf2	equ	0xFDF
 14778                           postinc2	equ	0xFDE
 14779                           postdec2	equ	0xFDD
 14780                           plusw2	equ	0xFDB
 14781                           fsr2h	equ	0xFDA
 14782                           fsr2l	equ	0xFD9
 14783                           status	equ	0xFD8
 14784                           
 14785                           	psect	temp
 14786  000054                     btemp:
 14787                           	opt stack 0
 14788  000054                     	ds	1
 14789  0000                     int$flags	set	btemp
 14790                           tosu	equ	0xFFF
 14791                           tosh	equ	0xFFE
 14792                           tosl	equ	0xFFD
 14793                           pclatu	equ	0xFFB
 14794                           pclath	equ	0xFFA
 14795                           tblptru	equ	0xFF8
 14796                           tblptrh	equ	0xFF7
 14797                           tblptrl	equ	0xFF6
 14798                           tablat	equ	0xFF5
 14799                           prodh	equ	0xFF4
 14800                           prodl	equ	0xFF3
 14801                           intcon	equ	0xFF2
 14802                           postinc0	equ	0xFEE
 14803                           fsr0h	equ	0xFEA
 14804                           fsr0l	equ	0xFE9
 14805                           wreg	equ	0xFE8
 14806                           indf1	equ	0xFE7
 14807                           postinc1	equ	0xFE6
 14808                           postdec1	equ	0xFE5
 14809                           fsr1h	equ	0xFE2
 14810                           fsr1l	equ	0xFE1
 14811                           indf2	equ	0xFDF
 14812                           postinc2	equ	0xFDE
 14813                           postdec2	equ	0xFDD
 14814                           plusw2	equ	0xFDB
 14815                           fsr2h	equ	0xFDA
 14816                           fsr2l	equ	0xFD9
 14817                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    93
    Data        10
    BSS         577
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      83
    BANK0           160    110     155
    BANK1           256      0     196
    BANK2           256      0       0

Pointer List with Targets:

    HueTest@15710	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    HueTest@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    BrokenPinwheel@15776	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    BrokenPinwheel@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    DoubleFadedLoop@15751	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    DoubleFadedLoop@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    MirroredQuadrants@15794	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    MirroredQuadrants@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    SingleFocusBreathe@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    SingleFadedLoop@15741	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    SingleFadedLoop@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    CenterBreathe@15728	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    CenterBreathe@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    FullPulseHold@15718	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    SetupPattern@listeningFocusPointer	PTR unsigned char  size(2) Largest target is 4
		 -> PatternConfigs(BANK0[4]), 

    ListeningFocus	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(BANK0[4]), 

    SetupPattern@patternIDPointer	PTR unsigned char  size(2) Largest target is 4
		 -> PatternConfigs(BANK0[4]), 

    PatternID	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(BANK0[4]), 

    SingleFocusBreathe@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    SingleFocusBreathe@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    SingleFocusBreathe@focus	PTR void  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(BANK0[4]), 

    MirroredQuadrants@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    MirroredQuadrants@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    BrokenPinwheel@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    BrokenPinwheel@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    DoubleFadedLoop@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    DoubleFadedLoop@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    SingleFadedLoop@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    SingleFadedLoop@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    CenterBreathe@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    CenterBreathe@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    FullPulseHold@cycleCounter	PTR unsigned long  size(2) Largest target is 4
		 -> CycleCounter(BANK0[4]), 

    FullPulseHold@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    FullPulseHold@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    HueTest@ptrnStepCounter	PTR unsigned char  size(2) Largest target is 1
		 -> PatternStepCounter(BANK0[1]), 

    HueTest@ptrnPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    HSV_to_RGB@HSV_Value	PTR unsigned long  size(2) Largest target is 316
		 -> PixelFrames(BIGRAM[316]), 

    SPI32_TransmitFrames@framePointer	PTR unsigned long  size(2) Largest target is 316
		 -> PixelFrames(BIGRAM[316]), 

    FramePointer	PTR unsigned long  size(2) Largest target is 316
		 -> NULL(NULL[0]), PixelFrames(BIGRAM[316]), 

    DotStar_Show@patternPointer	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    DotStar_Init@brightnessPointer	PTR unsigned char  size(2) Largest target is 4
		 -> PatternConfigs(BANK0[4]), 

    Brightness	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), PatternConfigs(BANK0[4]), 

    sp__PatternOff	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    sp__UpdatePattern	PTR unsigned int  size(2) Largest target is 152
		 -> PixelPattern(BANK1[152]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    S105$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(COMRAM[12]), 

    S74$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    S74$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _SPI32_EOTResponse->i2_PostSPI32ControlService
    i2_PostSPI32ControlService->i2_ES_PostToService
    _CAN_RCVResponse->_ProcessReceive
    _ProcessReceive->i2_PostPatternControlService
    i2_PostPatternControlService->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod
    _SetListenFocus->i2___awdiv
    _SetBrightness->i2___awdiv

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_RunSPI32ControlService
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostPatternControlService
    _ES_Timer_Tick_Resp->_PostSPI32ControlService
    _StopPattern->_DotStar_Show
    _ShowPattern->_DotStar_Show
    _UpdatePattern->_CenterBreathe
    _SingleFocusBreathe->___awdiv
    _SingleFadedLoop->___awdiv
    _MirroredQuadrants->___awdiv
    _HueTest->___lwdiv
    _DoubleFadedLoop->___awdiv
    _CenterBreathe->___awdiv
    _BrokenPinwheel->___awdiv
    _DotStar_Show->_HSV_to_RGB
    _SPI32_TransmitFrames->_PostSPI32ControlService
    _PostSPI32ControlService->_ES_PostToService
    _HSV_to_RGB->___lwdiv
    ___lwdiv->___wmul
    _PostPatternControlService->_ES_PostToService
    _PausePattern->_ES_Timer_StopTimer
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitPatternControlService
    _ES_Initialize->_InitSPI32ControlService
    _InitSPI32ControlService->_ES_PostToService
    _InitPatternControlService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  175535
                                            109 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0  152154
                                            104 BANK0      5     5      0
                         _ES_DeQueue
                     _ES_GetMSBitSet
           _RunPatternControlService *
             _RunSPI32ControlService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0   22564
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0   22564
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
          _PostPatternControlService *
            _PostSPI32ControlService *
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunSPI32ControlService                              13    10      3     388
                                             91 BANK0     13    10      3
                       _GetNextFrame
                    _SPI32_SendFrame
 ---------------------------------------------------------------------------------
 (3) _SPI32_SendFrame                                      8     4      4     246
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _GetNextFrame                                         4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _RunPatternControlService                             9     6      3  125549
                                             91 BANK0      9     6      3
                       _PausePattern
          _PostPatternControlService
                        _ShowPattern
                        _StopPattern
 ---------------------------------------------------------------------------------
 (3) _StopPattern                                          0     0      0   16148
                       _DotStar_Show
                 _ES_Timer_StopTimer
                         _PatternOff
                       _ResetPattern
 ---------------------------------------------------------------------------------
 (4) _ResetPattern                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _PatternOff                                           3     1      2      68
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ShowPattern                                          0     0      0   98068
                       _DotStar_Show
                 _ES_Timer_InitTimer
                      _UpdatePattern
 ---------------------------------------------------------------------------------
 (4) _UpdatePattern                                        6     4      2   81824
                                             48 BANK0      6     4      2
                     _BrokenPinwheel
                      _CenterBreathe
                    _DoubleFadedLoop
                      _FullPulseHold
                            _HueTest
                  _MirroredQuadrants
                    _SingleFadedLoop
                 _SingleFocusBreathe
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _SingleFocusBreathe                                  35    25     10   11485
                                              8 BANK0     35    25     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _SingleFadedLoop                                     28    18     10   10736
                                              8 BANK0     28    18     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _MirroredQuadrants                                   28    18     10   11066
                                              8 BANK0     28    18     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _HueTest                                             14     4     10   11445
                                             19 BANK0     14     4     10
                            ___awmod
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _FullPulseHold                                       22    12     10     879
                                              0 BANK0     22    12     10
 ---------------------------------------------------------------------------------
 (5) _DoubleFadedLoop                                     29    19     10   11294
                                              8 BANK0     29    19     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _CenterBreathe                                       40    30     10   11014
                                              8 BANK0     40    30     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _BrokenPinwheel                                      29    19     10   11551
                                              8 BANK0     29    19     10
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    2172
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_InitTimer                                   5     3      2     208
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _DotStar_Show                                        22    20      2   16036
                                             69 BANK0     22    20      2
                         _HSV_to_RGB
                         _PatternOff (ARG)
               _SPI32_TransmitFrames
                      _UpdatePattern (ARG)
 ---------------------------------------------------------------------------------
 (5) _SPI32_TransmitFrames                                 6     3      3   11361
                                             32 BANK0      6     3      3
            _PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (4) _PostSPI32ControlService                              3     0      3   11142
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _HSV_to_RGB                                          54    52      2    4389
                                             19 BANK0     50    48      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     766
                                             12 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _PostPatternControlService                            3     0      3   11089
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _PausePattern                                         0     0      0      44
                 _ES_Timer_StopTimer
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_StopTimer                                   5     5      0      44
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    3253
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2   22985
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
          _InitPatternControlService *
            _InitSPI32ControlService *
 ---------------------------------------------------------------------------------
 (2) _InitSPI32ControlService                              4     4      0   10986
                                             29 BANK0      4     4      0
                   _ES_PostToService
                         _SPI32_Init
 ---------------------------------------------------------------------------------
 (3) _SPI32_Init                                           0     0      0       0
                            _HW_Init
 ---------------------------------------------------------------------------------
 (4) _HW_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternControlService                            4     4      0   11280
                                             29 BANK0      4     4      0
                           _CAN_Init
                       _DotStar_Init
                   _ES_PostToService
                       _SetupPattern
 ---------------------------------------------------------------------------------
 (3) _SetupPattern                                         4     0      4     196
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3   10941
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5   10549
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    2385
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4    7638
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _DotStar_Init                                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _CAN_Init                                             0     0      0       0
                    _InitCanHardware
                           _InitPins
 ---------------------------------------------------------------------------------
 (4) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                16    16      0    3469
                                             37 COMRAM    16    16      0
               _CAN_BusErrorResponse
                  _CAN_ErrorResponse
                    _CAN_RCVResponse
                   _CAN_XmitResponse
                  _SPI32_EOTResponse
 ---------------------------------------------------------------------------------
 (11) _SPI32_EOTResponse                                   3     3      0    1108
                                             32 COMRAM     3     3      0
          i2_PostSPI32ControlService
                  i2_SPI32_SendFrame
 ---------------------------------------------------------------------------------
 (12) i2_SPI32_SendFrame                                   8     4      4      70
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (12) i2_PostSPI32ControlService                           3     0      3    1015
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (11) _CAN_XmitResponse                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _CAN_RCVResponse                                     0     0      0    2361
                     _ProcessReceive
 ---------------------------------------------------------------------------------
 (12) _ProcessReceive                                      5     5      0    2361
                                             32 COMRAM     5     5      0
                      _SetBrightness
                     _SetListenFocus
                         _SetPattern
        i2_PostPatternControlService
                          i2___awmod
 ---------------------------------------------------------------------------------
 (13) i2_PostPatternControlService                         3     0      3    1015
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (13) i2_ES_PostToService                                  6     3      3     967
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (14) i2_ES_EnQueueFIFO                                   11     6      5     827
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (15) i2___wmul                                            6     2      4     153
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (15) i2___awmod                                           6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (13) _SetPattern                                          1     1      0      22
                                              0 COMRAM     1     1      0
                     i2_ResetPattern
 ---------------------------------------------------------------------------------
 (14) i2_ResetPattern                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _SetListenFocus                                      1     1      0     426
                                              8 COMRAM     1     1      0
                          i2___awdiv
 ---------------------------------------------------------------------------------
 (13) _SetBrightness                                       3     3      0     449
                                              8 COMRAM     3     3      0
                          i2___awdiv
 ---------------------------------------------------------------------------------
 (14) i2___awdiv                                           8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (11) _CAN_ErrorResponse                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _CAN_BusErrorResponse                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitPatternControlService *
       _CAN_Init
         _InitCanHardware
         _InitPins
       _DotStar_Init
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SetupPattern
     _InitSPI32ControlService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SPI32_Init
         _HW_Init
   _ES_Run
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunPatternControlService *
       _PausePattern
         _ES_Timer_StopTimer
       _PostPatternControlService
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
       _ShowPattern
         _DotStar_Show
           _HSV_to_RGB
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _PatternOff (ARG)
           _SPI32_TransmitFrames (ARG)
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             _BrokenPinwheel
               ___awdiv
               ___awmod
             _CenterBreathe
               ___awdiv
               ___awmod
             _DoubleFadedLoop
               ___awdiv
               ___awmod
             _FullPulseHold
             _HueTest
               ___awmod
               ___lwdiv
                 ___wmul (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awmod (ARG)
             _MirroredQuadrants
               ___awdiv
               ___awmod
             _SingleFadedLoop
               ___awdiv
               ___awmod
             _SingleFocusBreathe
               ___awdiv
               ___awmod
             ___awdiv
         _ES_Timer_InitTimer
         _UpdatePattern
           _BrokenPinwheel
             ___awdiv
             ___awmod
           _CenterBreathe
             ___awdiv
             ___awmod
           _DoubleFadedLoop
             ___awdiv
             ___awmod
           _FullPulseHold
           _HueTest
             ___awmod
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _MirroredQuadrants
             ___awdiv
             ___awmod
           _SingleFadedLoop
             ___awdiv
             ___awmod
           _SingleFocusBreathe
             ___awdiv
             ___awmod
           ___awdiv
       _StopPattern
         _DotStar_Show
           _HSV_to_RGB
             ___lwdiv
               ___wmul (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awmod (ARG)
           _PatternOff (ARG)
           _SPI32_TransmitFrames (ARG)
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             _BrokenPinwheel
               ___awdiv
               ___awmod
             _CenterBreathe
               ___awdiv
               ___awmod
             _DoubleFadedLoop
               ___awdiv
               ___awmod
             _FullPulseHold
             _HueTest
               ___awmod
               ___lwdiv
                 ___wmul (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awmod (ARG)
             _MirroredQuadrants
               ___awdiv
               ___awmod
             _SingleFadedLoop
               ___awdiv
               ___awmod
             _SingleFocusBreathe
               ___awdiv
               ___awmod
             ___awdiv
         _ES_Timer_StopTimer
         _PatternOff
         _ResetPattern
     _RunSPI32ControlService *
       _GetNextFrame
       _SPI32_SendFrame
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostPatternControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostSPI32ControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _CAN_BusErrorResponse
   _CAN_ErrorResponse
   _CAN_RCVResponse
     _ProcessReceive
       _SetBrightness
         i2___awdiv
       _SetListenFocus
         i2___awdiv
       _SetPattern
         i2_ResetPattern
       i2_PostPatternControlService
         i2_ES_PostToService
           i2_ES_EnQueueFIFO
             i2___awmod
             i2___wmul
               i2___awmod (ARG)
       i2___awmod
   _CAN_XmitResponse
   _SPI32_EOTResponse
     i2_PostSPI32ControlService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)
     i2_SPI32_SendFrame

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0     13C      10       41.2%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      C4       6       76.6%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     6E      9B       4       96.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      53       1       88.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B2       9        0.0%
DATA                 0      0     2EE      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Jan 26 12:08:19 2017

                 HSV_to_RGB@HSV_Value 0073                      ??__HW_Timer_Init 0062  
            SingleFocusBreathe@rising 00F5                MirroredQuadrants@15794 0070  
                 UpdatePattern@i_1361 0095                   __HW_Timer_Init@Rate 0060  
                        ___awdiv@sign 0065                   ___wmul@multiplicand 0068  
                     ??_UpdatePattern 0092         DotStar_Init@brightnessPointer 0060  
                      FullPulseHold@i 0075                           __CFG_OSC$HS 000000  
              __size_of_FullPulseHold 018E   RunPatternControlService@ReturnEvent 00BE  
                                 l322 2F6A                                   l406 2A18  
                                 l612 3550                                   l609 34F4  
                                 l490 11CE                                   l491 11E8  
                                 l492 11FA                                   l493 1214  
                                 l487 11A2                                   l807 1DEE  
                                 l479 336C                                   l489 11B4  
                                 l657 25B2                                   l693 1AA2  
               __end_of_ES_Initialize 2D00                                   _GIE 007F97  
                                 _ISR 0008             __end_of_SPI32_EOTResponse 3A0C  
              __end_ofi2_ResetPattern 3C30                          ___awmod@sign 0065  
                                 prod 000FF3                                   tosl 000FFD  
                                 wreg 000FE8                ES_EnQueueFIFO@SaveCrit 0074  
             ES_EnQueueFIFO@Event2Add 006E                     ?_ES_PostToService 0077  
        FullPulseHold@ptrnStepCounter 0062                                  ?_ISR 0001  
          i2ES_EnQueueFIFO@pThisQueue 0016             FullPulseHold@cycleCounter 0064  
                        __CFG_WDT$OFF 000000            ES_Timer_Tick_Resp@NewEvent 00D2  
                                l3021 3280                                  l3013 325C  
                                l3101 2FC8                                  l3023 328C  
                                l3103 2FD4                                  l3025 3292  
                                l3033 32C4                                  l3017 326C  
                                l3121 302C                                  l3113 300A  
                                l3105 2FDA                                  l3131 358A  
                                l1283 35DA                                  l3203 1012  
                                l3037 32D8                                  l3029 32B6  
                                l3133 3596                                  l3221 122E  
                                l3117 3018                                  l4021 2EE4  
                                l4013 2EB8                                  l4007 3796  
                                l3143 35CC                                  l3135 359C  
                                l3223 1264                                  l3303 17C8  
                                l4103 29FA                                  l4031 2F06  
                                l3057 2DDE                                  l3073 3656  
                                l4025 2EF2                                  l3331 19E6  
                                l3251 2A36                                  l4107 2A02  
                                l4043 2F28                                  l4027 2EF6  
                                l3333 19F0                                  l3317 18EA  
                                l3405 0AC4                                  l4037 2F16  
                                l4205 2BFC                                  l3095 2FAA  
                                l3335 1A10                                  l3343 1A7C  
                                l3423 0C64                                  l3407 0B02  
                                l3263 2444                                  l3247 2A2C  
                                l3511 1532                                  l3503 14BC  
                                l4231 3A50                                  l3089 2F94  
                                l3353 1ACC                                  l3329 1972  
                                l3417 0C54                                  l3273 24B6  
                                l3257 2AE6                                  l3513 1570  
                                l4081 2928                                  l4049 2F38  
                                l4057 2F4E                                  l4233 3A58  
                                l4075 39CE                                  l3451 03C4  
                                l3347 1A8E                                  l3435 0D5A  
                                l3427 0D1A                                  l3419 0C5A  
                                l3291 2584                                  l3267 244E  
                                l3363 219C                                  l4173 2C74  
                                l4165 2C26                                  l3437 0D98  
                                l3285 2538                                  l3277 24C8  
                                l3541 1B24                                  l3701 217E  
                                l4093 296A                                  l4085 2934  
                                l3605 31A8                                  l3711 25C4  
                                l3455 03CE                                  l3447 0EEA  
                                l3279 2522                                  l3527 176E  
                                l3375 233E                                  l3367 22C8  
                                l3359 2192                                  l3615 3234  
                                l4185 2CF6                                  l4177 2C78  
                                l4169 2C30                                  l3297 17BE  
                                l3393 09CE                                  l3377 237C  
                                l3385 23E8                                  l3561 1D5C  
                                l3545 1C3E                                  l3537 1B1A  
                                l4193 2B26                                  l3627 384C  
                                l3707 25BA                                  l3467 0574  
                                l3459 04FA                                  l3491 0980  
                                l3555 1CBE                                  l3651 1E48  
                                l3723 3924                                  l3619 323A  
                                l4189 2CFC                                  l3469 05B0  
                                l3397 0A84                                  l3389 09C4  
                                l3573 1DDA                                  l3557 1D32  
                                l3653 1E4E                                  l3733 394E  
                                l4381 331E                                  l3719 26CA  
                                l3495 1386                                  l3559 1D3C  
                                l3671 1F7C                                  l3663 1E78  
                                l3727 392E                                  l4199 2BA8  
                                l4383 3330                                  l3569 1DC8  
                                l3673 1FBA                                  l3665 1EBA  
                                l3657 1E58                                  l3913 37B4  
                                l4385 3342                                  l3499 1390  
                                l3579 1E18                                  l3691 2116  
                                l3683 20C4                                  l3675 1FFC  
                                l3667 1EFC                                  l4379 330C  
                                l3685 2106                                  l3669 1F3E  
                                l3853 281E                                  l4389 3354  
                                l3927 3912                                  l3919 38EA  
                                l3687 210C                                  l3679 2060  
                                l3863 2896                                  l3953 27DC  
                                l3865 28D4                                  l3699 2136  
                                l3949 27C0                                  l3981 3C3A  
                                l3959 2804                                  l3977 3C32  
                                STR_1 035E                                  STR_2 0379  
                                STR_3 0391                                  STR_4 03A8  
                                _LATA 000F89                                  _LATB 000F8A  
                                _LATC 000F8B                                  u2145 19D0  
                                u2504 31CE                                  u2505 31C6  
                                u3138 2BD2                                  u2435 1D1C  
                                u3139 2BEA                                  _PIE1 000F9D  
                                u2800 37E0                                  u3098 2CD0  
                                u3099 2CEC                                  u2805 37D6  
                                _PEIE 007F96                                  u2778 287E  
                                u1995 0F84                    ??_ES_PostToService 007A  
               __end_of_CenterBreathe 1AFA                      ??_BrokenPinwheel 0072  
                     __end_of_HW_Init 3B16                                  _main 32E2  
                         ?_ES_DeQueue 006C                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 0054  
                       main@ErrorType 00CD                                  pclat 000FFA  
                                prodh 000FF4                                  prodl 000FF3  
                                start 0016                      __end_of_CAN_Init 3CB4  
   __end_of_InitPatternControlService 379A                           ?_SPI32_Init 0001  
                       __CFG_MCLRE$ON 000000                          ___param_bank 000010  
                     __end_of_HueTest 2B24                  __end_of_GetNextFrame 3BE2  
                    FullPulseHold@val 0074               __end_of_InitCanHardware 356C  
                               ??_ISR 0026             CenterBreathe@cycleCounter 006C  
                  ES_Run@HighestPrior 00CC                                 ?_main 0001  
               __end_of_ES_Timer_Init 3C92                       __end_of___awdiv 3036  
                     __end_of___awmod 32E2                       __end_of___lbmod 391E  
                     ___awdiv@divisor 0062                                 _T1CON 000FCD  
                     __end_of___lwdiv 35E4                                 _ERRIE 007D1D  
                               _ERRIF 007D25                                 i2l167 2E74  
                               i2l629 317A                       ___awdiv@counter 0064  
                               _IRXIE 007D1F                                 _IRXIF 007D27  
         ??i2_PostSPI32ControlService 0021                     BrokenPinwheel@val 0083  
                               _PORTA 000F80                                 _PORTB 000F81  
                               _PORTC 000F82                                 _TRISA 000F92  
                               _TRISC 000F94                                 _SSPIE 007CEB  
                               _SSPIF 007CF3              __size_of_SingleFadedLoop 029A  
                          _Brightness 00F0                         __CFG_PWRT$OFF 000000  
                     ?i2_ResetPattern 0001                  _SPI32_TransmitFrames 3A76  
                     HueTest@base_hue 0079                       HueTest@base_sat 007A  
                         ?_HSV_to_RGB 0073                                 _Ready 00DD  
          __size_of_CAN_ErrorResponse 0002         BrokenPinwheel@ptrnStepCounter 006A  
     __end_of_InitSPI32ControlService 39D2                            _FrameIndex 00E5  
                               _putch 3CD2                          HueTest@15710 007B  
                      __CFG_BOREN$OFF 000000                                 pclath 000FFA  
                               tablat 000FF5                      SingleFadedLoop@i 0083  
                    SingleFadedLoop@x 0082                      __end_ofi2___wmul 3ACE  
                               plusw2 000FDB                                 status 000FD8  
                       _FullPulseHold 2426               SPI32_SendFrame@newFrame 0060  
        __end_of_CAN_BusErrorResponse 3CD8                    __size_ofi2___awdiv 0084  
                    ?_SPI32_SendFrame 0060                    __size_ofi2___awmod 0070  
                     __initialization 3472                ES_GetMSBitSet@LoopCntr 0069  
             SetListenFocus@listFocus 0009                          __end_of_main 336E  
                   ES_Timer_Init@Rate 0062                      __end_of_InitPins 3C16  
            __size_of_DoubleFadedLoop 056A                   __end_of_EventQueues 035E  
                              ??_main 00CD            SingleFocusBreathe@base_hue 006E  
          SingleFocusBreathe@base_sat 006F                     ?i2_ES_EnQueueFIFO 000D  
                       __activetblptr 000002            __size_of_SPI32_EOTResponse 003A  
                 __size_of_ES_DeQueue 0128                       _Nybble2MSBitNum 0341  
               ?_SPI32_TransmitFrames 0080      __end_of__HW_Process_Pending_Ints 3C46  
            ProcessReceive@Event2Post 0023                    ??i2_ES_EnQueueFIFO 0012  
            ProcessReceive@LastButton 0052                  __end_of_DotStar_Init 383E  
                __end_of_DotStar_Show 26E2                   __size_of_SPI32_Init 0006  
                              _ADCON1 000FC1                             ??_HW_Init 0060  
                              _CCP1IF 007CF2                                _CANCON 000F6F  
                          _PatternOff 391E                                _CCPR1H 000FBF  
                              _CCPR1L 000FBE                      ___awdiv@dividend 0060  
                              _CIOCON 000F73                            _MyPriority 00E6  
                              ?_putch 0001                      ??_ES_GetMSBitSet 0062  
                          _SetPattern 3C9E                    HueTest@ptrnPointer 0073  
                              i2l4121 310C                                i2l3171 36A8  
                              i2l3163 3688                                i2l3155 366E  
                              i2l4131 312E                                i2l4123 3112  
                              i2l3165 3690                                i2l3167 3694  
                              i2l3175 36B2                                i2l3159 367A  
                              i2l4127 3120                                i2l4143 3160  
                              i2l4137 313C                                i2l4145 317E  
                              i2l4321 2E42                                i2l3179 36C0  
                              i2l4219 39F6                                i2l4157 38A6  
                              i2l4333 2E56                                i2l4327 2E4C  
                              i2l4345 2E6A                                i2l4339 2E60  
                              i2l3821 33B0                                i2l3813 3392  
                              i2l3831 33D0                                i2l3823 33B4  
                              i2l3807 3382                                i2l3819 33A8  
                              i2l3835 33DA                                i2l3839 33E8  
                              i2l3599 30E6                                _INTCON 000FF2  
                              i2l3793 3730                    BrokenPinwheel@fade 0082  
                      ?_FullPulseHold 0060                                _RXB0D0 000F66  
                              _RXB0D1 000F67                                _RXB0D2 000F68  
                   _MirroredQuadrants 1380                                _RXB0IE 007D18  
                              _RXB0IF 007D20                                _ES_Run 2B24  
                              _TXB0IE 007D1A                                _TXB0IF 007D22  
                              _SSPADD 000FC8                                _SSPBUF 000FC9  
                 SingleFocusBreathe@i 008A                   SingleFocusBreathe@x 0088  
           i2_PostSPI32ControlService 3C46                             ??_HueTest 007D  
                  ?_MirroredQuadrants 0068                      ??_ES_EnQueueFIFO 0071  
                      _Timer2PostFunc 0321               _SingleFocusBreathe$1330 0083  
             _SingleFocusBreathe$1327 007D               _SingleFocusBreathe$1328 007F  
             _SingleFocusBreathe$1329 0081         SPI32_TransmitFrames@numFrames 0082  
                       ?_PausePattern 0001                                _Queue0 0046  
                              _Queue1 01B8                        _SysTickCounter 003E  
          BrokenPinwheel@cycleCounter 006C                   __size_of_HSV_to_RGB 0458  
            ??_RunSPI32ControlService 00BE                                ___wmul 3A0C  
     InitSPI32ControlService@Priority 0080                             ??___awdiv 0064  
                           ??___awmod 0064                             ??___lbmod 0061  
                 ??_MirroredQuadrants 0072                      ?_InitCanHardware 0001  
                           ??___lwdiv 0070           __size_of_ES_Timer_InitTimer 0080  
                              clear_0 34B2                                clear_1 34C4  
                              clear_2 34D0                                clear_3 34DC  
                    ___awdiv@quotient 0066                       ___awmod@divisor 0062  
                       ??_ShowPattern 00BB             ES_Timer_InitTimer@NewTime 0060  
           __size_of_CAN_XmitResponse 0006                       ___awmod@counter 0064  
                              _printf 3A42                           ISR@LastTime 003A  
                      i2___awdiv@sign 0006                    _SingleFocusBreathe 1AFA  
                        __pdataCOMRAM 0052                     __end_ofi2___awdiv 33F2  
              ES_InitQueue@pThisQueue 0063                     __end_ofi2___awmod 36CA  
            __size_of_CAN_RCVResponse 000C                          __mediumconst 0000  
                         ISR@NextTime 003C                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                    ??_SetListenFocus 0009   __end_ofi2_PostPatternControlService 3C72  
         i2_PostPatternControlService 3C5C                             ?_CAN_Init 0001  
                              putch@c 0001          SetupPattern@patternIDPointer 0060  
                      i2___awmod@sign 0006           __size_of_ES_Timer_Tick_Resp 0116  
                ES_DeQueue@pThisQueue 0074                   ?_SingleFocusBreathe 0068  
           __end_of_MirroredQuadrants 17AC               ES_GetMSBitSet@Val2Check 0060  
                   ??_SingleFadedLoop 0072                       ___lbmod@divisor 0060  
                          __accesstop 0060               __end_of__initialization 34E2  
              __end_of_Timer2PostFunc 0341                       ___lbmod@counter 0062  
     RunSPI32ControlService@ThisEvent 00BB                       __CFG_PBADEN$OFF 000000  
   __size_of_RunPatternControlService 00C8                __size_of_SetBrightness 0026  
           ?_RunPatternControlService 00BB           DoubleFadedLoop@cycleCounter 006C  
                  FullPulseHold@15718 0068                 __size_of_GetNextFrame 001A  
                       ___rparam_used 000001                 FullPulseHold@base_hue 0066  
               FullPulseHold@base_sat 0067           ??_InitPatternControlService 007D  
                         PatternOff@i 0062                        ??_PausePattern 0065  
                         _EventQueues 0358           __size_ofi2_ES_PostToService 006A  
                      __pcstackCOMRAM 0001                          __pidataBANK0 3CB4  
         __size_of_ES_Timer_StopTimer 004E                  ??_SingleFocusBreathe 0072  
                       ?_ES_InitQueue 0060      __size_of_InitSPI32ControlService 003A  
             __end_of_Nybble2MSBitNum 0350     _PostSPI32ControlService$intlevel0 3BB2  
                       __end_of_putch 3CD4                       _TMR_ActiveFlags 00DF  
              ??_SPI32_TransmitFrames 0083                             ?i2___wmul 0007  
             ES_GetMSBitSet@ReturnVal 0067                         ?_ResetPattern 0001  
                _CAN_BusErrorResponse 3CD6               __size_of_ProcessReceive 00B2  
                   ??_DoubleFadedLoop 0072                   __end_of_ShowPattern 3B36  
                          ??_CAN_Init 0060                  DoubleFadedLoop@15751 0070  
                       ??_StopPattern 00BB                        _TMR_TimerArray 0100  
                        _GetNextFrame 3BC8                           ?_PatternOff 0060  
            ES_EnQueueFIFO@pThisQueue 0075                       ??_FullPulseHold 006A  
                             ??_putch 0060              __HW_Process_Pending_Ints 3C30  
                          __pbssBANK0 00CE                            __pbssBANK1 0100  
                         ?_SetPattern 0001                             ?_InitPins 0001  
                             ?_ES_Run 0001                          ??_ES_DeQueue 0070  
                        ??_SPI32_Init 0060                      DoubleFadedLoop@i 0083  
                  DoubleFadedLoop@val 0081                      DoubleFadedLoop@x 0082  
            ?_PostSPI32ControlService 007D             __size_of_ES_PostToService 0076  
                      ??_ES_InitQueue 0063                               ?___wmul 0066  
                 BrokenPinwheel@15776 0070       __size_of_RunSPI32ControlService 0106  
                             _CCP1CON 000FBD             BrokenPinwheel@ptrnPointer 0068  
                             _ECANCON 000F77                      ??i2_ResetPattern 0001  
                             ?_printf 0060                         _SetBrightness 3ACE  
      DoubleFadedLoop@ptrnStepCounter 006A                 __size_of_DotStar_Init 0052  
                      ??_ResetPattern 0060                 __end_of_UpdatePattern 218C  
               __size_of_DotStar_Show 012E                            ??i2___wmul 000B  
               ?_CAN_BusErrorResponse 0001             _InitPatternControlService 3734  
                _DoubleFadedLoop$1260 007D                  _DoubleFadedLoop$1261 007F  
                _DoubleFadedLoop$1257 0079                  _DoubleFadedLoop$1258 007B  
                  __end_of_ES_DeQueue 280A                i2ES_EnQueueFIFO@pBlock 000D  
               ES_Timer_StopTimer@Num 0064                          ??_HSV_to_RGB 0075  
                             _HW_Init 3AF4                               _SSPCON1 000FC6  
                  __end_of_SPI32_Init 3CCA            __size_of_MirroredQuadrants 042C  
                             _SSPSTAT 000FC7                    MirroredQuadrants@i 0083  
                  MirroredQuadrants@x 0081   _PostPatternControlService$intlevel0 3B96  
                   ??_CAN_RCVResponse 0026         SingleFocusBreathe@fade_thresh 0085  
    SPI32_ControlService@CurrentState 00E2                            ??_InitPins 0060  
                     __size_of_ES_Run 00F0            SetBrightness@newBrightness 0009  
                 __end_of_StopPattern 3B90                           _PixelFrames 01C4  
                             _HueTest 2A26                         ?_SetupPattern 0060  
              __size_of_ES_Initialize 00EC                               _ListLoc 0045  
                             __Hparam 0000                               __Lparam 0000  
  i2PostSPI32ControlService@ThisEvent 001E      PostSPI32ControlService@ThisEvent 007D  
    InitSPI32ControlService@ThisEvent 007D             i2ES_EnQueueFIFO@Event2Add 000F  
                        _DotStar_Init 37EC                          _DotStar_Show 25B4  
                  __end_of_HSV_to_RGB 1380                               ___awdiv 2F78  
          ?_PostPatternControlService 007D                               ___awmod 3240  
                             ___lbmod 38DA                       __size_of___wmul 0036  
                             ___lwdiv 356C    __size_ofi2_PostSPI32ControlService 0016  
                        __psmallconst 0300                   __size_of_PatternOff 003E  
               ES_Timer_InitTimer@Num 0064                    _UpdatePattern$1986 0092  
                  _UpdatePattern$1987 0093            i2ES_PostToService@TheEvent 0018  
                             __pcinit 3472                      _CAN_XmitResponse 3CCA  
                             __ramtop 0300                   __size_of_SetPattern 000C  
                      ?_SetBrightness 0001                __size_of_CenterBreathe 034E  
                         _ShowPattern 3B16                               __ptext0 32E2  
                             __ptext1 3A42                               __ptext2 3CD2  
                             __ptext3 2B24                               __ptext4 3C30  
                             __ptext5 280A                               __ptext6 319C  
                             __ptext7 2EB0                               __ptext8 2920  
                             __ptext9 379A              i2ES_EnQueueFIFO@SaveCrit 0015  
                     __size_of_printf 0034                          __size_of_ISR 2EA8  
                         HSV_to_RGB@b 0097                           HSV_to_RGB@g 0095  
                         HSV_to_RGB@h 008D                           HSV_to_RGB@p 00A1  
                         HSV_to_RGB@q 0099                           HSV_to_RGB@r 0093  
                         HSV_to_RGB@s 009F                           HSV_to_RGB@t 009B  
                         HSV_to_RGB@v 00A3                          _FramePointer 00D7  
             __size_of__HW_Timer_Init 001E                      ___awmod@dividend 0060  
                     ES_Run@ThisEvent 00ED                  __end_of_PausePattern 3CC4  
                    CenterBreathe@val 008C          ProcessReceive@CurrentPattern 0044  
              _RunSPI32ControlService 2920                        __pintcode_body 2DE2  
                end_of_initialization 34E2                          _CycleCounter 00E9  
           __size_ofi2_ES_EnQueueFIFO 00B4                         __Lmediumconst 0000  
                             int_func 2DE2                   i2___wmul@multiplier 0007  
     __end_of_PostSPI32ControlService 3BC8          ES_PostToService@WhichService 007C  
                      ??_SetupPattern 0064                __size_of_ES_Timer_Init 000E  
                  SingleFadedLoop@val 0081              FullPulseHold@ptrnPointer 0060  
                             printf@c 0064                               printf@f 0060  
             _InitSPI32ControlService 3998                               postdec1 000FE5  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc1 000FE6                               postinc2 000FDE  
             __size_of_BrokenPinwheel 0606     __end_of_PostPatternControlService 3BAC  
            __size_of_SPI32_SendFrame 0052                ??_CAN_BusErrorResponse 0001  
           i2SPI32_SendFrame@newFrame 0001                       _SingleFadedLoop 218C  
                       _ES_Initialize 2C14                        _ProcessReceive 30EA  
    __end_of_RunPatternControlService 2F78                      ___lbmod@dividend 0061  
                 CenterBreathe@rising 00F3  i2PostPatternControlService@ThisEvent 001E  
   RunPatternControlService@ThisEvent 00BB    PostPatternControlService@ThisEvent 007D  
  InitPatternControlService@ThisEvent 007D                SingleFocusBreathe@head 0089  
                           _TRISBbits 000F93                  __end_of_ES_EventList 0301  
                         _StopPattern 3B74                  __end_of_ES_InitQueue 3998  
                           i2___awdiv 336E                             i2___awmod 365A  
                MirroredQuadrants@val 0082                        ES_Initialize@i 0083  
                   __size_of_CAN_Init 000A                           ___lbmod@rem 0063  
                       _CenterBreathe 17AC                   _BrokenPinwheel$1285 007D  
                 _BrokenPinwheel$1286 007F                        __end_of_ES_Run 2C14  
                  i2___awdiv@dividend 0001                  __end_of_ResetPattern 3BFC  
                  _CenterBreathe$1230 0081                    _CenterBreathe$1231 0083  
                  _CenterBreathe$1232 0085                    _CenterBreathe$1233 0087  
                  _CenterBreathe$1234 0089                    _CenterBreathe$1227 007B  
                  _CenterBreathe$1228 007D                    _CenterBreathe$1229 007F  
__size_ofi2_PostPatternControlService 0016                      _ES_PostToService 35E4  
          __end_of_ES_Timer_InitTimer 3472                  __end_of_ServDescList 0358  
                     ??_SetBrightness 0009                       _DoubleFadedLoop 09BE  
                      __end_of___wmul 3A42                         __pidataCOMRAM 3CD0  
                   i2_SPI32_SendFrame 388C                             _FrameByte 00F6  
              __end_of_ProcessReceive 319C                        ?_ES_Initialize 0081  
          ??__HW_Process_Pending_Ints 0084                    ?i2_SPI32_SendFrame 0001  
                       _ES_Timer_Init 3C84                      i2___wmul@product 000B  
                      __end_of_printf 3A76              __size_of_InitCanHardware 007C  
          __end_of_ES_Timer_Tick_Resp 2920                   start_initialization 3472  
                  i2___awdiv@quotient 0007                           __end_of_ISR 2EB0  
                   __size_ofi2___wmul 0026                          _CurrentFrame 00CE  
                        _CurrentState 00E4                          ??_PatternOff 0062  
                 ??i2_SPI32_SendFrame 0005                            ?i2___awdiv 0001  
                          ?i2___awmod 0001                   FullPulseHold@rising 00F4  
          DoubleFadedLoop@ptrnPointer 0068                          ??_SetPattern 0001  
                         _CANSTATbits 000F6E    __size_of_InitPatternControlService 0066  
                      ?_CenterBreathe 0068                              ??_ES_Run 00C8  
                           _PatternID 00DB                             _TickCount 00E8  
                           _NumFrames 00E7            __end_ofi2_ES_PostToService 3734  
        SingleFocusBreathe@pulseWidth 0087                     __size_of_InitPins 001A  
           ??_InitSPI32ControlService 007D              CenterBreathe@fade_thresh 008B  
          __end_of_ES_Timer_StopTimer 388C                   SetPattern@PatternID 0001  
             __size_of_ES_GetMSBitSet 00A4               __end_of_SingleFadedLoop 2426  
                            ??___wmul 006A             __end_ofi2_SPI32_SendFrame 38DA  
                      CenterBreathe@i 008F           __size_of_SingleFocusBreathe 034C  
                      CenterBreathe@x 008E                           __pdataBANK0 00F3  
                _SingleFadedLoop$1245 007D                  _SingleFadedLoop$1246 007F  
                  __end_of_PatternOff 395C               __size_of_ES_EnQueueFIFO 00E2  
                            ??_printf 0062             SPI32_EOTResponse@EOTevent 0021  
               __size_of_PausePattern 0008                        ?_ES_Timer_Init 0062  
                  __end_of_SetPattern 3CAA                       ?_ProcessReceive 0001  
             DoubleFadedLoop@base_hue 006E               DoubleFadedLoop@base_sat 006F  
                     _CAN_RCVResponse 3C92                        __HW_Timer_Init 3B56  
                         __pbssBIGRAM 01C4                  __end_of_SetupPattern 3C84  
                         __pbssCOMRAM 0036      __size_of_PostSPI32ControlService 001C  
       __size_of_SPI32_TransmitFrames 0032                     ??_SPI32_SendFrame 0064  
                       __pcstackBANK0 0060                           _BRGCON1bits 000F70  
                         _BRGCON2bits 000F71                    ES_InitQueue@pBlock 0060  
                         _BRGCON3bits 000F72     RunPatternControlService@testEvent 00C1  
                            ?_HW_Init 0001              _RunPatternControlService 2EB0  
               DoubleFadedLoop@i_1259 0084        SingleFocusBreathe@cycleCounter 006C  
               __end_of_FullPulseHold 25B4              __end_of_CAN_XmitResponse 3CD0  
    SPI32_TransmitFrames@framePointer 0080                      i2_ES_EnQueueFIFO 3036  
                    HSV_to_RGB@region 008F                         __PRIMASK_temp 0040  
                            ?_HueTest 0073               __size_of_SetListenFocus 0020  
             __end_of_DoubleFadedLoop 0F28                      ___lwdiv@dividend 006C  
             SingleFadedLoop@base_hue 006E               SingleFadedLoop@base_sat 006F  
                        _PausePattern 3CBC                             __pintcode 0008  
                      _BrokenPinwheel 03B8                              ?___awdiv 0060  
                            ?___awmod 0060                              ?___lbmod 0060  
          DotStar_Show@patternPointer 00A5           ??_PostPatternControlService 0080  
                            ?___lwdiv 006C     SetupPattern@listeningFocusPointer 0062  
                     ??_ES_Initialize 0083              ES_PostToService@TheEvent 0077  
              __end_of__HW_Timer_Init 3B74                          ?_ShowPattern 0001  
                         __smallconst 0300                 __size_of_ES_InitQueue 003C  
             ?_RunSPI32ControlService 00BB     SingleFocusBreathe@ptrnStepCounter 006A  
                            _CAN_Init 3CAA                      ___lwdiv@quotient 0070  
                         ??i2___awdiv 0005                       ??_CenterBreathe 0072  
                         ??i2___awmod 0005                        __size_of_putch 0002  
        CenterBreathe@ptrnStepCounter 006A                 __size_of_ResetPattern 001A  
                ES_Initialize@NewRate 0081                     ??_InitCanHardware 0060  
           ES_GetMSBitSet@Nybble2Test 0068                    _PatternStepCounter 00F2  
                  CenterBreathe@15728 0070                        ___wmul@product 006A  
              __size_of_UpdatePattern 0346                              i2u305_40 38D0  
                            i2u305_45 38C6                __end_of_BrokenPinwheel 09BE  
                            _RXB0EIDH 000F63                              _RXB0EIDL 000F64  
             SetBrightness@brightness 000B                              _RXB0SIDH 000F61  
                            _RXB0SIDL 000F62                              _RXF0EIDH 000F02  
                            _RXF0EIDL 000F03                              _RXF0SIDH 000F00  
                        _ES_EventList 0301                              _RXF0SIDL 000F01  
                    ?_SingleFadedLoop 0068            __size_ofi2_SPI32_SendFrame 004E  
                            _RXM0EIDH 000F1A                              _RXM0EIDL 000F1B  
    MirroredQuadrants@ptrnStepCounter 006A               __end_of_CAN_RCVResponse 3C9E  
                        _ES_InitQueue 395C                              _RXM0SIDH 000F18  
                            _RXM0SIDL 000F19                       ??_ES_Timer_Init 0064  
                      _ListeningFocus 00D9                 SingleFocusBreathe@val 0086  
      i2ES_PostToService@WhichService 001D                       ?__HW_Timer_Init 0060  
                   ___wmul@multiplier 0066        __end_of_RunSPI32ControlService 2A26  
                            i2___wmul 3AA8                              HueTest@i 0080  
                        _ResetPattern 3BE2                     i2___awdiv@divisor 0003  
                  ES_DeQueue@SaveCrit 0072                  ES_EnQueueFIFO@pBlock 006C  
                   i2___awdiv@counter 0005              __end_of_ES_PostToService 365A  
      SingleFadedLoop@ptrnStepCounter 006A                          ?_StopPattern 0001  
       SingleFocusBreathe@ptrnPointer 0068               __size_ofi2_ResetPattern 001A  
                     BrokenPinwheel@i 0084          ?i2_PostPatternControlService 001E  
           _PostPatternControlService 3B90                       BrokenPinwheel@x 0081  
                           copy_data0 3486                      __size_of_HW_Init 0022  
                      _BitNum2SetMask 0301                        _PatternConfigs 00F7  
                        _ServDescList 0350                    i2___awmod@dividend 0001  
                            _InitPins 3BFC                          _PixelPattern 0120  
                 CAN_RX_HW@Brightness 0042                      ?_DoubleFadedLoop 0068  
                    __size_of_HueTest 00FE                              __Hrparam 0000  
                      _ES_GetMSBitSet 319C                       ?_BrokenPinwheel 0068  
                  _FullPulseHold$1213 0072                              __Lrparam 0000  
   RunSPI32ControlService@ReturnEvent 00C5                  SingleFadedLoop@15741 0070  
                    __size_of___awdiv 00BE                   _ProcessReceive$1191 0021  
                    __size_of___awmod 00A2                      __size_of___lbmod 0044  
               __size_of_SetupPattern 0012                 i2___wmul@multiplicand 0009  
                      _ES_EnQueueFIFO 2D00                      __size_of___lwdiv 0078  
          ?i2_PostSPI32ControlService 001E               _PostSPI32ControlService 3BAC  
                     HSV_to_RGB@fpart 0091                         _UpdatePattern 1E46  
       __size_of_CAN_BusErrorResponse 0002                    _ES_Timer_InitTimer 33F2  
                     ___lwdiv@divisor 006E                       ___lwdiv@counter 0072  
              __end_of_BitNum2SetMask 0321                              __ptext10 3BC8  
                            __ptext11 3B74                              __ptext20 2426  
                            __ptext12 3BE2                              __ptext21 09BE  
                            __ptext13 391E                              __ptext30 0F28  
                            __ptext22 17AC                              __ptext14 3B16  
                            __ptext31 356C                              __ptext23 03B8  
                            __ptext15 1E46                              __ptext40 3AF4  
                            __ptext32 3CBC                              __ptext24 2F78  
                            __ptext16 1AFA                              __ptext41 3C72  
                            __ptext33 383E                              __ptext25 33F2  
                            __ptext17 218C                              __ptext50 3C84  
                            __ptext42 35E4                              __ptext34 26E2  
                            __ptext26 25B4                              __ptext18 1380  
                            __ptext51 3B56                              __ptext43 2D00  
                            __ptext35 38DA                              __ptext27 3A76  
                            __ptext19 2A26                              __ptext60 3C5C  
                            __ptext52 395C                              __ptext44 3A0C  
                            __ptext36 2C14                              __ptext28 3B90  
                            __ptext61 36CA                              __ptext45 3240  
                            __ptext37 3734                              __ptext29 3BAC  
                            __ptext70 3CD4                              __ptext62 3036  
                            __ptext54 39D2                              __ptext46 37EC  
                            __ptext38 3998                              __ptext71 3CD6  
                            __ptext63 3AA8                              __ptext55 388C  
                            __ptext47 3CAA                              __ptext39 3CC4  
                            __ptext72 0000                              __ptext64 365A  
                            __ptext56 3C46                              __ptext48 3BFC  
                            __ptext65 3C9E                              __ptext57 3CCA  
                            __ptext49 34F0                              __ptext66 3C16  
                            __ptext58 3C92                              __ptext67 3B36  
                            __ptext59 30EA                              __ptext68 3ACE  
                            __ptext69 336E                         ?_GetNextFrame 0060  
   ES_Timer_Tick_Resp@NeedsProcessing 00D5             MirroredQuadrants@base_hue 006E  
           MirroredQuadrants@base_sat 006F                        UpdatePattern@i 0094  
                 ?_ES_Timer_InitTimer 0060         ??i2_PostPatternControlService 0021  
                     _HSV_to_RGB$1985 009D                         __size_of_main 008C  
                  _ES_Timer_Tick_Resp 280A                        _SetListenFocus 3B36  
              _MirroredQuadrants$1297 007D                _MirroredQuadrants$1298 007F  
              __end_of_ES_GetMSBitSet 3240                          _SetupPattern 3C72  
                 ?_ES_Timer_Tick_Resp 0001                   CAN_RX_HW@MyPriority 0043  
                 HueTest@cycleCounter 0077                __end_of_ES_EnQueueFIFO 2DE2  
                    ??_ProcessReceive 0021                              int$flags 0054  
                     _SPI32_SendFrame 379A                      ?_CAN_RCVResponse 0001  
                ??_ES_Timer_InitTimer 0062        SPI32_ControlService@MyPriority 00E3  
                       _MaxBrightness 0053                     ES_DeQueue@NumLeft 0073  
               __end_of_SetBrightness 3AF4                    i2_ES_PostToService 36CA  
            __end_ofi2_ES_EnQueueFIFO 30EA                    _ES_Timer_StopTimer 383E  
                      ?_UpdatePattern 0090            ??_RunPatternControlService 00BE  
                       DotStar_Show@i 00BA                           _RXB0CONbits 000F60  
                   i2___awmod@divisor 0003                     i2___awmod@counter 0005  
                __size_of_ShowPattern 0020     __end_ofi2_PostSPI32ControlService 3C5C  
        MirroredQuadrants@ptrnPointer 0068                   ?i2_ES_PostToService 0018  
                      ??_GetNextFrame 0064         MirroredQuadrants@cycleCounter 006C  
                ??_ES_Timer_Tick_Resp 0080                   ?_ES_Timer_StopTimer 0001  
                   _CAN_ErrorResponse 3CD4                              intlevel2 0000  
              __end_of_SetListenFocus 3B56                    ?_CAN_ErrorResponse 0001  
              BrokenPinwheel@base_hue 006E                BrokenPinwheel@base_sat 006F  
                   ?_CAN_XmitResponse 0001                            _ES_DeQueue 26E2  
   __size_of__HW_Process_Pending_Ints 0016                         _TransmitFrame 0036  
              HueTest@ptrnStepCounter 0075             ?__HW_Process_Pending_Ints 0001  
                         _TXB0CONbits 000F40                       ?_ES_GetMSBitSet 0060  
        __end_of_SPI32_TransmitFrames 3AA8                    ??_CAN_XmitResponse 0001  
          SingleFadedLoop@ptrnPointer 0068                   ??_CAN_ErrorResponse 0001  
                ??i2_ES_PostToService 001B            __end_of_SingleFocusBreathe 1E46  
                          _SPI32_Init 3CC4                         ?_DotStar_Init 0060  
                       ?_DotStar_Show 00A5                  ??_ES_Timer_StopTimer 0060  
 ES_Timer_Tick_Resp@NextTimer2Process 00E1                              printf@ap 0062  
                     ?_ES_EnQueueFIFO 006C             ??_PostSPI32ControlService 0080  
               CenterBreathe@base_hue 006E                      ES_DeQueue@pBlock 006C  
               CenterBreathe@base_sat 006F                       _InitCanHardware 34F0  
   SPI32_TransmitFrames@transmitEvent 0083     InitPatternControlService@Priority 0080  
         SingleFadedLoop@cycleCounter 006C                     _SPI32_EOTResponse 39D2  
                          _HSV_to_RGB 0F28             __end_of_CAN_ErrorResponse 3CD6  
                      i2_ResetPattern 3C16                ES_DeQueue@pReturnEvent 006E  
               ES_InitQueue@BlockSize 0062                    ?_SPI32_EOTResponse 0001  
                __size_of_StopPattern 001C              ?_InitSPI32ControlService 0001  
                     ?_SetListenFocus 0001              CenterBreathe@ptrnPointer 0068  
                 ??_SPI32_EOTResponse 0021               __end_of_SPI32_SendFrame 37EC  
          ?_InitPatternControlService 0001               CenterBreathe@pulseWidth 008D  
  __size_of_PostPatternControlService 001C                        ??_DotStar_Init 0062  
             SingleFocusBreathe@focus 0070                        ??_DotStar_Show 00A7  
