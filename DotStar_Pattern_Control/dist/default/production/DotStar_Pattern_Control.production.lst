

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Tue Nov 01 16:24:08 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    73                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    74  0000                     
    75                           	psect	idataCOMRAM
    76  001814                     __pidataCOMRAM:
    77                           	opt stack 0
    78                           
    79                           ;initializer for _MaxBrightness
    80  001814  1F                 	db	31
    81                           
    82                           	psect	idataBANK0
    83  001808                     __pidataBANK0:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _PatternConfigs
    87  001808  00                 	db	0
    88  001809  FF                 	db	255
    89  00180A  1F                 	db	31
    90  00180B  00                 	db	0
    91  00180C  01                 	db	1
    92                           
    93                           	psect	idataBANK1
    94  0015E2                     __pidataBANK1:
    95                           	opt stack 0
    96                           
    97                           ;initializer for _GenColors
    98  0015E2  0000               	dw	0
    99  0015E4  00FF               	dw	255
   100  0015E6  A500               	dw	42240
   101  0015E8  00FF               	dw	255
   102  0015EA  FF00               	dw	65280
   103  0015EC  00FF               	dw	255
   104  0015EE  8000               	dw	32768
   105  0015F0  0080               	dw	128
   106  0015F2  FF00               	dw	65280
   107  0015F4  0000               	dw	0
   108  0015F6  8000               	dw	32768
   109  0015F8  0000               	dw	0
   110  0015FA  FFFF               	dw	65535
   111  0015FC  0000               	dw	0
   112  0015FE  8080               	dw	32896
   113  001600  0000               	dw	0
   114  001602  00FF               	dw	255
   115  001604  0000               	dw	0
   116  001606  0080               	dw	128
   117  001608  0000               	dw	0
   118  00160A  00FF               	dw	255
   119  00160C  00FF               	dw	255
   120  00160E  0080               	dw	128
   121  001610  0080               	dw	128
   122  001612  0000               	dw	0
   123  001614  0080               	dw	128
   124                           
   125                           	psect	smallconst
   126  000300                     __psmallconst:
   127                           	opt stack 0
   128  000300  00                 	db	0
   129  000301                     _BitNum2SetMask:
   130                           	opt stack 0
   131  000301  0001               	dw	1
   132  000303  0002               	dw	2
   133  000305  0004               	dw	4
   134  000307  0008               	dw	8
   135  000309  0010               	dw	16
   136  00030B  0020               	dw	32
   137  00030D  0040               	dw	64
   138  00030F  0080               	dw	128
   139  000311  0100               	dw	256
   140  000313  0200               	dw	512
   141  000315  0400               	dw	1024
   142  000317  0800               	dw	2048
   143  000319  1000               	dw	4096
   144  00031B  2000               	dw	8192
   145  00031D  4000               	dw	16384
   146  00031F  8000               	dw	32768
   147  000321                     __end_of_BitNum2SetMask:
   148                           	opt stack 0
   149  000321                     _Timer2PostFunc:
   150                           	opt stack 0
   151  000321  8A                 	db	low _PostPatternControlService
   152  000322  17                 	db	high _PostPatternControlService
   153  000323  22                 	db	low _PostSPI32ControlService
   154  000324  17                 	db	high _PostSPI32ControlService
   155  000325  00                 	db	0
   156  000326  00                 	db	0
   157  000327  00                 	db	0
   158  000328  00                 	db	0
   159  000329  00                 	db	0
   160  00032A  00                 	db	0
   161  00032B  00                 	db	0
   162  00032C  00                 	db	0
   163  00032D  00                 	db	0
   164  00032E  00                 	db	0
   165  00032F  00                 	db	0
   166  000330  00                 	db	0
   167  000331  00                 	db	0
   168  000332  00                 	db	0
   169  000333  00                 	db	0
   170  000334  00                 	db	0
   171  000335  00                 	db	0
   172  000336  00                 	db	0
   173  000337  00                 	db	0
   174  000338  00                 	db	0
   175  000339  00                 	db	0
   176  00033A  00                 	db	0
   177  00033B  00                 	db	0
   178  00033C  00                 	db	0
   179  00033D  00                 	db	0
   180  00033E  00                 	db	0
   181  00033F  00                 	db	0
   182  000340  00                 	db	0
   183  000341                     __end_of_Timer2PostFunc:
   184                           	opt stack 0
   185  000341                     _Nybble2MSBitNum:
   186                           	opt stack 0
   187  000341  00                 	db	0
   188  000342  01                 	db	1
   189  000343  01                 	db	1
   190  000344  02                 	db	2
   191  000345  02                 	db	2
   192  000346  02                 	db	2
   193  000347  02                 	db	2
   194  000348  03                 	db	3
   195  000349  03                 	db	3
   196  00034A  03                 	db	3
   197  00034B  03                 	db	3
   198  00034C  03                 	db	3
   199  00034D  03                 	db	3
   200  00034E  03                 	db	3
   201  00034F  03                 	db	3
   202  000350                     __end_of_Nybble2MSBitNum:
   203                           	opt stack 0
   204  000350                     _ServDescList:
   205                           	opt stack 0
   206  000350  7C                 	db	low _InitPatternControlService
   207  000351  13                 	db	high _InitPatternControlService
   208  000352  8E                 	db	low _RunPatternControlService
   209  000353  0C                 	db	high _RunPatternControlService
   210  000354  72                 	db	low _InitSPI32ControlService
   211  000355  15                 	db	high _InitSPI32ControlService
   212  000356  5C                 	db	low _RunSPI32ControlService
   213  000357  05                 	db	high _RunSPI32ControlService
   214  000358                     __end_of_ServDescList:
   215                           	opt stack 0
   216  000358                     _EventQueues:
   217                           	opt stack 0
   218  000358  A0                 	db	low _Queue0
   219  000359  00                 	db	high _Queue0
   220  00035A  04                 	db	4
   221  00035B  AC                 	db	low _Queue1
   222  00035C  00                 	db	high _Queue1
   223  00035D  04                 	db	4
   224  00035E                     __end_of_EventQueues:
   225                           	opt stack 0
   226  00035E                     _ES_EventList:
   227                           	opt stack 0
   228  00035E  0E                 	db	low _Check4Keystroke
   229  00035F  18                 	db	high _Check4Keystroke
   230  000360                     __end_of_ES_EventList:
   231                           	opt stack 0
   232  000360                     _DistList00:
   233                           	opt stack 0
   234  000360  8A                 	db	low _PostPatternControlService
   235  000361  17                 	db	high _PostPatternControlService
   236  000362  22                 	db	low _PostSPI32ControlService
   237  000363  17                 	db	high _PostSPI32ControlService
   238  000364                     __end_of_DistList00:
   239                           	opt stack 0
   240  0000                     _ADCON1	set	4033
   241  0000                     _CCP1CON	set	4029
   242  0000                     _CCPR1H	set	4031
   243  0000                     _CCPR1L	set	4030
   244  0000                     _INTCON	set	4082
   245  0000                     _LATC	set	3979
   246  0000                     _PIE1	set	3997
   247  0000                     _PORTC	set	3970
   248  0000                     _SSPADD	set	4040
   249  0000                     _SSPBUF	set	4041
   250  0000                     _SSPCON1	set	4038
   251  0000                     _SSPSTAT	set	4039
   252  0000                     _T1CON	set	4045
   253  0000                     _TRISC	set	3988
   254  0000                     _CCP1IF	set	31986
   255  0000                     _GIE	set	32663
   256  0000                     _IRCF0	set	32412
   257  0000                     _IRCF1	set	32413
   258  0000                     _IRCF2	set	32414
   259  0000                     _SCS1	set	32409
   260  0000                     _SSPIE	set	31979
   261  0000                     _SSPIF	set	31987
   262  000364                     STR_1:
   263  000364  46                 	db	70	;'F'
   264  000365  61                 	db	97	;'a'
   265  000366  69                 	db	105	;'i'
   266  000367  6C                 	db	108	;'l'
   267  000368  65                 	db	101	;'e'
   268  000369  64                 	db	100	;'d'
   269  00036A  20                 	db	32
   270  00036B  6F                 	db	111	;'o'
   271  00036C  6E                 	db	110	;'n'
   272  00036D  20                 	db	32
   273  00036E  61                 	db	97	;'a'
   274  00036F  74                 	db	116	;'t'
   275  000370  74                 	db	116	;'t'
   276  000371  65                 	db	101	;'e'
   277  000372  6D                 	db	109	;'m'
   278  000373  70                 	db	112	;'p'
   279  000374  74                 	db	116	;'t'
   280  000375  20                 	db	32
   281  000376  74                 	db	116	;'t'
   282  000377  6F                 	db	111	;'o'
   283  000378  20                 	db	32
   284  000379  50                 	db	80	;'P'
   285  00037A  6F                 	db	111	;'o'
   286  00037B  73                 	db	115	;'s'
   287  00037C  74                 	db	116	;'t'
   288  00037D  0A                 	db	10
   289  00037E  00                 	db	0
   290  00037F                     STR_2:
   291  00037F  46                 	db	70	;'F'
   292  000380  61                 	db	97	;'a'
   293  000381  69                 	db	105	;'i'
   294  000382  6C                 	db	108	;'l'
   295  000383  65                 	db	101	;'e'
   296  000384  64                 	db	100	;'d'
   297  000385  20                 	db	32
   298  000386  6F                 	db	111	;'o'
   299  000387  6E                 	db	110	;'n'
   300  000388  20                 	db	32
   301  000389  4E                 	db	78	;'N'
   302  00038A  55                 	db	85	;'U'
   303  00038B  4C                 	db	76	;'L'
   304  00038C  4C                 	db	76	;'L'
   305  00038D  20                 	db	32
   306  00038E  70                 	db	112	;'p'
   307  00038F  6F                 	db	111	;'o'
   308  000390  69                 	db	105	;'i'
   309  000391  6E                 	db	110	;'n'
   310  000392  74                 	db	116	;'t'
   311  000393  65                 	db	101	;'e'
   312  000394  72                 	db	114	;'r'
   313  000395  0A                 	db	10
   314  000396  00                 	db	0
   315  000397                     STR_3:
   316  000397  46                 	db	70	;'F'
   317  000398  61                 	db	97	;'a'
   318  000399  69                 	db	105	;'i'
   319  00039A  6C                 	db	108	;'l'
   320  00039B  65                 	db	101	;'e'
   321  00039C  64                 	db	100	;'d'
   322  00039D  20                 	db	32
   323  00039E  49                 	db	73	;'I'
   324  00039F  6E                 	db	110	;'n'
   325  0003A0  69                 	db	105	;'i'
   326  0003A1  74                 	db	116	;'t'
   327  0003A2  69                 	db	105	;'i'
   328  0003A3  61                 	db	97	;'a'
   329  0003A4  6C                 	db	108	;'l'
   330  0003A5  69                 	db	105	;'i'
   331  0003A6  7A                 	db	122	;'z'
   332  0003A7  61                 	db	97	;'a'
   333  0003A8  74                 	db	116	;'t'
   334  0003A9  69                 	db	105	;'i'
   335  0003AA  6F                 	db	111	;'o'
   336  0003AB  6E                 	db	110	;'n'
   337  0003AC  0A                 	db	10
   338  0003AD  00                 	db	0
   339  0003AE                     STR_4:
   340  0003AE  4F                 	db	79	;'O'
   341  0003AF  74                 	db	116	;'t'
   342  0003B0  68                 	db	104	;'h'
   343  0003B1  65                 	db	101	;'e'
   344  0003B2  72                 	db	114	;'r'
   345  0003B3  20                 	db	32
   346  0003B4  46                 	db	70	;'F'
   347  0003B5  61                 	db	97	;'a'
   348  0003B6  69                 	db	105	;'i'
   349  0003B7  6C                 	db	108	;'l'
   350  0003B8  75                 	db	117	;'u'
   351  0003B9  72                 	db	114	;'r'
   352  0003BA  65                 	db	101	;'e'
   353  0003BB  0A                 	db	10
   354  0003BC  00                 	db	0
   355                           
   356                           ; #config settings
   357  0003BD  00                 	db	0	; dummy byte at the end
   358  0000                     
   359                           	psect	cinit
   360  00108C                     __pcinit:
   361                           	opt stack 0
   362  00108C                     start_initialization:
   363                           	opt stack 0
   364  00108C                     __initialization:
   365                           	opt stack 0
   366                           
   367                           ; Initialize objects allocated to BANK1 (52 bytes)
   368                           ; load TBLPTR registers with __pidataBANK1
   369  00108C  0EE2               	movlw	low __pidataBANK1
   370  00108E  6EF6               	movwf	tblptrl,c
   371  001090  0E15               	movlw	high __pidataBANK1
   372  001092  6EF7               	movwf	tblptrh,c
   373  001094  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   374  001096  6EF8               	movwf	tblptru,c
   375  001098  EE01  F080         	lfsr	0,__pdataBANK1
   376  00109C  EE10 F034          	lfsr	1,52
   377  0010A0                     copy_data0:
   378  0010A0  0009               	tblrd		*+
   379  0010A2  CFF5 FFEE          	movff	tablat,postinc0
   380  0010A6  50E5               	movf	postdec1,w,c
   381  0010A8  50E1               	movf	fsr1l,w,c
   382  0010AA  E1FA               	bnz	copy_data0
   383                           
   384                           ; Initialize objects allocated to BANK0 (5 bytes)
   385                           ; load TBLPTR registers with __pidataBANK0
   386  0010AC  0E08               	movlw	low __pidataBANK0
   387  0010AE  6EF6               	movwf	tblptrl,c
   388  0010B0  0E18               	movlw	high __pidataBANK0
   389  0010B2  6EF7               	movwf	tblptrh,c
   390  0010B4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   391  0010B6  6EF8               	movwf	tblptru,c
   392  0010B8  EE00  F0F6         	lfsr	0,__pdataBANK0
   393  0010BC  EE10 F005          	lfsr	1,5
   394  0010C0                     copy_data1:
   395  0010C0  0009               	tblrd		*+
   396  0010C2  CFF5 FFEE          	movff	tablat,postinc0
   397  0010C6  50E5               	movf	postdec1,w,c
   398  0010C8  50E1               	movf	fsr1l,w,c
   399  0010CA  E1FA               	bnz	copy_data1
   400                           
   401                           ; Initialize objects allocated to COMRAM (1 bytes)
   402                           ; load TBLPTR registers with __pidataCOMRAM
   403  0010CC  0E14               	movlw	low __pidataCOMRAM
   404  0010CE  6EF6               	movwf	tblptrl,c
   405  0010D0  0E18               	movlw	high __pidataCOMRAM
   406  0010D2  6EF7               	movwf	tblptrh,c
   407  0010D4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   408  0010D6  6EF8               	movwf	tblptru,c
   409  0010D8  0009               	tblrd		*+	;fetch initializer
   410  0010DA  CFF5 F03D          	movff	tablat,__pdataCOMRAM
   411                           
   412                           ; Clear objects allocated to BANK2 (248 bytes)
   413  0010DE  EE02  F000         	lfsr	0,__pbssBANK2
   414  0010E2  0EF8               	movlw	248
   415  0010E4                     clear_0:
   416  0010E4  6AEE               	clrf	postinc0,c
   417  0010E6  06E8               	decf	wreg,f,c
   418  0010E8  E1FD               	bnz	clear_0
   419                           
   420                           ; Clear objects allocated to BANK1 (128 bytes)
   421  0010EA  EE01  F000         	lfsr	0,__pbssBANK1
   422  0010EE  0E80               	movlw	128
   423  0010F0                     clear_1:
   424  0010F0  6AEE               	clrf	postinc0,c
   425  0010F2  06E8               	decf	wreg,f,c
   426  0010F4  E1FD               	bnz	clear_1
   427                           
   428                           ; Clear objects allocated to BANK0 (91 bytes)
   429  0010F6  EE00  F060         	lfsr	0,__pbssBANK0
   430  0010FA  0E5B               	movlw	91
   431  0010FC                     clear_2:
   432  0010FC  6AEE               	clrf	postinc0,c
   433  0010FE  06E8               	decf	wreg,f,c
   434  001100  E1FD               	bnz	clear_2
   435                           
   436                           ; Clear objects allocated to COMRAM (9 bytes)
   437  001102  EE00  F034         	lfsr	0,__pbssCOMRAM
   438  001106  0E09               	movlw	9
   439  001108                     clear_3:
   440  001108  6AEE               	clrf	postinc0,c
   441  00110A  06E8               	decf	wreg,f,c
   442  00110C  E1FD               	bnz	clear_3
   443  00110E                     end_of_initialization:
   444                           	opt stack 0
   445  00110E                     __end_of__initialization:
   446                           	opt stack 0
   447  00110E  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   448  001110  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   449  001112  0E00               	movlw	low (__Lmediumconst shr (0+16))
   450  001114  6EF8               	movwf	tblptru,c
   451  001116  0100               	movlb	0
   452  001118  EF8E  F008         	goto	_main	;jump to C main() function
   453                           tblptru	equ	0xFF8
   454                           tblptrh	equ	0xFF7
   455                           tblptrl	equ	0xFF6
   456                           tablat	equ	0xFF5
   457                           postinc0	equ	0xFEE
   458                           wreg	equ	0xFE8
   459                           postdec1	equ	0xFE5
   460                           fsr1l	equ	0xFE1
   461                           
   462                           	psect	bssCOMRAM
   463  000034                     __pbssCOMRAM:
   464                           	opt stack 0
   465  000034                     ISR@LastTime:
   466                           	opt stack 0
   467  000034                     	ds	2
   468  000036                     ISR@NextTime:
   469                           	opt stack 0
   470  000036                     	ds	2
   471  000038                     _SysTickCounter:
   472                           	opt stack 0
   473  000038                     	ds	2
   474  00003A                     __PRIMASK_temp:
   475                           	opt stack 0
   476  00003A                     	ds	2
   477  00003C                     	ds	1
   478                           tblptru	equ	0xFF8
   479                           tblptrh	equ	0xFF7
   480                           tblptrl	equ	0xFF6
   481                           tablat	equ	0xFF5
   482                           postinc0	equ	0xFEE
   483                           wreg	equ	0xFE8
   484                           postdec1	equ	0xFE5
   485                           fsr1l	equ	0xFE1
   486                           
   487                           	psect	dataCOMRAM
   488  00003D                     __pdataCOMRAM:
   489                           	opt stack 0
   490  00003D                     	ds	1
   491                           tblptru	equ	0xFF8
   492                           tblptrh	equ	0xFF7
   493                           tblptrl	equ	0xFF6
   494                           tablat	equ	0xFF5
   495                           postinc0	equ	0xFEE
   496                           wreg	equ	0xFE8
   497                           postdec1	equ	0xFE5
   498                           fsr1l	equ	0xFE1
   499                           
   500                           	psect	bssBANK0
   501  000060                     __pbssBANK0:
   502                           	opt stack 0
   503  000060                     _TMR_TimerArray:
   504                           	opt stack 0
   505  000060                     	ds	32
   506  000080                     _CurrentFrame:
   507                           	opt stack 0
   508  000080                     	ds	4
   509  000084                     _TestColor:
   510                           	opt stack 0
   511  000084                     	ds	4
   512  000088                     ES_Timer_Tick_Resp@NewEvent:
   513                           	opt stack 0
   514  000088                     	ds	3
   515  00008B                     ES_Timer_Tick_Resp@NeedsProcessing:
   516                           	opt stack 0
   517  00008B                     	ds	2
   518  00008D                     Pattern_RGBPatterns@PatternConfigs:
   519                           	opt stack 0
   520  00008D                     	ds	2
   521  00008F                     _FramePointer:
   522                           	opt stack 0
   523  00008F                     	ds	2
   524  000091                     _Ready:
   525                           	opt stack 0
   526  000091                     	ds	2
   527  000093                     _TMR_ActiveFlags:
   528                           	opt stack 0
   529  000093                     	ds	2
   530  000095                     ES_Timer_Tick_Resp@NextTimer2Process:
   531                           	opt stack 0
   532  000095                     	ds	1
   533  000096                     Pattern_RGBPatterns@Length:
   534                           	opt stack 0
   535  000096                     	ds	1
   536  000097                     SPI32_ControlService@CurrentState:
   537                           	opt stack 0
   538  000097                     	ds	1
   539  000098                     SPI32_ControlService@MyPriority:
   540                           	opt stack 0
   541  000098                     	ds	1
   542  000099                     _CurrentState:
   543                           	opt stack 0
   544  000099                     	ds	1
   545  00009A                     _FrameIndex:
   546                           	opt stack 0
   547  00009A                     	ds	1
   548  00009B                     _Length:
   549                           	opt stack 0
   550  00009B                     	ds	1
   551  00009C                     _MyPriority:
   552                           	opt stack 0
   553  00009C                     	ds	1
   554  00009D                     _NumFrames:
   555                           	opt stack 0
   556  00009D                     	ds	1
   557  00009E                     _PatternStepCounter:
   558                           	opt stack 0
   559  00009E                     	ds	1
   560  00009F                     _TickCount:
   561                           	opt stack 0
   562  00009F                     	ds	1
   563  0000A0                     _Queue0:
   564                           	opt stack 0
   565  0000A0                     	ds	12
   566  0000AC                     _Queue1:
   567                           	opt stack 0
   568  0000AC                     	ds	12
   569  0000B8                     ES_Run@ThisEvent:
   570                           	opt stack 0
   571  0000B8                     	ds	3
   572                           tblptru	equ	0xFF8
   573                           tblptrh	equ	0xFF7
   574                           tblptrl	equ	0xFF6
   575                           tablat	equ	0xFF5
   576                           postinc0	equ	0xFEE
   577                           wreg	equ	0xFE8
   578                           postdec1	equ	0xFE5
   579                           fsr1l	equ	0xFE1
   580                           
   581                           	psect	dataBANK0
   582  0000F6                     __pdataBANK0:
   583                           	opt stack 0
   584  0000F6                     _PatternConfigs:
   585                           	opt stack 0
   586  0000F6                     	ds	5
   587                           tblptru	equ	0xFF8
   588                           tblptrh	equ	0xFF7
   589                           tblptrl	equ	0xFF6
   590                           tablat	equ	0xFF5
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           postdec1	equ	0xFE5
   594                           fsr1l	equ	0xFE1
   595                           
   596                           	psect	bssBANK1
   597  000100                     __pbssBANK1:
   598                           	opt stack 0
   599  000100                     _PixelFrames:
   600                           	opt stack 0
   601  000100                     	ds	128
   602                           tblptru	equ	0xFF8
   603                           tblptrh	equ	0xFF7
   604                           tblptrl	equ	0xFF6
   605                           tablat	equ	0xFF5
   606                           postinc0	equ	0xFEE
   607                           wreg	equ	0xFE8
   608                           postdec1	equ	0xFE5
   609                           fsr1l	equ	0xFE1
   610                           
   611                           	psect	dataBANK1
   612  000180                     __pdataBANK1:
   613                           	opt stack 0
   614  000180                     _GenColors:
   615                           	opt stack 0
   616  000180                     	ds	52
   617                           tblptru	equ	0xFF8
   618                           tblptrh	equ	0xFF7
   619                           tblptrl	equ	0xFF6
   620                           tablat	equ	0xFF5
   621                           postinc0	equ	0xFEE
   622                           wreg	equ	0xFE8
   623                           postdec1	equ	0xFE5
   624                           fsr1l	equ	0xFE1
   625                           
   626                           	psect	bssBANK2
   627  000200                     __pbssBANK2:
   628                           	opt stack 0
   629  000200                     _OffFrames:
   630                           	opt stack 0
   631  000200                     	ds	128
   632  000280                     _PixelPattern:
   633                           	opt stack 0
   634  000280                     	ds	120
   635                           tblptru	equ	0xFF8
   636                           tblptrh	equ	0xFF7
   637                           tblptrl	equ	0xFF6
   638                           tablat	equ	0xFF5
   639                           postinc0	equ	0xFEE
   640                           wreg	equ	0xFE8
   641                           postdec1	equ	0xFE5
   642                           fsr1l	equ	0xFE1
   643                           
   644                           	psect	cstackBANK0
   645  0000BB                     __pcstackBANK0:
   646                           	opt stack 0
   647  0000BB                     ??_DotStar_Init:
   648  0000BB                     ??_ES_Timer_StopTimer:
   649  0000BB                     ?_printf:
   650                           	opt stack 0
   651  0000BB                     ?___awmod:
   652                           	opt stack 0
   653  0000BB                     ?_GetNextFrame:
   654                           	opt stack 0
   655  0000BB                     ?___llmod:
   656                           	opt stack 0
   657  0000BB                     ES_CheckUserEvents@i:
   658                           	opt stack 0
   659  0000BB                     SPI32_SendByte@newByte:
   660                           	opt stack 0
   661  0000BB                     ___lbmod@divisor:
   662                           	opt stack 0
   663  0000BB                     ES_GetMSBitSet@Val2Check:
   664                           	opt stack 0
   665  0000BB                     __HW_Timer_Init@Rate:
   666                           	opt stack 0
   667  0000BB                     ES_InitQueue@pBlock:
   668                           	opt stack 0
   669  0000BB                     ES_Timer_InitTimer@NewTime:
   670                           	opt stack 0
   671  0000BB                     SetupPattern@configs:
   672                           	opt stack 0
   673  0000BB                     printf@f:
   674                           	opt stack 0
   675  0000BB                     ___awmod@dividend:
   676                           	opt stack 0
   677  0000BB                     memcpy@d1:
   678                           	opt stack 0
   679  0000BB                     ___llmod@dividend:
   680                           	opt stack 0
   681                           
   682                           ; 4 bytes @ 0x0
   683  0000BB                     	ds	1
   684  0000BC                     ___lbmod@dividend:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x1
   688  0000BC                     	ds	1
   689  0000BD                     ??_ES_GetMSBitSet:
   690  0000BD                     ??_ES_Timer_InitTimer:
   691  0000BD                     ES_InitQueue@BlockSize:
   692                           	opt stack 0
   693  0000BD                     DotStar_Init@numPixels:
   694                           	opt stack 0
   695  0000BD                     SetupPattern@numPixels:
   696                           	opt stack 0
   697  0000BD                     ___lbmod@counter:
   698                           	opt stack 0
   699  0000BD                     ES_Timer_Init@Rate:
   700                           	opt stack 0
   701  0000BD                     printf@ap:
   702                           	opt stack 0
   703  0000BD                     ___awmod@divisor:
   704                           	opt stack 0
   705  0000BD                     memcpy@s1:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x2
   709  0000BD                     	ds	1
   710  0000BE                     DotStar_Init@i:
   711                           	opt stack 0
   712  0000BE                     ___lbmod@rem:
   713                           	opt stack 0
   714  0000BE                     ES_InitQueue@pThisQueue:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x3
   718  0000BE                     	ds	1
   719  0000BF                     ES_Timer_StopTimer@Num:
   720                           	opt stack 0
   721  0000BF                     ES_Timer_InitTimer@Num:
   722                           	opt stack 0
   723  0000BF                     printf@c:
   724                           	opt stack 0
   725  0000BF                     ___awmod@counter:
   726                           	opt stack 0
   727  0000BF                     memcpy@n:
   728                           	opt stack 0
   729  0000BF                     ___llmod@divisor:
   730                           	opt stack 0
   731                           
   732                           ; 4 bytes @ 0x4
   733  0000BF                     	ds	1
   734  0000C0                     ___awmod@sign:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x5
   738  0000C0                     	ds	1
   739  0000C1                     ?___wmul:
   740                           	opt stack 0
   741  0000C1                     ___wmul@multiplier:
   742                           	opt stack 0
   743  0000C1                     memcpy@d:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x6
   747  0000C1                     	ds	1
   748  0000C2                     ES_GetMSBitSet@ReturnVal:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x7
   752  0000C2                     	ds	1
   753  0000C3                     ES_GetMSBitSet@Nybble2Test:
   754                           	opt stack 0
   755  0000C3                     ___llmod@counter:
   756                           	opt stack 0
   757  0000C3                     ___wmul@multiplicand:
   758                           	opt stack 0
   759  0000C3                     memcpy@s:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x8
   763  0000C3                     	ds	1
   764  0000C4                     ?_UpdatePattern:
   765                           	opt stack 0
   766  0000C4                     ES_GetMSBitSet@LoopCntr:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x9
   770  0000C4                     	ds	1
   771  0000C5                     ___wmul@product:
   772                           	opt stack 0
   773                           
   774                           ; 2 bytes @ 0xA
   775  0000C5                     	ds	1
   776  0000C6                     ??_UpdatePattern:
   777                           
   778                           ; 1 bytes @ 0xB
   779  0000C6                     	ds	1
   780  0000C7                     ES_EnQueueFIFO@pBlock:
   781                           	opt stack 0
   782  0000C7                     ES_DeQueue@pBlock:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0xC
   786  0000C7                     	ds	2
   787  0000C9                     ES_DeQueue@pReturnEvent:
   788                           	opt stack 0
   789  0000C9                     ES_EnQueueFIFO@Event2Add:
   790                           	opt stack 0
   791                           
   792                           ; 3 bytes @ 0xE
   793  0000C9                     	ds	1
   794  0000CA                     UpdatePattern@brightness:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0xF
   798  0000CA                     	ds	1
   799  0000CB                     ??_ES_DeQueue:
   800  0000CB                     _UpdatePattern$635:
   801                           	opt stack 0
   802                           
   803                           ; 4 bytes @ 0x10
   804  0000CB                     	ds	1
   805  0000CC                     ??_ES_EnQueueFIFO:
   806                           
   807                           ; 1 bytes @ 0x11
   808  0000CC                     	ds	1
   809  0000CD                     ES_DeQueue@SaveCrit:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x12
   813  0000CD                     	ds	1
   814  0000CE                     ES_DeQueue@NumLeft:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x13
   818  0000CE                     	ds	1
   819  0000CF                     ES_EnQueueFIFO@SaveCrit:
   820                           	opt stack 0
   821  0000CF                     UpdatePattern@patternID:
   822                           	opt stack 0
   823  0000CF                     ES_DeQueue@pThisQueue:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0x14
   827  0000CF                     	ds	1
   828  0000D0                     UpdatePattern@i:
   829                           	opt stack 0
   830  0000D0                     ES_EnQueueFIFO@pThisQueue:
   831                           	opt stack 0
   832                           
   833                           ; 2 bytes @ 0x15
   834  0000D0                     	ds	2
   835  0000D2                     ES_PostToService@TheEvent:
   836                           	opt stack 0
   837                           
   838                           ; 3 bytes @ 0x17
   839  0000D2                     	ds	3
   840  0000D5                     ??_ES_PostToService:
   841                           
   842                           ; 1 bytes @ 0x1A
   843  0000D5                     	ds	2
   844  0000D7                     ES_PostToService@WhichService:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x1C
   848  0000D7                     	ds	1
   849  0000D8                     InitPatternControlService@ThisEvent:
   850                           	opt stack 0
   851  0000D8                     PostPatternControlService@ThisEvent:
   852                           	opt stack 0
   853  0000D8                     InitSPI32ControlService@ThisEvent:
   854                           	opt stack 0
   855  0000D8                     PostSPI32ControlService@ThisEvent:
   856                           	opt stack 0
   857                           
   858                           ; 3 bytes @ 0x1D
   859  0000D8                     	ds	3
   860  0000DB                     ??_ES_Timer_Tick_Resp:
   861  0000DB                     InitPatternControlService@Priority:
   862                           	opt stack 0
   863  0000DB                     InitSPI32ControlService@Priority:
   864                           	opt stack 0
   865  0000DB                     SPI32_TransmitFrames@framePointer:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x20
   869  0000DB                     	ds	1
   870  0000DC                     ES_Initialize@NewRate:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x21
   874  0000DC                     	ds	1
   875  0000DD                     SPI32_TransmitFrames@numFrames:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x22
   879  0000DD                     	ds	1
   880  0000DE                     ES_Initialize@i:
   881                           	opt stack 0
   882  0000DE                     SPI32_TransmitFrames@transmitEvent:
   883                           	opt stack 0
   884                           
   885                           ; 3 bytes @ 0x23
   886  0000DE                     	ds	1
   887  0000DF                     
   888                           ; 1 bytes @ 0x24
   889  0000DF                     	ds	2
   890  0000E1                     DotStar_Show@pixelPointer:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x26
   894  0000E1                     	ds	2
   895  0000E3                     ?_RunPatternControlService:
   896                           	opt stack 0
   897  0000E3                     ?_RunSPI32ControlService:
   898                           	opt stack 0
   899  0000E3                     RunPatternControlService@ThisEvent:
   900                           	opt stack 0
   901  0000E3                     RunSPI32ControlService@ThisEvent:
   902                           	opt stack 0
   903                           
   904                           ; 3 bytes @ 0x28
   905  0000E3                     	ds	3
   906  0000E6                     ??_RunSPI32ControlService:
   907  0000E6                     RunPatternControlService@ReturnEvent:
   908                           	opt stack 0
   909                           
   910                           ; 3 bytes @ 0x2B
   911  0000E6                     	ds	3
   912  0000E9                     RunPatternControlService@testEvent:
   913                           	opt stack 0
   914                           
   915                           ; 3 bytes @ 0x2E
   916  0000E9                     	ds	4
   917  0000ED                     RunSPI32ControlService@ReturnEvent:
   918                           	opt stack 0
   919                           
   920                           ; 3 bytes @ 0x32
   921  0000ED                     	ds	3
   922  0000F0                     ??_ES_Run:
   923                           
   924                           ; 1 bytes @ 0x35
   925  0000F0                     	ds	4
   926  0000F4                     ES_Run@HighestPrior:
   927                           	opt stack 0
   928                           
   929                           ; 1 bytes @ 0x39
   930  0000F4                     	ds	1
   931  0000F5                     main@ErrorType:
   932                           	opt stack 0
   933                           
   934                           ; 1 bytes @ 0x3A
   935  0000F5                     	ds	1
   936                           tblptru	equ	0xFF8
   937                           tblptrh	equ	0xFF7
   938                           tblptrl	equ	0xFF6
   939                           tablat	equ	0xFF5
   940                           postinc0	equ	0xFEE
   941                           wreg	equ	0xFE8
   942                           postdec1	equ	0xFE5
   943                           fsr1l	equ	0xFE1
   944                           
   945                           	psect	cstackCOMRAM
   946  000001                     __pcstackCOMRAM:
   947                           	opt stack 0
   948  000001                     ?i2___awmod:
   949                           	opt stack 0
   950  000001                     i2___awmod@dividend:
   951                           	opt stack 0
   952                           
   953                           ; 2 bytes @ 0x0
   954  000001                     	ds	2
   955  000003                     i2___awmod@divisor:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x2
   959  000003                     	ds	2
   960  000005                     i2___awmod@counter:
   961                           	opt stack 0
   962                           
   963                           ; 1 bytes @ 0x4
   964  000005                     	ds	1
   965  000006                     i2___awmod@sign:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x5
   969  000006                     	ds	1
   970  000007                     ?i2___wmul:
   971                           	opt stack 0
   972  000007                     i2___wmul@multiplier:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x6
   976  000007                     	ds	2
   977  000009                     i2___wmul@multiplicand:
   978                           	opt stack 0
   979                           
   980                           ; 2 bytes @ 0x8
   981  000009                     	ds	2
   982  00000B                     i2___wmul@product:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0xA
   986  00000B                     	ds	2
   987  00000D                     i2ES_EnQueueFIFO@pBlock:
   988                           	opt stack 0
   989                           
   990                           ; 2 bytes @ 0xC
   991  00000D                     	ds	2
   992  00000F                     i2ES_EnQueueFIFO@Event2Add:
   993                           	opt stack 0
   994                           
   995                           ; 3 bytes @ 0xE
   996  00000F                     	ds	3
   997  000012                     ??i2_ES_EnQueueFIFO:
   998                           
   999                           ; 1 bytes @ 0x11
  1000  000012                     	ds	3
  1001  000015                     i2ES_EnQueueFIFO@SaveCrit:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x14
  1005  000015                     	ds	1
  1006  000016                     i2ES_EnQueueFIFO@pThisQueue:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x15
  1010  000016                     	ds	2
  1011  000018                     i2ES_PostToService@TheEvent:
  1012                           	opt stack 0
  1013                           
  1014                           ; 3 bytes @ 0x17
  1015  000018                     	ds	3
  1016  00001B                     ??i2_ES_PostToService:
  1017                           
  1018                           ; 1 bytes @ 0x1A
  1019  00001B                     	ds	2
  1020  00001D                     i2ES_PostToService@WhichService:
  1021                           	opt stack 0
  1022                           
  1023                           ; 1 bytes @ 0x1C
  1024  00001D                     	ds	1
  1025  00001E                     i2PostSPI32ControlService@ThisEvent:
  1026                           	opt stack 0
  1027                           
  1028                           ; 3 bytes @ 0x1D
  1029  00001E                     	ds	3
  1030  000021                     SPI32_EOTResponse@EOTevent:
  1031                           	opt stack 0
  1032                           
  1033                           ; 3 bytes @ 0x20
  1034  000021                     	ds	3
  1035  000024                     ??_ISR:
  1036                           
  1037                           ; 1 bytes @ 0x23
  1038  000024                     	ds	16
  1039                           tblptru	equ	0xFF8
  1040                           tblptrh	equ	0xFF7
  1041                           tblptrl	equ	0xFF6
  1042                           tablat	equ	0xFF5
  1043                           postinc0	equ	0xFEE
  1044                           wreg	equ	0xFE8
  1045                           postdec1	equ	0xFE5
  1046                           fsr1l	equ	0xFE1
  1047                           
  1048 ;;
  1049 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1050 ;;
  1051 ;; *************** function _main *****************
  1052 ;; Defined at:
  1053 ;;		line 25 in file "main.c"
  1054 ;; Parameters:    Size  Location     Type
  1055 ;;		None
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;  ErrorType       1   58[BANK0 ] enum E15647
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  2  527[None  ] int 
  1060 ;; Registers used:
  1061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1067 ;;      Params:         0       0       0       0
  1068 ;;      Locals:         0       1       0       0
  1069 ;;      Temps:          0       0       0       0
  1070 ;;      Totals:         0       1       0       0
  1071 ;;Total ram usage:        1 bytes
  1072 ;; Hardware stack levels required when called:   15
  1073 ;; This function calls:
  1074 ;;		_ES_Initialize
  1075 ;;		_ES_Run
  1076 ;;		_printf
  1077 ;; This function is called by:
  1078 ;;		Startup code after reset
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           	psect	text0
  1083  00111C                     __ptext0:
  1084                           	opt stack 0
  1085  00111C                     _main:
  1086                           	opt stack 16
  1087                           
  1088                           ;main.c: 28: IRCF0 = 1;
  1089                           
  1090                           ;incstack = 0
  1091  00111C  88D3               	bsf	4051,4,c	;volatile
  1092                           
  1093                           ;main.c: 29: IRCF1 = 1;
  1094  00111E  8AD3               	bsf	4051,5,c	;volatile
  1095                           
  1096                           ;main.c: 30: IRCF2 = 1;
  1097  001120  8CD3               	bsf	4051,6,c	;volatile
  1098                           
  1099                           ;main.c: 31: SCS1 = 1;
  1100  001122  82D3               	bsf	4051,1,c	;volatile
  1101                           
  1102                           ;main.c: 39: ES_Return_t ErrorType;
  1103                           ;main.c: 55: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
  1104  001124  0E9C               	movlw	156
  1105  001126  0100               	movlb	0	; () banked
  1106  001128  6FDD               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
  1107  00112A  0E3F               	movlw	63
  1108  00112C  6FDC               	movwf	ES_Initialize@NewRate& (0+255),b
  1109  00112E  EC60  F005         	call	_ES_Initialize	;wreg free
  1110  001132  0100               	movlb	0	; () banked
  1111  001134  6FF5               	movwf	main@ErrorType& (0+255),b
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;main.c: 56: if ( ErrorType == Success ) {
  1115  001136  0100               	movlb	0	; () banked
  1116  001138  51F5               	movf	main@ErrorType& (0+255),w,b
  1117  00113A  0100               	movlb	0	; () banked
  1118  00113C  A4D8               	btfss	status,2,c
  1119  00113E  D029               	goto	l2818
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;main.c: 58: ErrorType = ES_Run();
  1123  001140  EC6E  F004         	call	_ES_Run	;wreg free
  1124  001144  0100               	movlb	0	; () banked
  1125  001146  6FF5               	movwf	main@ErrorType& (0+255),b
  1126                           
  1127                           ; BSR set to: 0
  1128                           ;main.c: 60: }
  1129                           ;main.c: 62: switch (ErrorType){
  1130  001148  D024               	goto	l2818
  1131  00114A                     l2808:
  1132                           
  1133                           ; BSR set to: 0
  1134                           ;main.c: 64: printf("Failed on attempt to Post\n");
  1135  00114A  0E64               	movlw	low STR_1
  1136  00114C  0100               	movlb	0	; () banked
  1137  00114E  6FBB               	movwf	printf@f& (0+255),b
  1138  001150  0E03               	movlw	high STR_1
  1139  001152  0100               	movlb	0	; () banked
  1140  001154  6FBC               	movwf	(printf@f+1)& (0+255),b
  1141  001156  EC0B  F00B         	call	_printf	;wreg free
  1142                           
  1143                           ;main.c: 65: break;
  1144  00115A  D027               	goto	l535
  1145  00115C                     l2810:
  1146                           
  1147                           ;main.c: 67: printf("Failed on NULL pointer\n");
  1148  00115C  0E7F               	movlw	low STR_2
  1149  00115E  0100               	movlb	0	; () banked
  1150  001160  6FBB               	movwf	printf@f& (0+255),b
  1151  001162  0E03               	movlw	high STR_2
  1152  001164  0100               	movlb	0	; () banked
  1153  001166  6FBC               	movwf	(printf@f+1)& (0+255),b
  1154  001168  EC0B  F00B         	call	_printf	;wreg free
  1155                           
  1156                           ;main.c: 68: break;
  1157  00116C  D01E               	goto	l535
  1158  00116E                     l2812:
  1159                           
  1160                           ;main.c: 70: printf("Failed Initialization\n");
  1161  00116E  0E97               	movlw	low STR_3
  1162  001170  0100               	movlb	0	; () banked
  1163  001172  6FBB               	movwf	printf@f& (0+255),b
  1164  001174  0E03               	movlw	high STR_3
  1165  001176  0100               	movlb	0	; () banked
  1166  001178  6FBC               	movwf	(printf@f+1)& (0+255),b
  1167  00117A  EC0B  F00B         	call	_printf	;wreg free
  1168                           
  1169                           ;main.c: 71: break;
  1170  00117E  D015               	goto	l535
  1171  001180                     l2814:
  1172                           
  1173                           ;main.c: 73: printf("Other Failure\n");
  1174  001180  0EAE               	movlw	low STR_4
  1175  001182  0100               	movlb	0	; () banked
  1176  001184  6FBB               	movwf	printf@f& (0+255),b
  1177  001186  0E03               	movlw	high STR_4
  1178  001188  0100               	movlb	0	; () banked
  1179  00118A  6FBC               	movwf	(printf@f+1)& (0+255),b
  1180  00118C  EC0B  F00B         	call	_printf	;wreg free
  1181                           
  1182                           ;main.c: 75: }
  1183                           
  1184                           ;main.c: 74: break;
  1185  001190  D00C               	goto	l535
  1186  001192                     l2818:
  1187  001192  0100               	movlb	0	; () banked
  1188  001194  51F5               	movf	main@ErrorType& (0+255),w,b
  1189                           
  1190                           ; Switch size 1, requested type "space"
  1191                           ; Number of cases is 3, Range of values is 1 to 5
  1192                           ; switch strategies available:
  1193                           ; Name         Instructions Cycles
  1194                           ; simple_byte           10     6 (average)
  1195                           ;	Chosen strategy is simple_byte
  1196  001196  0A01               	xorlw	1	; case 1
  1197  001198  B4D8               	btfsc	status,2,c
  1198  00119A  D7D7               	goto	l2808
  1199  00119C  0A02               	xorlw	2	; case 3
  1200  00119E  B4D8               	btfsc	status,2,c
  1201  0011A0  D7DD               	goto	l2810
  1202  0011A2  0A06               	xorlw	6	; case 5
  1203  0011A4  B4D8               	btfsc	status,2,c
  1204  0011A6  D7E3               	goto	l2812
  1205  0011A8  D7EB               	goto	l2814
  1206  0011AA                     l535:
  1207                           
  1208                           ;main.c: 77: ;
  1209  0011AA  D7FF               	goto	l535
  1210  0011AC                     __end_of_main:
  1211                           	opt stack 0
  1212                           tblptru	equ	0xFF8
  1213                           tblptrh	equ	0xFF7
  1214                           tblptrl	equ	0xFF6
  1215                           tablat	equ	0xFF5
  1216                           postinc0	equ	0xFEE
  1217                           wreg	equ	0xFE8
  1218                           postdec1	equ	0xFE5
  1219                           fsr1l	equ	0xFE1
  1220                           status	equ	0xFD8
  1221                           
  1222 ;; *************** function _printf *****************
  1223 ;; Defined at:
  1224 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1227 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;  tmpval          4    0        struct .
  1230 ;;  cp              3    0        PTR const unsigned char 
  1231 ;;  ap              2    2[BANK0 ] PTR void [1]
  1232 ;;		 -> ?_printf(2), 
  1233 ;;  len             2    0        unsigned int 
  1234 ;;  val             2    0        unsigned int 
  1235 ;;  c               1    4[BANK0 ] char 
  1236 ;;  flag            1    0        unsigned char 
  1237 ;;  prec            1    0        char 
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  2    0[BANK0 ] int 
  1240 ;; Registers used:
  1241 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1247 ;;      Params:         0       2       0       0
  1248 ;;      Locals:         0       3       0       0
  1249 ;;      Temps:          0       0       0       0
  1250 ;;      Totals:         0       5       0       0
  1251 ;;Total ram usage:        5 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; Hardware stack levels required when called:    7
  1254 ;; This function calls:
  1255 ;;		_putch
  1256 ;; This function is called by:
  1257 ;;		_main
  1258 ;; This function uses a non-reentrant model
  1259 ;;
  1260                           
  1261                           	psect	text1
  1262  001616                     __ptext1:
  1263                           	opt stack 0
  1264  001616                     _printf:
  1265                           	opt stack 23
  1266                           
  1267                           ;doprnt.c: 466: va_list ap;
  1268                           ;doprnt.c: 499: signed char c;
  1269                           ;doprnt.c: 506: signed char prec;
  1270                           ;doprnt.c: 508: unsigned char flag;
  1271                           ;doprnt.c: 523: union {
  1272                           ;doprnt.c: 524: unsigned long vd;
  1273                           ;doprnt.c: 525: double integ;
  1274                           ;doprnt.c: 526: } tmpval;
  1275                           ;doprnt.c: 528: unsigned int val;
  1276                           ;doprnt.c: 529: unsigned len;
  1277                           ;doprnt.c: 530: const char * cp;
  1278                           ;doprnt.c: 533: *ap = __va_start();
  1279                           
  1280                           ;incstack = 0
  1281  001616  0EBD               	movlw	low (?_printf+2)
  1282  001618  0100               	movlb	0	; () banked
  1283  00161A  6FBD               	movwf	printf@ap& (0+255),b
  1284  00161C  0E00               	movlw	high (?_printf+2)
  1285  00161E  0100               	movlb	0	; () banked
  1286  001620  6FBE               	movwf	(printf@ap+1)& (0+255),b
  1287                           
  1288                           ;doprnt.c: 536: while(c = *f++) {
  1289  001622  D004               	goto	l2654
  1290  001624                     l2652:
  1291                           
  1292                           ; BSR set to: 0
  1293                           ;doprnt.c: 540: {
  1294                           ;doprnt.c: 541: (putch(c) );
  1295  001624  0100               	movlb	0	; () banked
  1296  001626  51BF               	movf	printf@c& (0+255),w,b
  1297  001628  EC09  F00C         	call	_putch
  1298  00162C                     l2654:
  1299  00162C  C0BB  FFF6         	movff	printf@f,tblptrl
  1300  001630  C0BC  FFF7         	movff	printf@f+1,tblptrh
  1301  001634  0100               	movlb	0	; () banked
  1302  001636  4BBB               	infsnz	printf@f& (0+255),f,b
  1303  001638  2BBC               	incf	(printf@f+1)& (0+255),f,b
  1304  00163A                     	if	0	;tblptru may be non-zero
  1305  00163A                     	endif
  1306  00163A                     	if	0	;tblptru may be non-zero
  1307  00163A                     	endif
  1308  00163A  0008               	tblrd		*
  1309  00163C  CFF5 F0BF          	movff	tablat,printf@c
  1310  001640  0100               	movlb	0	; () banked
  1311  001642  51BF               	movf	printf@c& (0+255),w,b
  1312  001644  B4D8               	btfsc	status,2,c
  1313  001646  0012               	return	
  1314  001648  D7ED               	goto	l2652
  1315  00164A                     __end_of_printf:
  1316                           	opt stack 0
  1317                           tblptru	equ	0xFF8
  1318                           tblptrh	equ	0xFF7
  1319                           tblptrl	equ	0xFF6
  1320                           tablat	equ	0xFF5
  1321                           postinc0	equ	0xFEE
  1322                           wreg	equ	0xFE8
  1323                           postdec1	equ	0xFE5
  1324                           fsr1l	equ	0xFE1
  1325                           status	equ	0xFD8
  1326                           
  1327 ;; *************** function _putch *****************
  1328 ;; Defined at:
  1329 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\putch.c"
  1330 ;; Parameters:    Size  Location     Type
  1331 ;;  c               1    wreg     unsigned char 
  1332 ;; Auto vars:     Size  Location     Type
  1333 ;;  c               1    0[COMRAM] unsigned char 
  1334 ;; Return value:  Size  Location     Type
  1335 ;;                  1    wreg      void 
  1336 ;; Registers used:
  1337 ;;		wreg
  1338 ;; Tracked objects:
  1339 ;;		On entry : 0/0
  1340 ;;		On exit  : 0/0
  1341 ;;		Unchanged: 0/0
  1342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1343 ;;      Params:         0       0       0       0
  1344 ;;      Locals:         0       0       0       0
  1345 ;;      Temps:          0       0       0       0
  1346 ;;      Totals:         0       0       0       0
  1347 ;;Total ram usage:        0 bytes
  1348 ;; Hardware stack levels used:    1
  1349 ;; Hardware stack levels required when called:    6
  1350 ;; This function calls:
  1351 ;;		Nothing
  1352 ;; This function is called by:
  1353 ;;		_printf
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           	psect	text2
  1358  001812                     __ptext2:
  1359                           	opt stack 0
  1360  001812                     _putch:
  1361                           	opt stack 23
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;incstack = 0
  1365  001812  0012               	return		;funcret
  1366  001814                     __end_of_putch:
  1367                           	opt stack 0
  1368                           tblptru	equ	0xFF8
  1369                           tblptrh	equ	0xFF7
  1370                           tblptrl	equ	0xFF6
  1371                           tablat	equ	0xFF5
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           postdec1	equ	0xFE5
  1375                           fsr1l	equ	0xFE1
  1376                           status	equ	0xFD8
  1377                           
  1378 ;; *************** function _ES_Run *****************
  1379 ;; Defined at:
  1380 ;;		line 277 in file "ES_Framework.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;		None
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;  HighestPrior    1   57[BANK0 ] unsigned char 
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  1    wreg      enum E15495
  1387 ;; Registers used:
  1388 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1394 ;;      Params:         0       0       0       0
  1395 ;;      Locals:         0       1       0       0
  1396 ;;      Temps:          0       4       0       0
  1397 ;;      Totals:         0       5       0       0
  1398 ;;Total ram usage:        5 bytes
  1399 ;; Hardware stack levels used:    1
  1400 ;; Hardware stack levels required when called:   14
  1401 ;; This function calls:
  1402 ;;		_ES_CheckUserEvents
  1403 ;;		_ES_DeQueue
  1404 ;;		_ES_GetMSBitSet
  1405 ;;		_RunPatternControlService
  1406 ;;		_RunSPI32ControlService
  1407 ;;		__HW_Process_Pending_Ints
  1408 ;; This function is called by:
  1409 ;;		_main
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413                           	psect	text3
  1414  0008DC                     __ptext3:
  1415                           	opt stack 0
  1416  0008DC                     _ES_Run:
  1417                           	opt stack 16
  1418                           
  1419                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1420                           
  1421                           ;incstack = 0
  1422                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1423                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1424                           ;ES_Framework.c: 282: while(1){
  1425  0008DC  D06B               	goto	l2636
  1426  0008DE                     l2624:
  1427                           
  1428                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1429  0008DE  C091  F0BB         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1430  0008E2  C092  F0BC         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1431  0008E6  EC56  F007         	call	_ES_GetMSBitSet	;wreg free
  1432  0008EA  0100               	movlb	0	; () banked
  1433  0008EC  6FF4               	movwf	ES_Run@HighestPrior& (0+255),b
  1434                           
  1435                           ; BSR set to: 0
  1436                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1437  0008EE  0100               	movlb	0	; () banked
  1438  0008F0  51F4               	movf	ES_Run@HighestPrior& (0+255),w,b
  1439  0008F2  0D03               	mullw	3
  1440  0008F4  0E58               	movlw	low _EventQueues
  1441  0008F6  24F3               	addwf	prodl,w,c
  1442  0008F8  6EF6               	movwf	tblptrl,c
  1443  0008FA  0E03               	movlw	high _EventQueues
  1444  0008FC  20F4               	addwfc	prodh,w,c
  1445  0008FE  6EF7               	movwf	tblptrh,c
  1446  000900                     	if	0	;There are less than 3 active tblptr bytes
  1447  000900                     	endif
  1448  000900  0009               	tblrd		*+
  1449  000902  CFF5 F0C7          	movff	tablat,ES_DeQueue@pBlock
  1450  000906  000A               	tblrd		*-
  1451  000908  CFF5 F0C8          	movff	tablat,ES_DeQueue@pBlock+1
  1452  00090C  0EB8               	movlw	low ES_Run@ThisEvent
  1453  00090E  0100               	movlb	0	; () banked
  1454  000910  6FC9               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1455  000912  0E00               	movlw	high ES_Run@ThisEvent
  1456  000914  0100               	movlb	0	; () banked
  1457  000916  6FCA               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1458  000918  EC4F  F003         	call	_ES_DeQueue	;wreg free
  1459  00091C  0900               	iorlw	0
  1460  00091E  A4D8               	btfss	status,2,c
  1461  000920  D01F               	goto	l2630
  1462                           
  1463                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1464  000922  0100               	movlb	0	; () banked
  1465  000924  51F4               	movf	ES_Run@HighestPrior& (0+255),w,b
  1466  000926  0D02               	mullw	2
  1467  000928  0E01               	movlw	low _BitNum2SetMask
  1468  00092A  24F3               	addwf	prodl,w,c
  1469  00092C  6EF6               	movwf	tblptrl,c
  1470  00092E  0E03               	movlw	high _BitNum2SetMask
  1471  000930  20F4               	addwfc	prodh,w,c
  1472  000932  6EF7               	movwf	tblptrh,c
  1473  000934                     	if	0	;There are less than 3 active tblptr bytes
  1474  000934                     	endif
  1475  000934  0009               	tblrd		*+
  1476  000936  CFF5 F0F0          	movff	tablat,??_ES_Run
  1477  00093A  0009               	tblrd		*+
  1478  00093C  CFF5 F0F1          	movff	tablat,??_ES_Run+1
  1479  000940  0100               	movlb	0	; () banked
  1480  000942  1DF0               	comf	??_ES_Run& (0+255),w,b
  1481  000944  0100               	movlb	0	; () banked
  1482  000946  6FF2               	movwf	(??_ES_Run+2)& (0+255),b
  1483  000948  0100               	movlb	0	; () banked
  1484  00094A  1DF1               	comf	(??_ES_Run+1)& (0+255),w,b
  1485  00094C  0100               	movlb	0	; () banked
  1486  00094E  6FF3               	movwf	(??_ES_Run+3)& (0+255),b
  1487  000950  0100               	movlb	0	; () banked
  1488  000952  51F2               	movf	(??_ES_Run+2)& (0+255),w,b
  1489  000954  0100               	movlb	0	; () banked
  1490  000956  1791               	andwf	_Ready& (0+255),f,b
  1491  000958  0100               	movlb	0	; () banked
  1492  00095A  51F3               	movf	(??_ES_Run+3)& (0+255),w,b
  1493  00095C  0100               	movlb	0	; () banked
  1494  00095E  1792               	andwf	(_Ready+1)& (0+255),f,b
  1495  000960                     l2630:
  1496                           
  1497                           ;ES_Framework.c: 291: }
  1498                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1499  000960  C0B8  F0E3         	movff	ES_Run@ThisEvent,RunSPI32ControlService@ThisEvent
  1500  000964  C0B9  F0E4         	movff	ES_Run@ThisEvent+1,RunSPI32ControlService@ThisEvent+1
  1501  000968  C0BA  F0E5         	movff	ES_Run@ThisEvent+2,RunSPI32ControlService@ThisEvent+2
  1502  00096C  0100               	movlb	0	; () banked
  1503  00096E  51F4               	movf	ES_Run@HighestPrior& (0+255),w,b
  1504  000970  0D04               	mullw	4
  1505  000972  0E02               	movlw	2
  1506  000974  26F3               	addwf	prodl,f,c
  1507  000976  0E00               	movlw	0
  1508  000978  22F4               	addwfc	prodh,f,c
  1509  00097A  0E50               	movlw	low _ServDescList
  1510  00097C  24F3               	addwf	prodl,w,c
  1511  00097E  6EF6               	movwf	tblptrl,c
  1512  000980  0E03               	movlw	high _ServDescList
  1513  000982  20F4               	addwfc	prodh,w,c
  1514  000984  6EF7               	movwf	tblptrh,c
  1515  000986                     	if	0	;There are less than 3 active tblptr bytes
  1516  000986                     	endif
  1517  000986  D801               	call	u1678
  1518  000988  D00C               	goto	u1679
  1519  00098A                     u1678:
  1520  00098A  0005               	push	
  1521  00098C  6EFA               	movwf	pclath,c
  1522  00098E  0009               	tblrd		*+
  1523  000990  50F5               	movf	tablat,w,c
  1524  000992  6EFD               	movwf	tosl,c
  1525  000994  0009               	tblrd		*+
  1526  000996  50F5               	movf	tablat,w,c
  1527  000998  6EFE               	movwf	tosh,c
  1528  00099A  50F8               	movf	tblptru,w,c
  1529  00099C  6EFF               	movwf	tosu,c
  1530  00099E  50FA               	movf	pclath,w,c
  1531  0009A0  0012               	return		;indir
  1532  0009A2                     u1679:
  1533  0009A2  0EE3               	movlw	low ?_RunSPI32ControlService
  1534  0009A4  6ED9               	movwf	fsr2l,c
  1535  0009A6  0E00               	movlw	high ?_RunSPI32ControlService
  1536  0009A8  6EDA               	movwf	fsr2h,c
  1537  0009AA  50DF               	movf	indf2,w,c
  1538  0009AC  B4D8               	btfsc	status,2,c
  1539  0009AE  D002               	goto	l2636
  1540                           
  1541                           ;ES_Framework.c: 293: return FailedRun;
  1542  0009B0  0E02               	movlw	2
  1543  0009B2  0012               	return	
  1544  0009B4                     l2636:
  1545  0009B4  ECBA  F00B         	call	__HW_Process_Pending_Ints	;wreg free
  1546  0009B8  0900               	iorlw	0
  1547  0009BA  B4D8               	btfsc	status,2,c
  1548  0009BC  D006               	goto	l2640
  1549  0009BE  0100               	movlb	0	; () banked
  1550  0009C0  5191               	movf	_Ready& (0+255),w,b
  1551  0009C2  0100               	movlb	0	; () banked
  1552  0009C4  1192               	iorwf	(_Ready+1)& (0+255),w,b
  1553  0009C6  A4D8               	btfss	status,2,c
  1554  0009C8  D78A               	goto	l2624
  1555  0009CA                     l2640:
  1556                           
  1557                           ;ES_Framework.c: 294: }
  1558                           ;ES_Framework.c: 295: }
  1559                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1560  0009CA  EC33  F00A         	call	_ES_CheckUserEvents	;wreg free
  1561  0009CE  D7F2               	goto	l2636
  1562  0009D0                     __end_of_ES_Run:
  1563                           	opt stack 0
  1564                           tosu	equ	0xFFF
  1565                           tosh	equ	0xFFE
  1566                           tosl	equ	0xFFD
  1567                           pclath	equ	0xFFA
  1568                           tblptru	equ	0xFF8
  1569                           tblptrh	equ	0xFF7
  1570                           tblptrl	equ	0xFF6
  1571                           tablat	equ	0xFF5
  1572                           prodh	equ	0xFF4
  1573                           prodl	equ	0xFF3
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           postdec1	equ	0xFE5
  1577                           fsr1l	equ	0xFE1
  1578                           indf2	equ	0xFDF
  1579                           fsr2h	equ	0xFDA
  1580                           fsr2l	equ	0xFD9
  1581                           status	equ	0xFD8
  1582                           
  1583 ;; *************** function __HW_Process_Pending_Ints *****************
  1584 ;; Defined at:
  1585 ;;		line 207 in file "ES_Port.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;		None
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;		None
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  1    wreg      unsigned char 
  1592 ;; Registers used:
  1593 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1599 ;;      Params:         0       0       0       0
  1600 ;;      Locals:         0       0       0       0
  1601 ;;      Temps:          0       0       0       0
  1602 ;;      Totals:         0       0       0       0
  1603 ;;Total ram usage:        0 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; Hardware stack levels required when called:   11
  1606 ;; This function calls:
  1607 ;;		_ES_Timer_Tick_Resp
  1608 ;; This function is called by:
  1609 ;;		_ES_Run
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           	psect	text4
  1614  001774                     __ptext4:
  1615                           	opt stack 0
  1616  001774                     __HW_Process_Pending_Ints:
  1617                           	opt stack 18
  1618                           
  1619                           ;ES_Port.c: 209: while (TickCount > 0)
  1620                           
  1621                           ;incstack = 0
  1622  001774  D004               	goto	l2444
  1623  001776                     l2440:
  1624                           
  1625                           ;ES_Port.c: 210: {
  1626                           ;ES_Port.c: 212: ES_Timer_Tick_Resp();
  1627  001776  ECE3  F003         	call	_ES_Timer_Tick_Resp	;wreg free
  1628                           
  1629                           ;ES_Port.c: 213: TickCount--;
  1630  00177A  0100               	movlb	0	; () banked
  1631  00177C  079F               	decf	_TickCount& (0+255),f,b	;volatile
  1632  00177E                     l2444:
  1633  00177E  0100               	movlb	0	; () banked
  1634  001780  519F               	movf	_TickCount& (0+255),w,b	;volatile
  1635  001782  A4D8               	btfss	status,2,c
  1636  001784  D7F8               	goto	l2440
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;ES_Port.c: 214: }
  1640                           ;ES_Port.c: 216: return 1;
  1641                           
  1642                           ; BSR set to: 0
  1643  001786  0E01               	movlw	1
  1644  001788  0012               	return	
  1645  00178A                     __end_of__HW_Process_Pending_Ints:
  1646                           	opt stack 0
  1647                           tosu	equ	0xFFF
  1648                           tosh	equ	0xFFE
  1649                           tosl	equ	0xFFD
  1650                           pclath	equ	0xFFA
  1651                           tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           prodh	equ	0xFF4
  1656                           prodl	equ	0xFF3
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           postdec1	equ	0xFE5
  1660                           fsr1l	equ	0xFE1
  1661                           indf2	equ	0xFDF
  1662                           fsr2h	equ	0xFDA
  1663                           fsr2l	equ	0xFD9
  1664                           status	equ	0xFD8
  1665                           
  1666 ;; *************** function _ES_Timer_Tick_Resp *****************
  1667 ;; Defined at:
  1668 ;;		line 284 in file "ES_Timers.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;		None
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;		None
  1673 ;; Return value:  Size  Location     Type
  1674 ;;                  1    wreg      void 
  1675 ;; Registers used:
  1676 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1677 ;; Tracked objects:
  1678 ;;		On entry : 0/0
  1679 ;;		On exit  : 0/0
  1680 ;;		Unchanged: 0/0
  1681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1682 ;;      Params:         0       0       0       0
  1683 ;;      Locals:         0       0       0       0
  1684 ;;      Temps:          0       4       0       0
  1685 ;;      Totals:         0       4       0       0
  1686 ;;Total ram usage:        4 bytes
  1687 ;; Hardware stack levels used:    1
  1688 ;; Hardware stack levels required when called:   10
  1689 ;; This function calls:
  1690 ;;		Absolute function
  1691 ;;		_ES_GetMSBitSet
  1692 ;;		_PostPatternControlService
  1693 ;;		_PostSPI32ControlService
  1694 ;; This function is called by:
  1695 ;;		__HW_Process_Pending_Ints
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text5
  1700  0007C6                     __ptext5:
  1701                           	opt stack 0
  1702  0007C6                     _ES_Timer_Tick_Resp:
  1703                           	opt stack 18
  1704                           
  1705                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1706                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1707                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1708                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;incstack = 0
  1712  0007C6  0100               	movlb	0	; () banked
  1713  0007C8  5193               	movf	_TMR_ActiveFlags& (0+255),w,b
  1714  0007CA  0100               	movlb	0	; () banked
  1715  0007CC  1194               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1716  0007CE  B4D8               	btfsc	status,2,c
  1717  0007D0  0012               	return	
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;ES_Timers.c: 291: {
  1721                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1722  0007D2  C093  F08B         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1723  0007D6  C094  F08C         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1724  0007DA                     l2284:
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1728  0007DA  C08B  F0BB         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1729  0007DE  C08C  F0BC         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1730  0007E2  EC56  F007         	call	_ES_GetMSBitSet	;wreg free
  1731  0007E6  0100               	movlb	0	; () banked
  1732  0007E8  6F95               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1736  0007EA  0100               	movlb	0	; () banked
  1737  0007EC  5195               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1738  0007EE  0D02               	mullw	2
  1739  0007F0  0E60               	movlw	low _TMR_TimerArray
  1740  0007F2  24F3               	addwf	prodl,w,c
  1741  0007F4  6ED9               	movwf	fsr2l,c
  1742  0007F6  0E00               	movlw	high _TMR_TimerArray
  1743  0007F8  20F4               	addwfc	prodh,w,c
  1744  0007FA  6EDA               	movwf	fsr2h,c
  1745  0007FC  06DE               	decf	postinc2,f,c
  1746  0007FE  0E00               	movlw	0
  1747  000800  5ADD               	subwfb	postdec2,f,c
  1748  000802  50DE               	movf	postinc2,w,c
  1749  000804  10DE               	iorwf	postinc2,w,c
  1750  000806  A4D8               	btfss	status,2,c
  1751  000808  D043               	goto	l2296
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;ES_Timers.c: 299: {
  1755                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1756  00080A  0E03               	movlw	3
  1757  00080C  0100               	movlb	0	; () banked
  1758  00080E  6F88               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1762  000810  C095  F089         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1763  000814  0100               	movlb	0	; () banked
  1764  000816  6B8A               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1768  000818  C088  F0D8         	movff	ES_Timer_Tick_Resp@NewEvent,PostSPI32ControlService@ThisEvent
  1769  00081C  C089  F0D9         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostSPI32ControlService@ThisEvent+1
  1770  000820  C08A  F0DA         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostSPI32ControlService@ThisEvent+2
  1771  000824  0100               	movlb	0	; () banked
  1772  000826  5195               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1773  000828  0D02               	mullw	2
  1774  00082A  0E21               	movlw	low _Timer2PostFunc
  1775  00082C  24F3               	addwf	prodl,w,c
  1776  00082E  6EF6               	movwf	tblptrl,c
  1777  000830  0E03               	movlw	high _Timer2PostFunc
  1778  000832  20F4               	addwfc	prodh,w,c
  1779  000834  6EF7               	movwf	tblptrh,c
  1780  000836                     	if	0	;There are less than 3 active tblptr bytes
  1781  000836                     	endif
  1782  000836  D801               	call	u1318
  1783  000838  D00C               	goto	l2294
  1784  00083A                     u1318:
  1785  00083A  0005               	push	
  1786  00083C  6EFA               	movwf	pclath,c
  1787  00083E  0009               	tblrd		*+
  1788  000840  50F5               	movf	tablat,w,c
  1789  000842  6EFD               	movwf	tosl,c
  1790  000844  0009               	tblrd		*+
  1791  000846  50F5               	movf	tablat,w,c
  1792  000848  6EFE               	movwf	tosh,c
  1793  00084A  50F8               	movf	tblptru,w,c
  1794  00084C  6EFF               	movwf	tosu,c
  1795  00084E  50FA               	movf	pclath,w,c
  1796  000850  0012               	return		;indir
  1797  000852                     l2294:
  1798                           
  1799                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1800  000852  0100               	movlb	0	; () banked
  1801  000854  5195               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1802  000856  0D02               	mullw	2
  1803  000858  0E01               	movlw	low _BitNum2SetMask
  1804  00085A  24F3               	addwf	prodl,w,c
  1805  00085C  6EF6               	movwf	tblptrl,c
  1806  00085E  0E03               	movlw	high _BitNum2SetMask
  1807  000860  20F4               	addwfc	prodh,w,c
  1808  000862  6EF7               	movwf	tblptrh,c
  1809  000864                     	if	0	;There are less than 3 active tblptr bytes
  1810  000864                     	endif
  1811  000864  0009               	tblrd		*+
  1812  000866  CFF5 F0DB          	movff	tablat,??_ES_Timer_Tick_Resp
  1813  00086A  0009               	tblrd		*+
  1814  00086C  CFF5 F0DC          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1815  000870  0100               	movlb	0	; () banked
  1816  000872  1DDB               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1817  000874  0100               	movlb	0	; () banked
  1818  000876  6FDD               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1819  000878  0100               	movlb	0	; () banked
  1820  00087A  1DDC               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1821  00087C  0100               	movlb	0	; () banked
  1822  00087E  6FDE               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1823  000880  0100               	movlb	0	; () banked
  1824  000882  51DD               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1825  000884  0100               	movlb	0	; () banked
  1826  000886  1793               	andwf	_TMR_ActiveFlags& (0+255),f,b
  1827  000888  0100               	movlb	0	; () banked
  1828  00088A  51DE               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1829  00088C  0100               	movlb	0	; () banked
  1830  00088E  1794               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  1831  000890                     l2296:
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;ES_Timers.c: 306: }
  1835                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1836  000890  0100               	movlb	0	; () banked
  1837  000892  5195               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1838  000894  0D02               	mullw	2
  1839  000896  0E01               	movlw	low _BitNum2SetMask
  1840  000898  24F3               	addwf	prodl,w,c
  1841  00089A  6EF6               	movwf	tblptrl,c
  1842  00089C  0E03               	movlw	high _BitNum2SetMask
  1843  00089E  20F4               	addwfc	prodh,w,c
  1844  0008A0  6EF7               	movwf	tblptrh,c
  1845  0008A2                     	if	0	;There are less than 3 active tblptr bytes
  1846  0008A2                     	endif
  1847  0008A2  0009               	tblrd		*+
  1848  0008A4  CFF5 F0DB          	movff	tablat,??_ES_Timer_Tick_Resp
  1849  0008A8  0009               	tblrd		*+
  1850  0008AA  CFF5 F0DC          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1851  0008AE  0100               	movlb	0	; () banked
  1852  0008B0  1DDB               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1853  0008B2  0100               	movlb	0	; () banked
  1854  0008B4  6FDD               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1855  0008B6  0100               	movlb	0	; () banked
  1856  0008B8  1DDC               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1857  0008BA  0100               	movlb	0	; () banked
  1858  0008BC  6FDE               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1859  0008BE  0100               	movlb	0	; () banked
  1860  0008C0  51DD               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1861  0008C2  0100               	movlb	0	; () banked
  1862  0008C4  178B               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  1863  0008C6  0100               	movlb	0	; () banked
  1864  0008C8  51DE               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1865  0008CA  0100               	movlb	0	; () banked
  1866  0008CC  178C               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1870  0008CE  0100               	movlb	0	; () banked
  1871  0008D0  518B               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  1872  0008D2  0100               	movlb	0	; () banked
  1873  0008D4  118C               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  1874  0008D6  B4D8               	btfsc	status,2,c
  1875  0008D8  0012               	return	
  1876  0008DA  D77F               	goto	l2284
  1877  0008DC                     __end_of_ES_Timer_Tick_Resp:
  1878                           	opt stack 0
  1879                           tosu	equ	0xFFF
  1880                           tosh	equ	0xFFE
  1881                           tosl	equ	0xFFD
  1882                           pclath	equ	0xFFA
  1883                           tblptru	equ	0xFF8
  1884                           tblptrh	equ	0xFF7
  1885                           tblptrl	equ	0xFF6
  1886                           tablat	equ	0xFF5
  1887                           prodh	equ	0xFF4
  1888                           prodl	equ	0xFF3
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           postdec1	equ	0xFE5
  1892                           fsr1l	equ	0xFE1
  1893                           indf2	equ	0xFDF
  1894                           postinc2	equ	0xFDE
  1895                           postdec2	equ	0xFDD
  1896                           fsr2h	equ	0xFDA
  1897                           fsr2l	equ	0xFD9
  1898                           status	equ	0xFD8
  1899                           
  1900 ;; *************** function _ES_GetMSBitSet *****************
  1901 ;; Defined at:
  1902 ;;		line 79 in file "ES_LookupTables.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;  LoopCntr        1    9[BANK0 ] char 
  1907 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  1908 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      unsigned char 
  1911 ;; Registers used:
  1912 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1918 ;;      Params:         0       2       0       0
  1919 ;;      Locals:         0       3       0       0
  1920 ;;      Temps:          0       5       0       0
  1921 ;;      Totals:         0      10       0       0
  1922 ;;Total ram usage:       10 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; Hardware stack levels required when called:    6
  1925 ;; This function calls:
  1926 ;;		Nothing
  1927 ;; This function is called by:
  1928 ;;		_ES_Run
  1929 ;;		_ES_Timer_Tick_Resp
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           	psect	text6
  1934  000EAC                     __ptext6:
  1935                           	opt stack 0
  1936  000EAC                     _ES_GetMSBitSet:
  1937                           	opt stack 21
  1938                           
  1939                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1940                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1941                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;incstack = 0
  1945  000EAC  0E80               	movlw	128
  1946  000EAE  0100               	movlb	0	; () banked
  1947  000EB0  6FC2               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1948                           
  1949                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1950  000EB2  0E03               	movlw	3
  1951  000EB4  0100               	movlb	0	; () banked
  1952  000EB6  6FC4               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  1953  000EB8                     l2170:
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1957  000EB8  0100               	movlb	0	; () banked
  1958  000EBA  BFC4               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  1959  000EBC  D046               	goto	l2184
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1963                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1964                           ;ES_LookupTables.c: 91: 0x0F);
  1965                           
  1966                           ; BSR set to: 0
  1967                           
  1968                           ; BSR set to: 0
  1969  000EBE  0100               	movlb	0	; () banked
  1970  000EC0  51C4               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1971  000EC2  0D04               	mullw	4
  1972  000EC4  CFF3 F0BD          	movff	prodl,??_ES_GetMSBitSet
  1973  000EC8  C0BB  F0BE         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1974  000ECC  C0BC  F0BF         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1975  000ED0  0100               	movlb	0	; () banked
  1976  000ED2  2BBD               	incf	??_ES_GetMSBitSet& (0+255),f,b
  1977  000ED4  D004               	goto	u1184
  1978  000ED6                     u1185:
  1979  000ED6  0100               	movlb	0	; () banked
  1980  000ED8  90D8               	bcf	status,0,c
  1981  000EDA  33BF               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1982  000EDC  33BE               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  1983  000EDE                     u1184:
  1984  000EDE  0100               	movlb	0	; () banked
  1985  000EE0  2FBD               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  1986  000EE2  D7F9               	goto	u1185
  1987  000EE4  0100               	movlb	0	; () banked
  1988  000EE6  51BE               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1989  000EE8  0B0F               	andlw	15
  1990  000EEA  0100               	movlb	0	; () banked
  1991  000EEC  6FC3               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1995  000EEE  0100               	movlb	0	; () banked
  1996  000EF0  51C3               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1997  000EF2  0100               	movlb	0	; () banked
  1998  000EF4  B4D8               	btfsc	status,2,c
  1999  000EF6  D026               	goto	l2180
  2000                           
  2001                           ; BSR set to: 0
  2002                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  2003                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  2004  000EF8  0EFF               	movlw	255
  2005  000EFA  0100               	movlb	0	; () banked
  2006  000EFC  6FBD               	movwf	??_ES_GetMSBitSet& (0+255),b
  2007  000EFE  0EFF               	movlw	255
  2008  000F00  0100               	movlb	0	; () banked
  2009  000F02  6FBE               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  2010  000F04  0100               	movlb	0	; () banked
  2011  000F06  51C3               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2012  000F08  0100               	movlb	0	; () banked
  2013  000F0A  6FBF               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  2014  000F0C  6BC0               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  2015  000F0E  0100               	movlb	0	; () banked
  2016  000F10  51BD               	movf	??_ES_GetMSBitSet& (0+255),w,b
  2017  000F12  0100               	movlb	0	; () banked
  2018  000F14  27BF               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2019  000F16  0100               	movlb	0	; () banked
  2020  000F18  51BE               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2021  000F1A  0100               	movlb	0	; () banked
  2022  000F1C  23C0               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  2023  000F1E  0E41               	movlw	low _Nybble2MSBitNum
  2024  000F20  0100               	movlb	0	; () banked
  2025  000F22  25BF               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  2026  000F24  6EF6               	movwf	tblptrl,c
  2027  000F26  0E03               	movlw	high _Nybble2MSBitNum
  2028  000F28  21C0               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  2029  000F2A  6EF7               	movwf	tblptrh,c
  2030  000F2C                     	if	0	;There are less than 3 active tblptr bytes
  2031  000F2C                     	endif
  2032  000F2C  0008               	tblrd		*
  2033  000F2E  CFF5 F0C1          	movff	tablat,??_ES_GetMSBitSet+4
  2034  000F32  0100               	movlb	0	; () banked
  2035  000F34  51C4               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2036  000F36  0D04               	mullw	4
  2037  000F38  50F3               	movf	prodl,w,c
  2038  000F3A  0100               	movlb	0	; () banked
  2039  000F3C  25C1               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  2040  000F3E  0100               	movlb	0	; () banked
  2041  000F40  6FC2               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2042                           
  2043                           ;ES_LookupTables.c: 96: break;
  2044  000F42  D003               	goto	l2184
  2045  000F44                     l2180:
  2046                           
  2047                           ; BSR set to: 0
  2048  000F44  0100               	movlb	0	; () banked
  2049  000F46  07C4               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  2050  000F48  D7B7               	goto	l2170
  2051  000F4A                     l2184:
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;ES_LookupTables.c: 97: }
  2055                           ;ES_LookupTables.c: 98: }
  2056                           ;ES_LookupTables.c: 99: return ReturnVal;
  2057  000F4A  0100               	movlb	0	; () banked
  2058  000F4C  51C2               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  2059  000F4E  0012               	return	
  2060  000F50                     __end_of_ES_GetMSBitSet:
  2061                           	opt stack 0
  2062                           tosu	equ	0xFFF
  2063                           tosh	equ	0xFFE
  2064                           tosl	equ	0xFFD
  2065                           pclath	equ	0xFFA
  2066                           tblptru	equ	0xFF8
  2067                           tblptrh	equ	0xFF7
  2068                           tblptrl	equ	0xFF6
  2069                           tablat	equ	0xFF5
  2070                           prodh	equ	0xFF4
  2071                           prodl	equ	0xFF3
  2072                           postinc0	equ	0xFEE
  2073                           wreg	equ	0xFE8
  2074                           postdec1	equ	0xFE5
  2075                           fsr1l	equ	0xFE1
  2076                           indf2	equ	0xFDF
  2077                           postinc2	equ	0xFDE
  2078                           postdec2	equ	0xFDD
  2079                           fsr2h	equ	0xFDA
  2080                           fsr2l	equ	0xFD9
  2081                           status	equ	0xFD8
  2082                           
  2083 ;; *************** function _RunPatternControlService *****************
  2084 ;; Defined at:
  2085 ;;		line 157 in file "Pattern_ControlService.c"
  2086 ;; Parameters:    Size  Location     Type
  2087 ;;  ThisEvent       3   40[BANK0 ] struct ES_Event_t
  2088 ;; Auto vars:     Size  Location     Type
  2089 ;;  testEvent       3   46[BANK0 ] struct ES_Event_t
  2090 ;;  ReturnEvent     3   43[BANK0 ] struct ES_Event_t
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  3   40[BANK0 ] struct ES_Event_t
  2093 ;; Registers used:
  2094 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2100 ;;      Params:         0       3       0       0
  2101 ;;      Locals:         0       6       0       0
  2102 ;;      Temps:          0       0       0       0
  2103 ;;      Totals:         0       9       0       0
  2104 ;;Total ram usage:        9 bytes
  2105 ;; Hardware stack levels used:    1
  2106 ;; Hardware stack levels required when called:   13
  2107 ;; This function calls:
  2108 ;;		_PausePattern
  2109 ;;		_PostPatternControlService
  2110 ;;		_ShowPattern
  2111 ;;		_StopPattern
  2112 ;; This function is called by:
  2113 ;;		_ES_Run
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           	psect	text7
  2118  000C8E                     __ptext7:
  2119                           	opt stack 0
  2120  000C8E                     _RunPatternControlService:
  2121                           	opt stack 16
  2122                           
  2123                           ;Pattern_ControlService.c: 159: ES_Event ReturnEvent;
  2124                           ;Pattern_ControlService.c: 160: ReturnEvent.EventType = ES_NO_EVENT;
  2125                           
  2126                           ; BSR set to: 0
  2127                           ;incstack = 0
  2128  000C8E  0E00               	movlw	0
  2129  000C90  0100               	movlb	0	; () banked
  2130  000C92  6FE6               	movwf	RunPatternControlService@ReturnEvent& (0+255),b
  2131                           
  2132                           ;Pattern_ControlService.c: 162: switch(CurrentState){
  2133  000C94  D049               	goto	l2516
  2134  000C96                     l2474:
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;Pattern_ControlService.c: 165: if(ThisEvent.EventType == ES_INIT){
  2138  000C96  0E02               	movlw	2
  2139  000C98  0100               	movlb	0	; () banked
  2140  000C9A  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2141  000C9C  A4D8               	btfss	status,2,c
  2142  000C9E  D052               	goto	l324
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;Pattern_ControlService.c: 169: CurrentState = Pattern_Off;
  2146  000CA0  0E01               	movlw	1
  2147  000CA2  0100               	movlb	0	; () banked
  2148  000CA4  6F99               	movwf	_CurrentState& (0+255),b
  2149                           
  2150                           ;Pattern_ControlService.c: 172: ES_Event testEvent;
  2151                           ;Pattern_ControlService.c: 173: testEvent.EventType = PATTERN_START;
  2152  000CA6  0E05               	movlw	5
  2153  000CA8  0100               	movlb	0	; () banked
  2154  000CAA  6FE9               	movwf	RunPatternControlService@testEvent& (0+255),b
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;Pattern_ControlService.c: 174: PostPatternControlService(testEvent);
  2158  000CAC  C0E9  F0D8         	movff	RunPatternControlService@testEvent,PostPatternControlService@ThisEvent
  2159  000CB0  C0EA  F0D9         	movff	RunPatternControlService@testEvent+1,PostPatternControlService@ThisEvent+1
  2160  000CB4  C0EB  F0DA         	movff	RunPatternControlService@testEvent+2,PostPatternControlService@ThisEvent+2
  2161  000CB8  ECC5  F00B         	call	_PostPatternControlService	;wreg free
  2162                           
  2163                           ;Pattern_ControlService.c: 176: }
  2164                           ;Pattern_ControlService.c: 177: break;
  2165  000CBC  D043               	goto	l324
  2166  000CBE                     l2480:
  2167                           
  2168                           ;Pattern_ControlService.c: 181: if(ThisEvent.EventType == PATTERN_START){
  2169  000CBE  0E05               	movlw	5
  2170  000CC0  0100               	movlb	0	; () banked
  2171  000CC2  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2172  000CC4  A4D8               	btfss	status,2,c
  2173  000CC6  D03E               	goto	l324
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;Pattern_ControlService.c: 183: ShowPattern();
  2177  000CC8  EC3E  F00B         	call	_ShowPattern	;wreg free
  2178  000CCC                     l2484:
  2179                           
  2180                           ;Pattern_ControlService.c: 185: CurrentState = Pattern_Running;
  2181  000CCC  0E02               	movlw	2
  2182  000CCE  D029               	goto	L4
  2183  000CD0                     l2486:
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;Pattern_ControlService.c: 191: if(ThisEvent.EventType == ES_TIMEOUT){
  2187  000CD0  0E03               	movlw	3
  2188  000CD2  0100               	movlb	0	; () banked
  2189  000CD4  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2190  000CD6  A4D8               	btfss	status,2,c
  2191  000CD8  D003               	goto	l2490
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;Pattern_ControlService.c: 193: ShowPattern();
  2195  000CDA  EC3E  F00B         	call	_ShowPattern	;wreg free
  2196                           
  2197                           ;Pattern_ControlService.c: 194: }
  2198  000CDE  D032               	goto	l324
  2199  000CE0                     l2490:
  2200                           
  2201                           ;Pattern_ControlService.c: 196: else if(ThisEvent.EventType == PATTERN_END){
  2202  000CE0  0E06               	movlw	6
  2203  000CE2  0100               	movlb	0	; () banked
  2204  000CE4  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2205  000CE6  A4D8               	btfss	status,2,c
  2206  000CE8  D003               	goto	l2496
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;Pattern_ControlService.c: 198: StopPattern();
  2210  000CEA  EC75  F00B         	call	_StopPattern	;wreg free
  2211  000CEE  D018               	goto	L12
  2212  000CF0                     l2496:
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;Pattern_ControlService.c: 203: else if(ThisEvent.EventType == PATTERN_PAUSE){
  2216  000CF0  0E07               	movlw	7
  2217  000CF2  0100               	movlb	0	; () banked
  2218  000CF4  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2219  000CF6  A4D8               	btfss	status,2,c
  2220  000CF8  D025               	goto	l324
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;Pattern_ControlService.c: 205: PausePattern();
  2224  000CFA  ECFD  F00B         	call	_PausePattern	;wreg free
  2225                           
  2226                           ;Pattern_ControlService.c: 207: CurrentState = Pattern_Paused;
  2227  000CFE  0E03               	movlw	3
  2228  000D00  D010               	goto	L4
  2229  000D02                     l2502:
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;Pattern_ControlService.c: 213: if(ThisEvent.EventType == PATTERN_UNPAUSE){
  2233  000D02  0E08               	movlw	8
  2234  000D04  0100               	movlb	0	; () banked
  2235  000D06  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2236  000D08  A4D8               	btfss	status,2,c
  2237  000D0A  D003               	goto	l2508
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;Pattern_ControlService.c: 215: ShowPattern();
  2241  000D0C  EC3E  F00B         	call	_ShowPattern	;wreg free
  2242  000D10  D7DD               	goto	l2484
  2243  000D12                     l2508:
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;Pattern_ControlService.c: 220: else if(ThisEvent.EventType == PATTERN_END){
  2247  000D12  0E06               	movlw	6
  2248  000D14  0100               	movlb	0	; () banked
  2249  000D16  19E3               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2250  000D18  A4D8               	btfss	status,2,c
  2251  000D1A  D014               	goto	l324
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;Pattern_ControlService.c: 222: StopPattern();
  2255  000D1C  EC75  F00B         	call	_StopPattern	;wreg free
  2256  000D20                     L12:
  2257                           
  2258                           ;Pattern_ControlService.c: 224: CurrentState = Pattern_Off;
  2259  000D20  0E01               	movlw	1
  2260  000D22                     L4:
  2261  000D22  0100               	movlb	0	; () banked
  2262  000D24  6F99               	movwf	_CurrentState& (0+255),b
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;Pattern_ControlService.c: 227: }
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;Pattern_ControlService.c: 225: }
  2269                           ;Pattern_ControlService.c: 226: break;
  2270                           
  2271                           ; BSR set to: 0
  2272  000D26  D00E               	goto	l324
  2273  000D28                     l2516:
  2274                           
  2275                           ; BSR set to: 0
  2276  000D28  0100               	movlb	0	; () banked
  2277  000D2A  5199               	movf	_CurrentState& (0+255),w,b
  2278                           
  2279                           ; Switch size 1, requested type "space"
  2280                           ; Number of cases is 4, Range of values is 0 to 3
  2281                           ; switch strategies available:
  2282                           ; Name         Instructions Cycles
  2283                           ; simple_byte           13     7 (average)
  2284                           ;	Chosen strategy is simple_byte
  2285  000D2C  0A00               	xorlw	0	; case 0
  2286  000D2E  B4D8               	btfsc	status,2,c
  2287  000D30  D7B2               	goto	l2474
  2288  000D32  0A01               	xorlw	1	; case 1
  2289  000D34  B4D8               	btfsc	status,2,c
  2290  000D36  D7C3               	goto	l2480
  2291  000D38  0A03               	xorlw	3	; case 2
  2292  000D3A  B4D8               	btfsc	status,2,c
  2293  000D3C  D7C9               	goto	l2486
  2294  000D3E  0A01               	xorlw	1	; case 3
  2295  000D40  B4D8               	btfsc	status,2,c
  2296  000D42  D7DF               	goto	l2502
  2297  000D44                     l324:
  2298                           
  2299                           ;Pattern_ControlService.c: 228: return ReturnEvent;
  2300  000D44  C0E6  F0E3         	movff	RunPatternControlService@ReturnEvent,?_RunPatternControlService
  2301  000D48  C0E7  F0E4         	movff	RunPatternControlService@ReturnEvent+1,?_RunPatternControlService+1
  2302  000D4C  C0E8  F0E5         	movff	RunPatternControlService@ReturnEvent+2,?_RunPatternControlService+2
  2303  000D50  0012               	return		;funcret
  2304  000D52                     __end_of_RunPatternControlService:
  2305                           	opt stack 0
  2306                           tosu	equ	0xFFF
  2307                           tosh	equ	0xFFE
  2308                           tosl	equ	0xFFD
  2309                           pclath	equ	0xFFA
  2310                           tblptru	equ	0xFF8
  2311                           tblptrh	equ	0xFF7
  2312                           tblptrl	equ	0xFF6
  2313                           tablat	equ	0xFF5
  2314                           prodh	equ	0xFF4
  2315                           prodl	equ	0xFF3
  2316                           postinc0	equ	0xFEE
  2317                           wreg	equ	0xFE8
  2318                           postdec1	equ	0xFE5
  2319                           fsr1l	equ	0xFE1
  2320                           indf2	equ	0xFDF
  2321                           postinc2	equ	0xFDE
  2322                           postdec2	equ	0xFDD
  2323                           fsr2h	equ	0xFDA
  2324                           fsr2l	equ	0xFD9
  2325                           status	equ	0xFD8
  2326                           
  2327 ;; *************** function _RunSPI32ControlService *****************
  2328 ;; Defined at:
  2329 ;;		line 138 in file "SPI32_ControlService.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;  ThisEvent       3   40[BANK0 ] struct ES_Event_t
  2332 ;; Auto vars:     Size  Location     Type
  2333 ;;  ReturnEvent     3   50[BANK0 ] struct ES_Event_t
  2334 ;; Return value:  Size  Location     Type
  2335 ;;                  3   40[BANK0 ] struct ES_Event_t
  2336 ;; Registers used:
  2337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2338 ;; Tracked objects:
  2339 ;;		On entry : 0/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2343 ;;      Params:         0       3       0       0
  2344 ;;      Locals:         0       3       0       0
  2345 ;;      Temps:          0       7       0       0
  2346 ;;      Totals:         0      13       0       0
  2347 ;;Total ram usage:       13 bytes
  2348 ;; Hardware stack levels used:    1
  2349 ;; Hardware stack levels required when called:    7
  2350 ;; This function calls:
  2351 ;;		_GetNextFrame
  2352 ;;		_SPI32_SendByte
  2353 ;; This function is called by:
  2354 ;;		_ES_Run
  2355 ;; This function uses a non-reentrant model
  2356 ;;
  2357                           
  2358                           	psect	text8
  2359  00055C                     __ptext8:
  2360                           	opt stack 0
  2361  00055C                     _RunSPI32ControlService:
  2362                           	opt stack 22
  2363                           
  2364                           ;SPI32_ControlService.c: 140: ES_Event ReturnEvent;
  2365                           ;SPI32_ControlService.c: 141: ReturnEvent.EventType = ES_NO_EVENT;
  2366                           
  2367                           ;incstack = 0
  2368  00055C  0E00               	movlw	0
  2369  00055E  0100               	movlb	0	; () banked
  2370  000560  6FED               	movwf	RunSPI32ControlService@ReturnEvent& (0+255),b
  2371                           
  2372                           ;SPI32_ControlService.c: 143: switch ( CurrentState ) {
  2373  000562  D082               	goto	l2586
  2374  000564                     l2540:
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;SPI32_ControlService.c: 148: if(ThisEvent.EventType == ES_INIT){
  2378  000564  0E02               	movlw	2
  2379  000566  0100               	movlb	0	; () banked
  2380  000568  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2381  00056A  A4D8               	btfss	status,2,c
  2382  00056C  D091               	goto	l457
  2383  00056E  D078               	goto	l2582
  2384  000570                     l2544:
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;SPI32_ControlService.c: 159: if(ThisEvent.EventType == SPI32_TRANSMIT){
  2388  000570  0E09               	movlw	9
  2389  000572  0100               	movlb	0	; () banked
  2390  000574  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2391  000576  A4D8               	btfss	status,2,c
  2392  000578  D08B               	goto	l457
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;SPI32_ControlService.c: 161: CurrentFrame = GetNextFrame();
  2396  00057A  ECAD  F00B         	call	_GetNextFrame	;wreg free
  2397  00057E  C0BB  F080         	movff	?_GetNextFrame,_CurrentFrame
  2398  000582  C0BC  F081         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2399  000586  C0BD  F082         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2400  00058A  C0BE  F083         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2401                           
  2402                           ;SPI32_ControlService.c: 163: SPI32_SendByte(CurrentFrame>>24);
  2403  00058E  0100               	movlb	0	; () banked
  2404  000590  5183               	movf	(_CurrentFrame+3)& (0+255),w,b
  2405  000592  ECF4  F00B         	call	_SPI32_SendByte
  2406  000596                     l2550:
  2407                           
  2408                           ;SPI32_ControlService.c: 165: CurrentState = SPI32_SendingByte1;
  2409  000596  0E02               	movlw	2
  2410  000598  D064               	goto	L10
  2411  00059A                     l2552:
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;SPI32_ControlService.c: 172: if(ThisEvent.EventType == ES_TIMEOUT){
  2415  00059A  0E03               	movlw	3
  2416  00059C  0100               	movlb	0	; () banked
  2417  00059E  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2418  0005A0  A4D8               	btfss	status,2,c
  2419  0005A2  D076               	goto	l457
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;SPI32_ControlService.c: 174: SPI32_SendByte(CurrentFrame>>16);
  2423  0005A4  0100               	movlb	0	; () banked
  2424  0005A6  5182               	movf	(_CurrentFrame+2)& (0+255),w,b
  2425  0005A8  ECF4  F00B         	call	_SPI32_SendByte
  2426                           
  2427                           ;SPI32_ControlService.c: 176: CurrentState = SPI32_SendingByte2;
  2428  0005AC  0E03               	movlw	3
  2429  0005AE  D059               	goto	L10
  2430  0005B0                     l2558:
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;SPI32_ControlService.c: 184: if(ThisEvent.EventType == ES_TIMEOUT){
  2434  0005B0  0E03               	movlw	3
  2435  0005B2  0100               	movlb	0	; () banked
  2436  0005B4  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2437  0005B6  A4D8               	btfss	status,2,c
  2438  0005B8  D06B               	goto	l457
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;SPI32_ControlService.c: 186: SPI32_SendByte(CurrentFrame>>8);
  2442  0005BA  0100               	movlb	0	; () banked
  2443  0005BC  5181               	movf	(_CurrentFrame+1)& (0+255),w,b
  2444  0005BE  ECF4  F00B         	call	_SPI32_SendByte
  2445                           
  2446                           ;SPI32_ControlService.c: 188: CurrentState = SPI32_SendingByte3;
  2447  0005C2  0E04               	movlw	4
  2448  0005C4  D04E               	goto	L10
  2449  0005C6                     l2564:
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;SPI32_ControlService.c: 196: if(ThisEvent.EventType == ES_TIMEOUT){
  2453  0005C6  0E03               	movlw	3
  2454  0005C8  0100               	movlb	0	; () banked
  2455  0005CA  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2456  0005CC  A4D8               	btfss	status,2,c
  2457  0005CE  D060               	goto	l457
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;SPI32_ControlService.c: 198: SPI32_SendByte(CurrentFrame);
  2461  0005D0  0100               	movlb	0	; () banked
  2462  0005D2  5180               	movf	_CurrentFrame& (0+255),w,b
  2463  0005D4  ECF4  F00B         	call	_SPI32_SendByte
  2464                           
  2465                           ;SPI32_ControlService.c: 200: CurrentState = SPI32_SendingByte4;
  2466  0005D8  0E05               	movlw	5
  2467  0005DA  D043               	goto	L10
  2468  0005DC                     l2570:
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;SPI32_ControlService.c: 207: if(ThisEvent.EventType == ES_TIMEOUT){
  2472  0005DC  0E03               	movlw	3
  2473  0005DE  0100               	movlb	0	; () banked
  2474  0005E0  19E3               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2475  0005E2  A4D8               	btfss	status,2,c
  2476  0005E4  D055               	goto	l457
  2477                           
  2478                           ; BSR set to: 0
  2479                           ;SPI32_ControlService.c: 209: if(FrameIndex++ < NumFrames-1){
  2480  0005E6  0EFF               	movlw	255
  2481  0005E8  0100               	movlb	0	; () banked
  2482  0005EA  6FE6               	movwf	??_RunSPI32ControlService& (0+255),b
  2483  0005EC  0EFF               	movlw	255
  2484  0005EE  0100               	movlb	0	; () banked
  2485  0005F0  6FE7               	movwf	(??_RunSPI32ControlService+1)& (0+255),b
  2486  0005F2  0100               	movlb	0	; () banked
  2487  0005F4  519D               	movf	_NumFrames& (0+255),w,b
  2488  0005F6  0100               	movlb	0	; () banked
  2489  0005F8  6FE8               	movwf	(??_RunSPI32ControlService+2)& (0+255),b
  2490  0005FA  6BE9               	clrf	(??_RunSPI32ControlService+3)& (0+255),b
  2491  0005FC  0100               	movlb	0	; () banked
  2492  0005FE  51E6               	movf	??_RunSPI32ControlService& (0+255),w,b
  2493  000600  0100               	movlb	0	; () banked
  2494  000602  27E8               	addwf	(??_RunSPI32ControlService+2)& (0+255),f,b
  2495  000604  0100               	movlb	0	; () banked
  2496  000606  51E7               	movf	(??_RunSPI32ControlService+1)& (0+255),w,b
  2497  000608  0100               	movlb	0	; () banked
  2498  00060A  23E9               	addwfc	(??_RunSPI32ControlService+3)& (0+255),f,b
  2499  00060C  0100               	movlb	0	; () banked
  2500  00060E  2B9A               	incf	_FrameIndex& (0+255),f,b
  2501  000610  059A               	decf	_FrameIndex& (0+255),w,b
  2502  000612  0100               	movlb	0	; () banked
  2503  000614  6FEA               	movwf	(??_RunSPI32ControlService+4)& (0+255),b
  2504  000616  6BEB               	clrf	(??_RunSPI32ControlService+5)& (0+255),b
  2505  000618  0100               	movlb	0	; () banked
  2506  00061A  51E8               	movf	(??_RunSPI32ControlService+2)& (0+255),w,b
  2507  00061C  0100               	movlb	0	; () banked
  2508  00061E  5DEA               	subwf	(??_RunSPI32ControlService+4)& (0+255),w,b
  2509  000620  0100               	movlb	0	; () banked
  2510  000622  51EB               	movf	(??_RunSPI32ControlService+5)& (0+255),w,b
  2511  000624  0A80               	xorlw	128
  2512  000626  0100               	movlb	0	; () banked
  2513  000628  6FEC               	movwf	(??_RunSPI32ControlService+6)& (0+255),b
  2514  00062A  0100               	movlb	0	; () banked
  2515  00062C  51E9               	movf	(??_RunSPI32ControlService+3)& (0+255),w,b
  2516  00062E  0A80               	xorlw	128
  2517  000630  0100               	movlb	0	; () banked
  2518  000632  59EC               	subwfb	(??_RunSPI32ControlService+6)& (0+255),w,b
  2519  000634  B0D8               	btfsc	status,0,c
  2520  000636  D014               	goto	l2582
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;SPI32_ControlService.c: 211: FramePointer++;
  2524  000638  0E04               	movlw	4
  2525  00063A  0100               	movlb	0	; () banked
  2526  00063C  278F               	addwf	_FramePointer& (0+255),f,b
  2527  00063E  0E00               	movlw	0
  2528  000640  2390               	addwfc	(_FramePointer+1)& (0+255),f,b
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;SPI32_ControlService.c: 212: CurrentFrame = GetNextFrame();
  2532  000642  ECAD  F00B         	call	_GetNextFrame	;wreg free
  2533  000646  C0BB  F080         	movff	?_GetNextFrame,_CurrentFrame
  2534  00064A  C0BC  F081         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2535  00064E  C0BD  F082         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2536  000652  C0BE  F083         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2537                           
  2538                           ;SPI32_ControlService.c: 214: SPI32_SendByte(CurrentFrame>>24);
  2539  000656  0100               	movlb	0	; () banked
  2540  000658  5183               	movf	(_CurrentFrame+3)& (0+255),w,b
  2541  00065A  ECF4  F00B         	call	_SPI32_SendByte
  2542  00065E  D79B               	goto	l2550
  2543  000660                     l2582:
  2544                           
  2545                           ; BSR set to: 0
  2546                           ;SPI32_ControlService.c: 219: else{
  2547                           ;SPI32_ControlService.c: 221: CurrentState = SPI32_Waiting4Send;
  2548  000660  0E01               	movlw	1
  2549  000662                     L10:
  2550  000662  0100               	movlb	0	; () banked
  2551  000664  6F97               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;SPI32_ControlService.c: 226: }
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;SPI32_ControlService.c: 222: }
  2558                           ;SPI32_ControlService.c: 223: }
  2559                           ;SPI32_ControlService.c: 224: break;
  2560                           
  2561                           ; BSR set to: 0
  2562  000666  D014               	goto	l457
  2563  000668                     l2586:
  2564                           
  2565                           ; BSR set to: 0
  2566  000668  0100               	movlb	0	; () banked
  2567  00066A  5197               	movf	SPI32_ControlService@CurrentState& (0+255),w,b
  2568                           
  2569                           ; Switch size 1, requested type "space"
  2570                           ; Number of cases is 6, Range of values is 0 to 5
  2571                           ; switch strategies available:
  2572                           ; Name         Instructions Cycles
  2573                           ; simple_byte           19    10 (average)
  2574                           ;	Chosen strategy is simple_byte
  2575  00066C  0A00               	xorlw	0	; case 0
  2576  00066E  B4D8               	btfsc	status,2,c
  2577  000670  D779               	goto	l2540
  2578  000672  0A01               	xorlw	1	; case 1
  2579  000674  B4D8               	btfsc	status,2,c
  2580  000676  D77C               	goto	l2544
  2581  000678  0A03               	xorlw	3	; case 2
  2582  00067A  B4D8               	btfsc	status,2,c
  2583  00067C  D78E               	goto	l2552
  2584  00067E  0A01               	xorlw	1	; case 3
  2585  000680  B4D8               	btfsc	status,2,c
  2586  000682  D796               	goto	l2558
  2587  000684  0A07               	xorlw	7	; case 4
  2588  000686  B4D8               	btfsc	status,2,c
  2589  000688  D79E               	goto	l2564
  2590  00068A  0A01               	xorlw	1	; case 5
  2591  00068C  B4D8               	btfsc	status,2,c
  2592  00068E  D7A6               	goto	l2570
  2593  000690                     l457:
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;SPI32_ControlService.c: 227: return ReturnEvent;
  2597  000690  C0ED  F0E3         	movff	RunSPI32ControlService@ReturnEvent,?_RunSPI32ControlService
  2598  000694  C0EE  F0E4         	movff	RunSPI32ControlService@ReturnEvent+1,?_RunSPI32ControlService+1
  2599  000698  C0EF  F0E5         	movff	RunSPI32ControlService@ReturnEvent+2,?_RunSPI32ControlService+2
  2600                           
  2601                           ; BSR set to: 0
  2602  00069C  0012               	return		;funcret
  2603  00069E                     __end_of_RunSPI32ControlService:
  2604                           	opt stack 0
  2605                           tosu	equ	0xFFF
  2606                           tosh	equ	0xFFE
  2607                           tosl	equ	0xFFD
  2608                           pclath	equ	0xFFA
  2609                           tblptru	equ	0xFF8
  2610                           tblptrh	equ	0xFF7
  2611                           tblptrl	equ	0xFF6
  2612                           tablat	equ	0xFF5
  2613                           prodh	equ	0xFF4
  2614                           prodl	equ	0xFF3
  2615                           postinc0	equ	0xFEE
  2616                           wreg	equ	0xFE8
  2617                           postdec1	equ	0xFE5
  2618                           fsr1l	equ	0xFE1
  2619                           indf2	equ	0xFDF
  2620                           postinc2	equ	0xFDE
  2621                           postdec2	equ	0xFDD
  2622                           fsr2h	equ	0xFDA
  2623                           fsr2l	equ	0xFD9
  2624                           status	equ	0xFD8
  2625                           
  2626 ;; *************** function _SPI32_SendByte *****************
  2627 ;; Defined at:
  2628 ;;		line 84 in file "SPI32_HW.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;  newByte         1    wreg     unsigned char 
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;  newByte         1    0[BANK0 ] unsigned char 
  2633 ;; Return value:  Size  Location     Type
  2634 ;;                  1    wreg      void 
  2635 ;; Registers used:
  2636 ;;		wreg
  2637 ;; Tracked objects:
  2638 ;;		On entry : 0/0
  2639 ;;		On exit  : 0/0
  2640 ;;		Unchanged: 0/0
  2641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2642 ;;      Params:         0       0       0       0
  2643 ;;      Locals:         0       1       0       0
  2644 ;;      Temps:          0       0       0       0
  2645 ;;      Totals:         0       1       0       0
  2646 ;;Total ram usage:        1 bytes
  2647 ;; Hardware stack levels used:    1
  2648 ;; Hardware stack levels required when called:    6
  2649 ;; This function calls:
  2650 ;;		Nothing
  2651 ;; This function is called by:
  2652 ;;		_RunSPI32ControlService
  2653 ;; This function uses a non-reentrant model
  2654 ;;
  2655                           
  2656                           	psect	text9
  2657  0017E8                     __ptext9:
  2658                           	opt stack 0
  2659  0017E8                     _SPI32_SendByte:
  2660                           	opt stack 22
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;incstack = 0
  2664                           ;SPI32_SendByte@newByte stored from wreg
  2665  0017E8  0100               	movlb	0	; () banked
  2666  0017EA  6FBB               	movwf	SPI32_SendByte@newByte& (0+255),b
  2667                           
  2668                           ;SPI32_HW.c: 97: SSPBUF = newByte;
  2669  0017EC  C0BB  FFC9         	movff	SPI32_SendByte@newByte,4041	;volatile
  2670  0017F0  0012               	return		;funcret
  2671  0017F2                     __end_of_SPI32_SendByte:
  2672                           	opt stack 0
  2673                           tosu	equ	0xFFF
  2674                           tosh	equ	0xFFE
  2675                           tosl	equ	0xFFD
  2676                           pclath	equ	0xFFA
  2677                           tblptru	equ	0xFF8
  2678                           tblptrh	equ	0xFF7
  2679                           tblptrl	equ	0xFF6
  2680                           tablat	equ	0xFF5
  2681                           prodh	equ	0xFF4
  2682                           prodl	equ	0xFF3
  2683                           postinc0	equ	0xFEE
  2684                           wreg	equ	0xFE8
  2685                           postdec1	equ	0xFE5
  2686                           fsr1l	equ	0xFE1
  2687                           indf2	equ	0xFDF
  2688                           postinc2	equ	0xFDE
  2689                           postdec2	equ	0xFDD
  2690                           fsr2h	equ	0xFDA
  2691                           fsr2l	equ	0xFD9
  2692                           status	equ	0xFD8
  2693                           
  2694 ;; *************** function _GetNextFrame *****************
  2695 ;; Defined at:
  2696 ;;		line 249 in file "SPI32_ControlService.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;		None
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;		None
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  4    0[BANK0 ] unsigned long 
  2703 ;; Registers used:
  2704 ;;		fsr2l, fsr2h
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2710 ;;      Params:         0       4       0       0
  2711 ;;      Locals:         0       0       0       0
  2712 ;;      Temps:          0       0       0       0
  2713 ;;      Totals:         0       4       0       0
  2714 ;;Total ram usage:        4 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; Hardware stack levels required when called:    6
  2717 ;; This function calls:
  2718 ;;		Nothing
  2719 ;; This function is called by:
  2720 ;;		_RunSPI32ControlService
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           	psect	text10
  2725  00175A                     __ptext10:
  2726                           	opt stack 0
  2727  00175A                     _GetNextFrame:
  2728                           	opt stack 22
  2729                           
  2730                           ;SPI32_ControlService.c: 250: return *(FramePointer);
  2731                           
  2732                           ;incstack = 0
  2733  00175A  C08F  FFD9         	movff	_FramePointer,fsr2l
  2734  00175E  C090  FFDA         	movff	_FramePointer+1,fsr2h
  2735  001762  CFDE F0BB          	movff	postinc2,?_GetNextFrame
  2736  001766  CFDE F0BC          	movff	postinc2,?_GetNextFrame+1
  2737  00176A  CFDE F0BD          	movff	postinc2,?_GetNextFrame+2
  2738  00176E  CFDE F0BE          	movff	postinc2,?_GetNextFrame+3
  2739  001772  0012               	return	
  2740  001774                     __end_of_GetNextFrame:
  2741                           	opt stack 0
  2742                           tosu	equ	0xFFF
  2743                           tosh	equ	0xFFE
  2744                           tosl	equ	0xFFD
  2745                           pclath	equ	0xFFA
  2746                           tblptru	equ	0xFF8
  2747                           tblptrh	equ	0xFF7
  2748                           tblptrl	equ	0xFF6
  2749                           tablat	equ	0xFF5
  2750                           prodh	equ	0xFF4
  2751                           prodl	equ	0xFF3
  2752                           postinc0	equ	0xFEE
  2753                           wreg	equ	0xFE8
  2754                           postdec1	equ	0xFE5
  2755                           fsr1l	equ	0xFE1
  2756                           indf2	equ	0xFDF
  2757                           postinc2	equ	0xFDE
  2758                           postdec2	equ	0xFDD
  2759                           fsr2h	equ	0xFDA
  2760                           fsr2l	equ	0xFD9
  2761                           status	equ	0xFD8
  2762                           
  2763 ;; *************** function _StopPattern *****************
  2764 ;; Defined at:
  2765 ;;		line 280 in file "Pattern_ControlService.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;		None
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;		None
  2770 ;; Return value:  Size  Location     Type
  2771 ;;                  1    wreg      void 
  2772 ;; Registers used:
  2773 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2774 ;; Tracked objects:
  2775 ;;		On entry : 0/0
  2776 ;;		On exit  : 0/0
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2779 ;;      Params:         0       0       0       0
  2780 ;;      Locals:         0       0       0       0
  2781 ;;      Temps:          0       0       0       0
  2782 ;;      Totals:         0       0       0       0
  2783 ;;Total ram usage:        0 bytes
  2784 ;; Hardware stack levels used:    1
  2785 ;; Hardware stack levels required when called:   12
  2786 ;; This function calls:
  2787 ;;		_DotStar_Off
  2788 ;;		_ES_Timer_StopTimer
  2789 ;;		_ResetPattern
  2790 ;; This function is called by:
  2791 ;;		_RunPatternControlService
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           	psect	text11
  2796  0016EA                     __ptext11:
  2797                           	opt stack 0
  2798  0016EA                     _StopPattern:
  2799                           	opt stack 16
  2800                           
  2801                           ;Pattern_ControlService.c: 281: PatternConfigs[0] = 0;
  2802                           
  2803                           ;incstack = 0
  2804  0016EA  0E00               	movlw	0
  2805  0016EC  0100               	movlb	0	; () banked
  2806  0016EE  6FF6               	movwf	_PatternConfigs& (0+255),b
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;Pattern_ControlService.c: 283: ES_Timer_StopTimer(0);
  2810  0016F0  0E00               	movlw	0
  2811  0016F2  ECE7  F009         	call	_ES_Timer_StopTimer
  2812                           
  2813                           ;Pattern_ControlService.c: 285: DotStar_Off();
  2814  0016F6  EC83  F00B         	call	_DotStar_Off	;wreg free
  2815                           
  2816                           ;Pattern_ControlService.c: 287: ResetPattern();
  2817  0016FA  ECF9  F00B         	call	_ResetPattern	;wreg free
  2818                           
  2819                           ;Pattern_ControlService.c: 289: PatternConfigs[0] = 0;
  2820  0016FE  0E00               	movlw	0
  2821  001700  0100               	movlb	0	; () banked
  2822  001702  6FF6               	movwf	_PatternConfigs& (0+255),b
  2823                           
  2824                           ; BSR set to: 0
  2825  001704  0012               	return		;funcret
  2826  001706                     __end_of_StopPattern:
  2827                           	opt stack 0
  2828                           tosu	equ	0xFFF
  2829                           tosh	equ	0xFFE
  2830                           tosl	equ	0xFFD
  2831                           pclath	equ	0xFFA
  2832                           tblptru	equ	0xFF8
  2833                           tblptrh	equ	0xFF7
  2834                           tblptrl	equ	0xFF6
  2835                           tablat	equ	0xFF5
  2836                           prodh	equ	0xFF4
  2837                           prodl	equ	0xFF3
  2838                           postinc0	equ	0xFEE
  2839                           wreg	equ	0xFE8
  2840                           postdec1	equ	0xFE5
  2841                           fsr1l	equ	0xFE1
  2842                           indf2	equ	0xFDF
  2843                           postinc2	equ	0xFDE
  2844                           postdec2	equ	0xFDD
  2845                           fsr2h	equ	0xFDA
  2846                           fsr2l	equ	0xFD9
  2847                           status	equ	0xFD8
  2848                           
  2849 ;; *************** function _ResetPattern *****************
  2850 ;; Defined at:
  2851 ;;		line 121 in file "Pattern_RGBPatterns.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;		None
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;		None
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  1    wreg      void 
  2858 ;; Registers used:
  2859 ;;		wreg, status,2
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2865 ;;      Params:         0       0       0       0
  2866 ;;      Locals:         0       0       0       0
  2867 ;;      Temps:          0       0       0       0
  2868 ;;      Totals:         0       0       0       0
  2869 ;;Total ram usage:        0 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; Hardware stack levels required when called:    6
  2872 ;; This function calls:
  2873 ;;		Nothing
  2874 ;; This function is called by:
  2875 ;;		_StopPattern
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           	psect	text12
  2880  0017F2                     __ptext12:
  2881                           	opt stack 0
  2882  0017F2                     _ResetPattern:
  2883                           	opt stack 21
  2884                           
  2885                           ;Pattern_RGBPatterns.c: 123: PatternStepCounter=0;
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;incstack = 0
  2889  0017F2  0E00               	movlw	0
  2890  0017F4  0100               	movlb	0	; () banked
  2891  0017F6  6F9E               	movwf	_PatternStepCounter& (0+255),b
  2892                           
  2893                           ; BSR set to: 0
  2894  0017F8  0012               	return		;funcret
  2895  0017FA                     __end_of_ResetPattern:
  2896                           	opt stack 0
  2897                           tosu	equ	0xFFF
  2898                           tosh	equ	0xFFE
  2899                           tosl	equ	0xFFD
  2900                           pclath	equ	0xFFA
  2901                           tblptru	equ	0xFF8
  2902                           tblptrh	equ	0xFF7
  2903                           tblptrl	equ	0xFF6
  2904                           tablat	equ	0xFF5
  2905                           prodh	equ	0xFF4
  2906                           prodl	equ	0xFF3
  2907                           postinc0	equ	0xFEE
  2908                           wreg	equ	0xFE8
  2909                           postdec1	equ	0xFE5
  2910                           fsr1l	equ	0xFE1
  2911                           indf2	equ	0xFDF
  2912                           postinc2	equ	0xFDE
  2913                           postdec2	equ	0xFDD
  2914                           fsr2h	equ	0xFDA
  2915                           fsr2l	equ	0xFD9
  2916                           status	equ	0xFD8
  2917                           
  2918 ;; *************** function _DotStar_Off *****************
  2919 ;; Defined at:
  2920 ;;		line 73 in file "Pattern_DotStarLED.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;		None
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;		None
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  1    wreg      void 
  2927 ;; Registers used:
  2928 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2934 ;;      Params:         0       0       0       0
  2935 ;;      Locals:         0       0       0       0
  2936 ;;      Temps:          0       0       0       0
  2937 ;;      Totals:         0       0       0       0
  2938 ;;Total ram usage:        0 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; Hardware stack levels required when called:   11
  2941 ;; This function calls:
  2942 ;;		_SPI32_TransmitFrames
  2943 ;; This function is called by:
  2944 ;;		_StopPattern
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948                           	psect	text13
  2949  001706                     __ptext13:
  2950                           	opt stack 0
  2951  001706                     _DotStar_Off:
  2952                           	opt stack 16
  2953                           
  2954                           ;Pattern_DotStarLED.c: 75: SPI32_TransmitFrames(OffFrames,Length+2);
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;incstack = 0
  2958  001706  0E00               	movlw	low _OffFrames
  2959  001708  0100               	movlb	0	; () banked
  2960  00170A  6FDB               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  2961  00170C  0E02               	movlw	high _OffFrames
  2962  00170E  0100               	movlb	0	; () banked
  2963  001710  6FDC               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  2964  001712  0100               	movlb	0	; () banked
  2965  001714  519B               	movf	_Length& (0+255),w,b
  2966  001716  0F02               	addlw	2
  2967  001718  0100               	movlb	0	; () banked
  2968  00171A  6FDD               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  2969  00171C  EC25  F00B         	call	_SPI32_TransmitFrames	;wreg free
  2970  001720  0012               	return		;funcret
  2971  001722                     __end_of_DotStar_Off:
  2972                           	opt stack 0
  2973                           tosu	equ	0xFFF
  2974                           tosh	equ	0xFFE
  2975                           tosl	equ	0xFFD
  2976                           pclath	equ	0xFFA
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           prodh	equ	0xFF4
  2982                           prodl	equ	0xFF3
  2983                           postinc0	equ	0xFEE
  2984                           wreg	equ	0xFE8
  2985                           postdec1	equ	0xFE5
  2986                           fsr1l	equ	0xFE1
  2987                           indf2	equ	0xFDF
  2988                           postinc2	equ	0xFDE
  2989                           postdec2	equ	0xFDD
  2990                           fsr2h	equ	0xFDA
  2991                           fsr2l	equ	0xFD9
  2992                           status	equ	0xFD8
  2993                           
  2994 ;; *************** function _ShowPattern *****************
  2995 ;; Defined at:
  2996 ;;		line 270 in file "Pattern_ControlService.c"
  2997 ;; Parameters:    Size  Location     Type
  2998 ;;		None
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;		None
  3001 ;; Return value:  Size  Location     Type
  3002 ;;                  1    wreg      void 
  3003 ;; Registers used:
  3004 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3005 ;; Tracked objects:
  3006 ;;		On entry : 0/0
  3007 ;;		On exit  : 0/0
  3008 ;;		Unchanged: 0/0
  3009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3010 ;;      Params:         0       0       0       0
  3011 ;;      Locals:         0       0       0       0
  3012 ;;      Temps:          0       0       0       0
  3013 ;;      Totals:         0       0       0       0
  3014 ;;Total ram usage:        0 bytes
  3015 ;; Hardware stack levels used:    1
  3016 ;; Hardware stack levels required when called:   12
  3017 ;; This function calls:
  3018 ;;		_DotStar_Show
  3019 ;;		_ES_Timer_InitTimer
  3020 ;;		_UpdatePattern
  3021 ;; This function is called by:
  3022 ;;		_RunPatternControlService
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           	psect	text14
  3027  00167C                     __ptext14:
  3028                           	opt stack 0
  3029  00167C                     _ShowPattern:
  3030                           	opt stack 16
  3031                           
  3032                           ;Pattern_ControlService.c: 272: ES_Timer_InitTimer(0,PatternConfigs[4]);
  3033                           
  3034                           ;incstack = 0
  3035  00167C  C0FA  F0BB         	movff	_PatternConfigs+4,ES_Timer_InitTimer@NewTime
  3036  001680  0100               	movlb	0	; () banked
  3037  001682  6BBC               	clrf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  3038  001684  0E00               	movlw	0
  3039  001686  ECD6  F008         	call	_ES_Timer_InitTimer
  3040                           
  3041                           ;Pattern_ControlService.c: 274: DotStar_Show(UpdatePattern());
  3042  00168A  ECDF  F001         	call	_UpdatePattern	;wreg free
  3043  00168E  C0C4  F0E1         	movff	?_UpdatePattern,DotStar_Show@pixelPointer
  3044  001692  C0C5  F0E2         	movff	?_UpdatePattern+1,DotStar_Show@pixelPointer+1
  3045  001696  EC7A  F00A         	call	_DotStar_Show	;wreg free
  3046                           
  3047                           ;Pattern_ControlService.c: 276: PatternConfigs[0] = 1;
  3048  00169A  0E01               	movlw	1
  3049  00169C  0100               	movlb	0	; () banked
  3050  00169E  6FF6               	movwf	_PatternConfigs& (0+255),b
  3051                           
  3052                           ; BSR set to: 0
  3053  0016A0  0012               	return		;funcret
  3054  0016A2                     __end_of_ShowPattern:
  3055                           	opt stack 0
  3056                           tosu	equ	0xFFF
  3057                           tosh	equ	0xFFE
  3058                           tosl	equ	0xFFD
  3059                           pclath	equ	0xFFA
  3060                           tblptru	equ	0xFF8
  3061                           tblptrh	equ	0xFF7
  3062                           tblptrl	equ	0xFF6
  3063                           tablat	equ	0xFF5
  3064                           prodh	equ	0xFF4
  3065                           prodl	equ	0xFF3
  3066                           postinc0	equ	0xFEE
  3067                           wreg	equ	0xFE8
  3068                           postdec1	equ	0xFE5
  3069                           fsr1l	equ	0xFE1
  3070                           indf2	equ	0xFDF
  3071                           postinc2	equ	0xFDE
  3072                           postdec2	equ	0xFDD
  3073                           fsr2h	equ	0xFDA
  3074                           fsr2l	equ	0xFD9
  3075                           status	equ	0xFD8
  3076                           
  3077 ;; *************** function _UpdatePattern *****************
  3078 ;; Defined at:
  3079 ;;		line 76 in file "Pattern_RGBPatterns.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;		None
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;  i               1   21[BANK0 ] unsigned char 
  3084 ;;  patternID       1   20[BANK0 ] unsigned char 
  3085 ;;  brightness      1   15[BANK0 ] unsigned char 
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  2    9[BANK0 ] PTR unsigned long 
  3088 ;; Registers used:
  3089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3095 ;;      Params:         0       2       0       0
  3096 ;;      Locals:         0       7       0       0
  3097 ;;      Temps:          0       4       0       0
  3098 ;;      Totals:         0      13       0       0
  3099 ;;Total ram usage:       13 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    7
  3102 ;; This function calls:
  3103 ;;		___awmod
  3104 ;;		___llmod
  3105 ;; This function is called by:
  3106 ;;		_ShowPattern
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           	psect	text15
  3111  0003BE                     __ptext15:
  3112                           	opt stack 0
  3113  0003BE                     _UpdatePattern:
  3114                           	opt stack 20
  3115                           
  3116                           ;Pattern_RGBPatterns.c: 78: uint8_t patternID = PatternConfigs[1];
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;incstack = 0
  3120  0003BE  0100               	movlb	0	; () banked
  3121  0003C0  EE20 F001          	lfsr	2,1
  3122  0003C4  518D               	movf	Pattern_RGBPatterns@PatternConfigs& (0+255),w,b
  3123  0003C6  26D9               	addwf	fsr2l,f,c
  3124  0003C8  518E               	movf	(Pattern_RGBPatterns@PatternConfigs+1)& (0+255),w,b
  3125  0003CA  22DA               	addwfc	fsr2h,f,c
  3126  0003CC  50DF               	movf	indf2,w,c
  3127  0003CE  0100               	movlb	0	; () banked
  3128  0003D0  6FCF               	movwf	UpdatePattern@patternID& (0+255),b
  3129                           
  3130                           ;Pattern_RGBPatterns.c: 79: uint8_t brightness = PatternConfigs[2];
  3131  0003D2  0100               	movlb	0	; () banked
  3132  0003D4  EE20 F002          	lfsr	2,2
  3133  0003D8  518D               	movf	Pattern_RGBPatterns@PatternConfigs& (0+255),w,b
  3134  0003DA  26D9               	addwf	fsr2l,f,c
  3135  0003DC  518E               	movf	(Pattern_RGBPatterns@PatternConfigs+1)& (0+255),w,b
  3136  0003DE  22DA               	addwfc	fsr2h,f,c
  3137  0003E0  50DF               	movf	indf2,w,c
  3138  0003E2  0100               	movlb	0	; () banked
  3139  0003E4  6FCA               	movwf	UpdatePattern@brightness& (0+255),b
  3140                           
  3141                           ;Pattern_RGBPatterns.c: 82: switch(patternID){
  3142  0003E6  D09F               	goto	l2236
  3143  0003E8                     l2214:
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;Pattern_RGBPatterns.c: 107: for(uint8_t i=0;i<Length;i++){
  3147  0003E8  0E00               	movlw	0
  3148  0003EA  0100               	movlb	0	; () banked
  3149  0003EC  6FD0               	movwf	UpdatePattern@i& (0+255),b
  3150  0003EE  D055               	goto	l2226
  3151  0003F0                     l2216:
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;Pattern_RGBPatterns.c: 108: PixelPattern[i] = (0xFF000000 | (uint32_t)(i == PatternStep
      +                          Counter ? GenColors[TestColor] : 0x0));
  3155  0003F0  0100               	movlb	0	; () banked
  3156  0003F2  519E               	movf	_PatternStepCounter& (0+255),w,b
  3157  0003F4  0100               	movlb	0	; () banked
  3158  0003F6  19D0               	xorwf	UpdatePattern@i& (0+255),w,b
  3159  0003F8  B4D8               	btfsc	status,2,c
  3160  0003FA  D00A               	goto	l2220
  3161                           
  3162                           ; BSR set to: 0
  3163  0003FC  0E00               	movlw	0
  3164  0003FE  0100               	movlb	0	; () banked
  3165  000400  6FCB               	movwf	_UpdatePattern$635& (0+255),b
  3166  000402  0E00               	movlw	0
  3167  000404  6FCC               	movwf	(_UpdatePattern$635+1)& (0+255),b
  3168  000406  0E00               	movlw	0
  3169  000408  6FCD               	movwf	(_UpdatePattern$635+2)& (0+255),b
  3170  00040A  0E00               	movlw	0
  3171  00040C  6FCE               	movwf	(_UpdatePattern$635+3)& (0+255),b
  3172  00040E  D01E               	goto	l2222
  3173  000410                     l2220:
  3174                           
  3175                           ; BSR set to: 0
  3176  000410  0E80               	movlw	low _GenColors
  3177  000412  0100               	movlb	0	; () banked
  3178  000414  6FC6               	movwf	??_UpdatePattern& (0+255),b
  3179  000416  0E01               	movlw	high _GenColors
  3180  000418  0100               	movlb	0	; () banked
  3181  00041A  6FC7               	movwf	(??_UpdatePattern+1)& (0+255),b
  3182  00041C  90D8               	bcf	status,0,c
  3183  00041E  0100               	movlb	0	; () banked
  3184  000420  3584               	rlcf	_TestColor& (0+255),w,b
  3185  000422  6ED9               	movwf	fsr2l,c
  3186  000424  0100               	movlb	0	; () banked
  3187  000426  3585               	rlcf	(_TestColor+1)& (0+255),w,b
  3188  000428  6EDA               	movwf	fsr2h,c
  3189  00042A  90D8               	bcf	status,0,c
  3190  00042C  36D9               	rlcf	fsr2l,f,c
  3191  00042E  36DA               	rlcf	fsr2h,f,c
  3192  000430  0100               	movlb	0	; () banked
  3193  000432  51C6               	movf	??_UpdatePattern& (0+255),w,b
  3194  000434  26D9               	addwf	fsr2l,f,c
  3195  000436  0100               	movlb	0	; () banked
  3196  000438  51C7               	movf	(??_UpdatePattern+1)& (0+255),w,b
  3197  00043A  22DA               	addwfc	fsr2h,f,c
  3198  00043C  CFDE F0CB          	movff	postinc2,_UpdatePattern$635
  3199  000440  CFDE F0CC          	movff	postinc2,_UpdatePattern$635+1
  3200  000444  CFDE F0CD          	movff	postinc2,_UpdatePattern$635+2
  3201  000448  CFDE F0CE          	movff	postinc2,_UpdatePattern$635+3
  3202  00044C                     l2222:
  3203                           
  3204                           ; BSR set to: 0
  3205  00044C  0E00               	movlw	0
  3206  00044E  0100               	movlb	0	; () banked
  3207  000450  11CB               	iorwf	_UpdatePattern$635& (0+255),w,b
  3208  000452  0100               	movlb	0	; () banked
  3209  000454  6FC6               	movwf	??_UpdatePattern& (0+255),b
  3210  000456  0E00               	movlw	0
  3211  000458  0100               	movlb	0	; () banked
  3212  00045A  11CC               	iorwf	(_UpdatePattern$635+1)& (0+255),w,b
  3213  00045C  0100               	movlb	0	; () banked
  3214  00045E  6FC7               	movwf	(??_UpdatePattern+1)& (0+255),b
  3215  000460  0E00               	movlw	0
  3216  000462  0100               	movlb	0	; () banked
  3217  000464  11CD               	iorwf	(_UpdatePattern$635+2)& (0+255),w,b
  3218  000466  0100               	movlb	0	; () banked
  3219  000468  6FC8               	movwf	(??_UpdatePattern+2)& (0+255),b
  3220  00046A  0EFF               	movlw	255
  3221  00046C  0100               	movlb	0	; () banked
  3222  00046E  11CE               	iorwf	(_UpdatePattern$635+3)& (0+255),w,b
  3223  000470  0100               	movlb	0	; () banked
  3224  000472  6FC9               	movwf	(??_UpdatePattern+3)& (0+255),b
  3225  000474  0100               	movlb	0	; () banked
  3226  000476  51D0               	movf	UpdatePattern@i& (0+255),w,b
  3227  000478  0D04               	mullw	4
  3228  00047A  0E80               	movlw	low _PixelPattern
  3229  00047C  24F3               	addwf	prodl,w,c
  3230  00047E  6ED9               	movwf	fsr2l,c
  3231  000480  0E02               	movlw	high _PixelPattern
  3232  000482  20F4               	addwfc	prodh,w,c
  3233  000484  6EDA               	movwf	fsr2h,c
  3234  000486  C0C6  FFDE         	movff	??_UpdatePattern,postinc2
  3235  00048A  C0C7  FFDE         	movff	??_UpdatePattern+1,postinc2
  3236  00048E  C0C8  FFDE         	movff	??_UpdatePattern+2,postinc2
  3237  000492  C0C9  FFDE         	movff	??_UpdatePattern+3,postinc2
  3238                           
  3239                           ; BSR set to: 0
  3240  000496  0100               	movlb	0	; () banked
  3241  000498  2BD0               	incf	UpdatePattern@i& (0+255),f,b
  3242  00049A                     l2226:
  3243                           
  3244                           ; BSR set to: 0
  3245  00049A  0100               	movlb	0	; () banked
  3246  00049C  5196               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3247  00049E  0100               	movlb	0	; () banked
  3248  0004A0  5DD0               	subwf	UpdatePattern@i& (0+255),w,b
  3249  0004A2  A0D8               	btfss	status,0,c
  3250  0004A4  D7A5               	goto	l2216
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;Pattern_RGBPatterns.c: 109: }
  3254                           ;Pattern_RGBPatterns.c: 110: PatternStepCounter = (PatternStepCounter+1)%Length;
  3255                           
  3256                           ; BSR set to: 0
  3257  0004A6  0E01               	movlw	1
  3258  0004A8  0100               	movlb	0	; () banked
  3259  0004AA  259E               	addwf	_PatternStepCounter& (0+255),w,b
  3260  0004AC  0100               	movlb	0	; () banked
  3261  0004AE  6FBB               	movwf	___awmod@dividend& (0+255),b
  3262  0004B0  0100               	movlb	0	; () banked
  3263  0004B2  6BBC               	clrf	(___awmod@dividend+1)& (0+255),b
  3264  0004B4  0E00               	movlw	0
  3265  0004B6  23BC               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3266  0004B8  C096  F0BD         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3267  0004BC  0100               	movlb	0	; () banked
  3268  0004BE  6BBE               	clrf	(___awmod@divisor+1)& (0+255),b
  3269  0004C0  ECA8  F007         	call	___awmod	;wreg free
  3270  0004C4  0100               	movlb	0	; () banked
  3271  0004C6  51BB               	movf	?___awmod& (0+255),w,b
  3272  0004C8  0100               	movlb	0	; () banked
  3273  0004CA  6F9E               	movwf	_PatternStepCounter& (0+255),b
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;Pattern_RGBPatterns.c: 111: if(PatternStepCounter == 0){
  3277  0004CC  0100               	movlb	0	; () banked
  3278  0004CE  519E               	movf	_PatternStepCounter& (0+255),w,b
  3279  0004D0  0100               	movlb	0	; () banked
  3280  0004D2  A4D8               	btfss	status,2,c
  3281  0004D4  D03C               	goto	l2238
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;Pattern_RGBPatterns.c: 112: TestColor = (TestColor+1)%13;
  3285  0004D6  0E01               	movlw	1
  3286  0004D8  0100               	movlb	0	; () banked
  3287  0004DA  2584               	addwf	_TestColor& (0+255),w,b
  3288  0004DC  0100               	movlb	0	; () banked
  3289  0004DE  6FBB               	movwf	___llmod@dividend& (0+255),b
  3290  0004E0  0E00               	movlw	0
  3291  0004E2  0100               	movlb	0	; () banked
  3292  0004E4  2185               	addwfc	(_TestColor+1)& (0+255),w,b
  3293  0004E6  0100               	movlb	0	; () banked
  3294  0004E8  6FBC               	movwf	(___llmod@dividend+1)& (0+255),b
  3295  0004EA  0E00               	movlw	0
  3296  0004EC  0100               	movlb	0	; () banked
  3297  0004EE  2186               	addwfc	(_TestColor+2)& (0+255),w,b
  3298  0004F0  0100               	movlb	0	; () banked
  3299  0004F2  6FBD               	movwf	(___llmod@dividend+2)& (0+255),b
  3300  0004F4  0E00               	movlw	0
  3301  0004F6  0100               	movlb	0	; () banked
  3302  0004F8  2187               	addwfc	(_TestColor+3)& (0+255),w,b
  3303  0004FA  0100               	movlb	0	; () banked
  3304  0004FC  6FBE               	movwf	(___llmod@dividend+3)& (0+255),b
  3305  0004FE  0E0D               	movlw	13
  3306  000500  0100               	movlb	0	; () banked
  3307  000502  6FBF               	movwf	___llmod@divisor& (0+255),b
  3308  000504  0E00               	movlw	0
  3309  000506  6FC0               	movwf	(___llmod@divisor+1)& (0+255),b
  3310  000508  0E00               	movlw	0
  3311  00050A  6FC1               	movwf	(___llmod@divisor+2)& (0+255),b
  3312  00050C  0E00               	movlw	0
  3313  00050E  6FC2               	movwf	(___llmod@divisor+3)& (0+255),b
  3314  000510  ECF9  F007         	call	___llmod	;wreg free
  3315  000514  C0BB  F084         	movff	?___llmod,_TestColor
  3316  000518  C0BC  F085         	movff	?___llmod+1,_TestColor+1
  3317  00051C  C0BD  F086         	movff	?___llmod+2,_TestColor+2
  3318  000520  C0BE  F087         	movff	?___llmod+3,_TestColor+3
  3319                           
  3320                           ;Pattern_RGBPatterns.c: 116: }
  3321                           
  3322                           ;Pattern_RGBPatterns.c: 113: }
  3323                           ;Pattern_RGBPatterns.c: 114: break;
  3324  000524  D014               	goto	l2238
  3325  000526                     l2236:
  3326  000526  0100               	movlb	0	; () banked
  3327  000528  51CF               	movf	UpdatePattern@patternID& (0+255),w,b
  3328                           
  3329                           ; Switch size 1, requested type "space"
  3330                           ; Number of cases is 6, Range of values is 0 to 255
  3331                           ; switch strategies available:
  3332                           ; Name         Instructions Cycles
  3333                           ; simple_byte           19    10 (average)
  3334                           ;	Chosen strategy is simple_byte
  3335  00052A  0A00               	xorlw	0	; case 0
  3336  00052C  B4D8               	btfsc	status,2,c
  3337  00052E  D00F               	goto	l2238
  3338  000530  0A01               	xorlw	1	; case 1
  3339  000532  B4D8               	btfsc	status,2,c
  3340  000534  D00C               	goto	l2238
  3341  000536  0A03               	xorlw	3	; case 2
  3342  000538  B4D8               	btfsc	status,2,c
  3343  00053A  D009               	goto	l2238
  3344  00053C  0A01               	xorlw	1	; case 3
  3345  00053E  B4D8               	btfsc	status,2,c
  3346  000540  D006               	goto	l2238
  3347  000542  0A07               	xorlw	7	; case 4
  3348  000544  B4D8               	btfsc	status,2,c
  3349  000546  D003               	goto	l2238
  3350  000548  0AFB               	xorlw	251	; case 255
  3351  00054A  B4D8               	btfsc	status,2,c
  3352  00054C  D74D               	goto	l2214
  3353  00054E                     l2238:
  3354                           
  3355                           ;Pattern_RGBPatterns.c: 118: return PixelPattern;
  3356  00054E  0E80               	movlw	low _PixelPattern
  3357  000550  0100               	movlb	0	; () banked
  3358  000552  6FC4               	movwf	?_UpdatePattern& (0+255),b
  3359  000554  0E02               	movlw	high _PixelPattern
  3360  000556  0100               	movlb	0	; () banked
  3361  000558  6FC5               	movwf	(?_UpdatePattern+1)& (0+255),b
  3362  00055A  0012               	return	
  3363  00055C                     __end_of_UpdatePattern:
  3364                           	opt stack 0
  3365                           tosu	equ	0xFFF
  3366                           tosh	equ	0xFFE
  3367                           tosl	equ	0xFFD
  3368                           pclath	equ	0xFFA
  3369                           tblptru	equ	0xFF8
  3370                           tblptrh	equ	0xFF7
  3371                           tblptrl	equ	0xFF6
  3372                           tablat	equ	0xFF5
  3373                           prodh	equ	0xFF4
  3374                           prodl	equ	0xFF3
  3375                           postinc0	equ	0xFEE
  3376                           wreg	equ	0xFE8
  3377                           postdec1	equ	0xFE5
  3378                           fsr1l	equ	0xFE1
  3379                           indf2	equ	0xFDF
  3380                           postinc2	equ	0xFDE
  3381                           postdec2	equ	0xFDD
  3382                           fsr2h	equ	0xFDA
  3383                           fsr2l	equ	0xFD9
  3384                           status	equ	0xFD8
  3385                           
  3386 ;; *************** function ___llmod *****************
  3387 ;; Defined at:
  3388 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;  dividend        4    0[BANK0 ] unsigned long 
  3391 ;;  divisor         4    4[BANK0 ] unsigned long 
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  counter         1    8[BANK0 ] unsigned char 
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  4    0[BANK0 ] unsigned long 
  3396 ;; Registers used:
  3397 ;;		wreg, status,2, status,0
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3403 ;;      Params:         0       8       0       0
  3404 ;;      Locals:         0       1       0       0
  3405 ;;      Temps:          0       0       0       0
  3406 ;;      Totals:         0       9       0       0
  3407 ;;Total ram usage:        9 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    6
  3410 ;; This function calls:
  3411 ;;		Nothing
  3412 ;; This function is called by:
  3413 ;;		_UpdatePattern
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           	psect	text16
  3418  000FF2                     __ptext16:
  3419                           	opt stack 0
  3420  000FF2                     ___llmod:
  3421                           	opt stack 20
  3422                           
  3423                           ; BSR set to: 0
  3424                           ;incstack = 0
  3425  000FF2  0100               	movlb	0	; () banked
  3426  000FF4  51BF               	movf	___llmod@divisor& (0+255),w,b
  3427  000FF6  0100               	movlb	0	; () banked
  3428  000FF8  11C0               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  3429  000FFA  0100               	movlb	0	; () banked
  3430  000FFC  11C1               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  3431  000FFE  0100               	movlb	0	; () banked
  3432  001000  11C2               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  3433  001002  B4D8               	btfsc	status,2,c
  3434  001004  D03A               	goto	l907
  3435                           
  3436                           ; BSR set to: 0
  3437  001006  0E01               	movlw	1
  3438  001008  0100               	movlb	0	; () banked
  3439  00100A  6FC3               	movwf	___llmod@counter& (0+255),b
  3440  00100C  D008               	goto	l2116
  3441  00100E                     l2114:
  3442                           
  3443                           ; BSR set to: 0
  3444  00100E  0100               	movlb	0	; () banked
  3445  001010  90D8               	bcf	status,0,c
  3446  001012  37BF               	rlcf	___llmod@divisor& (0+255),f,b
  3447  001014  37C0               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  3448  001016  37C1               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  3449  001018  37C2               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  3450  00101A  0100               	movlb	0	; () banked
  3451  00101C  2BC3               	incf	___llmod@counter& (0+255),f,b
  3452  00101E                     l2116:
  3453                           
  3454                           ; BSR set to: 0
  3455  00101E  0100               	movlb	0	; () banked
  3456  001020  AFC2               	btfss	(___llmod@divisor+3)& (0+255),7,b
  3457  001022  D7F5               	goto	l2114
  3458  001024                     l2118:
  3459                           
  3460                           ; BSR set to: 0
  3461  001024  0100               	movlb	0	; () banked
  3462  001026  51BF               	movf	___llmod@divisor& (0+255),w,b
  3463  001028  0100               	movlb	0	; () banked
  3464  00102A  5DBB               	subwf	___llmod@dividend& (0+255),w,b
  3465  00102C  0100               	movlb	0	; () banked
  3466  00102E  51C0               	movf	(___llmod@divisor+1)& (0+255),w,b
  3467  001030  0100               	movlb	0	; () banked
  3468  001032  59BC               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  3469  001034  0100               	movlb	0	; () banked
  3470  001036  51C1               	movf	(___llmod@divisor+2)& (0+255),w,b
  3471  001038  0100               	movlb	0	; () banked
  3472  00103A  59BD               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  3473  00103C  0100               	movlb	0	; () banked
  3474  00103E  51C2               	movf	(___llmod@divisor+3)& (0+255),w,b
  3475  001040  0100               	movlb	0	; () banked
  3476  001042  59BE               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  3477  001044  A0D8               	btfss	status,0,c
  3478  001046  D010               	goto	l2122
  3479                           
  3480                           ; BSR set to: 0
  3481  001048  0100               	movlb	0	; () banked
  3482  00104A  51BF               	movf	___llmod@divisor& (0+255),w,b
  3483  00104C  0100               	movlb	0	; () banked
  3484  00104E  5FBB               	subwf	___llmod@dividend& (0+255),f,b
  3485  001050  0100               	movlb	0	; () banked
  3486  001052  51C0               	movf	(___llmod@divisor+1)& (0+255),w,b
  3487  001054  0100               	movlb	0	; () banked
  3488  001056  5BBC               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  3489  001058  0100               	movlb	0	; () banked
  3490  00105A  51C1               	movf	(___llmod@divisor+2)& (0+255),w,b
  3491  00105C  0100               	movlb	0	; () banked
  3492  00105E  5BBD               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  3493  001060  0100               	movlb	0	; () banked
  3494  001062  51C2               	movf	(___llmod@divisor+3)& (0+255),w,b
  3495  001064  0100               	movlb	0	; () banked
  3496  001066  5BBE               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  3497  001068                     l2122:
  3498                           
  3499                           ; BSR set to: 0
  3500  001068  0100               	movlb	0	; () banked
  3501  00106A  90D8               	bcf	status,0,c
  3502  00106C  33C2               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  3503  00106E  33C1               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  3504  001070  33C0               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  3505  001072  33BF               	rrcf	___llmod@divisor& (0+255),f,b
  3506                           
  3507                           ; BSR set to: 0
  3508  001074  0100               	movlb	0	; () banked
  3509  001076  2FC3               	decfsz	___llmod@counter& (0+255),f,b
  3510  001078  D7D5               	goto	l2118
  3511  00107A                     l907:
  3512                           
  3513                           ; BSR set to: 0
  3514  00107A  C0BB  F0BB         	movff	___llmod@dividend,?___llmod
  3515  00107E  C0BC  F0BC         	movff	___llmod@dividend+1,?___llmod+1
  3516  001082  C0BD  F0BD         	movff	___llmod@dividend+2,?___llmod+2
  3517  001086  C0BE  F0BE         	movff	___llmod@dividend+3,?___llmod+3
  3518                           
  3519                           ; BSR set to: 0
  3520  00108A  0012               	return		;funcret
  3521  00108C                     __end_of___llmod:
  3522                           	opt stack 0
  3523                           tosu	equ	0xFFF
  3524                           tosh	equ	0xFFE
  3525                           tosl	equ	0xFFD
  3526                           pclath	equ	0xFFA
  3527                           tblptru	equ	0xFF8
  3528                           tblptrh	equ	0xFF7
  3529                           tblptrl	equ	0xFF6
  3530                           tablat	equ	0xFF5
  3531                           prodh	equ	0xFF4
  3532                           prodl	equ	0xFF3
  3533                           postinc0	equ	0xFEE
  3534                           wreg	equ	0xFE8
  3535                           postdec1	equ	0xFE5
  3536                           fsr1l	equ	0xFE1
  3537                           indf2	equ	0xFDF
  3538                           postinc2	equ	0xFDE
  3539                           postdec2	equ	0xFDD
  3540                           fsr2h	equ	0xFDA
  3541                           fsr2l	equ	0xFD9
  3542                           status	equ	0xFD8
  3543                           
  3544 ;; *************** function _ES_Timer_InitTimer *****************
  3545 ;; Defined at:
  3546 ;;		line 229 in file "ES_Timers.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;  Num             1    wreg     unsigned char 
  3549 ;;  NewTime         2    0[BANK0 ] unsigned int 
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;  Num             1    4[BANK0 ] unsigned char 
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      enum E15473
  3554 ;; Registers used:
  3555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3561 ;;      Params:         0       2       0       0
  3562 ;;      Locals:         0       1       0       0
  3563 ;;      Temps:          0       2       0       0
  3564 ;;      Totals:         0       5       0       0
  3565 ;;Total ram usage:        5 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    6
  3568 ;; This function calls:
  3569 ;;		Nothing
  3570 ;; This function is called by:
  3571 ;;		_ShowPattern
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text17
  3576  0011AC                     __ptext17:
  3577                           	opt stack 0
  3578  0011AC                     _ES_Timer_InitTimer:
  3579                           	opt stack 21
  3580                           
  3581                           ; BSR set to: 0
  3582                           ;incstack = 0
  3583                           ;ES_Timer_InitTimer@Num stored from wreg
  3584  0011AC  0100               	movlb	0	; () banked
  3585  0011AE  6FBF               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  3586                           
  3587                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  3588                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  3589                           ;ES_Timers.c: 236: (NewTime == 0) )
  3590  0011B0  0E10               	movlw	16
  3591  0011B2  0100               	movlb	0	; () banked
  3592  0011B4  61BF               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  3593  0011B6  0012               	return	
  3594                           
  3595                           ; BSR set to: 0
  3596  0011B8  0100               	movlb	0	; () banked
  3597  0011BA  51BF               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  3598  0011BC  0D02               	mullw	2
  3599  0011BE  0E21               	movlw	low _Timer2PostFunc
  3600  0011C0  24F3               	addwf	prodl,w,c
  3601  0011C2  6EF6               	movwf	tblptrl,c
  3602  0011C4  0E03               	movlw	high _Timer2PostFunc
  3603  0011C6  20F4               	addwfc	prodh,w,c
  3604  0011C8  6EF7               	movwf	tblptrh,c
  3605  0011CA                     	if	0	;There are less than 3 active tblptr bytes
  3606  0011CA                     	endif
  3607  0011CA  0009               	tblrd		*+
  3608  0011CC  50F5               	movf	tablat,w,c
  3609  0011CE  0009               	tblrd		*+
  3610  0011D0  10F5               	iorwf	tablat,w,c
  3611  0011D2  B4D8               	btfsc	status,2,c
  3612  0011D4  0012               	return	
  3613                           
  3614                           ; BSR set to: 0
  3615  0011D6  0100               	movlb	0	; () banked
  3616  0011D8  51BB               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  3617  0011DA  0100               	movlb	0	; () banked
  3618  0011DC  11BC               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  3619  0011DE  B4D8               	btfsc	status,2,c
  3620  0011E0  0012               	return	
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  3624                           
  3625                           ; BSR set to: 0
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  3629                           ;	Return value of _ES_Timer_InitTimer is never used
  3630  0011E2  0100               	movlb	0	; () banked
  3631  0011E4  51BF               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  3632  0011E6  0D02               	mullw	2
  3633  0011E8  0E60               	movlw	low _TMR_TimerArray
  3634  0011EA  24F3               	addwf	prodl,w,c
  3635  0011EC  6ED9               	movwf	fsr2l,c
  3636  0011EE  0E00               	movlw	high _TMR_TimerArray
  3637  0011F0  20F4               	addwfc	prodh,w,c
  3638  0011F2  6EDA               	movwf	fsr2h,c
  3639  0011F4  C0BB  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  3640  0011F8  C0BC  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  3644  0011FC  0100               	movlb	0	; () banked
  3645  0011FE  51BF               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  3646  001200  0D02               	mullw	2
  3647  001202  0E01               	movlw	low _BitNum2SetMask
  3648  001204  24F3               	addwf	prodl,w,c
  3649  001206  6EF6               	movwf	tblptrl,c
  3650  001208  0E03               	movlw	high _BitNum2SetMask
  3651  00120A  20F4               	addwfc	prodh,w,c
  3652  00120C  6EF7               	movwf	tblptrh,c
  3653  00120E                     	if	0	;There are less than 3 active tblptr bytes
  3654  00120E                     	endif
  3655  00120E  0009               	tblrd		*+
  3656  001210  CFF5 F0BD          	movff	tablat,??_ES_Timer_InitTimer
  3657  001214  0009               	tblrd		*+
  3658  001216  CFF5 F0BE          	movff	tablat,??_ES_Timer_InitTimer+1
  3659  00121A  0100               	movlb	0	; () banked
  3660  00121C  51BD               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  3661  00121E  0100               	movlb	0	; () banked
  3662  001220  1393               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  3663  001222  0100               	movlb	0	; () banked
  3664  001224  51BE               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  3665  001226  0100               	movlb	0	; () banked
  3666  001228  1394               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  3667  00122A  0012               	return	
  3668  00122C                     __end_of_ES_Timer_InitTimer:
  3669                           	opt stack 0
  3670                           tosu	equ	0xFFF
  3671                           tosh	equ	0xFFE
  3672                           tosl	equ	0xFFD
  3673                           pclath	equ	0xFFA
  3674                           tblptru	equ	0xFF8
  3675                           tblptrh	equ	0xFF7
  3676                           tblptrl	equ	0xFF6
  3677                           tablat	equ	0xFF5
  3678                           prodh	equ	0xFF4
  3679                           prodl	equ	0xFF3
  3680                           postinc0	equ	0xFEE
  3681                           wreg	equ	0xFE8
  3682                           postdec1	equ	0xFE5
  3683                           fsr1l	equ	0xFE1
  3684                           indf2	equ	0xFDF
  3685                           postinc2	equ	0xFDE
  3686                           postdec2	equ	0xFDD
  3687                           fsr2h	equ	0xFDA
  3688                           fsr2l	equ	0xFD9
  3689                           status	equ	0xFD8
  3690                           
  3691 ;; *************** function _DotStar_Show *****************
  3692 ;; Defined at:
  3693 ;;		line 66 in file "Pattern_DotStarLED.c"
  3694 ;; Parameters:    Size  Location     Type
  3695 ;;  pixelPointer    2   38[BANK0 ] PTR unsigned long 
  3696 ;;		 -> PixelPattern(120), 
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;		None
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      void 
  3701 ;; Registers used:
  3702 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3708 ;;      Params:         0       2       0       0
  3709 ;;      Locals:         0       0       0       0
  3710 ;;      Temps:          0       0       0       0
  3711 ;;      Totals:         0       2       0       0
  3712 ;;Total ram usage:        2 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:   11
  3715 ;; This function calls:
  3716 ;;		_SPI32_TransmitFrames
  3717 ;;		_memcpy
  3718 ;; This function is called by:
  3719 ;;		_ShowPattern
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723                           	psect	text18
  3724  0014F4                     __ptext18:
  3725                           	opt stack 0
  3726  0014F4                     _DotStar_Show:
  3727                           	opt stack 16
  3728                           
  3729                           ;Pattern_DotStarLED.c: 68: memcpy(PixelFrames+1, pixelPointer, sizeof(uint32_t)*Length);
  3730                           
  3731                           ; BSR set to: 0
  3732                           ;incstack = 0
  3733  0014F4  0E04               	movlw	low (_PixelFrames+4)
  3734  0014F6  0100               	movlb	0	; () banked
  3735  0014F8  6FBB               	movwf	memcpy@d1& (0+255),b
  3736  0014FA  0E01               	movlw	high (_PixelFrames+4)
  3737  0014FC  0100               	movlb	0	; () banked
  3738  0014FE  6FBC               	movwf	(memcpy@d1+1)& (0+255),b
  3739  001500  C0E1  F0BD         	movff	DotStar_Show@pixelPointer,memcpy@s1
  3740  001504  C0E2  F0BE         	movff	DotStar_Show@pixelPointer+1,memcpy@s1+1
  3741  001508  0100               	movlb	0	; () banked
  3742  00150A  519B               	movf	_Length& (0+255),w,b
  3743  00150C  0D04               	mullw	4
  3744  00150E  CFF3 F0BF          	movff	prodl,memcpy@n
  3745  001512  CFF4 F0C0          	movff	prodh,memcpy@n+1
  3746  001516  EC0E  F00A         	call	_memcpy	;wreg free
  3747                           
  3748                           ;Pattern_DotStarLED.c: 70: SPI32_TransmitFrames(PixelFrames,Length+2);
  3749  00151A  0E00               	movlw	low _PixelFrames
  3750  00151C  0100               	movlb	0	; () banked
  3751  00151E  6FDB               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  3752  001520  0E01               	movlw	high _PixelFrames
  3753  001522  0100               	movlb	0	; () banked
  3754  001524  6FDC               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  3755  001526  0100               	movlb	0	; () banked
  3756  001528  519B               	movf	_Length& (0+255),w,b
  3757  00152A  0F02               	addlw	2
  3758  00152C  0100               	movlb	0	; () banked
  3759  00152E  6FDD               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  3760  001530  EC25  F00B         	call	_SPI32_TransmitFrames	;wreg free
  3761  001534  0012               	return		;funcret
  3762  001536                     __end_of_DotStar_Show:
  3763                           	opt stack 0
  3764                           tosu	equ	0xFFF
  3765                           tosh	equ	0xFFE
  3766                           tosl	equ	0xFFD
  3767                           pclath	equ	0xFFA
  3768                           tblptru	equ	0xFF8
  3769                           tblptrh	equ	0xFF7
  3770                           tblptrl	equ	0xFF6
  3771                           tablat	equ	0xFF5
  3772                           prodh	equ	0xFF4
  3773                           prodl	equ	0xFF3
  3774                           postinc0	equ	0xFEE
  3775                           wreg	equ	0xFE8
  3776                           postdec1	equ	0xFE5
  3777                           fsr1l	equ	0xFE1
  3778                           indf2	equ	0xFDF
  3779                           postinc2	equ	0xFDE
  3780                           postdec2	equ	0xFDD
  3781                           fsr2h	equ	0xFDA
  3782                           fsr2l	equ	0xFD9
  3783                           status	equ	0xFD8
  3784                           
  3785 ;; *************** function _memcpy *****************
  3786 ;; Defined at:
  3787 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memcpy.c"
  3788 ;; Parameters:    Size  Location     Type
  3789 ;;  d1              2    0[BANK0 ] PTR void 
  3790 ;;		 -> PixelFrames(128), 
  3791 ;;  s1              2    2[BANK0 ] PTR const void 
  3792 ;;		 -> PixelPattern(120), 
  3793 ;;  n               2    4[BANK0 ] unsigned int 
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  3796 ;;		 -> PixelPattern(120), 
  3797 ;;  d               2    6[BANK0 ] PTR unsigned char 
  3798 ;;		 -> PixelFrames(128), 
  3799 ;; Return value:  Size  Location     Type
  3800 ;;                  2    0[BANK0 ] PTR void 
  3801 ;; Registers used:
  3802 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3808 ;;      Params:         0       6       0       0
  3809 ;;      Locals:         0       4       0       0
  3810 ;;      Temps:          0       0       0       0
  3811 ;;      Totals:         0      10       0       0
  3812 ;;Total ram usage:       10 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    6
  3815 ;; This function calls:
  3816 ;;		Nothing
  3817 ;; This function is called by:
  3818 ;;		_DotStar_Show
  3819 ;; This function uses a non-reentrant model
  3820 ;;
  3821                           
  3822                           	psect	text19
  3823  00141C                     __ptext19:
  3824                           	opt stack 0
  3825  00141C                     _memcpy:
  3826                           	opt stack 20
  3827                           
  3828                           ;incstack = 0
  3829  00141C  C0BD  F0C3         	movff	memcpy@s1,memcpy@s
  3830  001420  C0BE  F0C4         	movff	memcpy@s1+1,memcpy@s+1
  3831  001424  C0BB  F0C1         	movff	memcpy@d1,memcpy@d
  3832  001428  C0BC  F0C2         	movff	memcpy@d1+1,memcpy@d+1
  3833  00142C  D010               	goto	l2096
  3834  00142E                     l2090:
  3835  00142E  C0C3  FFD9         	movff	memcpy@s,fsr2l
  3836  001432  C0C4  FFDA         	movff	memcpy@s+1,fsr2h
  3837  001436  C0C1  FFE1         	movff	memcpy@d,fsr1l
  3838  00143A  C0C2  FFE2         	movff	memcpy@d+1,fsr1h
  3839  00143E  CFDF FFE7          	movff	indf2,indf1
  3840  001442  0100               	movlb	0	; () banked
  3841  001444  4BC3               	infsnz	memcpy@s& (0+255),f,b
  3842  001446  2BC4               	incf	(memcpy@s+1)& (0+255),f,b
  3843                           
  3844                           ; BSR set to: 0
  3845  001448  0100               	movlb	0	; () banked
  3846  00144A  4BC1               	infsnz	memcpy@d& (0+255),f,b
  3847  00144C  2BC2               	incf	(memcpy@d+1)& (0+255),f,b
  3848  00144E                     l2096:
  3849  00144E  0100               	movlb	0	; () banked
  3850  001450  07BF               	decf	memcpy@n& (0+255),f,b
  3851  001452  A0D8               	btfss	status,0,c
  3852  001454  07C0               	decf	(memcpy@n+1)& (0+255),f,b
  3853  001456  0100               	movlb	0	; () banked
  3854  001458  29BF               	incf	memcpy@n& (0+255),w,b
  3855  00145A  E1E9               	bnz	l2090
  3856  00145C  0100               	movlb	0	; () banked
  3857  00145E  29C0               	incf	(memcpy@n+1)& (0+255),w,b
  3858  001460  B4D8               	btfsc	status,2,c
  3859  001462  0012               	return	
  3860  001464  D7E4               	goto	l2090
  3861  001466                     __end_of_memcpy:
  3862                           	opt stack 0
  3863                           tosu	equ	0xFFF
  3864                           tosh	equ	0xFFE
  3865                           tosl	equ	0xFFD
  3866                           pclath	equ	0xFFA
  3867                           tblptru	equ	0xFF8
  3868                           tblptrh	equ	0xFF7
  3869                           tblptrl	equ	0xFF6
  3870                           tablat	equ	0xFF5
  3871                           prodh	equ	0xFF4
  3872                           prodl	equ	0xFF3
  3873                           postinc0	equ	0xFEE
  3874                           wreg	equ	0xFE8
  3875                           indf1	equ	0xFE7
  3876                           postdec1	equ	0xFE5
  3877                           fsr1h	equ	0xFE2
  3878                           fsr1l	equ	0xFE1
  3879                           indf2	equ	0xFDF
  3880                           postinc2	equ	0xFDE
  3881                           postdec2	equ	0xFDD
  3882                           fsr2h	equ	0xFDA
  3883                           fsr2l	equ	0xFD9
  3884                           status	equ	0xFD8
  3885                           
  3886 ;; *************** function _SPI32_TransmitFrames *****************
  3887 ;; Defined at:
  3888 ;;		line 230 in file "SPI32_ControlService.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;  framePointer    2   32[BANK0 ] PTR unsigned long 
  3891 ;;		 -> OffFrames(128), PixelFrames(128), 
  3892 ;;  numFrames       1   34[BANK0 ] unsigned char 
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;  transmitEven    3   35[BANK0 ] struct ES_Event_t
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3904 ;;      Params:         0       3       0       0
  3905 ;;      Locals:         0       3       0       0
  3906 ;;      Temps:          0       0       0       0
  3907 ;;      Totals:         0       6       0       0
  3908 ;;Total ram usage:        6 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:   10
  3911 ;; This function calls:
  3912 ;;		_PostSPI32ControlService
  3913 ;; This function is called by:
  3914 ;;		_DotStar_Show
  3915 ;;		_DotStar_Off
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           	psect	text20
  3920  00164A                     __ptext20:
  3921                           	opt stack 0
  3922  00164A                     _SPI32_TransmitFrames:
  3923                           	opt stack 16
  3924                           
  3925                           ;SPI32_ControlService.c: 232: if(CurrentState == SPI32_Waiting4Send){
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;incstack = 0
  3929  00164A  0100               	movlb	0	; () banked
  3930  00164C  0597               	decf	SPI32_ControlService@CurrentState& (0+255),w,b
  3931  00164E  A4D8               	btfss	status,2,c
  3932  001650  0012               	return	
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;SPI32_ControlService.c: 234: FrameIndex = 0;
  3936  001652  0E00               	movlw	0
  3937  001654  0100               	movlb	0	; () banked
  3938  001656  6F9A               	movwf	_FrameIndex& (0+255),b
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;SPI32_ControlService.c: 236: FramePointer = framePointer;
  3942  001658  C0DB  F08F         	movff	SPI32_TransmitFrames@framePointer,_FramePointer
  3943  00165C  C0DC  F090         	movff	SPI32_TransmitFrames@framePointer+1,_FramePointer+1
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;SPI32_ControlService.c: 238: NumFrames = numFrames;
  3947  001660  C0DD  F09D         	movff	SPI32_TransmitFrames@numFrames,_NumFrames
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;SPI32_ControlService.c: 239: ES_Event transmitEvent;
  3951                           ;SPI32_ControlService.c: 240: transmitEvent.EventType = SPI32_TRANSMIT;
  3952  001664  0E09               	movlw	9
  3953  001666  0100               	movlb	0	; () banked
  3954  001668  6FDE               	movwf	SPI32_TransmitFrames@transmitEvent& (0+255),b
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;SPI32_ControlService.c: 241: PostSPI32ControlService(transmitEvent);
  3958  00166A  C0DE  F0D8         	movff	SPI32_TransmitFrames@transmitEvent,PostSPI32ControlService@ThisEvent
  3959  00166E  C0DF  F0D9         	movff	SPI32_TransmitFrames@transmitEvent+1,PostSPI32ControlService@ThisEvent+1
  3960  001672  C0E0  F0DA         	movff	SPI32_TransmitFrames@transmitEvent+2,PostSPI32ControlService@ThisEvent+2
  3961  001676  EC91  F00B         	call	_PostSPI32ControlService	;wreg free
  3962  00167A  0012               	return	
  3963  00167C                     __end_of_SPI32_TransmitFrames:
  3964                           	opt stack 0
  3965                           tosu	equ	0xFFF
  3966                           tosh	equ	0xFFE
  3967                           tosl	equ	0xFFD
  3968                           pclath	equ	0xFFA
  3969                           tblptru	equ	0xFF8
  3970                           tblptrh	equ	0xFF7
  3971                           tblptrl	equ	0xFF6
  3972                           tablat	equ	0xFF5
  3973                           prodh	equ	0xFF4
  3974                           prodl	equ	0xFF3
  3975                           postinc0	equ	0xFEE
  3976                           wreg	equ	0xFE8
  3977                           indf1	equ	0xFE7
  3978                           postdec1	equ	0xFE5
  3979                           fsr1h	equ	0xFE2
  3980                           fsr1l	equ	0xFE1
  3981                           indf2	equ	0xFDF
  3982                           postinc2	equ	0xFDE
  3983                           postdec2	equ	0xFDD
  3984                           fsr2h	equ	0xFDA
  3985                           fsr2l	equ	0xFD9
  3986                           status	equ	0xFD8
  3987                           
  3988 ;; *************** function _PostPatternControlService *****************
  3989 ;; Defined at:
  3990 ;;		line 135 in file "Pattern_ControlService.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;		None
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      unsigned char 
  3997 ;; Registers used:
  3998 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4004 ;;      Params:         0       3       0       0
  4005 ;;      Locals:         0       0       0       0
  4006 ;;      Temps:          0       0       0       0
  4007 ;;      Totals:         0       3       0       0
  4008 ;;Total ram usage:        3 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; Hardware stack levels required when called:    9
  4011 ;; This function calls:
  4012 ;;		_ES_PostToService
  4013 ;; This function is called by:
  4014 ;;		_RunPatternControlService
  4015 ;;		_ES_Timer_Tick_Resp
  4016 ;;		_PostToList
  4017 ;; This function uses a non-reentrant model
  4018 ;;
  4019                           
  4020                           	psect	text21
  4021  00178A                     __ptext21:
  4022                           	opt stack 0
  4023  00178A                     _PostPatternControlService:
  4024                           	opt stack 18
  4025                           
  4026                           ;Pattern_ControlService.c: 137: return ES_PostToService( MyPriority, ThisEvent);
  4027                           
  4028                           ;incstack = 0
  4029  00178A  C0D8  F0D2         	movff	PostPatternControlService@ThisEvent,ES_PostToService@TheEvent
  4030  00178E  C0D9  F0D3         	movff	PostPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  4031  001792  C0DA  F0D4         	movff	PostPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  4032  001796  0100               	movlb	0	; () banked
  4033  001798  519C               	movf	_MyPriority& (0+255),w,b
  4034  00179A  EC16  F009         	call	_ES_PostToService
  4035  00179E  0012               	return	
  4036  0017A0                     __end_of_PostPatternControlService:
  4037                           	opt stack 0
  4038                           tosu	equ	0xFFF
  4039                           tosh	equ	0xFFE
  4040                           tosl	equ	0xFFD
  4041                           pclath	equ	0xFFA
  4042                           tblptru	equ	0xFF8
  4043                           tblptrh	equ	0xFF7
  4044                           tblptrl	equ	0xFF6
  4045                           tablat	equ	0xFF5
  4046                           prodh	equ	0xFF4
  4047                           prodl	equ	0xFF3
  4048                           postinc0	equ	0xFEE
  4049                           wreg	equ	0xFE8
  4050                           indf1	equ	0xFE7
  4051                           postdec1	equ	0xFE5
  4052                           fsr1h	equ	0xFE2
  4053                           fsr1l	equ	0xFE1
  4054                           indf2	equ	0xFDF
  4055                           postinc2	equ	0xFDE
  4056                           postdec2	equ	0xFDD
  4057                           fsr2h	equ	0xFDA
  4058                           fsr2l	equ	0xFD9
  4059                           status	equ	0xFD8
  4060                           
  4061 ;; *************** function _PostSPI32ControlService *****************
  4062 ;; Defined at:
  4063 ;;		line 117 in file "SPI32_ControlService.c"
  4064 ;; Parameters:    Size  Location     Type
  4065 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;		None
  4068 ;; Return value:  Size  Location     Type
  4069 ;;                  1    wreg      unsigned char 
  4070 ;; Registers used:
  4071 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4077 ;;      Params:         0       3       0       0
  4078 ;;      Locals:         0       0       0       0
  4079 ;;      Temps:          0       0       0       0
  4080 ;;      Totals:         0       3       0       0
  4081 ;;Total ram usage:        3 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; Hardware stack levels required when called:    9
  4084 ;; This function calls:
  4085 ;;		_ES_PostToService
  4086 ;; This function is called by:
  4087 ;;		_SPI32_TransmitFrames
  4088 ;;		_ES_Timer_Tick_Resp
  4089 ;;		_PostToList
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           	psect	text22
  4094  001722                     __ptext22:
  4095                           	opt stack 0
  4096  001722                     _PostSPI32ControlService:
  4097                           	opt stack 0
  4098                           
  4099                           ;Skip over the trampoline to the duplicate function for level 2
  4100  001722  B23E               	btfsc	btemp,1,c
  4101  001724  EFDB  F00B         	goto	i2_PostSPI32ControlService
  4102  001728                     _PostSPI32ControlService$intlevel0:
  4103                           	opt stack 18
  4104                           
  4105                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  4106                           
  4107                           ;incstack = 0
  4108  001728  C0D8  F0D2         	movff	PostSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  4109  00172C  C0D9  F0D3         	movff	PostSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  4110  001730  C0DA  F0D4         	movff	PostSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  4111  001734  0100               	movlb	0	; () banked
  4112  001736  5198               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  4113  001738  EC16  F009         	call	_ES_PostToService
  4114  00173C  0012               	return	
  4115  00173E                     __end_of_PostSPI32ControlService:
  4116                           	opt stack 0
  4117                           tosu	equ	0xFFF
  4118                           tosh	equ	0xFFE
  4119                           tosl	equ	0xFFD
  4120                           pclath	equ	0xFFA
  4121                           tblptru	equ	0xFF8
  4122                           tblptrh	equ	0xFF7
  4123                           tblptrl	equ	0xFF6
  4124                           tablat	equ	0xFF5
  4125                           prodh	equ	0xFF4
  4126                           prodl	equ	0xFF3
  4127                           postinc0	equ	0xFEE
  4128                           wreg	equ	0xFE8
  4129                           indf1	equ	0xFE7
  4130                           postdec1	equ	0xFE5
  4131                           fsr1h	equ	0xFE2
  4132                           fsr1l	equ	0xFE1
  4133                           indf2	equ	0xFDF
  4134                           postinc2	equ	0xFDE
  4135                           postdec2	equ	0xFDD
  4136                           fsr2h	equ	0xFDA
  4137                           fsr2l	equ	0xFD9
  4138                           status	equ	0xFD8
  4139                           
  4140 ;; *************** function _PausePattern *****************
  4141 ;; Defined at:
  4142 ;;		line 293 in file "Pattern_ControlService.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;		None
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;		None
  4147 ;; Return value:  Size  Location     Type
  4148 ;;                  1    wreg      void 
  4149 ;; Registers used:
  4150 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4151 ;; Tracked objects:
  4152 ;;		On entry : 0/0
  4153 ;;		On exit  : 0/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4156 ;;      Params:         0       0       0       0
  4157 ;;      Locals:         0       0       0       0
  4158 ;;      Temps:          0       0       0       0
  4159 ;;      Totals:         0       0       0       0
  4160 ;;Total ram usage:        0 bytes
  4161 ;; Hardware stack levels used:    1
  4162 ;; Hardware stack levels required when called:    7
  4163 ;; This function calls:
  4164 ;;		_ES_Timer_StopTimer
  4165 ;; This function is called by:
  4166 ;;		_RunPatternControlService
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           	psect	text23
  4171  0017FA                     __ptext23:
  4172                           	opt stack 0
  4173  0017FA                     _PausePattern:
  4174                           	opt stack 21
  4175                           
  4176                           ;Pattern_ControlService.c: 295: ES_Timer_StopTimer(0);
  4177                           
  4178                           ;incstack = 0
  4179  0017FA  0E00               	movlw	0
  4180  0017FC  ECE7  F009         	call	_ES_Timer_StopTimer
  4181  001800  0012               	return		;funcret
  4182  001802                     __end_of_PausePattern:
  4183                           	opt stack 0
  4184                           tosu	equ	0xFFF
  4185                           tosh	equ	0xFFE
  4186                           tosl	equ	0xFFD
  4187                           pclath	equ	0xFFA
  4188                           tblptru	equ	0xFF8
  4189                           tblptrh	equ	0xFF7
  4190                           tblptrl	equ	0xFF6
  4191                           tablat	equ	0xFF5
  4192                           prodh	equ	0xFF4
  4193                           prodl	equ	0xFF3
  4194                           postinc0	equ	0xFEE
  4195                           wreg	equ	0xFE8
  4196                           indf1	equ	0xFE7
  4197                           postdec1	equ	0xFE5
  4198                           fsr1h	equ	0xFE2
  4199                           fsr1l	equ	0xFE1
  4200                           indf2	equ	0xFDF
  4201                           postinc2	equ	0xFDE
  4202                           postdec2	equ	0xFDD
  4203                           fsr2h	equ	0xFDA
  4204                           fsr2l	equ	0xFD9
  4205                           status	equ	0xFD8
  4206                           
  4207 ;; *************** function _ES_Timer_StopTimer *****************
  4208 ;; Defined at:
  4209 ;;		line 205 in file "ES_Timers.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;  Num             1    wreg     unsigned char 
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;  Num             1    4[BANK0 ] unsigned char 
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  1    wreg      enum E15473
  4216 ;; Registers used:
  4217 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4223 ;;      Params:         0       0       0       0
  4224 ;;      Locals:         0       1       0       0
  4225 ;;      Temps:          0       4       0       0
  4226 ;;      Totals:         0       5       0       0
  4227 ;;Total ram usage:        5 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    6
  4230 ;; This function calls:
  4231 ;;		Nothing
  4232 ;; This function is called by:
  4233 ;;		_StopPattern
  4234 ;;		_PausePattern
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           	psect	text24
  4239  0013CE                     __ptext24:
  4240                           	opt stack 0
  4241  0013CE                     _ES_Timer_StopTimer:
  4242                           	opt stack 21
  4243                           
  4244                           ;incstack = 0
  4245                           ;ES_Timer_StopTimer@Num stored from wreg
  4246  0013CE  0100               	movlb	0	; () banked
  4247  0013D0  6FBF               	movwf	ES_Timer_StopTimer@Num& (0+255),b
  4248                           
  4249                           ;ES_Timers.c: 207: if( Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0])) )
  4250  0013D2  0E0F               	movlw	15
  4251  0013D4  0100               	movlb	0	; () banked
  4252  0013D6  65BF               	cpfsgt	ES_Timer_StopTimer@Num& (0+255),b
  4253  0013D8  D001               	goto	l2192
  4254  0013DA  0012               	return	
  4255  0013DC                     l2192:
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;ES_Timers.c: 209: TMR_ActiveFlags &= ~BitNum2SetMask[Num];
  4259  0013DC  0100               	movlb	0	; () banked
  4260  0013DE  51BF               	movf	ES_Timer_StopTimer@Num& (0+255),w,b
  4261  0013E0  0D02               	mullw	2
  4262  0013E2  0E01               	movlw	low _BitNum2SetMask
  4263  0013E4  24F3               	addwf	prodl,w,c
  4264  0013E6  6EF6               	movwf	tblptrl,c
  4265  0013E8  0E03               	movlw	high _BitNum2SetMask
  4266  0013EA  20F4               	addwfc	prodh,w,c
  4267  0013EC  6EF7               	movwf	tblptrh,c
  4268  0013EE                     	if	0	;There are less than 3 active tblptr bytes
  4269  0013EE                     	endif
  4270  0013EE  0009               	tblrd		*+
  4271  0013F0  CFF5 F0BB          	movff	tablat,??_ES_Timer_StopTimer
  4272  0013F4  0009               	tblrd		*+
  4273  0013F6  CFF5 F0BC          	movff	tablat,??_ES_Timer_StopTimer+1
  4274  0013FA  0100               	movlb	0	; () banked
  4275  0013FC  1DBB               	comf	??_ES_Timer_StopTimer& (0+255),w,b
  4276  0013FE  0100               	movlb	0	; () banked
  4277  001400  6FBD               	movwf	(??_ES_Timer_StopTimer+2)& (0+255),b
  4278  001402  0100               	movlb	0	; () banked
  4279  001404  1DBC               	comf	(??_ES_Timer_StopTimer+1)& (0+255),w,b
  4280  001406  0100               	movlb	0	; () banked
  4281  001408  6FBE               	movwf	(??_ES_Timer_StopTimer+3)& (0+255),b
  4282  00140A  0100               	movlb	0	; () banked
  4283  00140C  51BD               	movf	(??_ES_Timer_StopTimer+2)& (0+255),w,b
  4284  00140E  0100               	movlb	0	; () banked
  4285  001410  1793               	andwf	_TMR_ActiveFlags& (0+255),f,b
  4286  001412  0100               	movlb	0	; () banked
  4287  001414  51BE               	movf	(??_ES_Timer_StopTimer+3)& (0+255),w,b
  4288  001416  0100               	movlb	0	; () banked
  4289  001418  1794               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  4290  00141A  0012               	return	
  4291  00141C                     __end_of_ES_Timer_StopTimer:
  4292                           	opt stack 0
  4293                           tosu	equ	0xFFF
  4294                           tosh	equ	0xFFE
  4295                           tosl	equ	0xFFD
  4296                           pclath	equ	0xFFA
  4297                           tblptru	equ	0xFF8
  4298                           tblptrh	equ	0xFF7
  4299                           tblptrl	equ	0xFF6
  4300                           tablat	equ	0xFF5
  4301                           prodh	equ	0xFF4
  4302                           prodl	equ	0xFF3
  4303                           postinc0	equ	0xFEE
  4304                           wreg	equ	0xFE8
  4305                           indf1	equ	0xFE7
  4306                           postdec1	equ	0xFE5
  4307                           fsr1h	equ	0xFE2
  4308                           fsr1l	equ	0xFE1
  4309                           indf2	equ	0xFDF
  4310                           postinc2	equ	0xFDE
  4311                           postdec2	equ	0xFDD
  4312                           fsr2h	equ	0xFDA
  4313                           fsr2l	equ	0xFD9
  4314                           status	equ	0xFD8
  4315                           
  4316 ;; *************** function _ES_DeQueue *****************
  4317 ;; Defined at:
  4318 ;;		line 164 in file "ES_Queue.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  4321 ;;		 -> Queue1(12), Queue0(12), 
  4322 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  4323 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  4326 ;;		 -> Queue1(12), Queue0(12), 
  4327 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  4328 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  1    wreg      unsigned char 
  4331 ;; Registers used:
  4332 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4338 ;;      Params:         0       4       0       0
  4339 ;;      Locals:         0       4       0       0
  4340 ;;      Temps:          0       2       0       0
  4341 ;;      Totals:         0      10       0       0
  4342 ;;Total ram usage:       10 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    7
  4345 ;; This function calls:
  4346 ;;		___lbmod
  4347 ;;		___wmul
  4348 ;; This function is called by:
  4349 ;;		_ES_Run
  4350 ;;		_ES_RecallEvents
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           	psect	text25
  4355  00069E                     __ptext25:
  4356                           	opt stack 0
  4357  00069E                     _ES_DeQueue:
  4358                           	opt stack 22
  4359                           
  4360                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  4361                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  4362                           ;ES_Queue.c: 168: uint8_t NumLeft;
  4363                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;incstack = 0
  4367  00069E  C0C7  F0CF         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  4368  0006A2  C0C8  F0D0         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  4369                           
  4370                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  4371  0006A6  0100               	movlb	0	; () banked
  4372  0006A8  EE20 F002          	lfsr	2,2
  4373  0006AC  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4374  0006AE  26D9               	addwf	fsr2l,f,c
  4375  0006B0  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4376  0006B2  22DA               	addwfc	fsr2h,f,c
  4377  0006B4  50DF               	movf	indf2,w,c
  4378  0006B6  B4D8               	btfsc	status,2,c
  4379  0006B8  D06F               	goto	l2416
  4380                           
  4381                           ; BSR set to: 0
  4382                           
  4383                           ;ES_Queue.c: 172: {
  4384                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  4385  0006BA  CFF2 F0CD          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  4386  0006BE  9EF2               	bcf	intcon,7,c	;volatile
  4387                           
  4388                           ; BSR set to: 0
  4389                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  4390                           
  4391                           ; BSR set to: 0
  4392  0006C0  0100               	movlb	0	; () banked
  4393  0006C2  EE20 F001          	lfsr	2,1
  4394  0006C6  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4395  0006C8  26D9               	addwf	fsr2l,f,c
  4396  0006CA  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4397  0006CC  22DA               	addwfc	fsr2h,f,c
  4398  0006CE  50DF               	movf	indf2,w,c
  4399  0006D0  0100               	movlb	0	; () banked
  4400  0006D2  6FCB               	movwf	??_ES_DeQueue& (0+255),b
  4401  0006D4  0E01               	movlw	1
  4402  0006D6  0100               	movlb	0	; () banked
  4403  0006D8  25CB               	addwf	??_ES_DeQueue& (0+255),w,b
  4404  0006DA  0100               	movlb	0	; () banked
  4405  0006DC  6FC1               	movwf	___wmul@multiplier& (0+255),b
  4406  0006DE  0100               	movlb	0	; () banked
  4407  0006E0  6BC2               	clrf	(___wmul@multiplier+1)& (0+255),b
  4408  0006E2  0E00               	movlw	0
  4409  0006E4  23C2               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  4410  0006E6  0E00               	movlw	0
  4411  0006E8  0100               	movlb	0	; () banked
  4412  0006EA  6FC4               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4413  0006EC  0E03               	movlw	3
  4414  0006EE  6FC3               	movwf	___wmul@multiplicand& (0+255),b
  4415  0006F0  ECD6  F00A         	call	___wmul	;wreg free
  4416  0006F4  0100               	movlb	0	; () banked
  4417  0006F6  51C1               	movf	?___wmul& (0+255),w,b
  4418  0006F8  0100               	movlb	0	; () banked
  4419  0006FA  25C7               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  4420  0006FC  6ED9               	movwf	fsr2l,c
  4421  0006FE  0100               	movlb	0	; () banked
  4422  000700  51C2               	movf	(?___wmul+1)& (0+255),w,b
  4423  000702  0100               	movlb	0	; () banked
  4424  000704  21C8               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  4425  000706  6EDA               	movwf	fsr2h,c
  4426  000708  C0C9  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  4427  00070C  C0CA  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  4428  000710  CFDE FFE6          	movff	postinc2,postinc1
  4429  000714  CFDE FFE6          	movff	postinc2,postinc1
  4430  000718  CFDE FFE6          	movff	postinc2,postinc1
  4431                           
  4432                           ; BSR set to: 0
  4433                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  4434  00071C  0100               	movlb	0	; () banked
  4435  00071E  EE20 F001          	lfsr	2,1
  4436  000722  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4437  000724  26D9               	addwf	fsr2l,f,c
  4438  000726  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4439  000728  22DA               	addwfc	fsr2h,f,c
  4440  00072A  2ADF               	incf	indf2,f,c
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  4444  00072C  C0CF  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  4445  000730  C0D0  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  4446  000734  0100               	movlb	0	; () banked
  4447  000736  EE10 F001          	lfsr	1,1
  4448  00073A  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4449  00073C  26E1               	addwf	fsr1l,f,c
  4450  00073E  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4451  000740  22E2               	addwfc	fsr1h,f,c
  4452  000742  50DE               	movf	postinc2,w,c
  4453  000744  5CE6               	subwf	postinc1,w,c
  4454  000746  A0D8               	btfss	status,0,c
  4455  000748  D019               	goto	l2412
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  4459  00074A  0100               	movlb	0	; () banked
  4460  00074C  EE20 F001          	lfsr	2,1
  4461  000750  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4462  000752  26D9               	addwf	fsr2l,f,c
  4463  000754  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4464  000756  22DA               	addwfc	fsr2h,f,c
  4465  000758  C0CF  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  4466  00075C  C0D0  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  4467  000760  50E7               	movf	indf1,w,c
  4468  000762  0100               	movlb	0	; () banked
  4469  000764  6FBB               	movwf	___lbmod@divisor& (0+255),b
  4470  000766  0100               	movlb	0	; () banked
  4471  000768  EE10 F001          	lfsr	1,1
  4472  00076C  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4473  00076E  26E1               	addwf	fsr1l,f,c
  4474  000770  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4475  000772  22E2               	addwfc	fsr1h,f,c
  4476  000774  50E7               	movf	indf1,w,c
  4477  000776  EC58  F00A         	call	___lbmod
  4478  00077A  6EDF               	movwf	indf2,c
  4479  00077C                     l2412:
  4480                           
  4481                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  4482  00077C  0100               	movlb	0	; () banked
  4483  00077E  EE20 F002          	lfsr	2,2
  4484  000782  51CF               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  4485  000784  26D9               	addwf	fsr2l,f,c
  4486  000786  51D0               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  4487  000788  22DA               	addwfc	fsr2h,f,c
  4488  00078A  06DF               	decf	indf2,f,c
  4489  00078C  50DF               	movf	indf2,w,c
  4490  00078E  0100               	movlb	0	; () banked
  4491  000790  6FCE               	movwf	ES_DeQueue@NumLeft& (0+255),b
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  4495  000792  C0CD  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  4496                           
  4497                           ;ES_Queue.c: 183: }else {
  4498  000796  D014               	goto	l2422
  4499  000798                     l2416:
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  4503  000798  C0C9  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  4504  00079C  C0CA  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  4505  0007A0  0E00               	movlw	0
  4506  0007A2  6EDF               	movwf	indf2,c
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  4510  0007A4  0100               	movlb	0	; () banked
  4511  0007A6  EE20 F001          	lfsr	2,1
  4512  0007AA  51C9               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  4513  0007AC  26D9               	addwf	fsr2l,f,c
  4514  0007AE  51CA               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  4515  0007B0  22DA               	addwfc	fsr2h,f,c
  4516  0007B2  0E00               	movlw	0
  4517  0007B4  6EDE               	movwf	postinc2,c
  4518  0007B6  0E00               	movlw	0
  4519  0007B8  6EDD               	movwf	postdec2,c
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;ES_Queue.c: 186: NumLeft = 0;
  4523  0007BA  0E00               	movlw	0
  4524  0007BC  0100               	movlb	0	; () banked
  4525  0007BE  6FCE               	movwf	ES_DeQueue@NumLeft& (0+255),b
  4526  0007C0                     l2422:
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;ES_Queue.c: 187: }
  4530                           ;ES_Queue.c: 188: return NumLeft;
  4531  0007C0  0100               	movlb	0	; () banked
  4532  0007C2  51CE               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  4533  0007C4  0012               	return	
  4534  0007C6                     __end_of_ES_DeQueue:
  4535                           	opt stack 0
  4536                           tosu	equ	0xFFF
  4537                           tosh	equ	0xFFE
  4538                           tosl	equ	0xFFD
  4539                           pclath	equ	0xFFA
  4540                           tblptru	equ	0xFF8
  4541                           tblptrh	equ	0xFF7
  4542                           tblptrl	equ	0xFF6
  4543                           tablat	equ	0xFF5
  4544                           prodh	equ	0xFF4
  4545                           prodl	equ	0xFF3
  4546                           intcon	equ	0xFF2
  4547                           postinc0	equ	0xFEE
  4548                           wreg	equ	0xFE8
  4549                           indf1	equ	0xFE7
  4550                           postinc1	equ	0xFE6
  4551                           postdec1	equ	0xFE5
  4552                           fsr1h	equ	0xFE2
  4553                           fsr1l	equ	0xFE1
  4554                           indf2	equ	0xFDF
  4555                           postinc2	equ	0xFDE
  4556                           postdec2	equ	0xFDD
  4557                           fsr2h	equ	0xFDA
  4558                           fsr2l	equ	0xFD9
  4559                           status	equ	0xFD8
  4560                           
  4561 ;; *************** function ___lbmod *****************
  4562 ;; Defined at:
  4563 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
  4564 ;; Parameters:    Size  Location     Type
  4565 ;;  dividend        1    wreg     unsigned char 
  4566 ;;  divisor         1    0[BANK0 ] unsigned char 
  4567 ;; Auto vars:     Size  Location     Type
  4568 ;;  dividend        1    1[BANK0 ] unsigned char 
  4569 ;;  rem             1    3[BANK0 ] unsigned char 
  4570 ;;  counter         1    2[BANK0 ] unsigned char 
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  1    wreg      unsigned char 
  4573 ;; Registers used:
  4574 ;;		wreg, status,2, status,0
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4580 ;;      Params:         0       1       0       0
  4581 ;;      Locals:         0       3       0       0
  4582 ;;      Temps:          0       0       0       0
  4583 ;;      Totals:         0       4       0       0
  4584 ;;Total ram usage:        4 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    6
  4587 ;; This function calls:
  4588 ;;		Nothing
  4589 ;; This function is called by:
  4590 ;;		_ES_DeQueue
  4591 ;; This function uses a non-reentrant model
  4592 ;;
  4593                           
  4594                           	psect	text26
  4595  0014B0                     __ptext26:
  4596                           	opt stack 0
  4597  0014B0                     ___lbmod:
  4598                           	opt stack 22
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;incstack = 0
  4602                           ;___lbmod@dividend stored from wreg
  4603  0014B0  0100               	movlb	0	; () banked
  4604  0014B2  6FBC               	movwf	___lbmod@dividend& (0+255),b
  4605  0014B4  0E08               	movlw	8
  4606  0014B6  0100               	movlb	0	; () banked
  4607  0014B8  6FBD               	movwf	___lbmod@counter& (0+255),b
  4608  0014BA  0E00               	movlw	0
  4609  0014BC  0100               	movlb	0	; () banked
  4610  0014BE  6FBE               	movwf	___lbmod@rem& (0+255),b
  4611  0014C0                     l2352:
  4612                           
  4613                           ; BSR set to: 0
  4614  0014C0  90D8               	bcf	status,0,c
  4615  0014C2  0100               	movlb	0	; () banked
  4616  0014C4  35BC               	rlcf	___lbmod@dividend& (0+255),w,b
  4617  0014C6  0100               	movlb	0	; () banked
  4618  0014C8  35BE               	rlcf	___lbmod@rem& (0+255),w,b
  4619  0014CA  0100               	movlb	0	; () banked
  4620  0014CC  6FBE               	movwf	___lbmod@rem& (0+255),b
  4621                           
  4622                           ; BSR set to: 0
  4623  0014CE  0100               	movlb	0	; () banked
  4624  0014D0  90D8               	bcf	status,0,c
  4625  0014D2  37BC               	rlcf	___lbmod@dividend& (0+255),f,b
  4626                           
  4627                           ; BSR set to: 0
  4628  0014D4  0100               	movlb	0	; () banked
  4629  0014D6  51BB               	movf	___lbmod@divisor& (0+255),w,b
  4630  0014D8  0100               	movlb	0	; () banked
  4631  0014DA  5DBE               	subwf	___lbmod@rem& (0+255),w,b
  4632  0014DC  A0D8               	btfss	status,0,c
  4633  0014DE  D004               	goto	l2360
  4634                           
  4635                           ; BSR set to: 0
  4636  0014E0  0100               	movlb	0	; () banked
  4637  0014E2  51BB               	movf	___lbmod@divisor& (0+255),w,b
  4638  0014E4  0100               	movlb	0	; () banked
  4639  0014E6  5FBE               	subwf	___lbmod@rem& (0+255),f,b
  4640  0014E8                     l2360:
  4641                           
  4642                           ; BSR set to: 0
  4643  0014E8  0100               	movlb	0	; () banked
  4644  0014EA  2FBD               	decfsz	___lbmod@counter& (0+255),f,b
  4645  0014EC  D7E9               	goto	l2352
  4646                           
  4647                           ; BSR set to: 0
  4648                           
  4649                           ; BSR set to: 0
  4650  0014EE  0100               	movlb	0	; () banked
  4651  0014F0  51BE               	movf	___lbmod@rem& (0+255),w,b
  4652  0014F2  0012               	return	
  4653  0014F4                     __end_of___lbmod:
  4654                           	opt stack 0
  4655                           tosu	equ	0xFFF
  4656                           tosh	equ	0xFFE
  4657                           tosl	equ	0xFFD
  4658                           pclath	equ	0xFFA
  4659                           tblptru	equ	0xFF8
  4660                           tblptrh	equ	0xFF7
  4661                           tblptrl	equ	0xFF6
  4662                           tablat	equ	0xFF5
  4663                           prodh	equ	0xFF4
  4664                           prodl	equ	0xFF3
  4665                           intcon	equ	0xFF2
  4666                           postinc0	equ	0xFEE
  4667                           wreg	equ	0xFE8
  4668                           indf1	equ	0xFE7
  4669                           postinc1	equ	0xFE6
  4670                           postdec1	equ	0xFE5
  4671                           fsr1h	equ	0xFE2
  4672                           fsr1l	equ	0xFE1
  4673                           indf2	equ	0xFDF
  4674                           postinc2	equ	0xFDE
  4675                           postdec2	equ	0xFDD
  4676                           fsr2h	equ	0xFDA
  4677                           fsr2l	equ	0xFD9
  4678                           status	equ	0xFD8
  4679                           
  4680 ;; *************** function _ES_CheckUserEvents *****************
  4681 ;; Defined at:
  4682 ;;		line 46 in file "ES_CheckEvents.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;		None
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;  i               1    0[BANK0 ] unsigned char 
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  1    wreg      unsigned char 
  4689 ;; Registers used:
  4690 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4696 ;;      Params:         0       0       0       0
  4697 ;;      Locals:         0       1       0       0
  4698 ;;      Temps:          0       0       0       0
  4699 ;;      Totals:         0       1       0       0
  4700 ;;Total ram usage:        1 bytes
  4701 ;; Hardware stack levels used:    1
  4702 ;; Hardware stack levels required when called:    7
  4703 ;; This function calls:
  4704 ;;		_Check4Keystroke
  4705 ;; This function is called by:
  4706 ;;		_ES_Run
  4707 ;; This function uses a non-reentrant model
  4708 ;;
  4709                           
  4710                           	psect	text27
  4711  001466                     __ptext27:
  4712                           	opt stack 0
  4713  001466                     _ES_CheckUserEvents:
  4714                           	opt stack 22
  4715                           
  4716                           ;ES_CheckEvents.c: 48: uint8_t i;
  4717                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;incstack = 0
  4721  001466  0E00               	movlw	0
  4722  001468  0100               	movlb	0	; () banked
  4723  00146A  6FBB               	movwf	ES_CheckUserEvents@i& (0+255),b
  4724  00146C  0100               	movlb	0	; () banked
  4725  00146E  51BB               	movf	ES_CheckUserEvents@i& (0+255),w,b
  4726  001470  0100               	movlb	0	; () banked
  4727  001472  A4D8               	btfss	status,2,c
  4728  001474  0012               	return	
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  4732                           
  4733                           ; BSR set to: 0
  4734                           
  4735                           ; BSR set to: 0
  4736  001476  0100               	movlb	0	; () banked
  4737  001478  51BB               	movf	ES_CheckUserEvents@i& (0+255),w,b
  4738  00147A  0D02               	mullw	2
  4739  00147C  0E5E               	movlw	low _ES_EventList
  4740  00147E  24F3               	addwf	prodl,w,c
  4741  001480  6EF6               	movwf	tblptrl,c
  4742  001482  0E03               	movlw	high _ES_EventList
  4743  001484  20F4               	addwfc	prodh,w,c
  4744  001486  6EF7               	movwf	tblptrh,c
  4745  001488                     	if	0	;There are less than 3 active tblptr bytes
  4746  001488                     	endif
  4747  001488  D801               	call	u1388
  4748  00148A  D00C               	goto	u1389
  4749  00148C                     u1388:
  4750  00148C  0005               	push	
  4751  00148E  6EFA               	movwf	pclath,c
  4752  001490  0009               	tblrd		*+
  4753  001492  50F5               	movf	tablat,w,c
  4754  001494  6EFD               	movwf	tosl,c
  4755  001496  0009               	tblrd		*+
  4756  001498  50F5               	movf	tablat,w,c
  4757  00149A  6EFE               	movwf	tosh,c
  4758  00149C  50F8               	movf	tblptru,w,c
  4759  00149E  6EFF               	movwf	tosu,c
  4760  0014A0  50FA               	movf	pclath,w,c
  4761  0014A2  0012               	return		;indir
  4762  0014A4                     u1389:
  4763  0014A4  06E8               	decf	wreg,f,c
  4764  0014A6  B4D8               	btfsc	status,2,c
  4765  0014A8  0012               	return	
  4766                           
  4767                           ;ES_CheckEvents.c: 52: break;
  4768  0014AA  0100               	movlb	0	; () banked
  4769  0014AC  2BBB               	incf	ES_CheckUserEvents@i& (0+255),f,b
  4770  0014AE  D7DE               	goto	L11
  4771  0014B0                     __end_of_ES_CheckUserEvents:
  4772                           	opt stack 0
  4773                           tosu	equ	0xFFF
  4774                           tosh	equ	0xFFE
  4775                           tosl	equ	0xFFD
  4776                           pclath	equ	0xFFA
  4777                           tblptru	equ	0xFF8
  4778                           tblptrh	equ	0xFF7
  4779                           tblptrl	equ	0xFF6
  4780                           tablat	equ	0xFF5
  4781                           prodh	equ	0xFF4
  4782                           prodl	equ	0xFF3
  4783                           intcon	equ	0xFF2
  4784                           postinc0	equ	0xFEE
  4785                           wreg	equ	0xFE8
  4786                           indf1	equ	0xFE7
  4787                           postinc1	equ	0xFE6
  4788                           postdec1	equ	0xFE5
  4789                           fsr1h	equ	0xFE2
  4790                           fsr1l	equ	0xFE1
  4791                           indf2	equ	0xFDF
  4792                           postinc2	equ	0xFDE
  4793                           postdec2	equ	0xFDD
  4794                           fsr2h	equ	0xFDA
  4795                           fsr2l	equ	0xFD9
  4796                           status	equ	0xFD8
  4797                           
  4798 ;; *************** function _Check4Keystroke *****************
  4799 ;; Defined at:
  4800 ;;		line 62 in file "EventCheckers.c"
  4801 ;; Parameters:    Size  Location     Type
  4802 ;;		None
  4803 ;; Auto vars:     Size  Location     Type
  4804 ;;		None
  4805 ;; Return value:  Size  Location     Type
  4806 ;;                  1    wreg      unsigned char 
  4807 ;; Registers used:
  4808 ;;		wreg
  4809 ;; Tracked objects:
  4810 ;;		On entry : 0/0
  4811 ;;		On exit  : 0/0
  4812 ;;		Unchanged: 0/0
  4813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4814 ;;      Params:         0       0       0       0
  4815 ;;      Locals:         0       0       0       0
  4816 ;;      Temps:          0       0       0       0
  4817 ;;      Totals:         0       0       0       0
  4818 ;;Total ram usage:        0 bytes
  4819 ;; Hardware stack levels used:    1
  4820 ;; Hardware stack levels required when called:    6
  4821 ;; This function calls:
  4822 ;;		Nothing
  4823 ;; This function is called by:
  4824 ;;		_ES_CheckUserEvents
  4825 ;; This function uses a non-reentrant model
  4826 ;;
  4827                           
  4828                           	psect	text28
  4829  00180E                     __ptext28:
  4830                           	opt stack 0
  4831  00180E                     _Check4Keystroke:
  4832                           	opt stack 22
  4833                           
  4834                           ;EventCheckers.c: 78: return 0;
  4835                           
  4836                           ;incstack = 0
  4837  00180E  0E00               	movlw	0
  4838  001810  0012               	return	
  4839  001812                     __end_of_Check4Keystroke:
  4840                           	opt stack 0
  4841                           tosu	equ	0xFFF
  4842                           tosh	equ	0xFFE
  4843                           tosl	equ	0xFFD
  4844                           pclath	equ	0xFFA
  4845                           tblptru	equ	0xFF8
  4846                           tblptrh	equ	0xFF7
  4847                           tblptrl	equ	0xFF6
  4848                           tablat	equ	0xFF5
  4849                           prodh	equ	0xFF4
  4850                           prodl	equ	0xFF3
  4851                           intcon	equ	0xFF2
  4852                           postinc0	equ	0xFEE
  4853                           wreg	equ	0xFE8
  4854                           indf1	equ	0xFE7
  4855                           postinc1	equ	0xFE6
  4856                           postdec1	equ	0xFE5
  4857                           fsr1h	equ	0xFE2
  4858                           fsr1l	equ	0xFE1
  4859                           indf2	equ	0xFDF
  4860                           postinc2	equ	0xFDE
  4861                           postdec2	equ	0xFDD
  4862                           fsr2h	equ	0xFDA
  4863                           fsr2l	equ	0xFD9
  4864                           status	equ	0xFD8
  4865                           
  4866 ;; *************** function _ES_Initialize *****************
  4867 ;; Defined at:
  4868 ;;		line 242 in file "ES_Framework.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;  NewRate         2   33[BANK0 ] enum E15424
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;  i               1   35[BANK0 ] unsigned char 
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      enum E15495
  4875 ;; Registers used:
  4876 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4882 ;;      Params:         0       2       0       0
  4883 ;;      Locals:         0       1       0       0
  4884 ;;      Temps:          0       0       0       0
  4885 ;;      Totals:         0       3       0       0
  4886 ;;Total ram usage:        3 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:   10
  4889 ;; This function calls:
  4890 ;;		_ES_InitQueue
  4891 ;;		_ES_Timer_Init
  4892 ;;		_InitPatternControlService
  4893 ;;		_InitSPI32ControlService
  4894 ;; This function is called by:
  4895 ;;		_main
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           	psect	text29
  4900  000AC0                     __ptext29:
  4901                           	opt stack 0
  4902  000AC0                     _ES_Initialize:
  4903                           	opt stack 20
  4904                           
  4905                           ;ES_Framework.c: 243: uint8_t i;
  4906                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  4907                           
  4908                           ;incstack = 0
  4909  000AC0  C0DC  F0BD         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  4910  000AC4  C0DD  F0BE         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  4911  000AC8  ECED  F00B         	call	_ES_Timer_Init	;wreg free
  4912                           
  4913                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  4914  000ACC  0E00               	movlw	0
  4915  000ACE  0100               	movlb	0	; () banked
  4916  000AD0  6FDE               	movwf	ES_Initialize@i& (0+255),b
  4917  000AD2                     l2596:
  4918                           
  4919                           ; BSR set to: 0
  4920  000AD2  0E01               	movlw	1
  4921  000AD4  0100               	movlb	0	; () banked
  4922  000AD6  65DE               	cpfsgt	ES_Initialize@i& (0+255),b
  4923  000AD8  D001               	goto	l2600
  4924  000ADA  D066               	goto	l2620
  4925  000ADC                     l2600:
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  4929                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  4930  000ADC  0100               	movlb	0	; () banked
  4931  000ADE  51DE               	movf	ES_Initialize@i& (0+255),w,b
  4932  000AE0  0D04               	mullw	4
  4933  000AE2  0E50               	movlw	low _ServDescList
  4934  000AE4  24F3               	addwf	prodl,w,c
  4935  000AE6  6EF6               	movwf	tblptrl,c
  4936  000AE8  0E03               	movlw	high _ServDescList
  4937  000AEA  20F4               	addwfc	prodh,w,c
  4938  000AEC  6EF7               	movwf	tblptrh,c
  4939  000AEE                     	if	0	;There are less than 3 active tblptr bytes
  4940  000AEE                     	endif
  4941  000AEE  0009               	tblrd		*+
  4942  000AF0  50F5               	movf	tablat,w,c
  4943  000AF2  0009               	tblrd		*+
  4944  000AF4  10F5               	iorwf	tablat,w,c
  4945  000AF6  B4D8               	btfsc	status,2,c
  4946  000AF8  D013               	goto	l2604
  4947                           
  4948                           ; BSR set to: 0
  4949  000AFA  0100               	movlb	0	; () banked
  4950  000AFC  51DE               	movf	ES_Initialize@i& (0+255),w,b
  4951  000AFE  0D04               	mullw	4
  4952  000B00  0E02               	movlw	2
  4953  000B02  26F3               	addwf	prodl,f,c
  4954  000B04  0E00               	movlw	0
  4955  000B06  22F4               	addwfc	prodh,f,c
  4956  000B08  0E50               	movlw	low _ServDescList
  4957  000B0A  24F3               	addwf	prodl,w,c
  4958  000B0C  6EF6               	movwf	tblptrl,c
  4959  000B0E  0E03               	movlw	high _ServDescList
  4960  000B10  20F4               	addwfc	prodh,w,c
  4961  000B12  6EF7               	movwf	tblptrh,c
  4962  000B14                     	if	0	;There are less than 3 active tblptr bytes
  4963  000B14                     	endif
  4964  000B14  0009               	tblrd		*+
  4965  000B16  50F5               	movf	tablat,w,c
  4966  000B18  0009               	tblrd		*+
  4967  000B1A  10F5               	iorwf	tablat,w,c
  4968  000B1C  A4D8               	btfss	status,2,c
  4969  000B1E  D002               	goto	l2608
  4970  000B20                     l2604:
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;ES_Framework.c: 249: return FailedPointer;
  4974  000B20  0E03               	movlw	3
  4975                           
  4976                           ; BSR set to: 0
  4977  000B22  0012               	return	
  4978  000B24                     l2608:
  4979                           
  4980                           ; BSR set to: 0
  4981                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  4982  000B24  0100               	movlb	0	; () banked
  4983  000B26  51DE               	movf	ES_Initialize@i& (0+255),w,b
  4984  000B28  0D03               	mullw	3
  4985  000B2A  0E58               	movlw	low _EventQueues
  4986  000B2C  24F3               	addwf	prodl,w,c
  4987  000B2E  6EF6               	movwf	tblptrl,c
  4988  000B30  0E03               	movlw	high _EventQueues
  4989  000B32  20F4               	addwfc	prodh,w,c
  4990  000B34  6EF7               	movwf	tblptrh,c
  4991  000B36                     	if	0	;There are less than 3 active tblptr bytes
  4992  000B36                     	endif
  4993  000B36  0009               	tblrd		*+
  4994  000B38  CFF5 F0BB          	movff	tablat,ES_InitQueue@pBlock
  4995  000B3C  000A               	tblrd		*-
  4996  000B3E  CFF5 F0BC          	movff	tablat,ES_InitQueue@pBlock+1
  4997  000B42  0100               	movlb	0	; () banked
  4998  000B44  51DE               	movf	ES_Initialize@i& (0+255),w,b
  4999  000B46  0D03               	mullw	3
  5000  000B48  0E02               	movlw	2
  5001  000B4A  26F3               	addwf	prodl,f,c
  5002  000B4C  0E00               	movlw	0
  5003  000B4E  22F4               	addwfc	prodh,f,c
  5004  000B50  0E58               	movlw	low _EventQueues
  5005  000B52  24F3               	addwf	prodl,w,c
  5006  000B54  6EF6               	movwf	tblptrl,c
  5007  000B56  0E03               	movlw	high _EventQueues
  5008  000B58  20F4               	addwfc	prodh,w,c
  5009  000B5A  6EF7               	movwf	tblptrh,c
  5010  000B5C                     	if	0	;There are less than 3 active tblptr bytes
  5011  000B5C                     	endif
  5012  000B5C  0008               	tblrd		*
  5013  000B5E  CFF5 F0BD          	movff	tablat,ES_InitQueue@BlockSize
  5014  000B62  EC9B  F00A         	call	_ES_InitQueue	;wreg free
  5015                           
  5016                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  5017  000B66  0100               	movlb	0	; () banked
  5018  000B68  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5019  000B6A  0D04               	mullw	4
  5020  000B6C  0E50               	movlw	low _ServDescList
  5021  000B6E  24F3               	addwf	prodl,w,c
  5022  000B70  6EF6               	movwf	tblptrl,c
  5023  000B72  0E03               	movlw	high _ServDescList
  5024  000B74  20F4               	addwfc	prodh,w,c
  5025  000B76  6EF7               	movwf	tblptrh,c
  5026  000B78                     	if	0	;There are less than 3 active tblptr bytes
  5027  000B78                     	endif
  5028  000B78  D801               	call	u1638
  5029  000B7A  D00E               	goto	u1639
  5030  000B7C                     u1638:
  5031  000B7C  0005               	push	
  5032  000B7E  6EFA               	movwf	pclath,c
  5033  000B80  0009               	tblrd		*+
  5034  000B82  50F5               	movf	tablat,w,c
  5035  000B84  6EFD               	movwf	tosl,c
  5036  000B86  0009               	tblrd		*+
  5037  000B88  50F5               	movf	tablat,w,c
  5038  000B8A  6EFE               	movwf	tosh,c
  5039  000B8C  50F8               	movf	tblptru,w,c
  5040  000B8E  6EFF               	movwf	tosu,c
  5041  000B90  50FA               	movf	pclath,w,c
  5042  000B92  0100               	movlb	0	; () banked
  5043  000B94  51DE               	movf	ES_Initialize@i& (0+255),w,b
  5044  000B96  0012               	return		;indir
  5045  000B98                     u1639:
  5046  000B98  06E8               	decf	wreg,f,c
  5047  000B9A  B4D8               	btfsc	status,2,c
  5048  000B9C  D002               	goto	l2616
  5049                           
  5050                           ;ES_Framework.c: 254: return FailedInit;
  5051  000B9E  0E05               	movlw	5
  5052  000BA0  0012               	return	
  5053  000BA2                     l2616:
  5054  000BA2  0100               	movlb	0	; () banked
  5055  000BA4  2BDE               	incf	ES_Initialize@i& (0+255),f,b
  5056  000BA6  D795               	goto	l2596
  5057  000BA8                     l2620:
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;ES_Framework.c: 255: }
  5061                           ;ES_Framework.c: 256: return Success;
  5062  000BA8  0E00               	movlw	0
  5063  000BAA  0012               	return	
  5064  000BAC                     __end_of_ES_Initialize:
  5065                           	opt stack 0
  5066                           tosu	equ	0xFFF
  5067                           tosh	equ	0xFFE
  5068                           tosl	equ	0xFFD
  5069                           pclath	equ	0xFFA
  5070                           tblptru	equ	0xFF8
  5071                           tblptrh	equ	0xFF7
  5072                           tblptrl	equ	0xFF6
  5073                           tablat	equ	0xFF5
  5074                           prodh	equ	0xFF4
  5075                           prodl	equ	0xFF3
  5076                           intcon	equ	0xFF2
  5077                           postinc0	equ	0xFEE
  5078                           wreg	equ	0xFE8
  5079                           indf1	equ	0xFE7
  5080                           postinc1	equ	0xFE6
  5081                           postdec1	equ	0xFE5
  5082                           fsr1h	equ	0xFE2
  5083                           fsr1l	equ	0xFE1
  5084                           indf2	equ	0xFDF
  5085                           postinc2	equ	0xFDE
  5086                           postdec2	equ	0xFDD
  5087                           fsr2h	equ	0xFDA
  5088                           fsr2l	equ	0xFD9
  5089                           status	equ	0xFD8
  5090                           
  5091 ;; *************** function _InitPatternControlService *****************
  5092 ;; Defined at:
  5093 ;;		line 97 in file "Pattern_ControlService.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;  Priority        1    wreg     unsigned char 
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;  Priority        1   32[BANK0 ] unsigned char 
  5098 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  5099 ;; Return value:  Size  Location     Type
  5100 ;;                  1    wreg      unsigned char 
  5101 ;; Registers used:
  5102 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5103 ;; Tracked objects:
  5104 ;;		On entry : 0/0
  5105 ;;		On exit  : 0/0
  5106 ;;		Unchanged: 0/0
  5107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5108 ;;      Params:         0       0       0       0
  5109 ;;      Locals:         0       4       0       0
  5110 ;;      Temps:          0       0       0       0
  5111 ;;      Totals:         0       4       0       0
  5112 ;;Total ram usage:        4 bytes
  5113 ;; Hardware stack levels used:    1
  5114 ;; Hardware stack levels required when called:    9
  5115 ;; This function calls:
  5116 ;;		_DotStar_Init
  5117 ;;		_ES_PostToService
  5118 ;;		_SetupPattern
  5119 ;; This function is called by:
  5120 ;;		_ES_Initialize
  5121 ;; This function uses a non-reentrant model
  5122 ;;
  5123                           
  5124                           	psect	text30
  5125  00137C                     __ptext30:
  5126                           	opt stack 0
  5127  00137C                     _InitPatternControlService:
  5128                           	opt stack 20
  5129                           
  5130                           ;incstack = 0
  5131                           ;InitPatternControlService@Priority stored from wreg
  5132  00137C  0100               	movlb	0	; () banked
  5133  00137E  6FDB               	movwf	InitPatternControlService@Priority& (0+255),b
  5134                           
  5135                           ;Pattern_ControlService.c: 99: ES_Event ThisEvent;
  5136                           ;Pattern_ControlService.c: 101: MyPriority = Priority;
  5137  001380  C0DB  F09C         	movff	InitPatternControlService@Priority,_MyPriority
  5138                           
  5139                           ;Pattern_ControlService.c: 103: DotStar_Init(11);
  5140  001384  0E0B               	movlw	11
  5141  001386  ECE8  F004         	call	_DotStar_Init
  5142                           
  5143                           ;Pattern_ControlService.c: 104: SetupPattern(PatternConfigs, 11);
  5144  00138A  0EF6               	movlw	low _PatternConfigs
  5145  00138C  0100               	movlb	0	; () banked
  5146  00138E  6FBB               	movwf	SetupPattern@configs& (0+255),b
  5147  001390  0E00               	movlw	high _PatternConfigs
  5148  001392  0100               	movlb	0	; () banked
  5149  001394  6FBC               	movwf	(SetupPattern@configs+1)& (0+255),b
  5150  001396  0E0B               	movlw	11
  5151  001398  0100               	movlb	0	; () banked
  5152  00139A  6FBD               	movwf	SetupPattern@numPixels& (0+255),b
  5153  00139C  ECE6  F00B         	call	_SetupPattern	;wreg free
  5154                           
  5155                           ;Pattern_ControlService.c: 106: CurrentState = Pattern_Startup;
  5156  0013A0  0E00               	movlw	0
  5157  0013A2  0100               	movlb	0	; () banked
  5158  0013A4  6F99               	movwf	_CurrentState& (0+255),b
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;Pattern_ControlService.c: 108: ThisEvent.EventType = ES_INIT;
  5162  0013A6  0E02               	movlw	2
  5163  0013A8  0100               	movlb	0	; () banked
  5164  0013AA  6FD8               	movwf	InitPatternControlService@ThisEvent& (0+255),b
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;Pattern_ControlService.c: 109: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  5168  0013AC  C0D8  F0D2         	movff	InitPatternControlService@ThisEvent,ES_PostToService@TheEvent
  5169  0013B0  C0D9  F0D3         	movff	InitPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  5170  0013B4  C0DA  F0D4         	movff	InitPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  5171  0013B8  0100               	movlb	0	; () banked
  5172  0013BA  519C               	movf	_MyPriority& (0+255),w,b
  5173  0013BC  EC16  F009         	call	_ES_PostToService
  5174  0013C0  06E8               	decf	wreg,f,c
  5175  0013C2  A4D8               	btfss	status,2,c
  5176  0013C4  D002               	goto	l2468
  5177                           
  5178                           ;Pattern_ControlService.c: 110: {
  5179                           ;Pattern_ControlService.c: 111: return 1;
  5180  0013C6  0E01               	movlw	1
  5181                           
  5182                           ;Pattern_ControlService.c: 112: }else
  5183  0013C8  0012               	return	
  5184  0013CA                     l2468:
  5185                           
  5186                           ;Pattern_ControlService.c: 113: {
  5187                           ;Pattern_ControlService.c: 114: return 0;
  5188  0013CA  0E00               	movlw	0
  5189  0013CC  0012               	return	
  5190  0013CE                     __end_of_InitPatternControlService:
  5191                           	opt stack 0
  5192                           tosu	equ	0xFFF
  5193                           tosh	equ	0xFFE
  5194                           tosl	equ	0xFFD
  5195                           pclath	equ	0xFFA
  5196                           tblptru	equ	0xFF8
  5197                           tblptrh	equ	0xFF7
  5198                           tblptrl	equ	0xFF6
  5199                           tablat	equ	0xFF5
  5200                           prodh	equ	0xFF4
  5201                           prodl	equ	0xFF3
  5202                           intcon	equ	0xFF2
  5203                           postinc0	equ	0xFEE
  5204                           wreg	equ	0xFE8
  5205                           indf1	equ	0xFE7
  5206                           postinc1	equ	0xFE6
  5207                           postdec1	equ	0xFE5
  5208                           fsr1h	equ	0xFE2
  5209                           fsr1l	equ	0xFE1
  5210                           indf2	equ	0xFDF
  5211                           postinc2	equ	0xFDE
  5212                           postdec2	equ	0xFDD
  5213                           fsr2h	equ	0xFDA
  5214                           fsr2l	equ	0xFD9
  5215                           status	equ	0xFD8
  5216                           
  5217 ;; *************** function _InitSPI32ControlService *****************
  5218 ;; Defined at:
  5219 ;;		line 80 in file "SPI32_ControlService.c"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;  Priority        1    wreg     unsigned char 
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;  Priority        1   32[BANK0 ] unsigned char 
  5224 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  1    wreg      unsigned char 
  5227 ;; Registers used:
  5228 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5229 ;; Tracked objects:
  5230 ;;		On entry : 0/0
  5231 ;;		On exit  : 0/0
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5234 ;;      Params:         0       0       0       0
  5235 ;;      Locals:         0       4       0       0
  5236 ;;      Temps:          0       0       0       0
  5237 ;;      Totals:         0       4       0       0
  5238 ;;Total ram usage:        4 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; Hardware stack levels required when called:    9
  5241 ;; This function calls:
  5242 ;;		_ES_PostToService
  5243 ;;		_SPI32_Init
  5244 ;; This function is called by:
  5245 ;;		_ES_Initialize
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           	psect	text31
  5250  001572                     __ptext31:
  5251                           	opt stack 0
  5252  001572                     _InitSPI32ControlService:
  5253                           	opt stack 20
  5254                           
  5255                           ;incstack = 0
  5256                           ;InitSPI32ControlService@Priority stored from wreg
  5257  001572  0100               	movlb	0	; () banked
  5258  001574  6FDB               	movwf	InitSPI32ControlService@Priority& (0+255),b
  5259                           
  5260                           ;SPI32_ControlService.c: 82: ES_Event ThisEvent;
  5261                           ;SPI32_ControlService.c: 84: MyPriority = Priority;
  5262  001576  C0DB  F098         	movff	InitSPI32ControlService@Priority,SPI32_ControlService@MyPriority
  5263                           
  5264                           ;SPI32_ControlService.c: 86: SPI32_Init();
  5265  00157A  EC01  F00C         	call	_SPI32_Init	;wreg free
  5266                           
  5267                           ;SPI32_ControlService.c: 88: CurrentState = SPI32_Startup;
  5268  00157E  0E00               	movlw	0
  5269  001580  0100               	movlb	0	; () banked
  5270  001582  6F97               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  5271                           
  5272                           ; BSR set to: 0
  5273                           ;SPI32_ControlService.c: 90: ThisEvent.EventType = ES_INIT;
  5274  001584  0E02               	movlw	2
  5275  001586  0100               	movlb	0	; () banked
  5276  001588  6FD8               	movwf	InitSPI32ControlService@ThisEvent& (0+255),b
  5277                           
  5278                           ; BSR set to: 0
  5279                           ;SPI32_ControlService.c: 91: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  5280  00158A  C0D8  F0D2         	movff	InitSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  5281  00158E  C0D9  F0D3         	movff	InitSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  5282  001592  C0DA  F0D4         	movff	InitSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  5283  001596  0100               	movlb	0	; () banked
  5284  001598  5198               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  5285  00159A  EC16  F009         	call	_ES_PostToService
  5286  00159E  06E8               	decf	wreg,f,c
  5287  0015A0  A4D8               	btfss	status,2,c
  5288  0015A2  D002               	goto	l2534
  5289                           
  5290                           ;SPI32_ControlService.c: 92: {
  5291                           ;SPI32_ControlService.c: 93: return 1;
  5292  0015A4  0E01               	movlw	1
  5293                           
  5294                           ;SPI32_ControlService.c: 94: }else
  5295  0015A6  0012               	return	
  5296  0015A8                     l2534:
  5297                           
  5298                           ;SPI32_ControlService.c: 95: {
  5299                           ;SPI32_ControlService.c: 96: return 0;
  5300  0015A8  0E00               	movlw	0
  5301  0015AA  0012               	return	
  5302  0015AC                     __end_of_InitSPI32ControlService:
  5303                           	opt stack 0
  5304                           tosu	equ	0xFFF
  5305                           tosh	equ	0xFFE
  5306                           tosl	equ	0xFFD
  5307                           pclath	equ	0xFFA
  5308                           tblptru	equ	0xFF8
  5309                           tblptrh	equ	0xFF7
  5310                           tblptrl	equ	0xFF6
  5311                           tablat	equ	0xFF5
  5312                           prodh	equ	0xFF4
  5313                           prodl	equ	0xFF3
  5314                           intcon	equ	0xFF2
  5315                           postinc0	equ	0xFEE
  5316                           wreg	equ	0xFE8
  5317                           indf1	equ	0xFE7
  5318                           postinc1	equ	0xFE6
  5319                           postdec1	equ	0xFE5
  5320                           fsr1h	equ	0xFE2
  5321                           fsr1l	equ	0xFE1
  5322                           indf2	equ	0xFDF
  5323                           postinc2	equ	0xFDE
  5324                           postdec2	equ	0xFDD
  5325                           fsr2h	equ	0xFDA
  5326                           fsr2l	equ	0xFD9
  5327                           status	equ	0xFD8
  5328                           
  5329 ;; *************** function _SPI32_Init *****************
  5330 ;; Defined at:
  5331 ;;		line 64 in file "SPI32_HW.c"
  5332 ;; Parameters:    Size  Location     Type
  5333 ;;		None
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;		None
  5336 ;; Return value:  Size  Location     Type
  5337 ;;                  1    wreg      void 
  5338 ;; Registers used:
  5339 ;;		wreg, status,2, cstack
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5345 ;;      Params:         0       0       0       0
  5346 ;;      Locals:         0       0       0       0
  5347 ;;      Temps:          0       0       0       0
  5348 ;;      Totals:         0       0       0       0
  5349 ;;Total ram usage:        0 bytes
  5350 ;; Hardware stack levels used:    1
  5351 ;; Hardware stack levels required when called:    7
  5352 ;; This function calls:
  5353 ;;		_HW_Init
  5354 ;; This function is called by:
  5355 ;;		_InitSPI32ControlService
  5356 ;; This function uses a non-reentrant model
  5357 ;;
  5358                           
  5359                           	psect	text32
  5360  001802                     __ptext32:
  5361                           	opt stack 0
  5362  001802                     _SPI32_Init:
  5363                           	opt stack 21
  5364                           
  5365                           ;SPI32_HW.c: 66: HW_Init();
  5366                           
  5367                           ;incstack = 0
  5368  001802  EC64  F00B         	call	_HW_Init	;wreg free
  5369  001806  0012               	return		;funcret
  5370  001808                     __end_of_SPI32_Init:
  5371                           	opt stack 0
  5372                           tosu	equ	0xFFF
  5373                           tosh	equ	0xFFE
  5374                           tosl	equ	0xFFD
  5375                           pclath	equ	0xFFA
  5376                           tblptru	equ	0xFF8
  5377                           tblptrh	equ	0xFF7
  5378                           tblptrl	equ	0xFF6
  5379                           tablat	equ	0xFF5
  5380                           prodh	equ	0xFF4
  5381                           prodl	equ	0xFF3
  5382                           intcon	equ	0xFF2
  5383                           postinc0	equ	0xFEE
  5384                           wreg	equ	0xFE8
  5385                           indf1	equ	0xFE7
  5386                           postinc1	equ	0xFE6
  5387                           postdec1	equ	0xFE5
  5388                           fsr1h	equ	0xFE2
  5389                           fsr1l	equ	0xFE1
  5390                           indf2	equ	0xFDF
  5391                           postinc2	equ	0xFDE
  5392                           postdec2	equ	0xFDD
  5393                           fsr2h	equ	0xFDA
  5394                           fsr2l	equ	0xFD9
  5395                           status	equ	0xFD8
  5396                           
  5397 ;; *************** function _HW_Init *****************
  5398 ;; Defined at:
  5399 ;;		line 117 in file "SPI32_HW.c"
  5400 ;; Parameters:    Size  Location     Type
  5401 ;;		None
  5402 ;; Auto vars:     Size  Location     Type
  5403 ;;		None
  5404 ;; Return value:  Size  Location     Type
  5405 ;;                  1    wreg      void 
  5406 ;; Registers used:
  5407 ;;		wreg, status,2
  5408 ;; Tracked objects:
  5409 ;;		On entry : 0/0
  5410 ;;		On exit  : 0/0
  5411 ;;		Unchanged: 0/0
  5412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5413 ;;      Params:         0       0       0       0
  5414 ;;      Locals:         0       0       0       0
  5415 ;;      Temps:          0       0       0       0
  5416 ;;      Totals:         0       0       0       0
  5417 ;;Total ram usage:        0 bytes
  5418 ;; Hardware stack levels used:    1
  5419 ;; Hardware stack levels required when called:    6
  5420 ;; This function calls:
  5421 ;;		Nothing
  5422 ;; This function is called by:
  5423 ;;		_SPI32_Init
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           	psect	text33
  5428  0016C8                     __ptext33:
  5429                           	opt stack 0
  5430  0016C8                     _HW_Init:
  5431                           	opt stack 21
  5432                           
  5433                           ;SPI32_HW.c: 123: PORTC = 0x00;
  5434                           
  5435                           ;incstack = 0
  5436  0016C8  0E00               	movlw	0
  5437  0016CA  6E82               	movwf	3970,c	;volatile
  5438                           
  5439                           ;SPI32_HW.c: 124: LATC = 0x00;
  5440  0016CC  0E00               	movlw	0
  5441  0016CE  6E8B               	movwf	3979,c	;volatile
  5442                           
  5443                           ;SPI32_HW.c: 125: ADCON1 = 0x0F;
  5444  0016D0  0E0F               	movlw	15
  5445  0016D2  6EC1               	movwf	4033,c	;volatile
  5446                           
  5447                           ;SPI32_HW.c: 126: TRISC = 0x00;
  5448  0016D4  0E00               	movlw	0
  5449  0016D6  6E94               	movwf	3988,c	;volatile
  5450                           
  5451                           ;SPI32_HW.c: 128: SSPIE = 1;
  5452  0016D8  869D               	bsf	3997,3,c	;volatile
  5453                           
  5454                           ;SPI32_HW.c: 132: SSPCON1 = 0x00;
  5455  0016DA  0E00               	movlw	0
  5456  0016DC  6EC6               	movwf	4038,c	;volatile
  5457                           
  5458                           ;SPI32_HW.c: 133: SSPSTAT = 0b01000000;
  5459  0016DE  0E40               	movlw	64
  5460  0016E0  6EC7               	movwf	4039,c	;volatile
  5461                           
  5462                           ;SPI32_HW.c: 134: SSPADD = 0xFF;
  5463  0016E2  68C8               	setf	4040,c	;volatile
  5464                           
  5465                           ;SPI32_HW.c: 135: SSPCON1 = 0b00110010;
  5466  0016E4  0E32               	movlw	50
  5467  0016E6  6EC6               	movwf	4038,c	;volatile
  5468  0016E8  0012               	return		;funcret
  5469  0016EA                     __end_of_HW_Init:
  5470                           	opt stack 0
  5471                           tosu	equ	0xFFF
  5472                           tosh	equ	0xFFE
  5473                           tosl	equ	0xFFD
  5474                           pclath	equ	0xFFA
  5475                           tblptru	equ	0xFF8
  5476                           tblptrh	equ	0xFF7
  5477                           tblptrl	equ	0xFF6
  5478                           tablat	equ	0xFF5
  5479                           prodh	equ	0xFF4
  5480                           prodl	equ	0xFF3
  5481                           intcon	equ	0xFF2
  5482                           postinc0	equ	0xFEE
  5483                           wreg	equ	0xFE8
  5484                           indf1	equ	0xFE7
  5485                           postinc1	equ	0xFE6
  5486                           postdec1	equ	0xFE5
  5487                           fsr1h	equ	0xFE2
  5488                           fsr1l	equ	0xFE1
  5489                           indf2	equ	0xFDF
  5490                           postinc2	equ	0xFDE
  5491                           postdec2	equ	0xFDD
  5492                           fsr2h	equ	0xFDA
  5493                           fsr2l	equ	0xFD9
  5494                           status	equ	0xFD8
  5495                           
  5496 ;; *************** function _SetupPattern *****************
  5497 ;; Defined at:
  5498 ;;		line 69 in file "Pattern_RGBPatterns.c"
  5499 ;; Parameters:    Size  Location     Type
  5500 ;;  configs         2    0[BANK0 ] PTR unsigned char 
  5501 ;;		 -> PatternConfigs(5), 
  5502 ;;  numPixels       1    2[BANK0 ] unsigned char 
  5503 ;; Auto vars:     Size  Location     Type
  5504 ;;		None
  5505 ;; Return value:  Size  Location     Type
  5506 ;;                  1    wreg      void 
  5507 ;; Registers used:
  5508 ;;		wreg, status,2, status,0
  5509 ;; Tracked objects:
  5510 ;;		On entry : 0/0
  5511 ;;		On exit  : 0/0
  5512 ;;		Unchanged: 0/0
  5513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5514 ;;      Params:         0       3       0       0
  5515 ;;      Locals:         0       0       0       0
  5516 ;;      Temps:          0       0       0       0
  5517 ;;      Totals:         0       3       0       0
  5518 ;;Total ram usage:        3 bytes
  5519 ;; Hardware stack levels used:    1
  5520 ;; Hardware stack levels required when called:    6
  5521 ;; This function calls:
  5522 ;;		Nothing
  5523 ;; This function is called by:
  5524 ;;		_InitPatternControlService
  5525 ;; This function uses a non-reentrant model
  5526 ;;
  5527                           
  5528                           	psect	text34
  5529  0017CC                     __ptext34:
  5530                           	opt stack 0
  5531  0017CC                     _SetupPattern:
  5532                           	opt stack 22
  5533                           
  5534                           ;Pattern_RGBPatterns.c: 71: PatternConfigs = configs;
  5535                           
  5536                           ;incstack = 0
  5537  0017CC  C0BB  F08D         	movff	SetupPattern@configs,Pattern_RGBPatterns@PatternConfigs
  5538  0017D0  C0BC  F08E         	movff	SetupPattern@configs+1,Pattern_RGBPatterns@PatternConfigs+1
  5539                           
  5540                           ;Pattern_RGBPatterns.c: 73: Length = numPixels;
  5541  0017D4  C0BD  F096         	movff	SetupPattern@numPixels,Pattern_RGBPatterns@Length
  5542  0017D8  0012               	return		;funcret
  5543  0017DA                     __end_of_SetupPattern:
  5544                           	opt stack 0
  5545                           tosu	equ	0xFFF
  5546                           tosh	equ	0xFFE
  5547                           tosl	equ	0xFFD
  5548                           pclath	equ	0xFFA
  5549                           tblptru	equ	0xFF8
  5550                           tblptrh	equ	0xFF7
  5551                           tblptrl	equ	0xFF6
  5552                           tablat	equ	0xFF5
  5553                           prodh	equ	0xFF4
  5554                           prodl	equ	0xFF3
  5555                           intcon	equ	0xFF2
  5556                           postinc0	equ	0xFEE
  5557                           wreg	equ	0xFE8
  5558                           indf1	equ	0xFE7
  5559                           postinc1	equ	0xFE6
  5560                           postdec1	equ	0xFE5
  5561                           fsr1h	equ	0xFE2
  5562                           fsr1l	equ	0xFE1
  5563                           indf2	equ	0xFDF
  5564                           postinc2	equ	0xFDE
  5565                           postdec2	equ	0xFDD
  5566                           fsr2h	equ	0xFDA
  5567                           fsr2l	equ	0xFD9
  5568                           status	equ	0xFD8
  5569                           
  5570 ;; *************** function _ES_PostToService *****************
  5571 ;; Defined at:
  5572 ;;		line 351 in file "ES_Framework.c"
  5573 ;; Parameters:    Size  Location     Type
  5574 ;;  WhichService    1    wreg     unsigned char 
  5575 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;  WhichService    1   28[BANK0 ] unsigned char 
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  1    wreg      unsigned char 
  5580 ;; Registers used:
  5581 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5587 ;;      Params:         0       3       0       0
  5588 ;;      Locals:         0       1       0       0
  5589 ;;      Temps:          0       2       0       0
  5590 ;;      Totals:         0       6       0       0
  5591 ;;Total ram usage:        6 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:    8
  5594 ;; This function calls:
  5595 ;;		_ES_EnQueueFIFO
  5596 ;; This function is called by:
  5597 ;;		_InitPatternControlService
  5598 ;;		_PostPatternControlService
  5599 ;;		_InitSPI32ControlService
  5600 ;;		_PostSPI32ControlService
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           	psect	text35
  5605  00122C                     __ptext35:
  5606                           	opt stack 0
  5607  00122C                     _ES_PostToService:
  5608                           	opt stack 18
  5609                           
  5610                           ;incstack = 0
  5611                           ;ES_PostToService@WhichService stored from wreg
  5612  00122C  0100               	movlb	0	; () banked
  5613  00122E  6FD7               	movwf	ES_PostToService@WhichService& (0+255),b
  5614                           
  5615                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  5616                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  5617                           ;ES_Framework.c: 354: 1 )){
  5618  001230  0E02               	movlw	2
  5619  001232  0100               	movlb	0	; () banked
  5620  001234  61D7               	cpfslt	ES_PostToService@WhichService& (0+255),b
  5621  001236  D033               	goto	l2080
  5622                           
  5623                           ; BSR set to: 0
  5624  001238  0100               	movlb	0	; () banked
  5625  00123A  51D7               	movf	ES_PostToService@WhichService& (0+255),w,b
  5626  00123C  0D03               	mullw	3
  5627  00123E  0E58               	movlw	low _EventQueues
  5628  001240  24F3               	addwf	prodl,w,c
  5629  001242  6EF6               	movwf	tblptrl,c
  5630  001244  0E03               	movlw	high _EventQueues
  5631  001246  20F4               	addwfc	prodh,w,c
  5632  001248  6EF7               	movwf	tblptrh,c
  5633  00124A                     	if	0	;There are less than 3 active tblptr bytes
  5634  00124A                     	endif
  5635  00124A  0009               	tblrd		*+
  5636  00124C  CFF5 F0C7          	movff	tablat,ES_EnQueueFIFO@pBlock
  5637  001250  000A               	tblrd		*-
  5638  001252  CFF5 F0C8          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  5639  001256  C0D2  F0C9         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  5640  00125A  C0D3  F0CA         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  5641  00125E  C0D4  F0CB         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  5642  001262  ECD6  F005         	call	_ES_EnQueueFIFO	;wreg free
  5643  001266  06E8               	decf	wreg,f,c
  5644  001268  A4D8               	btfss	status,2,c
  5645  00126A  D019               	goto	l2080
  5646                           
  5647                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  5648  00126C  0100               	movlb	0	; () banked
  5649  00126E  51D7               	movf	ES_PostToService@WhichService& (0+255),w,b
  5650  001270  0D02               	mullw	2
  5651  001272  0E01               	movlw	low _BitNum2SetMask
  5652  001274  24F3               	addwf	prodl,w,c
  5653  001276  6EF6               	movwf	tblptrl,c
  5654  001278  0E03               	movlw	high _BitNum2SetMask
  5655  00127A  20F4               	addwfc	prodh,w,c
  5656  00127C  6EF7               	movwf	tblptrh,c
  5657  00127E                     	if	0	;There are less than 3 active tblptr bytes
  5658  00127E                     	endif
  5659  00127E  0009               	tblrd		*+
  5660  001280  CFF5 F0D5          	movff	tablat,??_ES_PostToService
  5661  001284  0009               	tblrd		*+
  5662  001286  CFF5 F0D6          	movff	tablat,??_ES_PostToService+1
  5663  00128A  0100               	movlb	0	; () banked
  5664  00128C  51D5               	movf	??_ES_PostToService& (0+255),w,b
  5665  00128E  0100               	movlb	0	; () banked
  5666  001290  1391               	iorwf	_Ready& (0+255),f,b
  5667  001292  0100               	movlb	0	; () banked
  5668  001294  51D6               	movf	(??_ES_PostToService+1)& (0+255),w,b
  5669  001296  0100               	movlb	0	; () banked
  5670  001298  1392               	iorwf	(_Ready+1)& (0+255),f,b
  5671                           
  5672                           ; BSR set to: 0
  5673                           ;ES_Framework.c: 356: return 1;
  5674  00129A  0E01               	movlw	1
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;ES_Framework.c: 357: } else
  5678                           
  5679                           ; BSR set to: 0
  5680  00129C  0012               	return	
  5681  00129E                     l2080:
  5682                           
  5683                           ;ES_Framework.c: 358: return 0;
  5684  00129E  0E00               	movlw	0
  5685  0012A0  0012               	return	
  5686  0012A2                     __end_of_ES_PostToService:
  5687                           	opt stack 0
  5688                           tosu	equ	0xFFF
  5689                           tosh	equ	0xFFE
  5690                           tosl	equ	0xFFD
  5691                           pclath	equ	0xFFA
  5692                           tblptru	equ	0xFF8
  5693                           tblptrh	equ	0xFF7
  5694                           tblptrl	equ	0xFF6
  5695                           tablat	equ	0xFF5
  5696                           prodh	equ	0xFF4
  5697                           prodl	equ	0xFF3
  5698                           intcon	equ	0xFF2
  5699                           postinc0	equ	0xFEE
  5700                           wreg	equ	0xFE8
  5701                           indf1	equ	0xFE7
  5702                           postinc1	equ	0xFE6
  5703                           postdec1	equ	0xFE5
  5704                           fsr1h	equ	0xFE2
  5705                           fsr1l	equ	0xFE1
  5706                           indf2	equ	0xFDF
  5707                           postinc2	equ	0xFDE
  5708                           postdec2	equ	0xFDD
  5709                           fsr2h	equ	0xFDA
  5710                           fsr2l	equ	0xFD9
  5711                           status	equ	0xFD8
  5712                           
  5713 ;; *************** function _ES_EnQueueFIFO *****************
  5714 ;; Defined at:
  5715 ;;		line 85 in file "ES_Queue.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  5718 ;;		 -> Queue1(12), Queue0(12), 
  5719 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  5722 ;;		 -> Queue1(12), Queue0(12), 
  5723 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  1    wreg      unsigned char 
  5726 ;; Registers used:
  5727 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5728 ;; Tracked objects:
  5729 ;;		On entry : 0/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5733 ;;      Params:         0       5       0       0
  5734 ;;      Locals:         0       3       0       0
  5735 ;;      Temps:          0       3       0       0
  5736 ;;      Totals:         0      11       0       0
  5737 ;;Total ram usage:       11 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; Hardware stack levels required when called:    7
  5740 ;; This function calls:
  5741 ;;		___awmod
  5742 ;;		___wmul
  5743 ;; This function is called by:
  5744 ;;		_ES_PostToService
  5745 ;;		_ES_PostAll
  5746 ;; This function uses a non-reentrant model
  5747 ;;
  5748                           
  5749                           	psect	text36
  5750  000BAC                     __ptext36:
  5751                           	opt stack 0
  5752  000BAC                     _ES_EnQueueFIFO:
  5753                           	opt stack 18
  5754                           
  5755                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  5756                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  5757                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  5758                           
  5759                           ;incstack = 0
  5760  000BAC  C0C7  F0D0         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  5761  000BB0  C0C8  F0D1         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  5762                           
  5763                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  5764  000BB4  C0D0  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5765  000BB8  C0D1  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5766  000BBC  0100               	movlb	0	; () banked
  5767  000BBE  EE10 F002          	lfsr	1,2
  5768  000BC2  51D0               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5769  000BC4  26E1               	addwf	fsr1l,f,c
  5770  000BC6  51D1               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5771  000BC8  22E2               	addwfc	fsr1h,f,c
  5772  000BCA  50DE               	movf	postinc2,w,c
  5773  000BCC  5CE6               	subwf	postinc1,w,c
  5774  000BCE  B0D8               	btfsc	status,0,c
  5775  000BD0  D05C               	goto	l2064
  5776                           
  5777                           ; BSR set to: 0
  5778                           
  5779                           ;ES_Queue.c: 92: {
  5780                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  5781  000BD2  CFF2 F0CF          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  5782  000BD6  9EF2               	bcf	intcon,7,c	;volatile
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  5786                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  5787                           
  5788                           ; BSR set to: 0
  5789  000BD8  C0D0  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  5790  000BDC  C0D1  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  5791  000BE0  50DF               	movf	indf2,w,c
  5792  000BE2  0100               	movlb	0	; () banked
  5793  000BE4  6FCC               	movwf	??_ES_EnQueueFIFO& (0+255),b
  5794  000BE6  0100               	movlb	0	; () banked
  5795  000BE8  51CC               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  5796  000BEA  0100               	movlb	0	; () banked
  5797  000BEC  6FBD               	movwf	___awmod@divisor& (0+255),b
  5798  000BEE  6BBE               	clrf	(___awmod@divisor+1)& (0+255),b
  5799  000BF0  0100               	movlb	0	; () banked
  5800  000BF2  EE20 F002          	lfsr	2,2
  5801  000BF6  51D0               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5802  000BF8  26D9               	addwf	fsr2l,f,c
  5803  000BFA  51D1               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5804  000BFC  22DA               	addwfc	fsr2h,f,c
  5805  000BFE  50DF               	movf	indf2,w,c
  5806  000C00  0100               	movlb	0	; () banked
  5807  000C02  6FCD               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  5808  000C04  0100               	movlb	0	; () banked
  5809  000C06  EE20 F001          	lfsr	2,1
  5810  000C0A  51D0               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5811  000C0C  26D9               	addwf	fsr2l,f,c
  5812  000C0E  51D1               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5813  000C10  22DA               	addwfc	fsr2h,f,c
  5814  000C12  50DF               	movf	indf2,w,c
  5815  000C14  0100               	movlb	0	; () banked
  5816  000C16  6FCE               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  5817  000C18  0100               	movlb	0	; () banked
  5818  000C1A  51CE               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  5819  000C1C  0100               	movlb	0	; () banked
  5820  000C1E  25CD               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  5821  000C20  0100               	movlb	0	; () banked
  5822  000C22  6FBB               	movwf	___awmod@dividend& (0+255),b
  5823  000C24  0100               	movlb	0	; () banked
  5824  000C26  6BBC               	clrf	(___awmod@dividend+1)& (0+255),b
  5825  000C28  0100               	movlb	0	; () banked
  5826  000C2A  37BC               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  5827  000C2C  ECA8  F007         	call	___awmod	;wreg free
  5828  000C30  0E01               	movlw	1
  5829  000C32  0100               	movlb	0	; () banked
  5830  000C34  25BB               	addwf	?___awmod& (0+255),w,b
  5831  000C36  0100               	movlb	0	; () banked
  5832  000C38  6FC1               	movwf	___wmul@multiplier& (0+255),b
  5833  000C3A  0E00               	movlw	0
  5834  000C3C  0100               	movlb	0	; () banked
  5835  000C3E  21BC               	addwfc	(?___awmod+1)& (0+255),w,b
  5836  000C40  0100               	movlb	0	; () banked
  5837  000C42  6FC2               	movwf	(___wmul@multiplier+1)& (0+255),b
  5838  000C44  0E00               	movlw	0
  5839  000C46  0100               	movlb	0	; () banked
  5840  000C48  6FC4               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5841  000C4A  0E03               	movlw	3
  5842  000C4C  6FC3               	movwf	___wmul@multiplicand& (0+255),b
  5843  000C4E  ECD6  F00A         	call	___wmul	;wreg free
  5844  000C52  0100               	movlb	0	; () banked
  5845  000C54  51C1               	movf	?___wmul& (0+255),w,b
  5846  000C56  0100               	movlb	0	; () banked
  5847  000C58  25C7               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  5848  000C5A  6ED9               	movwf	fsr2l,c
  5849  000C5C  0100               	movlb	0	; () banked
  5850  000C5E  51C2               	movf	(?___wmul+1)& (0+255),w,b
  5851  000C60  0100               	movlb	0	; () banked
  5852  000C62  21C8               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  5853  000C64  6EDA               	movwf	fsr2h,c
  5854  000C66  C0C9  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  5855  000C6A  C0CA  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  5856  000C6E  C0CB  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  5857                           
  5858                           ; BSR set to: 0
  5859                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  5860  000C72  0100               	movlb	0	; () banked
  5861  000C74  EE20 F002          	lfsr	2,2
  5862  000C78  51D0               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  5863  000C7A  26D9               	addwf	fsr2l,f,c
  5864  000C7C  51D1               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  5865  000C7E  22DA               	addwfc	fsr2h,f,c
  5866  000C80  2ADF               	incf	indf2,f,c
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  5870  000C82  C0CF  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  5871                           
  5872                           ; BSR set to: 0
  5873                           ;ES_Queue.c: 101: return(1);
  5874  000C86  0E01               	movlw	1
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;ES_Queue.c: 102: }else
  5878                           
  5879                           ; BSR set to: 0
  5880  000C88  0012               	return	
  5881  000C8A                     l2064:
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;ES_Queue.c: 103: return(0);
  5885  000C8A  0E00               	movlw	0
  5886                           
  5887                           ; BSR set to: 0
  5888  000C8C  0012               	return	
  5889  000C8E                     __end_of_ES_EnQueueFIFO:
  5890                           	opt stack 0
  5891                           tosu	equ	0xFFF
  5892                           tosh	equ	0xFFE
  5893                           tosl	equ	0xFFD
  5894                           pclath	equ	0xFFA
  5895                           tblptru	equ	0xFF8
  5896                           tblptrh	equ	0xFF7
  5897                           tblptrl	equ	0xFF6
  5898                           tablat	equ	0xFF5
  5899                           prodh	equ	0xFF4
  5900                           prodl	equ	0xFF3
  5901                           intcon	equ	0xFF2
  5902                           postinc0	equ	0xFEE
  5903                           wreg	equ	0xFE8
  5904                           indf1	equ	0xFE7
  5905                           postinc1	equ	0xFE6
  5906                           postdec1	equ	0xFE5
  5907                           fsr1h	equ	0xFE2
  5908                           fsr1l	equ	0xFE1
  5909                           indf2	equ	0xFDF
  5910                           postinc2	equ	0xFDE
  5911                           postdec2	equ	0xFDD
  5912                           fsr2h	equ	0xFDA
  5913                           fsr2l	equ	0xFD9
  5914                           status	equ	0xFD8
  5915                           
  5916 ;; *************** function ___wmul *****************
  5917 ;; Defined at:
  5918 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5919 ;; Parameters:    Size  Location     Type
  5920 ;;  multiplier      2    6[BANK0 ] unsigned int 
  5921 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;  product         2   10[BANK0 ] unsigned int 
  5924 ;; Return value:  Size  Location     Type
  5925 ;;                  2    6[BANK0 ] unsigned int 
  5926 ;; Registers used:
  5927 ;;		wreg, status,2, status,0, prodl, prodh
  5928 ;; Tracked objects:
  5929 ;;		On entry : 0/0
  5930 ;;		On exit  : 0/0
  5931 ;;		Unchanged: 0/0
  5932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5933 ;;      Params:         0       4       0       0
  5934 ;;      Locals:         0       2       0       0
  5935 ;;      Temps:          0       0       0       0
  5936 ;;      Totals:         0       6       0       0
  5937 ;;Total ram usage:        6 bytes
  5938 ;; Hardware stack levels used:    1
  5939 ;; Hardware stack levels required when called:    6
  5940 ;; This function calls:
  5941 ;;		Nothing
  5942 ;; This function is called by:
  5943 ;;		_ES_EnQueueFIFO
  5944 ;;		_ES_DeQueue
  5945 ;;		i2_ES_EnQueueFIFO
  5946 ;;		_ES_EnQueueLIFO
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           	psect	text37
  5951  0015AC                     __ptext37:
  5952                           	opt stack 0
  5953  0015AC                     ___wmul:
  5954                           	opt stack 18
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;incstack = 0
  5958  0015AC  0100               	movlb	0	; () banked
  5959  0015AE  51C1               	movf	___wmul@multiplier& (0+255),w,b
  5960  0015B0  0100               	movlb	0	; () banked
  5961  0015B2  03C3               	mulwf	___wmul@multiplicand& (0+255),b
  5962  0015B4  CFF3 F0C5          	movff	prodl,___wmul@product
  5963  0015B8  CFF4 F0C6          	movff	prodh,___wmul@product+1
  5964  0015BC  0100               	movlb	0	; () banked
  5965  0015BE  51C1               	movf	___wmul@multiplier& (0+255),w,b
  5966  0015C0  0100               	movlb	0	; () banked
  5967  0015C2  03C4               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5968  0015C4  50F3               	movf	prodl,w,c
  5969  0015C6  0100               	movlb	0	; () banked
  5970  0015C8  27C6               	addwf	(___wmul@product+1)& (0+255),f,b
  5971  0015CA  0100               	movlb	0	; () banked
  5972  0015CC  51C2               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5973  0015CE  0100               	movlb	0	; () banked
  5974  0015D0  03C3               	mulwf	___wmul@multiplicand& (0+255),b
  5975  0015D2  50F3               	movf	prodl,w,c
  5976  0015D4  0100               	movlb	0	; () banked
  5977  0015D6  27C6               	addwf	(___wmul@product+1)& (0+255),f,b
  5978                           
  5979                           ; BSR set to: 0
  5980  0015D8  C0C5  F0C1         	movff	___wmul@product,?___wmul
  5981  0015DC  C0C6  F0C2         	movff	___wmul@product+1,?___wmul+1
  5982  0015E0  0012               	return	
  5983  0015E2                     __end_of___wmul:
  5984                           	opt stack 0
  5985                           tosu	equ	0xFFF
  5986                           tosh	equ	0xFFE
  5987                           tosl	equ	0xFFD
  5988                           pclath	equ	0xFFA
  5989                           tblptru	equ	0xFF8
  5990                           tblptrh	equ	0xFF7
  5991                           tblptrl	equ	0xFF6
  5992                           tablat	equ	0xFF5
  5993                           prodh	equ	0xFF4
  5994                           prodl	equ	0xFF3
  5995                           intcon	equ	0xFF2
  5996                           postinc0	equ	0xFEE
  5997                           wreg	equ	0xFE8
  5998                           indf1	equ	0xFE7
  5999                           postinc1	equ	0xFE6
  6000                           postdec1	equ	0xFE5
  6001                           fsr1h	equ	0xFE2
  6002                           fsr1l	equ	0xFE1
  6003                           indf2	equ	0xFDF
  6004                           postinc2	equ	0xFDE
  6005                           postdec2	equ	0xFDD
  6006                           fsr2h	equ	0xFDA
  6007                           fsr2l	equ	0xFD9
  6008                           status	equ	0xFD8
  6009                           
  6010 ;; *************** function ___awmod *****************
  6011 ;; Defined at:
  6012 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;  dividend        2    0[BANK0 ] int 
  6015 ;;  divisor         2    2[BANK0 ] int 
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;  sign            1    5[BANK0 ] unsigned char 
  6018 ;;  counter         1    4[BANK0 ] unsigned char 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  2    0[BANK0 ] int 
  6021 ;; Registers used:
  6022 ;;		wreg, status,2, status,0
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6028 ;;      Params:         0       4       0       0
  6029 ;;      Locals:         0       2       0       0
  6030 ;;      Temps:          0       0       0       0
  6031 ;;      Totals:         0       6       0       0
  6032 ;;Total ram usage:        6 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    6
  6035 ;; This function calls:
  6036 ;;		Nothing
  6037 ;; This function is called by:
  6038 ;;		_ES_EnQueueFIFO
  6039 ;;		_UpdatePattern
  6040 ;;		i2_ES_EnQueueFIFO
  6041 ;; This function uses a non-reentrant model
  6042 ;;
  6043                           
  6044                           	psect	text38
  6045  000F50                     __ptext38:
  6046                           	opt stack 0
  6047  000F50                     ___awmod:
  6048                           	opt stack 18
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;incstack = 0
  6052  000F50  0E00               	movlw	0
  6053  000F52  0100               	movlb	0	; () banked
  6054  000F54  6FC0               	movwf	___awmod@sign& (0+255),b
  6055                           
  6056                           ; BSR set to: 0
  6057  000F56  0100               	movlb	0	; () banked
  6058  000F58  AFBC               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6059  000F5A  D008               	goto	l2020
  6060                           
  6061                           ; BSR set to: 0
  6062  000F5C  0100               	movlb	0	; () banked
  6063  000F5E  6DBB               	negf	___awmod@dividend& (0+255),b
  6064  000F60  1FBC               	comf	(___awmod@dividend+1)& (0+255),f,b
  6065  000F62  B0D8               	btfsc	status,0,c
  6066  000F64  2BBC               	incf	(___awmod@dividend+1)& (0+255),f,b
  6067                           
  6068                           ; BSR set to: 0
  6069  000F66  0E01               	movlw	1
  6070  000F68  0100               	movlb	0	; () banked
  6071  000F6A  6FC0               	movwf	___awmod@sign& (0+255),b
  6072  000F6C                     l2020:
  6073                           
  6074                           ; BSR set to: 0
  6075  000F6C  0100               	movlb	0	; () banked
  6076  000F6E  AFBE               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6077  000F70  D005               	goto	l2024
  6078                           
  6079                           ; BSR set to: 0
  6080  000F72  0100               	movlb	0	; () banked
  6081  000F74  6DBD               	negf	___awmod@divisor& (0+255),b
  6082  000F76  1FBE               	comf	(___awmod@divisor+1)& (0+255),f,b
  6083  000F78  B0D8               	btfsc	status,0,c
  6084  000F7A  2BBE               	incf	(___awmod@divisor+1)& (0+255),f,b
  6085  000F7C                     l2024:
  6086                           
  6087                           ; BSR set to: 0
  6088  000F7C  0100               	movlb	0	; () banked
  6089  000F7E  51BD               	movf	___awmod@divisor& (0+255),w,b
  6090  000F80  0100               	movlb	0	; () banked
  6091  000F82  11BE               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6092  000F84  B4D8               	btfsc	status,2,c
  6093  000F86  D026               	goto	l2040
  6094                           
  6095                           ; BSR set to: 0
  6096  000F88  0E01               	movlw	1
  6097  000F8A  0100               	movlb	0	; () banked
  6098  000F8C  6FBF               	movwf	___awmod@counter& (0+255),b
  6099  000F8E  D006               	goto	l2030
  6100  000F90                     l2028:
  6101                           
  6102                           ; BSR set to: 0
  6103  000F90  0100               	movlb	0	; () banked
  6104  000F92  90D8               	bcf	status,0,c
  6105  000F94  37BD               	rlcf	___awmod@divisor& (0+255),f,b
  6106  000F96  37BE               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6107  000F98  0100               	movlb	0	; () banked
  6108  000F9A  2BBF               	incf	___awmod@counter& (0+255),f,b
  6109  000F9C                     l2030:
  6110                           
  6111                           ; BSR set to: 0
  6112  000F9C  0100               	movlb	0	; () banked
  6113  000F9E  AFBE               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6114  000FA0  D7F7               	goto	l2028
  6115  000FA2                     l2032:
  6116                           
  6117                           ; BSR set to: 0
  6118  000FA2  0100               	movlb	0	; () banked
  6119  000FA4  51BD               	movf	___awmod@divisor& (0+255),w,b
  6120  000FA6  0100               	movlb	0	; () banked
  6121  000FA8  5DBB               	subwf	___awmod@dividend& (0+255),w,b
  6122  000FAA  0100               	movlb	0	; () banked
  6123  000FAC  51BE               	movf	(___awmod@divisor+1)& (0+255),w,b
  6124  000FAE  0100               	movlb	0	; () banked
  6125  000FB0  59BC               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6126  000FB2  A0D8               	btfss	status,0,c
  6127  000FB4  D008               	goto	l2036
  6128                           
  6129                           ; BSR set to: 0
  6130  000FB6  0100               	movlb	0	; () banked
  6131  000FB8  51BD               	movf	___awmod@divisor& (0+255),w,b
  6132  000FBA  0100               	movlb	0	; () banked
  6133  000FBC  5FBB               	subwf	___awmod@dividend& (0+255),f,b
  6134  000FBE  0100               	movlb	0	; () banked
  6135  000FC0  51BE               	movf	(___awmod@divisor+1)& (0+255),w,b
  6136  000FC2  0100               	movlb	0	; () banked
  6137  000FC4  5BBC               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6138  000FC6                     l2036:
  6139                           
  6140                           ; BSR set to: 0
  6141  000FC6  0100               	movlb	0	; () banked
  6142  000FC8  90D8               	bcf	status,0,c
  6143  000FCA  33BE               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6144  000FCC  33BD               	rrcf	___awmod@divisor& (0+255),f,b
  6145                           
  6146                           ; BSR set to: 0
  6147  000FCE  0100               	movlb	0	; () banked
  6148  000FD0  2FBF               	decfsz	___awmod@counter& (0+255),f,b
  6149  000FD2  D7E7               	goto	l2032
  6150  000FD4                     l2040:
  6151                           
  6152                           ; BSR set to: 0
  6153  000FD4  0100               	movlb	0	; () banked
  6154  000FD6  51C0               	movf	___awmod@sign& (0+255),w,b
  6155  000FD8  0100               	movlb	0	; () banked
  6156  000FDA  B4D8               	btfsc	status,2,c
  6157  000FDC  D005               	goto	l2044
  6158                           
  6159                           ; BSR set to: 0
  6160  000FDE  0100               	movlb	0	; () banked
  6161  000FE0  6DBB               	negf	___awmod@dividend& (0+255),b
  6162  000FE2  1FBC               	comf	(___awmod@dividend+1)& (0+255),f,b
  6163  000FE4  B0D8               	btfsc	status,0,c
  6164  000FE6  2BBC               	incf	(___awmod@dividend+1)& (0+255),f,b
  6165  000FE8                     l2044:
  6166                           
  6167                           ; BSR set to: 0
  6168  000FE8  C0BB  F0BB         	movff	___awmod@dividend,?___awmod
  6169  000FEC  C0BC  F0BC         	movff	___awmod@dividend+1,?___awmod+1
  6170  000FF0  0012               	return	
  6171  000FF2                     __end_of___awmod:
  6172                           	opt stack 0
  6173                           tosu	equ	0xFFF
  6174                           tosh	equ	0xFFE
  6175                           tosl	equ	0xFFD
  6176                           pclath	equ	0xFFA
  6177                           tblptru	equ	0xFF8
  6178                           tblptrh	equ	0xFF7
  6179                           tblptrl	equ	0xFF6
  6180                           tablat	equ	0xFF5
  6181                           prodh	equ	0xFF4
  6182                           prodl	equ	0xFF3
  6183                           intcon	equ	0xFF2
  6184                           postinc0	equ	0xFEE
  6185                           wreg	equ	0xFE8
  6186                           indf1	equ	0xFE7
  6187                           postinc1	equ	0xFE6
  6188                           postdec1	equ	0xFE5
  6189                           fsr1h	equ	0xFE2
  6190                           fsr1l	equ	0xFE1
  6191                           indf2	equ	0xFDF
  6192                           postinc2	equ	0xFDE
  6193                           postdec2	equ	0xFDD
  6194                           fsr2h	equ	0xFDA
  6195                           fsr2l	equ	0xFD9
  6196                           status	equ	0xFD8
  6197                           
  6198 ;; *************** function _DotStar_Init *****************
  6199 ;; Defined at:
  6200 ;;		line 41 in file "Pattern_DotStarLED.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;  numPixels       1    wreg     unsigned char 
  6203 ;; Auto vars:     Size  Location     Type
  6204 ;;  numPixels       1    2[BANK0 ] unsigned char 
  6205 ;;  i               1    3[BANK0 ] unsigned char 
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  1    wreg      void 
  6208 ;; Registers used:
  6209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6215 ;;      Params:         0       0       0       0
  6216 ;;      Locals:         0       2       0       0
  6217 ;;      Temps:          0       2       0       0
  6218 ;;      Totals:         0       4       0       0
  6219 ;;Total ram usage:        4 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:    6
  6222 ;; This function calls:
  6223 ;;		Nothing
  6224 ;; This function is called by:
  6225 ;;		_InitPatternControlService
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229                           	psect	text39
  6230  0009D0                     __ptext39:
  6231                           	opt stack 0
  6232  0009D0                     _DotStar_Init:
  6233                           	opt stack 22
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;incstack = 0
  6237                           ;DotStar_Init@numPixels stored from wreg
  6238  0009D0  0100               	movlb	0	; () banked
  6239  0009D2  6FBD               	movwf	DotStar_Init@numPixels& (0+255),b
  6240                           
  6241                           ;Pattern_DotStarLED.c: 50: Length = numPixels;
  6242  0009D4  C0BD  F09B         	movff	DotStar_Init@numPixels,_Length
  6243                           
  6244                           ;Pattern_DotStarLED.c: 52: PixelFrames[0] = 0x0;
  6245  0009D8  0E00               	movlw	0
  6246  0009DA  0101               	movlb	1	; () banked
  6247  0009DC  6F00               	movwf	_PixelFrames& (0+255),b
  6248  0009DE  0E00               	movlw	0
  6249  0009E0  6F01               	movwf	(_PixelFrames+1)& (0+255),b
  6250  0009E2  0E00               	movlw	0
  6251  0009E4  6F02               	movwf	(_PixelFrames+2)& (0+255),b
  6252  0009E6  0E00               	movlw	0
  6253  0009E8  6F03               	movwf	(_PixelFrames+3)& (0+255),b
  6254                           
  6255                           ; BSR set to: 1
  6256                           ;Pattern_DotStarLED.c: 53: PixelFrames[Length+1] = 0xffffffff;
  6257  0009EA  0100               	movlb	0	; () banked
  6258  0009EC  519B               	movf	_Length& (0+255),w,b
  6259  0009EE  0100               	movlb	0	; () banked
  6260  0009F0  6FBB               	movwf	??_DotStar_Init& (0+255),b
  6261  0009F2  6BBC               	clrf	(??_DotStar_Init+1)& (0+255),b
  6262  0009F4  0100               	movlb	0	; () banked
  6263  0009F6  90D8               	bcf	status,0,c
  6264  0009F8  37BB               	rlcf	??_DotStar_Init& (0+255),f,b
  6265  0009FA  37BC               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6266  0009FC  0100               	movlb	0	; () banked
  6267  0009FE  90D8               	bcf	status,0,c
  6268  000A00  37BB               	rlcf	??_DotStar_Init& (0+255),f,b
  6269  000A02  37BC               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6270  000A04  0E04               	movlw	4
  6271  000A06  0100               	movlb	0	; () banked
  6272  000A08  27BB               	addwf	??_DotStar_Init& (0+255),f,b
  6273  000A0A  0E00               	movlw	0
  6274  000A0C  23BC               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  6275  000A0E  0E00               	movlw	low _PixelFrames
  6276  000A10  0100               	movlb	0	; () banked
  6277  000A12  25BB               	addwf	??_DotStar_Init& (0+255),w,b
  6278  000A14  6ED9               	movwf	fsr2l,c
  6279  000A16  0E01               	movlw	high _PixelFrames
  6280  000A18  0100               	movlb	0	; () banked
  6281  000A1A  21BC               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  6282  000A1C  6EDA               	movwf	fsr2h,c
  6283  000A1E  0EFF               	movlw	255
  6284  000A20  6EDE               	movwf	postinc2,c
  6285  000A22  0EFF               	movlw	255
  6286  000A24  6EDE               	movwf	postinc2,c
  6287  000A26  0EFF               	movlw	255
  6288  000A28  6EDE               	movwf	postinc2,c
  6289  000A2A  0EFF               	movlw	255
  6290  000A2C  6EDD               	movwf	postdec2,c
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;Pattern_DotStarLED.c: 55: OffFrames[0] = 0x0;
  6294  000A2E  0E00               	movlw	0
  6295  000A30  0102               	movlb	2	; () banked
  6296  000A32  6F00               	movwf	_OffFrames& (0+255),b
  6297  000A34  0E00               	movlw	0
  6298  000A36  6F01               	movwf	(_OffFrames+1)& (0+255),b
  6299  000A38  0E00               	movlw	0
  6300  000A3A  6F02               	movwf	(_OffFrames+2)& (0+255),b
  6301  000A3C  0E00               	movlw	0
  6302  000A3E  6F03               	movwf	(_OffFrames+3)& (0+255),b
  6303                           
  6304                           ;Pattern_DotStarLED.c: 56: OffFrames[Length+1] = 0xffffffff;
  6305  000A40  0100               	movlb	0	; () banked
  6306  000A42  519B               	movf	_Length& (0+255),w,b
  6307  000A44  0100               	movlb	0	; () banked
  6308  000A46  6FBB               	movwf	??_DotStar_Init& (0+255),b
  6309  000A48  6BBC               	clrf	(??_DotStar_Init+1)& (0+255),b
  6310  000A4A  0100               	movlb	0	; () banked
  6311  000A4C  90D8               	bcf	status,0,c
  6312  000A4E  37BB               	rlcf	??_DotStar_Init& (0+255),f,b
  6313  000A50  37BC               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6314  000A52  0100               	movlb	0	; () banked
  6315  000A54  90D8               	bcf	status,0,c
  6316  000A56  37BB               	rlcf	??_DotStar_Init& (0+255),f,b
  6317  000A58  37BC               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6318  000A5A  0E04               	movlw	4
  6319  000A5C  0100               	movlb	0	; () banked
  6320  000A5E  27BB               	addwf	??_DotStar_Init& (0+255),f,b
  6321  000A60  0E00               	movlw	0
  6322  000A62  23BC               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  6323  000A64  0E00               	movlw	low _OffFrames
  6324  000A66  0100               	movlb	0	; () banked
  6325  000A68  25BB               	addwf	??_DotStar_Init& (0+255),w,b
  6326  000A6A  6ED9               	movwf	fsr2l,c
  6327  000A6C  0E02               	movlw	high _OffFrames
  6328  000A6E  0100               	movlb	0	; () banked
  6329  000A70  21BC               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  6330  000A72  6EDA               	movwf	fsr2h,c
  6331  000A74  0EFF               	movlw	255
  6332  000A76  6EDE               	movwf	postinc2,c
  6333  000A78  0EFF               	movlw	255
  6334  000A7A  6EDE               	movwf	postinc2,c
  6335  000A7C  0EFF               	movlw	255
  6336  000A7E  6EDE               	movwf	postinc2,c
  6337  000A80  0EFF               	movlw	255
  6338  000A82  6EDD               	movwf	postdec2,c
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;Pattern_DotStarLED.c: 57: for(uint8_t i=1;i<=Length;i++){
  6342  000A84  0E01               	movlw	1
  6343  000A86  0100               	movlb	0	; () banked
  6344  000A88  6FBE               	movwf	DotStar_Init@i& (0+255),b
  6345  000A8A  D013               	goto	l2318
  6346  000A8C                     l2314:
  6347                           
  6348                           ; BSR set to: 0
  6349                           ;Pattern_DotStarLED.c: 58: OffFrames[i] = 0xe0000000;
  6350  000A8C  0100               	movlb	0	; () banked
  6351  000A8E  51BE               	movf	DotStar_Init@i& (0+255),w,b
  6352  000A90  0D04               	mullw	4
  6353  000A92  0E00               	movlw	low _OffFrames
  6354  000A94  24F3               	addwf	prodl,w,c
  6355  000A96  6ED9               	movwf	fsr2l,c
  6356  000A98  0E02               	movlw	high _OffFrames
  6357  000A9A  20F4               	addwfc	prodh,w,c
  6358  000A9C  6EDA               	movwf	fsr2h,c
  6359  000A9E  0E00               	movlw	0
  6360  000AA0  6EDE               	movwf	postinc2,c
  6361  000AA2  0E00               	movlw	0
  6362  000AA4  6EDE               	movwf	postinc2,c
  6363  000AA6  0E00               	movlw	0
  6364  000AA8  6EDE               	movwf	postinc2,c
  6365  000AAA  0EE0               	movlw	224
  6366  000AAC  6EDD               	movwf	postdec2,c
  6367                           
  6368                           ; BSR set to: 0
  6369  000AAE  0100               	movlb	0	; () banked
  6370  000AB0  2BBE               	incf	DotStar_Init@i& (0+255),f,b
  6371  000AB2                     l2318:
  6372                           
  6373                           ; BSR set to: 0
  6374  000AB2  0100               	movlb	0	; () banked
  6375  000AB4  51BE               	movf	DotStar_Init@i& (0+255),w,b
  6376  000AB6  0100               	movlb	0	; () banked
  6377  000AB8  5D9B               	subwf	_Length& (0+255),w,b
  6378  000ABA  A0D8               	btfss	status,0,c
  6379  000ABC  0012               	return	
  6380  000ABE  D7E6               	goto	l2314
  6381  000AC0                     __end_of_DotStar_Init:
  6382                           	opt stack 0
  6383                           tosu	equ	0xFFF
  6384                           tosh	equ	0xFFE
  6385                           tosl	equ	0xFFD
  6386                           pclath	equ	0xFFA
  6387                           tblptru	equ	0xFF8
  6388                           tblptrh	equ	0xFF7
  6389                           tblptrl	equ	0xFF6
  6390                           tablat	equ	0xFF5
  6391                           prodh	equ	0xFF4
  6392                           prodl	equ	0xFF3
  6393                           intcon	equ	0xFF2
  6394                           postinc0	equ	0xFEE
  6395                           wreg	equ	0xFE8
  6396                           indf1	equ	0xFE7
  6397                           postinc1	equ	0xFE6
  6398                           postdec1	equ	0xFE5
  6399                           fsr1h	equ	0xFE2
  6400                           fsr1l	equ	0xFE1
  6401                           indf2	equ	0xFDF
  6402                           postinc2	equ	0xFDE
  6403                           postdec2	equ	0xFDD
  6404                           fsr2h	equ	0xFDA
  6405                           fsr2l	equ	0xFD9
  6406                           status	equ	0xFD8
  6407                           
  6408 ;; *************** function _ES_Timer_Init *****************
  6409 ;; Defined at:
  6410 ;;		line 130 in file "ES_Timers.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;  Rate            2    2[BANK0 ] enum E15424
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;		None
  6415 ;; Return value:  Size  Location     Type
  6416 ;;                  1    wreg      void 
  6417 ;; Registers used:
  6418 ;;		wreg, status,2, cstack
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6424 ;;      Params:         0       2       0       0
  6425 ;;      Locals:         0       0       0       0
  6426 ;;      Temps:          0       0       0       0
  6427 ;;      Totals:         0       2       0       0
  6428 ;;Total ram usage:        2 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    7
  6431 ;; This function calls:
  6432 ;;		__HW_Timer_Init
  6433 ;; This function is called by:
  6434 ;;		_ES_Initialize
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           	psect	text40
  6439  0017DA                     __ptext40:
  6440                           	opt stack 0
  6441  0017DA                     _ES_Timer_Init:
  6442                           	opt stack 22
  6443                           
  6444                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;incstack = 0
  6448  0017DA  C0BD  F0BB         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  6449  0017DE  C0BE  F0BC         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  6450  0017E2  EC9F  F00B         	call	__HW_Timer_Init	;wreg free
  6451  0017E6  0012               	return		;funcret
  6452  0017E8                     __end_of_ES_Timer_Init:
  6453                           	opt stack 0
  6454                           tosu	equ	0xFFF
  6455                           tosh	equ	0xFFE
  6456                           tosl	equ	0xFFD
  6457                           pclath	equ	0xFFA
  6458                           tblptru	equ	0xFF8
  6459                           tblptrh	equ	0xFF7
  6460                           tblptrl	equ	0xFF6
  6461                           tablat	equ	0xFF5
  6462                           prodh	equ	0xFF4
  6463                           prodl	equ	0xFF3
  6464                           intcon	equ	0xFF2
  6465                           postinc0	equ	0xFEE
  6466                           wreg	equ	0xFE8
  6467                           indf1	equ	0xFE7
  6468                           postinc1	equ	0xFE6
  6469                           postdec1	equ	0xFE5
  6470                           fsr1h	equ	0xFE2
  6471                           fsr1l	equ	0xFE1
  6472                           indf2	equ	0xFDF
  6473                           postinc2	equ	0xFDE
  6474                           postdec2	equ	0xFDD
  6475                           fsr2h	equ	0xFDA
  6476                           fsr2l	equ	0xFD9
  6477                           status	equ	0xFD8
  6478                           
  6479 ;; *************** function __HW_Timer_Init *****************
  6480 ;; Defined at:
  6481 ;;		line 71 in file "ES_Port.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;  Rate            2    0[BANK0 ] enum E15412
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;		None
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  1    wreg      void 
  6488 ;; Registers used:
  6489 ;;		wreg, status,2
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6495 ;;      Params:         0       2       0       0
  6496 ;;      Locals:         0       0       0       0
  6497 ;;      Temps:          0       0       0       0
  6498 ;;      Totals:         0       2       0       0
  6499 ;;Total ram usage:        2 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    6
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_ES_Timer_Init
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           	psect	text41
  6510  00173E                     __ptext41:
  6511                           	opt stack 0
  6512  00173E                     __HW_Timer_Init:
  6513                           	opt stack 22
  6514                           
  6515                           ;ES_Port.c: 79: PIE1 = 0b00000100;
  6516                           
  6517                           ;incstack = 0
  6518  00173E  0E04               	movlw	4
  6519  001740  6E9D               	movwf	3997,c	;volatile
  6520                           
  6521                           ;ES_Port.c: 84: INTCON = 0b01000000;
  6522  001742  0E40               	movlw	64
  6523  001744  6EF2               	movwf	intcon,c	;volatile
  6524                           
  6525                           ;ES_Port.c: 90: CCP1CON = 0b00001010;
  6526  001746  0E0A               	movlw	10
  6527  001748  6EBD               	movwf	4029,c	;volatile
  6528                           
  6529                           ;ES_Port.c: 94: CCPR1L = 0b00000001;
  6530  00174A  0E01               	movlw	1
  6531  00174C  6EBE               	movwf	4030,c	;volatile
  6532                           
  6533                           ;ES_Port.c: 98: CCPR1H = 0b00000000;
  6534  00174E  0E00               	movlw	0
  6535  001750  6EBF               	movwf	4031,c	;volatile
  6536                           
  6537                           ;ES_Port.c: 106: T1CON = 0b00100001;
  6538  001752  0E21               	movlw	33
  6539  001754  6ECD               	movwf	4045,c	;volatile
  6540                           
  6541                           ;ES_Port.c: 108: {GIE = 1;};
  6542  001756  8EF2               	bsf	intcon,7,c	;volatile
  6543  001758  0012               	return		;funcret
  6544  00175A                     __end_of__HW_Timer_Init:
  6545                           	opt stack 0
  6546                           tosu	equ	0xFFF
  6547                           tosh	equ	0xFFE
  6548                           tosl	equ	0xFFD
  6549                           pclath	equ	0xFFA
  6550                           tblptru	equ	0xFF8
  6551                           tblptrh	equ	0xFF7
  6552                           tblptrl	equ	0xFF6
  6553                           tablat	equ	0xFF5
  6554                           prodh	equ	0xFF4
  6555                           prodl	equ	0xFF3
  6556                           intcon	equ	0xFF2
  6557                           postinc0	equ	0xFEE
  6558                           wreg	equ	0xFE8
  6559                           indf1	equ	0xFE7
  6560                           postinc1	equ	0xFE6
  6561                           postdec1	equ	0xFE5
  6562                           fsr1h	equ	0xFE2
  6563                           fsr1l	equ	0xFE1
  6564                           indf2	equ	0xFDF
  6565                           postinc2	equ	0xFDE
  6566                           postdec2	equ	0xFDD
  6567                           fsr2h	equ	0xFDA
  6568                           fsr2l	equ	0xFD9
  6569                           status	equ	0xFD8
  6570                           
  6571 ;; *************** function _ES_InitQueue *****************
  6572 ;; Defined at:
  6573 ;;		line 58 in file "ES_Queue.c"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  6576 ;;		 -> Queue1(12), Queue0(12), 
  6577 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  6578 ;; Auto vars:     Size  Location     Type
  6579 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  6580 ;;		 -> Queue1(12), Queue0(12), 
  6581 ;; Return value:  Size  Location     Type
  6582 ;;                  1    wreg      unsigned char 
  6583 ;; Registers used:
  6584 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6590 ;;      Params:         0       3       0       0
  6591 ;;      Locals:         0       2       0       0
  6592 ;;      Temps:          0       0       0       0
  6593 ;;      Totals:         0       5       0       0
  6594 ;;Total ram usage:        5 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; Hardware stack levels required when called:    6
  6597 ;; This function calls:
  6598 ;;		Nothing
  6599 ;; This function is called by:
  6600 ;;		_ES_Initialize
  6601 ;; This function uses a non-reentrant model
  6602 ;;
  6603                           
  6604                           	psect	text42
  6605  001536                     __ptext42:
  6606                           	opt stack 0
  6607  001536                     _ES_InitQueue:
  6608                           	opt stack 23
  6609                           
  6610                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  6611                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  6612                           
  6613                           ;incstack = 0
  6614  001536  C0BB  F0BE         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  6615  00153A  C0BC  F0BF         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  6616                           
  6617                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  6618  00153E  0100               	movlb	0	; () banked
  6619  001540  05BD               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  6620  001542  C0BE  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  6621  001546  C0BF  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  6622  00154A  6EDF               	movwf	indf2,c
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  6626  00154C  0100               	movlb	0	; () banked
  6627  00154E  EE20 F001          	lfsr	2,1
  6628  001552  51BE               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  6629  001554  26D9               	addwf	fsr2l,f,c
  6630  001556  51BF               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  6631  001558  22DA               	addwfc	fsr2h,f,c
  6632  00155A  0E00               	movlw	0
  6633  00155C  6EDF               	movwf	indf2,c
  6634                           
  6635                           ; BSR set to: 0
  6636                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  6637  00155E  0100               	movlb	0	; () banked
  6638  001560  EE20 F002          	lfsr	2,2
  6639  001564  51BE               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  6640  001566  26D9               	addwf	fsr2l,f,c
  6641  001568  51BF               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  6642  00156A  22DA               	addwfc	fsr2h,f,c
  6643  00156C  0E00               	movlw	0
  6644  00156E  6EDF               	movwf	indf2,c
  6645  001570  0012               	return	
  6646  001572                     __end_of_ES_InitQueue:
  6647                           	opt stack 0
  6648                           tosu	equ	0xFFF
  6649                           tosh	equ	0xFFE
  6650                           tosl	equ	0xFFD
  6651                           pclath	equ	0xFFA
  6652                           tblptru	equ	0xFF8
  6653                           tblptrh	equ	0xFF7
  6654                           tblptrl	equ	0xFF6
  6655                           tablat	equ	0xFF5
  6656                           prodh	equ	0xFF4
  6657                           prodl	equ	0xFF3
  6658                           intcon	equ	0xFF2
  6659                           postinc0	equ	0xFEE
  6660                           wreg	equ	0xFE8
  6661                           indf1	equ	0xFE7
  6662                           postinc1	equ	0xFE6
  6663                           postdec1	equ	0xFE5
  6664                           fsr1h	equ	0xFE2
  6665                           fsr1l	equ	0xFE1
  6666                           indf2	equ	0xFDF
  6667                           postinc2	equ	0xFDE
  6668                           postdec2	equ	0xFDD
  6669                           fsr2h	equ	0xFDA
  6670                           fsr2l	equ	0xFD9
  6671                           status	equ	0xFD8
  6672                           
  6673 ;; *************** function _ISR *****************
  6674 ;; Defined at:
  6675 ;;		line 111 in file "ES_Port.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;		None
  6678 ;; Auto vars:     Size  Location     Type
  6679 ;;		None
  6680 ;; Return value:  Size  Location     Type
  6681 ;;                  1    wreg      void 
  6682 ;; Registers used:
  6683 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6684 ;; Tracked objects:
  6685 ;;		On entry : 0/0
  6686 ;;		On exit  : 0/0
  6687 ;;		Unchanged: 0/0
  6688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6689 ;;      Params:         0       0       0       0
  6690 ;;      Locals:         0       0       0       0
  6691 ;;      Temps:         16       0       0       0
  6692 ;;      Totals:        16       0       0       0
  6693 ;;Total ram usage:       16 bytes
  6694 ;; Hardware stack levels used:    1
  6695 ;; Hardware stack levels required when called:    5
  6696 ;; This function calls:
  6697 ;;		_SPI32_EOTResponse
  6698 ;; This function is called by:
  6699 ;;		Interrupt level 2
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           	psect	intcode
  6704  000008                     __pintcode:
  6705                           	opt stack 0
  6706  000008                     _ISR:
  6707                           	opt stack 16
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;incstack = 0
  6711  000008  823E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6712  00000A  CFFA F026          	movff	pclath,??_ISR+2
  6713  00000E  CFFB F027          	movff	pclatu,??_ISR+3
  6714  000012  ED03  F007         	call	int_func,f	;refresh shadow registers
  6715                           tosu	equ	0xFFF
  6716                           tosh	equ	0xFFE
  6717                           tosl	equ	0xFFD
  6718                           pclatu	equ	0xFFB
  6719                           pclath	equ	0xFFA
  6720                           tblptru	equ	0xFF8
  6721                           tblptrh	equ	0xFF7
  6722                           tblptrl	equ	0xFF6
  6723                           tablat	equ	0xFF5
  6724                           prodh	equ	0xFF4
  6725                           prodl	equ	0xFF3
  6726                           intcon	equ	0xFF2
  6727                           postinc0	equ	0xFEE
  6728                           wreg	equ	0xFE8
  6729                           indf1	equ	0xFE7
  6730                           postinc1	equ	0xFE6
  6731                           postdec1	equ	0xFE5
  6732                           fsr1h	equ	0xFE2
  6733                           fsr1l	equ	0xFE1
  6734                           indf2	equ	0xFDF
  6735                           postinc2	equ	0xFDE
  6736                           postdec2	equ	0xFDD
  6737                           fsr2h	equ	0xFDA
  6738                           fsr2l	equ	0xFD9
  6739                           status	equ	0xFD8
  6740                           
  6741                           	psect	intcode_body
  6742  000E06                     __pintcode_body:
  6743                           	opt stack 16
  6744  000E06                     int_func:
  6745                           	opt stack 16
  6746  000E06  0006               	pop		; remove dummy address from shadow register refresh
  6747  000E08  CFE9 F028          	movff	fsr0l,??_ISR+4
  6748  000E0C  CFEA F029          	movff	fsr0h,??_ISR+5
  6749  000E10  CFE1 F02A          	movff	fsr1l,??_ISR+6
  6750  000E14  CFE2 F02B          	movff	fsr1h,??_ISR+7
  6751  000E18  CFD9 F02C          	movff	fsr2l,??_ISR+8
  6752  000E1C  CFDA F02D          	movff	fsr2h,??_ISR+9
  6753  000E20  CFF3 F02E          	movff	prodl,??_ISR+10
  6754  000E24  CFF4 F02F          	movff	prodh,??_ISR+11
  6755  000E28  CFF6 F030          	movff	tblptrl,??_ISR+12
  6756  000E2C  CFF7 F031          	movff	tblptrh,??_ISR+13
  6757  000E30  CFF8 F032          	movff	tblptru,??_ISR+14
  6758  000E34  CFF5 F033          	movff	tablat,??_ISR+15
  6759                           
  6760                           ;ES_Port.c: 114: static unsigned int LastTime;
  6761                           ;ES_Port.c: 115: static unsigned int NextTime;
  6762                           ;ES_Port.c: 117: if (CCP1IF == 1)
  6763  000E38  A49E               	btfss	3998,2,c	;volatile
  6764  000E3A  D015               	goto	i2l2742
  6765                           
  6766                           ;ES_Port.c: 118: {
  6767                           ;ES_Port.c: 119: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  6768  000E3C  50BF               	movf	4031,w,c	;volatile
  6769  000E3E  6E24               	movwf	??_ISR& (0+255),c
  6770  000E40  50BE               	movf	4030,w,c	;volatile
  6771  000E42  6E34               	movwf	ISR@LastTime,c
  6772  000E44  C024  F035         	movff	??_ISR,ISR@LastTime+1
  6773                           
  6774                           ;ES_Port.c: 120: NextTime = LastTime + ((32000000L/4/4)/100);
  6775  000E48  0E20               	movlw	32
  6776  000E4A  2434               	addwf	ISR@LastTime,w,c
  6777  000E4C  6E36               	movwf	ISR@NextTime,c
  6778  000E4E  0E4E               	movlw	78
  6779  000E50  2035               	addwfc	ISR@LastTime+1,w,c
  6780  000E52  6E37               	movwf	ISR@NextTime+1,c
  6781                           
  6782                           ;ES_Port.c: 121: CCPR1H = (unsigned char)(NextTime >> 8);
  6783  000E54  5037               	movf	ISR@NextTime+1,w,c
  6784  000E56  6EBF               	movwf	4031,c	;volatile
  6785                           
  6786                           ;ES_Port.c: 122: CCPR1L = (unsigned char)(NextTime & 0xFF);
  6787  000E58  C036  FFBE         	movff	ISR@NextTime,4030	;volatile
  6788                           
  6789                           ;ES_Port.c: 123: CCP1IF = 0;
  6790  000E5C  949E               	bcf	3998,2,c	;volatile
  6791                           
  6792                           ;ES_Port.c: 124: TickCount++;
  6793  000E5E  0100               	movlb	0	; () banked
  6794  000E60  2B9F               	incf	_TickCount& (0+255),f,b	;volatile
  6795                           
  6796                           ; BSR set to: 0
  6797                           ;ES_Port.c: 125: SysTickCounter++;
  6798  000E62  4A38               	infsnz	_SysTickCounter,f,c	;volatile
  6799  000E64  2A39               	incf	_SysTickCounter+1,f,c	;volatile
  6800  000E66                     i2l2742:
  6801                           
  6802                           ;ES_Port.c: 126: }
  6803                           ;ES_Port.c: 127: if (SSPIF == 1)
  6804  000E66  A69E               	btfss	3998,3,c	;volatile
  6805  000E68  D003               	goto	i2l149
  6806                           
  6807                           ;ES_Port.c: 128: {
  6808                           ;ES_Port.c: 129: SSPIF = 0;
  6809  000E6A  969E               	bcf	3998,3,c	;volatile
  6810                           
  6811                           ;ES_Port.c: 130: SPI32_EOTResponse();
  6812  000E6C  ECD0  F00B         	call	_SPI32_EOTResponse	;wreg free
  6813  000E70                     i2l149:
  6814  000E70  C033  FFF5         	movff	??_ISR+15,tablat
  6815  000E74  C032  FFF8         	movff	??_ISR+14,tblptru
  6816  000E78  C031  FFF7         	movff	??_ISR+13,tblptrh
  6817  000E7C  C030  FFF6         	movff	??_ISR+12,tblptrl
  6818  000E80  C02F  FFF4         	movff	??_ISR+11,prodh
  6819  000E84  C02E  FFF3         	movff	??_ISR+10,prodl
  6820  000E88  C02D  FFDA         	movff	??_ISR+9,fsr2h
  6821  000E8C  C02C  FFD9         	movff	??_ISR+8,fsr2l
  6822  000E90  C02B  FFE2         	movff	??_ISR+7,fsr1h
  6823  000E94  C02A  FFE1         	movff	??_ISR+6,fsr1l
  6824  000E98  C029  FFEA         	movff	??_ISR+5,fsr0h
  6825  000E9C  C028  FFE9         	movff	??_ISR+4,fsr0l
  6826  000EA0  C027  FFFB         	movff	??_ISR+3,pclatu
  6827  000EA4  C026  FFFA         	movff	??_ISR+2,pclath
  6828  000EA8  923E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6829  000EAA  0011               	retfie		f
  6830  000EAC                     __end_of_ISR:
  6831                           	opt stack 0
  6832                           tosu	equ	0xFFF
  6833                           tosh	equ	0xFFE
  6834                           tosl	equ	0xFFD
  6835                           pclatu	equ	0xFFB
  6836                           pclath	equ	0xFFA
  6837                           tblptru	equ	0xFF8
  6838                           tblptrh	equ	0xFF7
  6839                           tblptrl	equ	0xFF6
  6840                           tablat	equ	0xFF5
  6841                           prodh	equ	0xFF4
  6842                           prodl	equ	0xFF3
  6843                           intcon	equ	0xFF2
  6844                           postinc0	equ	0xFEE
  6845                           fsr0h	equ	0xFEA
  6846                           fsr0l	equ	0xFE9
  6847                           wreg	equ	0xFE8
  6848                           indf1	equ	0xFE7
  6849                           postinc1	equ	0xFE6
  6850                           postdec1	equ	0xFE5
  6851                           fsr1h	equ	0xFE2
  6852                           fsr1l	equ	0xFE1
  6853                           indf2	equ	0xFDF
  6854                           postinc2	equ	0xFDE
  6855                           postdec2	equ	0xFDD
  6856                           fsr2h	equ	0xFDA
  6857                           fsr2l	equ	0xFD9
  6858                           status	equ	0xFD8
  6859                           
  6860 ;; *************** function _SPI32_EOTResponse *****************
  6861 ;; Defined at:
  6862 ;;		line 156 in file "SPI32_HW.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;		None
  6865 ;; Auto vars:     Size  Location     Type
  6866 ;;  EOTevent        3   32[COMRAM] struct ES_Event_t
  6867 ;; Return value:  Size  Location     Type
  6868 ;;                  1    wreg      void 
  6869 ;; Registers used:
  6870 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6871 ;; Tracked objects:
  6872 ;;		On entry : 0/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6876 ;;      Params:         0       0       0       0
  6877 ;;      Locals:         3       0       0       0
  6878 ;;      Temps:          0       0       0       0
  6879 ;;      Totals:         3       0       0       0
  6880 ;;Total ram usage:        3 bytes
  6881 ;; Hardware stack levels used:    1
  6882 ;; Hardware stack levels required when called:    4
  6883 ;; This function calls:
  6884 ;;		i2_PostSPI32ControlService
  6885 ;; This function is called by:
  6886 ;;		_ISR
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           	psect	text44
  6891  0017A0                     __ptext44:
  6892                           	opt stack 0
  6893  0017A0                     _SPI32_EOTResponse:
  6894                           	opt stack 16
  6895                           
  6896                           ;SPI32_HW.c: 159: ES_Event EOTevent;
  6897                           ;SPI32_HW.c: 160: EOTevent.EventType = ES_TIMEOUT;
  6898                           
  6899                           ;incstack = 0
  6900  0017A0  0E03               	movlw	3
  6901  0017A2  6E21               	movwf	SPI32_EOTResponse@EOTevent,c
  6902                           
  6903                           ;SPI32_HW.c: 161: PostSPI32ControlService(EOTevent);
  6904  0017A4  C021  F01E         	movff	SPI32_EOTResponse@EOTevent,i2PostSPI32ControlService@ThisEvent
  6905  0017A8  C022  F01F         	movff	SPI32_EOTResponse@EOTevent+1,i2PostSPI32ControlService@ThisEvent+1
  6906  0017AC  C023  F020         	movff	SPI32_EOTResponse@EOTevent+2,i2PostSPI32ControlService@ThisEvent+2
  6907  0017B0  ECDB  F00B         	call	i2_PostSPI32ControlService	;wreg free
  6908  0017B4  0012               	return		;funcret
  6909  0017B6                     __end_of_SPI32_EOTResponse:
  6910                           	opt stack 0
  6911                           tosu	equ	0xFFF
  6912                           tosh	equ	0xFFE
  6913                           tosl	equ	0xFFD
  6914                           pclatu	equ	0xFFB
  6915                           pclath	equ	0xFFA
  6916                           tblptru	equ	0xFF8
  6917                           tblptrh	equ	0xFF7
  6918                           tblptrl	equ	0xFF6
  6919                           tablat	equ	0xFF5
  6920                           prodh	equ	0xFF4
  6921                           prodl	equ	0xFF3
  6922                           intcon	equ	0xFF2
  6923                           postinc0	equ	0xFEE
  6924                           fsr0h	equ	0xFEA
  6925                           fsr0l	equ	0xFE9
  6926                           wreg	equ	0xFE8
  6927                           indf1	equ	0xFE7
  6928                           postinc1	equ	0xFE6
  6929                           postdec1	equ	0xFE5
  6930                           fsr1h	equ	0xFE2
  6931                           fsr1l	equ	0xFE1
  6932                           indf2	equ	0xFDF
  6933                           postinc2	equ	0xFDE
  6934                           postdec2	equ	0xFDD
  6935                           fsr2h	equ	0xFDA
  6936                           fsr2l	equ	0xFD9
  6937                           status	equ	0xFD8
  6938                           
  6939 ;; *************** function i2_PostSPI32ControlService *****************
  6940 ;; Defined at:
  6941 ;;		line 117 in file "SPI32_ControlService.c"
  6942 ;; Parameters:    Size  Location     Type
  6943 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
  6944 ;; Auto vars:     Size  Location     Type
  6945 ;;		None
  6946 ;; Return value:  Size  Location     Type
  6947 ;;                  1    wreg      unsigned char 
  6948 ;; Registers used:
  6949 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6950 ;; Tracked objects:
  6951 ;;		On entry : 0/0
  6952 ;;		On exit  : 0/0
  6953 ;;		Unchanged: 0/0
  6954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6955 ;;      Params:         3       0       0       0
  6956 ;;      Locals:         0       0       0       0
  6957 ;;      Temps:          0       0       0       0
  6958 ;;      Totals:         3       0       0       0
  6959 ;;Total ram usage:        3 bytes
  6960 ;; Hardware stack levels used:    1
  6961 ;; Hardware stack levels required when called:    3
  6962 ;; This function calls:
  6963 ;;		i2_ES_PostToService
  6964 ;; This function is called by:
  6965 ;;		_SPI32_EOTResponse
  6966 ;; This function uses a non-reentrant model
  6967 ;;
  6968                           
  6969                           	psect	text45
  6970  0017B6                     __ptext45:
  6971                           	opt stack 0
  6972  0017B6                     i2_PostSPI32ControlService:
  6973                           	opt stack 16
  6974                           
  6975                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  6976                           ;	Return value of i2_PostSPI32ControlService is never used
  6977                           
  6978                           ;incstack = 0
  6979  0017B6  C01E  F018         	movff	i2PostSPI32ControlService@ThisEvent,i2ES_PostToService@TheEvent
  6980  0017BA  C01F  F019         	movff	i2PostSPI32ControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
  6981  0017BE  C020  F01A         	movff	i2PostSPI32ControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
  6982  0017C2  0100               	movlb	0	; () banked
  6983  0017C4  5198               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  6984  0017C6  EC89  F009         	call	i2_ES_PostToService
  6985  0017CA  0012               	return	
  6986  0017CC                     __end_ofi2_PostSPI32ControlService:
  6987                           	opt stack 0
  6988                           tosu	equ	0xFFF
  6989                           tosh	equ	0xFFE
  6990                           tosl	equ	0xFFD
  6991                           pclatu	equ	0xFFB
  6992                           pclath	equ	0xFFA
  6993                           tblptru	equ	0xFF8
  6994                           tblptrh	equ	0xFF7
  6995                           tblptrl	equ	0xFF6
  6996                           tablat	equ	0xFF5
  6997                           prodh	equ	0xFF4
  6998                           prodl	equ	0xFF3
  6999                           intcon	equ	0xFF2
  7000                           postinc0	equ	0xFEE
  7001                           fsr0h	equ	0xFEA
  7002                           fsr0l	equ	0xFE9
  7003                           wreg	equ	0xFE8
  7004                           indf1	equ	0xFE7
  7005                           postinc1	equ	0xFE6
  7006                           postdec1	equ	0xFE5
  7007                           fsr1h	equ	0xFE2
  7008                           fsr1l	equ	0xFE1
  7009                           indf2	equ	0xFDF
  7010                           postinc2	equ	0xFDE
  7011                           postdec2	equ	0xFDD
  7012                           fsr2h	equ	0xFDA
  7013                           fsr2l	equ	0xFD9
  7014                           status	equ	0xFD8
  7015                           
  7016 ;; *************** function i2_ES_PostToService *****************
  7017 ;; Defined at:
  7018 ;;		line 351 in file "ES_Framework.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;  WhichService    1    wreg     unsigned char 
  7021 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;  WhichService    1   28[COMRAM] unsigned char 
  7024 ;; Return value:  Size  Location     Type
  7025 ;;                  1    wreg      unsigned char 
  7026 ;; Registers used:
  7027 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7028 ;; Tracked objects:
  7029 ;;		On entry : 0/0
  7030 ;;		On exit  : 0/0
  7031 ;;		Unchanged: 0/0
  7032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7033 ;;      Params:         3       0       0       0
  7034 ;;      Locals:         1       0       0       0
  7035 ;;      Temps:          2       0       0       0
  7036 ;;      Totals:         6       0       0       0
  7037 ;;Total ram usage:        6 bytes
  7038 ;; Hardware stack levels used:    1
  7039 ;; Hardware stack levels required when called:    2
  7040 ;; This function calls:
  7041 ;;		i2_ES_EnQueueFIFO
  7042 ;; This function is called by:
  7043 ;;		i2_PostSPI32ControlService
  7044 ;; This function uses a non-reentrant model
  7045 ;;
  7046                           
  7047                           	psect	text46
  7048  001312                     __ptext46:
  7049                           	opt stack 0
  7050  001312                     i2_ES_PostToService:
  7051                           	opt stack 16
  7052                           
  7053                           ;incstack = 0
  7054                           ;i2ES_PostToService@WhichService stored from wreg
  7055  001312  6E1D               	movwf	i2ES_PostToService@WhichService,c
  7056                           
  7057                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  7058                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  7059                           ;ES_Framework.c: 354: 1 )){
  7060  001314  0E02               	movlw	2
  7061  001316  601D               	cpfslt	i2ES_PostToService@WhichService,c
  7062  001318  D02F               	goto	i2l2378
  7063  00131A  501D               	movf	i2ES_PostToService@WhichService,w,c
  7064  00131C  0D03               	mullw	3
  7065  00131E  0E58               	movlw	low _EventQueues
  7066  001320  24F3               	addwf	prodl,w,c
  7067  001322  6EF6               	movwf	tblptrl,c
  7068  001324  0E03               	movlw	high _EventQueues
  7069  001326  20F4               	addwfc	prodh,w,c
  7070  001328  6EF7               	movwf	tblptrh,c
  7071  00132A                     	if	0	;There are less than 3 active tblptr bytes
  7072  00132A                     	endif
  7073  00132A  0009               	tblrd		*+
  7074  00132C  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
  7075  001330  000A               	tblrd		*-
  7076  001332  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
  7077  001336  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
  7078  00133A  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
  7079  00133E  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
  7080  001342  ECA9  F006         	call	i2_ES_EnQueueFIFO	;wreg free
  7081  001346  06E8               	decf	wreg,f,c
  7082  001348  A4D8               	btfss	status,2,c
  7083  00134A  D016               	goto	i2l2378
  7084                           
  7085                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  7086  00134C  501D               	movf	i2ES_PostToService@WhichService,w,c
  7087  00134E  0D02               	mullw	2
  7088  001350  0E01               	movlw	low _BitNum2SetMask
  7089  001352  24F3               	addwf	prodl,w,c
  7090  001354  6EF6               	movwf	tblptrl,c
  7091  001356  0E03               	movlw	high _BitNum2SetMask
  7092  001358  20F4               	addwfc	prodh,w,c
  7093  00135A  6EF7               	movwf	tblptrh,c
  7094  00135C                     	if	0	;There are less than 3 active tblptr bytes
  7095  00135C                     	endif
  7096  00135C  0009               	tblrd		*+
  7097  00135E  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
  7098  001362  0009               	tblrd		*+
  7099  001364  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
  7100  001368  501B               	movf	??i2_ES_PostToService,w,c
  7101  00136A  0100               	movlb	0	; () banked
  7102  00136C  1391               	iorwf	_Ready& (0+255),f,b
  7103  00136E  501C               	movf	??i2_ES_PostToService+1,w,c
  7104  001370  0100               	movlb	0	; () banked
  7105  001372  1392               	iorwf	(_Ready+1)& (0+255),f,b
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;ES_Framework.c: 356: return 1;
  7109  001374  0E01               	movlw	1
  7110                           
  7111                           ; BSR set to: 0
  7112                           ;ES_Framework.c: 357: } else
  7113                           
  7114                           ; BSR set to: 0
  7115  001376  0012               	return	
  7116  001378                     i2l2378:
  7117                           
  7118                           ;ES_Framework.c: 358: return 0;
  7119  001378  0E00               	movlw	0
  7120  00137A  0012               	return	
  7121  00137C                     __end_ofi2_ES_PostToService:
  7122                           	opt stack 0
  7123                           tosu	equ	0xFFF
  7124                           tosh	equ	0xFFE
  7125                           tosl	equ	0xFFD
  7126                           pclatu	equ	0xFFB
  7127                           pclath	equ	0xFFA
  7128                           tblptru	equ	0xFF8
  7129                           tblptrh	equ	0xFF7
  7130                           tblptrl	equ	0xFF6
  7131                           tablat	equ	0xFF5
  7132                           prodh	equ	0xFF4
  7133                           prodl	equ	0xFF3
  7134                           intcon	equ	0xFF2
  7135                           postinc0	equ	0xFEE
  7136                           fsr0h	equ	0xFEA
  7137                           fsr0l	equ	0xFE9
  7138                           wreg	equ	0xFE8
  7139                           indf1	equ	0xFE7
  7140                           postinc1	equ	0xFE6
  7141                           postdec1	equ	0xFE5
  7142                           fsr1h	equ	0xFE2
  7143                           fsr1l	equ	0xFE1
  7144                           indf2	equ	0xFDF
  7145                           postinc2	equ	0xFDE
  7146                           postdec2	equ	0xFDD
  7147                           fsr2h	equ	0xFDA
  7148                           fsr2l	equ	0xFD9
  7149                           status	equ	0xFD8
  7150                           
  7151 ;; *************** function i2_ES_EnQueueFIFO *****************
  7152 ;; Defined at:
  7153 ;;		line 85 in file "ES_Queue.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
  7156 ;;		 -> Queue1(12), Queue0(12), 
  7157 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
  7158 ;; Auto vars:     Size  Location     Type
  7159 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
  7160 ;;		 -> Queue1(12), Queue0(12), 
  7161 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
  7162 ;; Return value:  Size  Location     Type
  7163 ;;                  1    wreg      unsigned char 
  7164 ;; Registers used:
  7165 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7166 ;; Tracked objects:
  7167 ;;		On entry : 0/0
  7168 ;;		On exit  : 0/0
  7169 ;;		Unchanged: 0/0
  7170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7171 ;;      Params:         5       0       0       0
  7172 ;;      Locals:         3       0       0       0
  7173 ;;      Temps:          3       0       0       0
  7174 ;;      Totals:        11       0       0       0
  7175 ;;Total ram usage:       11 bytes
  7176 ;; Hardware stack levels used:    1
  7177 ;; Hardware stack levels required when called:    1
  7178 ;; This function calls:
  7179 ;;		i2___awmod
  7180 ;;		i2___wmul
  7181 ;; This function is called by:
  7182 ;;		i2_ES_PostToService
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           	psect	text47
  7187  000D52                     __ptext47:
  7188                           	opt stack 0
  7189  000D52                     i2_ES_EnQueueFIFO:
  7190                           	opt stack 16
  7191                           
  7192                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  7193                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  7194                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  7195                           
  7196                           ;incstack = 0
  7197  000D52  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
  7198  000D56  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
  7199                           
  7200                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  7201  000D5A  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  7202  000D5E  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  7203  000D62  EE10 F002          	lfsr	1,2
  7204  000D66  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  7205  000D68  26E1               	addwf	fsr1l,f,c
  7206  000D6A  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  7207  000D6C  22E2               	addwfc	fsr1h,f,c
  7208  000D6E  50DE               	movf	postinc2,w,c
  7209  000D70  5CE6               	subwf	postinc1,w,c
  7210  000D72  B0D8               	btfsc	status,0,c
  7211  000D74  D046               	goto	i2l2272
  7212                           
  7213                           ;ES_Queue.c: 92: {
  7214                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  7215  000D76  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
  7216  000D7A  9EF2               	bcf	intcon,7,c	;volatile
  7217                           
  7218                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  7219                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  7220  000D7C  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  7221  000D80  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  7222  000D84  50DF               	movf	indf2,w,c
  7223  000D86  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
  7224  000D88  5012               	movf	??i2_ES_EnQueueFIFO,w,c
  7225  000D8A  6E03               	movwf	i2___awmod@divisor,c
  7226  000D8C  6A04               	clrf	i2___awmod@divisor+1,c
  7227  000D8E  EE20 F002          	lfsr	2,2
  7228  000D92  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  7229  000D94  26D9               	addwf	fsr2l,f,c
  7230  000D96  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  7231  000D98  22DA               	addwfc	fsr2h,f,c
  7232  000D9A  50DF               	movf	indf2,w,c
  7233  000D9C  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
  7234  000D9E  EE20 F001          	lfsr	2,1
  7235  000DA2  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  7236  000DA4  26D9               	addwf	fsr2l,f,c
  7237  000DA6  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  7238  000DA8  22DA               	addwfc	fsr2h,f,c
  7239  000DAA  50DF               	movf	indf2,w,c
  7240  000DAC  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
  7241  000DAE  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
  7242  000DB0  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
  7243  000DB2  6E01               	movwf	i2___awmod@dividend,c
  7244  000DB4  6A02               	clrf	i2___awmod@dividend+1,c
  7245  000DB6  3602               	rlcf	i2___awmod@dividend+1,f,c
  7246  000DB8  EC51  F009         	call	i2___awmod	;wreg free
  7247  000DBC  0E01               	movlw	1
  7248  000DBE  2401               	addwf	?i2___awmod,w,c
  7249  000DC0  6E07               	movwf	i2___wmul@multiplier,c
  7250  000DC2  0E00               	movlw	0
  7251  000DC4  2002               	addwfc	?i2___awmod+1,w,c
  7252  000DC6  6E08               	movwf	i2___wmul@multiplier+1,c
  7253  000DC8  0E00               	movlw	0
  7254  000DCA  6E0A               	movwf	i2___wmul@multiplicand+1,c
  7255  000DCC  0E03               	movlw	3
  7256  000DCE  6E09               	movwf	i2___wmul@multiplicand,c
  7257  000DD0  EC51  F00B         	call	i2___wmul	;wreg free
  7258  000DD4  5007               	movf	?i2___wmul,w,c
  7259  000DD6  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
  7260  000DD8  6ED9               	movwf	fsr2l,c
  7261  000DDA  5008               	movf	?i2___wmul+1,w,c
  7262  000DDC  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
  7263  000DDE  6EDA               	movwf	fsr2h,c
  7264  000DE0  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
  7265  000DE4  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
  7266  000DE8  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
  7267                           
  7268                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  7269  000DEC  EE20 F002          	lfsr	2,2
  7270  000DF0  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  7271  000DF2  26D9               	addwf	fsr2l,f,c
  7272  000DF4  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  7273  000DF6  22DA               	addwfc	fsr2h,f,c
  7274  000DF8  2ADF               	incf	indf2,f,c
  7275                           
  7276                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  7277  000DFA  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  7278                           
  7279                           ;ES_Queue.c: 101: return(1);
  7280  000DFE  0E01               	movlw	1
  7281                           
  7282                           ;ES_Queue.c: 102: }else
  7283  000E00  0012               	return	
  7284  000E02                     i2l2272:
  7285                           
  7286                           ;ES_Queue.c: 103: return(0);
  7287  000E02  0E00               	movlw	0
  7288  000E04  0012               	return	
  7289  000E06                     __end_ofi2_ES_EnQueueFIFO:
  7290                           	opt stack 0
  7291                           tosu	equ	0xFFF
  7292                           tosh	equ	0xFFE
  7293                           tosl	equ	0xFFD
  7294                           pclatu	equ	0xFFB
  7295                           pclath	equ	0xFFA
  7296                           tblptru	equ	0xFF8
  7297                           tblptrh	equ	0xFF7
  7298                           tblptrl	equ	0xFF6
  7299                           tablat	equ	0xFF5
  7300                           prodh	equ	0xFF4
  7301                           prodl	equ	0xFF3
  7302                           intcon	equ	0xFF2
  7303                           postinc0	equ	0xFEE
  7304                           fsr0h	equ	0xFEA
  7305                           fsr0l	equ	0xFE9
  7306                           wreg	equ	0xFE8
  7307                           indf1	equ	0xFE7
  7308                           postinc1	equ	0xFE6
  7309                           postdec1	equ	0xFE5
  7310                           fsr1h	equ	0xFE2
  7311                           fsr1l	equ	0xFE1
  7312                           indf2	equ	0xFDF
  7313                           postinc2	equ	0xFDE
  7314                           postdec2	equ	0xFDD
  7315                           fsr2h	equ	0xFDA
  7316                           fsr2l	equ	0xFD9
  7317                           status	equ	0xFD8
  7318                           
  7319 ;; *************** function i2___wmul *****************
  7320 ;; Defined at:
  7321 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  7322 ;; Parameters:    Size  Location     Type
  7323 ;;  multiplier      2    6[COMRAM] unsigned int 
  7324 ;;  multiplicand    2    8[COMRAM] unsigned int 
  7325 ;; Auto vars:     Size  Location     Type
  7326 ;;  __wmul          2   10[COMRAM] unsigned int 
  7327 ;; Return value:  Size  Location     Type
  7328 ;;                  2    6[COMRAM] unsigned int 
  7329 ;; Registers used:
  7330 ;;		wreg, status,2, status,0, prodl, prodh
  7331 ;; Tracked objects:
  7332 ;;		On entry : 0/0
  7333 ;;		On exit  : 0/0
  7334 ;;		Unchanged: 0/0
  7335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7336 ;;      Params:         4       0       0       0
  7337 ;;      Locals:         2       0       0       0
  7338 ;;      Temps:          0       0       0       0
  7339 ;;      Totals:         6       0       0       0
  7340 ;;Total ram usage:        6 bytes
  7341 ;; Hardware stack levels used:    1
  7342 ;; This function calls:
  7343 ;;		Nothing
  7344 ;; This function is called by:
  7345 ;;		i2_ES_EnQueueFIFO
  7346 ;; This function uses a non-reentrant model
  7347 ;;
  7348                           
  7349                           	psect	text48
  7350  0016A2                     __ptext48:
  7351                           	opt stack 0
  7352  0016A2                     i2___wmul:
  7353                           	opt stack 16
  7354                           
  7355                           ;incstack = 0
  7356  0016A2  5007               	movf	i2___wmul@multiplier,w,c
  7357  0016A4  0209               	mulwf	i2___wmul@multiplicand,c
  7358  0016A6  CFF3 F00B          	movff	prodl,i2___wmul@product
  7359  0016AA  CFF4 F00C          	movff	prodh,i2___wmul@product+1
  7360  0016AE  5007               	movf	i2___wmul@multiplier,w,c
  7361  0016B0  020A               	mulwf	i2___wmul@multiplicand+1,c
  7362  0016B2  50F3               	movf	prodl,w,c
  7363  0016B4  260C               	addwf	i2___wmul@product+1,f,c
  7364  0016B6  5008               	movf	i2___wmul@multiplier+1,w,c
  7365  0016B8  0209               	mulwf	i2___wmul@multiplicand,c
  7366  0016BA  50F3               	movf	prodl,w,c
  7367  0016BC  260C               	addwf	i2___wmul@product+1,f,c
  7368  0016BE  C00B  F007         	movff	i2___wmul@product,?i2___wmul
  7369  0016C2  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
  7370  0016C6  0012               	return	
  7371  0016C8                     __end_ofi2___wmul:
  7372                           	opt stack 0
  7373                           tosu	equ	0xFFF
  7374                           tosh	equ	0xFFE
  7375                           tosl	equ	0xFFD
  7376                           pclatu	equ	0xFFB
  7377                           pclath	equ	0xFFA
  7378                           tblptru	equ	0xFF8
  7379                           tblptrh	equ	0xFF7
  7380                           tblptrl	equ	0xFF6
  7381                           tablat	equ	0xFF5
  7382                           prodh	equ	0xFF4
  7383                           prodl	equ	0xFF3
  7384                           intcon	equ	0xFF2
  7385                           postinc0	equ	0xFEE
  7386                           fsr0h	equ	0xFEA
  7387                           fsr0l	equ	0xFE9
  7388                           wreg	equ	0xFE8
  7389                           indf1	equ	0xFE7
  7390                           postinc1	equ	0xFE6
  7391                           postdec1	equ	0xFE5
  7392                           fsr1h	equ	0xFE2
  7393                           fsr1l	equ	0xFE1
  7394                           indf2	equ	0xFDF
  7395                           postinc2	equ	0xFDE
  7396                           postdec2	equ	0xFDD
  7397                           fsr2h	equ	0xFDA
  7398                           fsr2l	equ	0xFD9
  7399                           status	equ	0xFD8
  7400                           
  7401 ;; *************** function i2___awmod *****************
  7402 ;; Defined at:
  7403 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  7404 ;; Parameters:    Size  Location     Type
  7405 ;;  dividend        2    0[COMRAM] int 
  7406 ;;  divisor         2    2[COMRAM] int 
  7407 ;; Auto vars:     Size  Location     Type
  7408 ;;  __awmod         1    5[COMRAM] unsigned char 
  7409 ;;  __awmod         1    4[COMRAM] unsigned char 
  7410 ;; Return value:  Size  Location     Type
  7411 ;;                  2    0[COMRAM] int 
  7412 ;; Registers used:
  7413 ;;		wreg, status,2, status,0
  7414 ;; Tracked objects:
  7415 ;;		On entry : 0/0
  7416 ;;		On exit  : 0/0
  7417 ;;		Unchanged: 0/0
  7418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7419 ;;      Params:         4       0       0       0
  7420 ;;      Locals:         2       0       0       0
  7421 ;;      Temps:          0       0       0       0
  7422 ;;      Totals:         6       0       0       0
  7423 ;;Total ram usage:        6 bytes
  7424 ;; Hardware stack levels used:    1
  7425 ;; This function calls:
  7426 ;;		Nothing
  7427 ;; This function is called by:
  7428 ;;		i2_ES_EnQueueFIFO
  7429 ;; This function uses a non-reentrant model
  7430 ;;
  7431                           
  7432                           	psect	text49
  7433  0012A2                     __ptext49:
  7434                           	opt stack 0
  7435  0012A2                     i2___awmod:
  7436                           	opt stack 16
  7437                           
  7438                           ;incstack = 0
  7439  0012A2  0E00               	movlw	0
  7440  0012A4  6E06               	movwf	i2___awmod@sign,c
  7441  0012A6  AE02               	btfss	i2___awmod@dividend+1,7,c
  7442  0012A8  D006               	goto	i2l2140
  7443  0012AA  6C01               	negf	i2___awmod@dividend,c
  7444  0012AC  1E02               	comf	i2___awmod@dividend+1,f,c
  7445  0012AE  B0D8               	btfsc	status,0,c
  7446  0012B0  2A02               	incf	i2___awmod@dividend+1,f,c
  7447  0012B2  0E01               	movlw	1
  7448  0012B4  6E06               	movwf	i2___awmod@sign,c
  7449  0012B6                     i2l2140:
  7450  0012B6  AE04               	btfss	i2___awmod@divisor+1,7,c
  7451  0012B8  D004               	goto	i2l2144
  7452  0012BA  6C03               	negf	i2___awmod@divisor,c
  7453  0012BC  1E04               	comf	i2___awmod@divisor+1,f,c
  7454  0012BE  B0D8               	btfsc	status,0,c
  7455  0012C0  2A04               	incf	i2___awmod@divisor+1,f,c
  7456  0012C2                     i2l2144:
  7457  0012C2  5003               	movf	i2___awmod@divisor,w,c
  7458  0012C4  1004               	iorwf	i2___awmod@divisor+1,w,c
  7459  0012C6  B4D8               	btfsc	status,2,c
  7460  0012C8  D018               	goto	i2l2160
  7461  0012CA  0E01               	movlw	1
  7462  0012CC  6E05               	movwf	i2___awmod@counter,c
  7463  0012CE  D004               	goto	i2l2150
  7464  0012D0                     i2l2148:
  7465  0012D0  90D8               	bcf	status,0,c
  7466  0012D2  3603               	rlcf	i2___awmod@divisor,f,c
  7467  0012D4  3604               	rlcf	i2___awmod@divisor+1,f,c
  7468  0012D6  2A05               	incf	i2___awmod@counter,f,c
  7469  0012D8                     i2l2150:
  7470  0012D8  AE04               	btfss	i2___awmod@divisor+1,7,c
  7471  0012DA  D7FA               	goto	i2l2148
  7472  0012DC                     i2l2152:
  7473  0012DC  5003               	movf	i2___awmod@divisor,w,c
  7474  0012DE  5C01               	subwf	i2___awmod@dividend,w,c
  7475  0012E0  5004               	movf	i2___awmod@divisor+1,w,c
  7476  0012E2  5802               	subwfb	i2___awmod@dividend+1,w,c
  7477  0012E4  A0D8               	btfss	status,0,c
  7478  0012E6  D004               	goto	i2l2156
  7479  0012E8  5003               	movf	i2___awmod@divisor,w,c
  7480  0012EA  5E01               	subwf	i2___awmod@dividend,f,c
  7481  0012EC  5004               	movf	i2___awmod@divisor+1,w,c
  7482  0012EE  5A02               	subwfb	i2___awmod@dividend+1,f,c
  7483  0012F0                     i2l2156:
  7484  0012F0  90D8               	bcf	status,0,c
  7485  0012F2  3204               	rrcf	i2___awmod@divisor+1,f,c
  7486  0012F4  3203               	rrcf	i2___awmod@divisor,f,c
  7487  0012F6  2E05               	decfsz	i2___awmod@counter,f,c
  7488  0012F8  D7F1               	goto	i2l2152
  7489  0012FA                     i2l2160:
  7490  0012FA  5006               	movf	i2___awmod@sign,w,c
  7491  0012FC  B4D8               	btfsc	status,2,c
  7492  0012FE  D004               	goto	i2l2164
  7493  001300  6C01               	negf	i2___awmod@dividend,c
  7494  001302  1E02               	comf	i2___awmod@dividend+1,f,c
  7495  001304  B0D8               	btfsc	status,0,c
  7496  001306  2A02               	incf	i2___awmod@dividend+1,f,c
  7497  001308                     i2l2164:
  7498  001308  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  7499  00130C  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  7500  001310  0012               	return	
  7501  001312                     __end_ofi2___awmod:
  7502                           	opt stack 0
  7503                           tosu	equ	0xFFF
  7504                           tosh	equ	0xFFE
  7505                           tosl	equ	0xFFD
  7506                           pclatu	equ	0xFFB
  7507                           pclath	equ	0xFFA
  7508                           tblptru	equ	0xFF8
  7509                           tblptrh	equ	0xFF7
  7510                           tblptrl	equ	0xFF6
  7511                           tablat	equ	0xFF5
  7512                           prodh	equ	0xFF4
  7513                           prodl	equ	0xFF3
  7514                           intcon	equ	0xFF2
  7515                           postinc0	equ	0xFEE
  7516                           fsr0h	equ	0xFEA
  7517                           fsr0l	equ	0xFE9
  7518                           wreg	equ	0xFE8
  7519                           indf1	equ	0xFE7
  7520                           postinc1	equ	0xFE6
  7521                           postdec1	equ	0xFE5
  7522                           fsr1h	equ	0xFE2
  7523                           fsr1l	equ	0xFE1
  7524                           indf2	equ	0xFDF
  7525                           postinc2	equ	0xFDE
  7526                           postdec2	equ	0xFDD
  7527                           fsr2h	equ	0xFDA
  7528                           fsr2l	equ	0xFD9
  7529                           status	equ	0xFD8
  7530                           tosu	equ	0xFFF
  7531                           tosh	equ	0xFFE
  7532                           tosl	equ	0xFFD
  7533                           pclatu	equ	0xFFB
  7534                           pclath	equ	0xFFA
  7535                           tblptru	equ	0xFF8
  7536                           tblptrh	equ	0xFF7
  7537                           tblptrl	equ	0xFF6
  7538                           tablat	equ	0xFF5
  7539                           prodh	equ	0xFF4
  7540                           prodl	equ	0xFF3
  7541                           intcon	equ	0xFF2
  7542                           postinc0	equ	0xFEE
  7543                           fsr0h	equ	0xFEA
  7544                           fsr0l	equ	0xFE9
  7545                           wreg	equ	0xFE8
  7546                           indf1	equ	0xFE7
  7547                           postinc1	equ	0xFE6
  7548                           postdec1	equ	0xFE5
  7549                           fsr1h	equ	0xFE2
  7550                           fsr1l	equ	0xFE1
  7551                           indf2	equ	0xFDF
  7552                           postinc2	equ	0xFDE
  7553                           postdec2	equ	0xFDD
  7554                           fsr2h	equ	0xFDA
  7555                           fsr2l	equ	0xFD9
  7556                           status	equ	0xFD8
  7557                           
  7558                           	psect	text50
  7559  000000                     __ptext50:
  7560                           	opt stack 0
  7561                           tosu	equ	0xFFF
  7562                           tosh	equ	0xFFE
  7563                           tosl	equ	0xFFD
  7564                           pclatu	equ	0xFFB
  7565                           pclath	equ	0xFFA
  7566                           tblptru	equ	0xFF8
  7567                           tblptrh	equ	0xFF7
  7568                           tblptrl	equ	0xFF6
  7569                           tablat	equ	0xFF5
  7570                           prodh	equ	0xFF4
  7571                           prodl	equ	0xFF3
  7572                           intcon	equ	0xFF2
  7573                           postinc0	equ	0xFEE
  7574                           fsr0h	equ	0xFEA
  7575                           fsr0l	equ	0xFE9
  7576                           wreg	equ	0xFE8
  7577                           indf1	equ	0xFE7
  7578                           postinc1	equ	0xFE6
  7579                           postdec1	equ	0xFE5
  7580                           fsr1h	equ	0xFE2
  7581                           fsr1l	equ	0xFE1
  7582                           indf2	equ	0xFDF
  7583                           postinc2	equ	0xFDE
  7584                           postdec2	equ	0xFDD
  7585                           fsr2h	equ	0xFDA
  7586                           fsr2l	equ	0xFD9
  7587                           status	equ	0xFD8
  7588                           
  7589                           	psect	rparam
  7590  0000                     tosu	equ	0xFFF
  7591                           tosh	equ	0xFFE
  7592                           tosl	equ	0xFFD
  7593                           pclatu	equ	0xFFB
  7594                           pclath	equ	0xFFA
  7595                           tblptru	equ	0xFF8
  7596                           tblptrh	equ	0xFF7
  7597                           tblptrl	equ	0xFF6
  7598                           tablat	equ	0xFF5
  7599                           prodh	equ	0xFF4
  7600                           prodl	equ	0xFF3
  7601                           intcon	equ	0xFF2
  7602                           postinc0	equ	0xFEE
  7603                           fsr0h	equ	0xFEA
  7604                           fsr0l	equ	0xFE9
  7605                           wreg	equ	0xFE8
  7606                           indf1	equ	0xFE7
  7607                           postinc1	equ	0xFE6
  7608                           postdec1	equ	0xFE5
  7609                           fsr1h	equ	0xFE2
  7610                           fsr1l	equ	0xFE1
  7611                           indf2	equ	0xFDF
  7612                           postinc2	equ	0xFDE
  7613                           postdec2	equ	0xFDD
  7614                           fsr2h	equ	0xFDA
  7615                           fsr2l	equ	0xFD9
  7616                           status	equ	0xFD8
  7617                           
  7618                           	psect	temp
  7619  00003E                     btemp:
  7620                           	opt stack 0
  7621  00003E                     	ds	1
  7622  0000                     int$flags	set	btemp
  7623                           tosu	equ	0xFFF
  7624                           tosh	equ	0xFFE
  7625                           tosl	equ	0xFFD
  7626                           pclatu	equ	0xFFB
  7627                           pclath	equ	0xFFA
  7628                           tblptru	equ	0xFF8
  7629                           tblptrh	equ	0xFF7
  7630                           tblptrl	equ	0xFF6
  7631                           tablat	equ	0xFF5
  7632                           prodh	equ	0xFF4
  7633                           prodl	equ	0xFF3
  7634                           intcon	equ	0xFF2
  7635                           postinc0	equ	0xFEE
  7636                           fsr0h	equ	0xFEA
  7637                           fsr0l	equ	0xFE9
  7638                           wreg	equ	0xFE8
  7639                           indf1	equ	0xFE7
  7640                           postinc1	equ	0xFE6
  7641                           postdec1	equ	0xFE5
  7642                           fsr1h	equ	0xFE2
  7643                           fsr1l	equ	0xFE1
  7644                           indf2	equ	0xFDF
  7645                           postinc2	equ	0xFDE
  7646                           postdec2	equ	0xFDD
  7647                           fsr2h	equ	0xFDA
  7648                           fsr2l	equ	0xFD9
  7649                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    99
    Data        58
    BSS         476
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      61
    BANK0           160     59     155
    BANK1           256      0     180
    BANK2           256      0     248

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 128
		 -> PixelFrames(BANK1[128]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 128
		 -> PixelFrames(BANK1[128]), 

    memcpy@s1	PTR const void  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    SPI32_TransmitFrames@framePointer	PTR unsigned long  size(2) Largest target is 128
		 -> OffFrames(BANK2[128]), PixelFrames(BANK1[128]), 

    FramePointer	PTR unsigned long  size(2) Largest target is 128
		 -> NULL(NULL[0]), OffFrames(BANK2[128]), PixelFrames(BANK1[128]), 

    SetupPattern@configs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Pattern_RGBPatterns@PatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), PatternConfigs(BANK0[5]), 

    sp__memcpy	PTR void  size(2) Largest target is 128
		 -> PixelFrames(BANK1[128]), 

    DotStar_Show@pixelPointer	PTR unsigned long  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    sp__UpdatePattern	PTR unsigned long  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    sp__GetPatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [2] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), 

    S111$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    S80$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunSPI32ControlService(), RunPatternControlService(), 

    S80$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitSPI32ControlService(), InitPatternControlService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_SPI32_EOTResponse
    _SPI32_EOTResponse->i2_PostSPI32ControlService
    i2_PostSPI32ControlService->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_RunSPI32ControlService
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostPatternControlService
    _ES_Timer_Tick_Resp->_PostSPI32ControlService
    _DotStar_Off->_SPI32_TransmitFrames
    _ShowPattern->_DotStar_Show
    _UpdatePattern->___llmod
    _DotStar_Show->_SPI32_TransmitFrames
    _SPI32_TransmitFrames->_PostSPI32ControlService
    _PostSPI32ControlService->_ES_PostToService
    _PostPatternControlService->_ES_PostToService
    _PausePattern->_ES_Timer_StopTimer
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitPatternControlService
    _ES_Initialize->_InitSPI32ControlService
    _InitSPI32ControlService->_ES_PostToService
    _InitPatternControlService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   28236
                                             58 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0   21073
                                             53 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
           _RunPatternControlService *
             _RunSPI32ControlService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    6352
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    6352
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
          _PostPatternControlService *
            _PostSPI32ControlService *
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunSPI32ControlService                              13    10      3     230
                                             40 BANK0     13    10      3
                       _GetNextFrame
                     _SPI32_SendByte
 ---------------------------------------------------------------------------------
 (3) _SPI32_SendByte                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _GetNextFrame                                         4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _RunPatternControlService                             9     6      3   11764
                                             40 BANK0      9     6      3
                       _PausePattern
          _PostPatternControlService
                        _ShowPattern
                        _StopPattern
 ---------------------------------------------------------------------------------
 (3) _StopPattern                                          0     0      0    3489
                        _DotStar_Off
                 _ES_Timer_StopTimer
                       _ResetPattern
 ---------------------------------------------------------------------------------
 (4) _ResetPattern                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _DotStar_Off                                          0     0      0    3445
               _SPI32_TransmitFrames
 ---------------------------------------------------------------------------------
 (3) _ShowPattern                                          0     0      0    5086
                       _DotStar_Show
                 _ES_Timer_InitTimer
                      _UpdatePattern
 ---------------------------------------------------------------------------------
 (4) _UpdatePattern                                       13    11      2     987
                                              9 BANK0     13    11      2
                            ___awmod
                            ___llmod
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     311
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_InitTimer                                   5     3      2     208
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _DotStar_Show                                         2     0      2    3891
                                             38 BANK0      2     0      2
               _SPI32_TransmitFrames
                      _UpdatePattern (ARG)
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _memcpy                                              10     4      6     348
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (5) _SPI32_TransmitFrames                                 6     3      3    3445
                                             32 BANK0      6     3      3
            _PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (4) _PostSPI32ControlService                              3     0      3    3074
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _PostPatternControlService                            3     0      3    2945
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _PausePattern                                         0     0      0      44
                 _ES_Timer_StopTimer
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_StopTimer                                   5     5      0      44
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2237
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                              0 BANK0      1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    6767
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
          _InitPatternControlService *
            _InitSPI32ControlService *
 ---------------------------------------------------------------------------------
 (2) _InitSPI32ControlService                              4     4      0    2892
                                             29 BANK0      4     4      0
                   _ES_PostToService
                         _SPI32_Init
 ---------------------------------------------------------------------------------
 (3) _SPI32_Init                                           0     0      0       0
                            _HW_Init
 ---------------------------------------------------------------------------------
 (4) _HW_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternControlService                            4     4      0    3156
                                             29 BANK0      4     4      0
                       _DotStar_Init
                   _ES_PostToService
                       _SetupPattern
 ---------------------------------------------------------------------------------
 (3) _SetupPattern                                         3     0      3     196
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    2847
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2455
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1369
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     560
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _DotStar_Init                                         4     4      0      68
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                16    16      0     868
                                             35 COMRAM    16    16      0
                  _SPI32_EOTResponse
 ---------------------------------------------------------------------------------
 (11) _SPI32_EOTResponse                                   3     3      0     868
                                             32 COMRAM     3     3      0
          i2_PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (12) i2_PostSPI32ControlService                           3     0      3     845
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (13) i2_ES_PostToService                                  6     3      3     797
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (14) i2_ES_EnQueueFIFO                                   11     6      5     683
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (15) i2___wmul                                            6     2      4     153
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (15) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitPatternControlService *
       _DotStar_Init
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SetupPattern
     _InitSPI32ControlService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SPI32_Init
         _HW_Init
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunPatternControlService *
       _PausePattern
         _ES_Timer_StopTimer
       _PostPatternControlService
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
       _ShowPattern
         _DotStar_Show
           _SPI32_TransmitFrames
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             ___awmod
             ___llmod
           _memcpy (ARG)
         _ES_Timer_InitTimer
         _UpdatePattern
           ___awmod
           ___llmod
       _StopPattern
         _DotStar_Off
           _SPI32_TransmitFrames
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
         _ES_Timer_StopTimer
         _ResetPattern
     _RunSPI32ControlService *
       _GetNextFrame
       _SPI32_SendByte
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostPatternControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostSPI32ControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _SPI32_EOTResponse
     i2_PostSPI32ControlService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      F8       8       96.9%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      B4       6       70.3%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     3B      9B       4       96.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      3D       1       64.9%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     284       9        0.0%
DATA                 0      0     284      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Nov 01 16:24:08 2016

                   ??__HW_Timer_Init 00BD                  ES_CheckUserEvents@i 00BB  
                __HW_Timer_Init@Rate 00BB                  ___wmul@multiplicand 00C3  
                    ??_UpdatePattern 00C6  RunPatternControlService@ReturnEvent 00E6  
                                l324 0D44                                  l535 11AA  
                                l457 0690                                  l907 107A  
              __end_of_ES_Initialize 0BAC                                  _GIE 007F97  
                                _ISR 0008            __end_of_SPI32_EOTResponse 17B6  
                       ___awmod@sign 00C0              __end_of_Check4Keystroke 1812  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 00CF  
            ES_EnQueueFIFO@Event2Add 00C9                    ?_ES_PostToService 00D2  
                               ?_ISR 0001           i2ES_EnQueueFIFO@pThisQueue 0016  
  Pattern_RGBPatterns@PatternConfigs 008D                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 0088                                 l2020 0F6C  
                               l2030 0F9C                                 l2032 0FA2  
                               l2040 0FD4                                 l2024 0F7C  
                               l2122 1068                                 l2114 100E  
                               l2044 0FE8                                 l2036 0FC6  
                               l2028 0F90                                 l2116 101E  
                               l2220 0410                                 l2118 1024  
                               l2222 044C                                 l2214 03E8  
                               l2064 0C8A                                 l2080 129E  
                               l2216 03F0                                 l2314 0A8C  
                               l2090 142E                                 l2226 049A  
                               l2170 0EB8                                 l2412 077C  
                               l2236 0526                                 l2180 0F44  
                               l2318 0AB2                                 l2422 07C0  
                               l2238 054E                                 l2502 0D02  
                               l2600 0ADC                                 l2360 14E8  
                               l2352 14C0                                 l2416 0798  
                               l2192 13DC                                 l2096 144E  
                               l2184 0F4A                                 l2440 1776  
                               l2604 0B20                                 l2620 0BA8  
                               l2540 0564                                 l2508 0D12  
                               l2516 0D28                                 l2284 07DA  
                               l2444 177E                                 l2534 15A8  
                               l2550 0596                                 l2294 0852  
                               l2630 0960                                 l2616 0BA2  
                               l2608 0B24                                 l2552 059A  
                               l2544 0570                                 l2480 0CBE  
                               l2296 0890                                 l2640 09CA  
                               l2624 08DE                                 l2570 05DC  
                               l2490 0CE0                                 l2474 0C96  
                               l2810 115C                                 l2468 13CA  
                               l2564 05C6                                 l2484 0CCC  
                               l2636 09B4                                 l2652 1624  
                               l2812 116E                                 l2582 0660  
                               l2558 05B0                                 l2486 0CD0  
                               l2654 162C                                 l2814 1180  
                               l2496 0CF0                                 l2808 114A  
                               l2586 0668                                 l2818 1192  
                               l2596 0AD2                                 STR_1 0364  
                               STR_2 037F                                 STR_3 0397  
                               STR_4 03AE                                 u1318 083A  
                               _LATC 000F8B                                 u1184 0EDE  
                               u1185 0ED6                                 u1388 148C  
                               u1389 14A4                                 u1638 0B7C  
                               u1639 0B98                                 _PIE1 000F9D  
                               u1678 098A                                 u1679 09A2  
                               _SCS1 007E99                   ??_ES_PostToService 00D5  
                    __end_of_HW_Init 16EA                                 _main 111C  
                        ?_ES_DeQueue 00C7            Pattern_RGBPatterns@Length 0096  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               indf1 000FE7                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 003E                        main@ErrorType 00F5  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 0016  
  __end_of_InitPatternControlService 13CE                      ?_SPI32_SendByte 0001  
                        ?_SPI32_Init 0001                        __CFG_MCLRE$ON 000000  
                       ___param_bank 000010                 __end_of_GetNextFrame 1774  
                              ??_ISR 0024                   ES_Run@HighestPrior 00F4  
                __end_of_DotStar_Off 1722                                ?_main 0001  
              __end_of_ES_Timer_Init 17E8                      __end_of___awmod 0FF2  
                    __end_of___lbmod 14F4                                _T1CON 000FCD  
                    __end_of___llmod 108C                           _DistList00 0360  
                              _IRCF0 007E9C                                _IRCF1 007E9D  
                              _IRCF2 007E9E                                i2l149 0E70  
        ??i2_PostSPI32ControlService 0021                                _PORTC 000F82  
                              _TRISC 000F94                                _SSPIE 007CEB  
                              _SSPIF 007CF3                        __CFG_PWRT$OFF 000000  
               _SPI32_TransmitFrames 164A                                _Ready 0091  
    __end_of_InitSPI32ControlService 15AC                           _FrameIndex 009A  
              SPI32_SendByte@newByte 00BB                                _putch 1812  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                     __end_ofi2___wmul 16C8  
                              status 000FD8                   __size_ofi2___awmod 0070  
                    __initialization 108C               ES_GetMSBitSet@LoopCntr 00C4  
         __end_of_ES_CheckUserEvents 14B0                         __end_of_main 11AC  
                  ES_Timer_Init@Rate 00BD                  __end_of_EventQueues 035E  
                             ??_main 00F5                    ?i2_ES_EnQueueFIFO 000D  
                      __activetblptr 000002           __size_of_SPI32_EOTResponse 0016  
                __size_of_ES_DeQueue 0128                      _Nybble2MSBitNum 0341  
              ?_SPI32_TransmitFrames 00DB     __end_of__HW_Process_Pending_Ints 178A  
                   ?_Check4Keystroke 0001                   ??i2_ES_EnQueueFIFO 0012  
               __end_of_DotStar_Init 0AC0                 __end_of_DotStar_Show 1536  
                __size_of_SPI32_Init 0006                               _ADCON1 000FC1  
                          ??_HW_Init 00BB                               _CCP1IF 007CF2  
                   ___llmod@dividend 00BB                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                           _MyPriority 009C  
                             ?_putch 0001                     ??_ES_GetMSBitSet 00BD  
                             i2l2140 12B6                               i2l2150 12D8  
                             i2l2152 12DC                               i2l2160 12FA  
                             i2l2144 12C2                               i2l2164 1308  
                             i2l2156 12F0                               i2l2148 12D0  
                             i2l2272 0E02                               i2l2378 1378  
                             i2l2742 0E66                               _INTCON 000FF2  
                             _ES_Run 08DC                               _SSPADD 000FC8  
                             _SSPBUF 000FC9            i2_PostSPI32ControlService 17B6  
                   ??_ES_EnQueueFIFO 00CC                       _Timer2PostFunc 0321  
                             _Length 009B        SPI32_TransmitFrames@numFrames 00DD  
                      ?_PausePattern 0001                               _Queue0 00A0  
                             _Queue1 00AC                       _SysTickCounter 0038  
                        _DotStar_Off 1706             ??_RunSPI32ControlService 00E6  
                             ___wmul 15AC      InitSPI32ControlService@Priority 00DB  
                          ??___awmod 00BF                            ??___lbmod 00BC  
                  _UpdatePattern$635 00CB                            ??___llmod 00C3  
                             _memcpy 141C          __size_of_ES_Timer_InitTimer 0080  
                             clear_0 10E4                               clear_1 10F0  
                             clear_2 10FC                               clear_3 1108  
                    ___awmod@divisor 00BD                        ??_ShowPattern 00E3  
          ES_Timer_InitTimer@NewTime 00BB                      ___awmod@counter 00BF  
                             _printf 1616                          ISR@LastTime 0034  
                       __pdataCOMRAM 003D               ES_InitQueue@pThisQueue 00BE  
                  __end_ofi2___awmod 1312                         __mediumconst 0000  
                        ISR@NextTime 0036                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                             putch@c 0001                       i2___awmod@sign 0006  
        __size_of_ES_Timer_Tick_Resp 0116                 ES_DeQueue@pThisQueue 00CF  
             UpdatePattern@patternID 00CF              ES_GetMSBitSet@Val2Check 00BB  
                    ___lbmod@divisor 00BB                           __accesstop 0060  
            __end_of__initialization 110E               __end_of_Timer2PostFunc 0341  
                    ___lbmod@counter 00BD      RunSPI32ControlService@ThisEvent 00E3  
                    __CFG_PBADEN$OFF 000000    __size_of_RunPatternControlService 00C4  
          ?_RunPatternControlService 00E3                __size_of_GetNextFrame 001A  
                      ___rparam_used 000001          ??_InitPatternControlService 00D8  
                     ??_PausePattern 00C0                          _EventQueues 0358  
        __size_ofi2_ES_PostToService 006A                       __pcstackCOMRAM 0001  
                       __pidataBANK0 1808                         __pidataBANK1 15E2  
        __size_of_ES_Timer_StopTimer 004E                        ?_ES_InitQueue 00BB  
   __size_of_InitSPI32ControlService 003A              __end_of_Nybble2MSBitNum 0350  
  _PostSPI32ControlService$intlevel0 1728                        __end_of_putch 1814  
                    _TMR_ActiveFlags 0093               ??_SPI32_TransmitFrames 00DE  
                          ?i2___wmul 0007              ES_GetMSBitSet@ReturnVal 00C2  
                      ?_ResetPattern 0001                  __end_of_ShowPattern 16A2  
                      ??_StopPattern 00E1                       _TMR_TimerArray 0060  
                       _GetNextFrame 175A             ES_EnQueueFIFO@pThisQueue 00D0  
                            ??_putch 00BB             __HW_Process_Pending_Ints 1774  
                         __pbssBANK0 0060                           __pbssBANK1 0100  
                         __pbssBANK2 0200                     ??_SPI32_SendByte 00BB  
                            ?_ES_Run 0001                         ??_ES_DeQueue 00CB  
                       ??_SPI32_Init 00BB             ?_PostSPI32ControlService 00D8  
          __size_of_ES_PostToService 0076                       ??_ES_InitQueue 00BE  
                            ?___wmul 00C1      __size_of_RunSPI32ControlService 0142  
                            _CCP1CON 000FBD                              ?_memcpy 00BB  
                            ?_printf 00BB                __size_of_DotStar_Init 00F0  
                     ??_ResetPattern 00BB                __end_of_UpdatePattern 055C  
              __size_of_DotStar_Show 0042                           ??i2___wmul 000B  
          _InitPatternControlService 137C                   __end_of_ES_DeQueue 07C6  
             i2ES_EnQueueFIFO@pBlock 000D                ES_Timer_StopTimer@Num 00BF  
                            _HW_Init 16C8                              _SSPCON1 000FC6  
                 __end_of_SPI32_Init 1808                              _SSPSTAT 000FC7  
   SPI32_ControlService@CurrentState 0097                      __size_of_ES_Run 00F4  
                __end_of_StopPattern 1706                          _PixelFrames 0100  
                      ?_SetupPattern 00BB               __size_of_ES_Initialize 00EC  
                            __Hparam 0000                              __Lparam 0000  
 i2PostSPI32ControlService@ThisEvent 001E     PostSPI32ControlService@ThisEvent 00D8  
   InitSPI32ControlService@ThisEvent 00D8            i2ES_EnQueueFIFO@Event2Add 000F  
            UpdatePattern@brightness 00CA                         _DotStar_Init 09D0  
                       _DotStar_Show 14F4           ?_PostPatternControlService 00D8  
                            ___awmod 0F50                              ___lbmod 14B0  
                    __size_of___wmul 0036                              ___llmod 0FF2  
 __size_ofi2_PostSPI32ControlService 0016                         __psmallconst 0300  
              ES_Timer_InitTimer@Num 00BF           i2ES_PostToService@TheEvent 0018  
                            __pcinit 108C                      __size_of_memcpy 004A  
                            __ramtop 0300                          _ShowPattern 167C  
                            __ptext0 111C                              __ptext1 1616  
                            __ptext2 1812                              __ptext3 08DC  
                            __ptext4 1774                              __ptext5 07C6  
                            __ptext6 0EAC                              __ptext7 0C8E  
                            __ptext8 055C                              __ptext9 17E8  
           i2ES_EnQueueFIFO@SaveCrit 0015                      __size_of_printf 0034  
                       __size_of_ISR 0EA4                         _FramePointer 008F  
            __size_of__HW_Timer_Init 001C                     ___awmod@dividend 00BB  
                 _ES_CheckUserEvents 1466                      ES_Run@ThisEvent 00B8  
               __end_of_PausePattern 1802               _RunSPI32ControlService 055C  
                     __pintcode_body 0E06                 end_of_initialization 110E  
                ?_ES_CheckUserEvents 0001                              memcpy@d 00C1  
                            memcpy@n 00BF                              memcpy@s 00C3  
          __size_ofi2_ES_EnQueueFIFO 00B4                        __Lmediumconst 0000  
                            int_func 0E06                  i2___wmul@multiplier 0007  
    __end_of_PostSPI32ControlService 173E         ES_PostToService@WhichService 00D7  
                     ??_SetupPattern 00BE               __size_of_ES_Timer_Init 000E  
           DotStar_Show@pixelPointer 00E1                         ?_DotStar_Off 0001  
                            printf@c 00BF                              printf@f 00BB  
            _InitSPI32ControlService 1572                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
  __end_of_PostPatternControlService 17A0                 ??_ES_CheckUserEvents 00BB  
                      _ES_Initialize 0AC0     __end_of_RunPatternControlService 0D52  
                   ___lbmod@dividend 00BC    RunPatternControlService@ThisEvent 00E3  
 PostPatternControlService@ThisEvent 00D8   InitPatternControlService@ThisEvent 00D8  
               __end_of_ES_EventList 0360                          _StopPattern 16EA  
               __end_of_ES_InitQueue 1572                            i2___awmod 12A2  
                     ES_Initialize@i 00DE                          ___lbmod@rem 00BE  
           __size_of_Check4Keystroke 0004                       __end_of_ES_Run 09D0  
               __end_of_ResetPattern 17FA                            _GenColors 0180  
                 __end_of_DistList00 0364                     _ES_PostToService 122C  
         __end_of_ES_Timer_InitTimer 122C                 __end_of_ServDescList 0358  
                     __end_of___wmul 15E2                        __pidataCOMRAM 1814  
                     __end_of_memcpy 1466                SetupPattern@numPixels 00BD  
                     ?_ES_Initialize 00DC                            _OffFrames 0200  
         ??__HW_Process_Pending_Ints 00DF                        _ES_Timer_Init 17DA  
                   i2___wmul@product 000B                       __end_of_printf 164A  
         __end_of_ES_Timer_Tick_Resp 08DC                  start_initialization 108C  
                        __end_of_ISR 0EAC                    __size_ofi2___wmul 0026  
                       _CurrentFrame 0080                         _CurrentState 0099  
                         ?i2___awmod 0001   __size_of_InitPatternControlService 0052  
                           ??_ES_Run 00F0                     __CFG_OSC$IRCIO67 000000  
                    ___llmod@divisor 00BF                            _TickCount 009F  
                    ___llmod@counter 00C3                            _NumFrames 009D  
         __end_ofi2_ES_PostToService 137C            ??_InitSPI32ControlService 00D8  
         __end_of_ES_Timer_StopTimer 141C                            _NumPixels 003C  
            __size_of_ES_GetMSBitSet 00A4                            _TestColor 0084  
                           ??___wmul 00C5                          __pdataBANK0 00F6  
                        __pdataBANK1 0180                             ??_memcpy 00C1  
            __size_of_ES_EnQueueFIFO 00E2                             ??_printf 00BD  
          SPI32_EOTResponse@EOTevent 0021                __size_of_PausePattern 0008  
                     ?_ES_Timer_Init 00BD                       __HW_Timer_Init 173E  
               __end_of_SetupPattern 17DA                          __pbssCOMRAM 0034  
   __size_of_PostSPI32ControlService 001C        __size_of_SPI32_TransmitFrames 0032  
                      __pcstackBANK0 00BB                   ES_InitQueue@pBlock 00BB  
  RunPatternControlService@testEvent 00E9                             ?_HW_Init 0001  
           _RunPatternControlService 0C8E     SPI32_TransmitFrames@framePointer 00DB  
                   i2_ES_EnQueueFIFO 0D52                        __PRIMASK_temp 003A  
                  ??_Check4Keystroke 00BB                         _PausePattern 17FA  
                          __pintcode 0008                             ?___awmod 00BB  
                           ?___lbmod 00BB                             ?___llmod 00BB  
        ??_PostPatternControlService 00DB                 __size_of_DotStar_Off 001C  
                    ??_ES_Initialize 00DE             ES_PostToService@TheEvent 00D2  
             __end_of__HW_Timer_Init 175A                         ?_ShowPattern 0001  
                        __smallconst 0300                __size_of_ES_InitQueue 003C  
            ?_RunSPI32ControlService 00E3                          ??i2___awmod 0005  
                     __size_of_putch 0002                __size_of_ResetPattern 0008  
               ES_Initialize@NewRate 00DC            ES_GetMSBitSet@Nybble2Test 00C3  
                 _PatternStepCounter 009E                       ___wmul@product 00C5  
             __size_of_UpdatePattern 019E                DotStar_Init@numPixels 00BD  
                       _ES_EventList 035E              __size_of_SPI32_SendByte 000A  
                       _ES_InitQueue 1536                      ??_ES_Timer_Init 00BF  
     i2ES_PostToService@WhichService 001D                      ?__HW_Timer_Init 00BB  
                  ___wmul@multiplier 00C1       __end_of_RunSPI32ControlService 069E  
                           i2___wmul 16A2                         _ResetPattern 17F2  
                 ES_DeQueue@SaveCrit 00CD                 ES_EnQueueFIFO@pBlock 00C7  
           __end_of_ES_PostToService 12A2                         ?_StopPattern 0001  
          _PostPatternControlService 178A                            copy_data0 10A0  
                          copy_data1 10C0                     __size_of_HW_Init 0022  
                     _BitNum2SetMask 0301                       _PatternConfigs 00F6  
                       _ServDescList 0350                   i2___awmod@dividend 0001  
                       _PixelPattern 0280                             __Hrparam 0000  
                     _ES_GetMSBitSet 0EAC                             __Lrparam 0000  
  RunSPI32ControlService@ReturnEvent 00ED                     __size_of___awmod 00A2  
                   __size_of___lbmod 0044                __size_of_SetupPattern 000E  
              i2___wmul@multiplicand 0009          __size_of_ES_CheckUserEvents 004A  
                   __size_of___llmod 009A                       _ES_EnQueueFIFO 0BAC  
         ?i2_PostSPI32ControlService 001E              _PostSPI32ControlService 1722  
                      _UpdatePattern 03BE                   _ES_Timer_InitTimer 11AC  
             __end_of_BitNum2SetMask 0321                             __ptext10 175A  
                           __ptext11 16EA                             __ptext20 164A  
                           __ptext12 17F2                             __ptext21 178A  
                           __ptext13 1706                             __ptext30 137C  
                           __ptext22 1722                             __ptext14 167C  
                           __ptext31 1572                             __ptext23 17FA  
                           __ptext15 03BE                             __ptext40 17DA  
                           __ptext32 1802                             __ptext24 13CE  
                           __ptext16 0FF2                             __ptext41 173E  
                           __ptext33 16C8                             __ptext25 069E  
                           __ptext17 11AC                             __ptext50 0000  
                           __ptext42 1536                             __ptext34 17CC  
                           __ptext26 14B0                             __ptext18 14F4  
                           __ptext35 122C                             __ptext27 1466  
                           __ptext19 141C                             __ptext44 17A0  
                           __ptext36 0BAC                             __ptext28 180E  
                           __ptext45 17B6                             __ptext37 15AC  
                           __ptext29 0AC0                             __ptext46 1312  
                           __ptext38 0F50                             __ptext47 0D52  
                           __ptext39 09D0                             __ptext48 16A2  
                           __ptext49 12A2                        ?_GetNextFrame 00BB  
  ES_Timer_Tick_Resp@NeedsProcessing 008B                       UpdatePattern@i 00D0  
                ?_ES_Timer_InitTimer 00BB                        __size_of_main 0090  
                 _ES_Timer_Tick_Resp 07C6               __end_of_ES_GetMSBitSet 0F50  
                       _SetupPattern 17CC                  ?_ES_Timer_Tick_Resp 0001  
             __end_of_ES_EnQueueFIFO 0C8E                             int$flags 003E  
                SetupPattern@configs 00BB                 ??_ES_Timer_InitTimer 00BD  
     SPI32_ControlService@MyPriority 0098                        _MaxBrightness 003D  
                  ES_DeQueue@NumLeft 00CE                   i2_ES_PostToService 1312  
                      DotStar_Init@i 00BE             __end_ofi2_ES_EnQueueFIFO 0E06  
                 _ES_Timer_StopTimer 13CE                       ?_UpdatePattern 00C4  
         ??_RunPatternControlService 00E6                    i2___awmod@divisor 0003  
                  i2___awmod@counter 0005                 __size_of_ShowPattern 0026  
  __end_ofi2_PostSPI32ControlService 17CC                             memcpy@d1 00BB  
                           memcpy@s1 00BD                  ?i2_ES_PostToService 0018  
                     ??_GetNextFrame 00BF                 ??_ES_Timer_Tick_Resp 00DB  
                ?_ES_Timer_StopTimer 0001                      _Check4Keystroke 180E  
                           intlevel2 0000                           _ES_DeQueue 069E  
  __size_of__HW_Process_Pending_Ints 0016            ?__HW_Process_Pending_Ints 0001  
                    ?_ES_GetMSBitSet 00BB         __end_of_SPI32_TransmitFrames 167C  
               ??i2_ES_PostToService 001B                           _SPI32_Init 1802  
                      ?_DotStar_Init 0001                        ?_DotStar_Show 00E1  
               ??_ES_Timer_StopTimer 00BB                       _SPI32_SendByte 17E8  
ES_Timer_Tick_Resp@NextTimer2Process 0095                             printf@ap 00BD  
                    ?_ES_EnQueueFIFO 00C7            ??_PostSPI32ControlService 00DB  
                   ES_DeQueue@pBlock 00C7    SPI32_TransmitFrames@transmitEvent 00DE  
  InitPatternControlService@Priority 00DB                    _SPI32_EOTResponse 17A0  
             ES_DeQueue@pReturnEvent 00C9                ES_InitQueue@BlockSize 00BD  
                 ?_SPI32_EOTResponse 0001                 __size_of_StopPattern 001C  
           ?_InitSPI32ControlService 0001                  ??_SPI32_EOTResponse 0021  
         ?_InitPatternControlService 0001   __size_of_PostPatternControlService 0016  
             __end_of_SPI32_SendByte 17F2                       ??_DotStar_Init 00BB  
                      ??_DotStar_Off 00E1                       ??_DotStar_Show 00E3  
